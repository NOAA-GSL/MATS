{"version":3,"sources":["meteor://ðŸ’»app/packages/minimongo/minimongo_client.js","meteor://ðŸ’»app/packages/minimongo/common.js","meteor://ðŸ’»app/packages/minimongo/cursor.js","meteor://ðŸ’»app/packages/minimongo/local_collection.js","meteor://ðŸ’»app/packages/minimongo/matcher.js","meteor://ðŸ’»app/packages/minimongo/minimongo_common.js","meteor://ðŸ’»app/packages/minimongo/observe_handle.js","meteor://ðŸ’»app/packages/minimongo/sorter.js"],"names":["module","link","export","hasOwn","ELEMENT_OPERATORS","compileDocumentSelector","equalityElementMatcher","expandArraysInBranches","isIndexable","isNumericKey","isOperatorObject","makeLookupFunction","nothingMatcher","pathsToTree","populateDocumentWithQueryFields","projectionDetails","regexpElementMatcher","LocalCollection","v","Object","prototype","hasOwnProperty","$lt","makeInequality","cmpValue","$gt","$lte","$gte","$mod","compileElementSelector","operand","Array","isArray","length","Error","divisor","remainder","value","$in","elementMatchers","map","option","RegExp","undefined","some","matcher","$size","dontExpandLeafArrays","$type","dontIncludeLeafArrays","operandAliasMap","call","_f","_type","$bitsAllSet","mask","getOperandBitmask","bitmask","getValueBitmask","every","byte","i","$bitsAnySet","$bitsAllClear","$bitsAnyClear","$regex","valueSelector","regexp","$options","test","source","$elemMatch","_isPlainObject","isDocMatcher","keys","filter","key","LOGICAL_OPERATORS","reduce","a","b","assign","subMatcher","inElemMatch","compileValueSelector","arrayElement","arg","dontIterate","result","$and","subSelector","andDocumentMatchers","compileArrayOfDocumentSelectors","$or","matchers","doc","fn","$nor","$where","selectorValue","_recordPathUsed","_hasWhere","Function","$comment","VALUE_OPERATORS","$eq","convertElementMatcherToBranchedMatcher","$not","invertBranchedMatcher","$ne","$nin","$exists","exists","everythingMatcher","$maxDistance","$near","$all","branchedMatchers","criterion","andBranchedMatchers","isRoot","_hasGeoQuery","maxDistance","point","distance","$geometry","type","GeoJSON","pointDistance","coordinates","pointToArray","geometryWithinRadius","distanceCoordinatePairs","branchedValues","branch","curDistance","_isUpdate","arrayIndices","andSomeMatchers","subMatchers","docOrBranches","match","subResult","selectors","docSelector","options","docMatchers","substr","_isSimple","lookUpByIndex","valueMatcher","Boolean","operatorBranchedMatcher","elementMatcher","branches","expanded","element","matched","pointA","pointB","Math","hypot","elementSelector","_equal","docOrBranchedValues","skipTheArrays","branchesOut","forEach","thisIsArray","push","concat","selector","Number","isInteger","Uint8Array","Int32Array","buffer","EJSON","isBinary","x","ArrayBuffer","max","view","isSafeInteger","Uint32Array","BYTES_PER_ELEMENT","insertIntoDocument","document","existingKey","indexOf","branchedMatcher","branchValues","obj","s","inconsistentOK","theseAreOperators","selKey","thisIsOperator","JSON","stringify","cmpValueComparator","operandType","_cmp","parts","split","firstPart","lookupRest","slice","join","omitUnnecessaryFields","firstLevel","appendToResult","more","forSort","arrayIndex","MinimongoTest","MinimongoError","message","field","error","name","operatorMatchers","operator","simpleRange","includes","simpleEquality","simpleInclusion","paths","newLeafFn","conflictFn","root","path","pathArray","tree","success","lastKey","y","populateDocumentWithKeyValue","getPrototypeOf","populateDocumentWithObject","unprefixedKeys","op","validateObject","object","query","_selectorIsId","fields","fieldsKeys","sort","_id","including","keyPath","rule","projectionRulesTree","node","fullPath","currentPath","anotherPath","toString","lastIndex","validateKeyInPath","Cursor","collection","sorter","Minimongo","Matcher","_selectorIsIdPerhapsAsObject","_selectorId","hasGeoQuery","Sorter","skip","limit","_projectionFn","_compileProjection","_transform","wrapTransform","transform","Tracker","reactive","count","applySkipLimit","_depend","added","removed","_getRawObjects","ordered","fetch","Symbol","iterator","addedBefore","changed","movedBefore","index","objects","next","done","callback","thisArg","getTransform","observe","_observeFromObserveChanges","observeChanges","_observeChangesCallbacksAreOrdered","_allow_unordered","distances","_IdMap","cursor","dirty","projectionFn","resultsSnapshot","qid","next_qid","queries","results","paused","wrapCallback","self","args","arguments","_observeQueue","queueTask","apply","_suppress_initial","clone","handle","ObserveHandle","stop","active","onInvalidate","drain","rewind","changers","dependency","Dependency","notify","bind","depend","_getCollectionName","selectedDoc","_docs","get","set","clear","id","matchResult","documentMatches","getComparator","_publishCursor","subscription","Package","mongo","Mongo","Collection","Meteor","_SynchronousQueue","create","_savedOriginals","find","findOne","insert","assertHasValidFieldNames","_useOID","MongoID","ObjectID","Random","has","_saveOriginal","queriesToRecompute","_insertInResults","_recomputeResults","defer","pauseObservers","remove","equals","size","_eachPossiblyMatchingDoc","queryRemove","removeId","removeDoc","_removeFromResults","resumeObservers","_diffQueryChanges","retrieveOriginals","originals","saveOriginals","update","mod","qidToOriginalResults","docMap","idsMatched","_idsMatchedBySelector","memoizedCloneIfNeeded","docToMemoize","recomputeQids","updateCount","queryResult","_modifyAndNotify","multi","insertedId","upsert","_createUpsertDocument","_returnObject","numberAffected","specificIds","matched_before","old_doc","_modify","afterMatch","after","before","_updateInResults","oldResults","_CachingChangeObserver","orderedFromCallbacks","callbacks","docs","OrderedDict","idStringify","applyChange","putBefore","moveBefore","DiffSequence","applyChanges","idParse","IdMap","__wrappedTransform__","wrapped","transformed","nonreactive","_binarySearch","cmp","array","first","range","halfRange","floor","_checkSupportedProjection","_idProjection","details","ruleTree","subdoc","modifier","selectorDocument","isModify","_isModificationMod","newDoc","$set","isInsert","replacement","_diffObjects","left","right","diffObjects","newResults","observer","diffQueryChanges","_diffQueryOrderedChanges","diffQueryOrderedChanges","_diffQueryUnorderedChanges","diffQueryUnorderedChanges","_findInOrderedResults","subIds","_insertInSortedList","splice","isReplace","isModifier","setOnInsert","modFunc","MODIFIERS","keypath","keyparts","target","findModTarget","forbidArray","noCreate","NO_CREATE_MODIFIERS","pop","observeCallbacks","suppressed","observeChangesCallbacks","_observeCallbacksAreOrdered","indices","_no_indices","addedAt","changedAt","oldDoc","movedTo","from","to","removedAt","changeObserver","changedFields","makeChangedFields","old_idx","new_idx","$currentDate","Date","$min","$max","$inc","setPropertyError","$setOnInsert","$unset","$push","$each","toPush","position","$position","$slice","sortFunction","$sort","spliceArguments","$pushAll","$addToSet","isEach","values","toAdd","$pop","toPop","$pull","toPull","out","$pullAll","$rename","target2","$bit","$v","invalidCharMsg","$","assertIsValidFieldName","usedArrayIndex","last","keypart","parseInt","isUpdate","_paths","_matchingDocument","_selector","_docMatcher","_compileSelector","hasWhere","isSimple","_getPaths","keyOrderSensitive","_typeorder","t","ta","tb","oa","ob","toHexString","getTime","toArray","LocalCollection_","spec","_sortSpecParts","_sortFunction","addSpecPart","ascending","charAt","lookup","affectedByModifier","_selectorForAffectedByModifier","_keyComparator","composeComparators","_keyFieldComparator","_getBaseComparator","_compareKeys","key1","key2","_generateKeysFromDoc","cb","pathFromIndices","knownPaths","valuesByIndexAndPath","usedPaths","soleKey","doc1","doc2","_getMinKeyFromDoc","minKey","part","invert","compare","comparatorArray"],"mappings":"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","file":"/packages/minimongo.js","sourcesContent":["import './minimongo_common.js';\n","import LocalCollection from './local_collection.js';\n\nexport const hasOwn = Object.prototype.hasOwnProperty;\n\n// Each element selector contains:\n//  - compileElementSelector, a function with args:\n//    - operand - the \"right hand side\" of the operator\n//    - valueSelector - the \"context\" for the operator (so that $regex can find\n//      $options)\n//    - matcher - the Matcher this is going into (so that $elemMatch can compile\n//      more things)\n//    returning a function mapping a single value to bool.\n//  - dontExpandLeafArrays, a bool which prevents expandArraysInBranches from\n//    being called\n//  - dontIncludeLeafArrays, a bool which causes an argument to be passed to\n//    expandArraysInBranches if it is called\nexport const ELEMENT_OPERATORS = {\n  $lt: makeInequality(cmpValue => cmpValue < 0),\n  $gt: makeInequality(cmpValue => cmpValue > 0),\n  $lte: makeInequality(cmpValue => cmpValue <= 0),\n  $gte: makeInequality(cmpValue => cmpValue >= 0),\n  $mod: {\n    compileElementSelector(operand) {\n      if (!(Array.isArray(operand) && operand.length === 2\n            && typeof operand[0] === 'number'\n            && typeof operand[1] === 'number')) {\n        throw Error('argument to $mod must be an array of two numbers');\n      }\n\n      // XXX could require to be ints or round or something\n      const divisor = operand[0];\n      const remainder = operand[1];\n      return value => (\n        typeof value === 'number' && value % divisor === remainder\n      );\n    },\n  },\n  $in: {\n    compileElementSelector(operand) {\n      if (!Array.isArray(operand)) {\n        throw Error('$in needs an array');\n      }\n\n      const elementMatchers = operand.map(option => {\n        if (option instanceof RegExp) {\n          return regexpElementMatcher(option);\n        }\n\n        if (isOperatorObject(option)) {\n          throw Error('cannot nest $ under $in');\n        }\n\n        return equalityElementMatcher(option);\n      });\n\n      return value => {\n        // Allow {a: {$in: [null]}} to match when 'a' does not exist.\n        if (value === undefined) {\n          value = null;\n        }\n\n        return elementMatchers.some(matcher => matcher(value));\n      };\n    },\n  },\n  $size: {\n    // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we\n    // don't want to consider the element [5,5] in the leaf array [[5,5]] as a\n    // possible value.\n    dontExpandLeafArrays: true,\n    compileElementSelector(operand) {\n      if (typeof operand === 'string') {\n        // Don't ask me why, but by experimentation, this seems to be what Mongo\n        // does.\n        operand = 0;\n      } else if (typeof operand !== 'number') {\n        throw Error('$size needs a number');\n      }\n\n      return value => Array.isArray(value) && value.length === operand;\n    },\n  },\n  $type: {\n    // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should\n    // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:\n    // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but\n    // should *not* include it itself.\n    dontIncludeLeafArrays: true,\n    compileElementSelector(operand) {\n      if (typeof operand === 'string') {\n        const operandAliasMap = {\n          'double': 1,\n          'string': 2,\n          'object': 3,\n          'array': 4,\n          'binData': 5,\n          'undefined': 6,\n          'objectId': 7,\n          'bool': 8,\n          'date': 9,\n          'null': 10,\n          'regex': 11,\n          'dbPointer': 12,\n          'javascript': 13,\n          'symbol': 14,\n          'javascriptWithScope': 15,\n          'int': 16,\n          'timestamp': 17,\n          'long': 18,\n          'decimal': 19,\n          'minKey': -1,\n          'maxKey': 127,\n        };\n        if (!hasOwn.call(operandAliasMap, operand)) {\n          throw Error(`unknown string alias for $type: ${operand}`);\n        }\n        operand = operandAliasMap[operand];\n      } else if (typeof operand === 'number') {\n        if (operand === 0 || operand < -1\n          || (operand > 19 && operand !== 127)) {\n          throw Error(`Invalid numerical $type code: ${operand}`);\n        }\n      } else {\n        throw Error('argument to $type is not a number or a string');\n      }\n\n      return value => (\n        value !== undefined && LocalCollection._f._type(value) === operand\n      );\n    },\n  },\n  $bitsAllSet: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAllSet');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every((byte, i) => (bitmask[i] & byte) === byte);\n      };\n    },\n  },\n  $bitsAnySet: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAnySet');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some((byte, i) => (~bitmask[i] & byte) !== byte);\n      };\n    },\n  },\n  $bitsAllClear: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAllClear');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every((byte, i) => !(bitmask[i] & byte));\n      };\n    },\n  },\n  $bitsAnyClear: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAnyClear');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some((byte, i) => (bitmask[i] & byte) !== byte);\n      };\n    },\n  },\n  $regex: {\n    compileElementSelector(operand, valueSelector) {\n      if (!(typeof operand === 'string' || operand instanceof RegExp)) {\n        throw Error('$regex has to be a string or RegExp');\n      }\n\n      let regexp;\n      if (valueSelector.$options !== undefined) {\n        // Options passed in $options (even the empty string) always overrides\n        // options in the RegExp object itself.\n\n        // Be clear that we only support the JS-supported options, not extended\n        // ones (eg, Mongo supports x and s). Ideally we would implement x and s\n        // by transforming the regexp, but not today...\n        if (/[^gim]/.test(valueSelector.$options)) {\n          throw new Error('Only the i, m, and g regexp options are supported');\n        }\n\n        const source = operand instanceof RegExp ? operand.source : operand;\n        regexp = new RegExp(source, valueSelector.$options);\n      } else if (operand instanceof RegExp) {\n        regexp = operand;\n      } else {\n        regexp = new RegExp(operand);\n      }\n\n      return regexpElementMatcher(regexp);\n    },\n  },\n  $elemMatch: {\n    dontExpandLeafArrays: true,\n    compileElementSelector(operand, valueSelector, matcher) {\n      if (!LocalCollection._isPlainObject(operand)) {\n        throw Error('$elemMatch need an object');\n      }\n\n      const isDocMatcher = !isOperatorObject(\n        Object.keys(operand)\n          .filter(key => !hasOwn.call(LOGICAL_OPERATORS, key))\n          .reduce((a, b) => Object.assign(a, {[b]: operand[b]}), {}),\n        true);\n\n      let subMatcher;\n      if (isDocMatcher) {\n        // This is NOT the same as compileValueSelector(operand), and not just\n        // because of the slightly different calling convention.\n        // {$elemMatch: {x: 3}} means \"an element has a field x:3\", not\n        // \"consists only of a field x:3\". Also, regexps and sub-$ are allowed.\n        subMatcher =\n          compileDocumentSelector(operand, matcher, {inElemMatch: true});\n      } else {\n        subMatcher = compileValueSelector(operand, matcher);\n      }\n\n      return value => {\n        if (!Array.isArray(value)) {\n          return false;\n        }\n\n        for (let i = 0; i < value.length; ++i) {\n          const arrayElement = value[i];\n          let arg;\n          if (isDocMatcher) {\n            // We can only match {$elemMatch: {b: 3}} against objects.\n            // (We can also match against arrays, if there's numeric indices,\n            // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)\n            if (!isIndexable(arrayElement)) {\n              return false;\n            }\n\n            arg = arrayElement;\n          } else {\n            // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches\n            // {a: [8]} but not {a: [[8]]}\n            arg = [{value: arrayElement, dontIterate: true}];\n          }\n          // XXX support $near in $elemMatch by propagating $distance?\n          if (subMatcher(arg).result) {\n            return i; // specially understood to mean \"use as arrayIndices\"\n          }\n        }\n\n        return false;\n      };\n    },\n  },\n};\n\n// Operators that appear at the top level of a document selector.\nconst LOGICAL_OPERATORS = {\n  $and(subSelector, matcher, inElemMatch) {\n    return andDocumentMatchers(\n      compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch)\n    );\n  },\n\n  $or(subSelector, matcher, inElemMatch) {\n    const matchers = compileArrayOfDocumentSelectors(\n      subSelector,\n      matcher,\n      inElemMatch\n    );\n\n    // Special case: if there is only one matcher, use it directly, *preserving*\n    // any arrayIndices it returns.\n    if (matchers.length === 1) {\n      return matchers[0];\n    }\n\n    return doc => {\n      const result = matchers.some(fn => fn(doc).result);\n      // $or does NOT set arrayIndices when it has multiple\n      // sub-expressions. (Tested against MongoDB.)\n      return {result};\n    };\n  },\n\n  $nor(subSelector, matcher, inElemMatch) {\n    const matchers = compileArrayOfDocumentSelectors(\n      subSelector,\n      matcher,\n      inElemMatch\n    );\n    return doc => {\n      const result = matchers.every(fn => !fn(doc).result);\n      // Never set arrayIndices, because we only match if nothing in particular\n      // 'matched' (and because this is consistent with MongoDB).\n      return {result};\n    };\n  },\n\n  $where(selectorValue, matcher) {\n    // Record that *any* path may be used.\n    matcher._recordPathUsed('');\n    matcher._hasWhere = true;\n\n    if (!(selectorValue instanceof Function)) {\n      // XXX MongoDB seems to have more complex logic to decide where or or not\n      // to add 'return'; not sure exactly what it is.\n      selectorValue = Function('obj', `return ${selectorValue}`);\n    }\n\n    // We make the document available as both `this` and `obj`.\n    // // XXX not sure what we should do if this throws\n    return doc => ({result: selectorValue.call(doc, doc)});\n  },\n\n  // This is just used as a comment in the query (in MongoDB, it also ends up in\n  // query logs); it has no effect on the actual selection.\n  $comment() {\n    return () => ({result: true});\n  },\n};\n\n// Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a\n// document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as\n// \"match each branched value independently and combine with\n// convertElementMatcherToBranchedMatcher\".\nconst VALUE_OPERATORS = {\n  $eq(operand) {\n    return convertElementMatcherToBranchedMatcher(\n      equalityElementMatcher(operand)\n    );\n  },\n  $not(operand, valueSelector, matcher) {\n    return invertBranchedMatcher(compileValueSelector(operand, matcher));\n  },\n  $ne(operand) {\n    return invertBranchedMatcher(\n      convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand))\n    );\n  },\n  $nin(operand) {\n    return invertBranchedMatcher(\n      convertElementMatcherToBranchedMatcher(\n        ELEMENT_OPERATORS.$in.compileElementSelector(operand)\n      )\n    );\n  },\n  $exists(operand) {\n    const exists = convertElementMatcherToBranchedMatcher(\n      value => value !== undefined\n    );\n    return operand ? exists : invertBranchedMatcher(exists);\n  },\n  // $options just provides options for $regex; its logic is inside $regex\n  $options(operand, valueSelector) {\n    if (!hasOwn.call(valueSelector, '$regex')) {\n      throw Error('$options needs a $regex');\n    }\n\n    return everythingMatcher;\n  },\n  // $maxDistance is basically an argument to $near\n  $maxDistance(operand, valueSelector) {\n    if (!valueSelector.$near) {\n      throw Error('$maxDistance needs a $near');\n    }\n\n    return everythingMatcher;\n  },\n  $all(operand, valueSelector, matcher) {\n    if (!Array.isArray(operand)) {\n      throw Error('$all requires array');\n    }\n\n    // Not sure why, but this seems to be what MongoDB does.\n    if (operand.length === 0) {\n      return nothingMatcher;\n    }\n\n    const branchedMatchers = operand.map(criterion => {\n      // XXX handle $all/$elemMatch combination\n      if (isOperatorObject(criterion)) {\n        throw Error('no $ expressions in $all');\n      }\n\n      // This is always a regexp or equality selector.\n      return compileValueSelector(criterion, matcher);\n    });\n\n    // andBranchedMatchers does NOT require all selectors to return true on the\n    // SAME branch.\n    return andBranchedMatchers(branchedMatchers);\n  },\n  $near(operand, valueSelector, matcher, isRoot) {\n    if (!isRoot) {\n      throw Error('$near can\\'t be inside another $ operator');\n    }\n\n    matcher._hasGeoQuery = true;\n\n    // There are two kinds of geodata in MongoDB: legacy coordinate pairs and\n    // GeoJSON. They use different distance metrics, too. GeoJSON queries are\n    // marked with a $geometry property, though legacy coordinates can be\n    // matched using $geometry.\n    let maxDistance, point, distance;\n    if (LocalCollection._isPlainObject(operand) && hasOwn.call(operand, '$geometry')) {\n      // GeoJSON \"2dsphere\" mode.\n      maxDistance = operand.$maxDistance;\n      point = operand.$geometry;\n      distance = value => {\n        // XXX: for now, we don't calculate the actual distance between, say,\n        // polygon and circle. If people care about this use-case it will get\n        // a priority.\n        if (!value) {\n          return null;\n        }\n\n        if (!value.type) {\n          return GeoJSON.pointDistance(\n            point,\n            {type: 'Point', coordinates: pointToArray(value)}\n          );\n        }\n\n        if (value.type === 'Point') {\n          return GeoJSON.pointDistance(point, value);\n        }\n\n        return GeoJSON.geometryWithinRadius(value, point, maxDistance)\n          ? 0\n          : maxDistance + 1;\n      };\n    } else {\n      maxDistance = valueSelector.$maxDistance;\n\n      if (!isIndexable(operand)) {\n        throw Error('$near argument must be coordinate pair or GeoJSON');\n      }\n\n      point = pointToArray(operand);\n\n      distance = value => {\n        if (!isIndexable(value)) {\n          return null;\n        }\n\n        return distanceCoordinatePairs(point, value);\n      };\n    }\n\n    return branchedValues => {\n      // There might be multiple points in the document that match the given\n      // field. Only one of them needs to be within $maxDistance, but we need to\n      // evaluate all of them and use the nearest one for the implicit sort\n      // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)\n      //\n      // Note: This differs from MongoDB's implementation, where a document will\n      // actually show up *multiple times* in the result set, with one entry for\n      // each within-$maxDistance branching point.\n      const result = {result: false};\n      expandArraysInBranches(branchedValues).every(branch => {\n        // if operation is an update, don't skip branches, just return the first\n        // one (#3599)\n        let curDistance;\n        if (!matcher._isUpdate) {\n          if (!(typeof branch.value === 'object')) {\n            return true;\n          }\n\n          curDistance = distance(branch.value);\n\n          // Skip branches that aren't real points or are too far away.\n          if (curDistance === null || curDistance > maxDistance) {\n            return true;\n          }\n\n          // Skip anything that's a tie.\n          if (result.distance !== undefined && result.distance <= curDistance) {\n            return true;\n          }\n        }\n\n        result.result = true;\n        result.distance = curDistance;\n\n        if (branch.arrayIndices) {\n          result.arrayIndices = branch.arrayIndices;\n        } else {\n          delete result.arrayIndices;\n        }\n\n        return !matcher._isUpdate;\n      });\n\n      return result;\n    };\n  },\n};\n\n// NB: We are cheating and using this function to implement 'AND' for both\n// 'document matchers' and 'branched matchers'. They both return result objects\n// but the argument is different: for the former it's a whole doc, whereas for\n// the latter it's an array of 'branched values'.\nfunction andSomeMatchers(subMatchers) {\n  if (subMatchers.length === 0) {\n    return everythingMatcher;\n  }\n\n  if (subMatchers.length === 1) {\n    return subMatchers[0];\n  }\n\n  return docOrBranches => {\n    const match = {};\n    match.result = subMatchers.every(fn => {\n      const subResult = fn(docOrBranches);\n\n      // Copy a 'distance' number out of the first sub-matcher that has\n      // one. Yes, this means that if there are multiple $near fields in a\n      // query, something arbitrary happens; this appears to be consistent with\n      // Mongo.\n      if (subResult.result &&\n          subResult.distance !== undefined &&\n          match.distance === undefined) {\n        match.distance = subResult.distance;\n      }\n\n      // Similarly, propagate arrayIndices from sub-matchers... but to match\n      // MongoDB behavior, this time the *last* sub-matcher with arrayIndices\n      // wins.\n      if (subResult.result && subResult.arrayIndices) {\n        match.arrayIndices = subResult.arrayIndices;\n      }\n\n      return subResult.result;\n    });\n\n    // If we didn't actually match, forget any extra metadata we came up with.\n    if (!match.result) {\n      delete match.distance;\n      delete match.arrayIndices;\n    }\n\n    return match;\n  };\n}\n\nconst andDocumentMatchers = andSomeMatchers;\nconst andBranchedMatchers = andSomeMatchers;\n\nfunction compileArrayOfDocumentSelectors(selectors, matcher, inElemMatch) {\n  if (!Array.isArray(selectors) || selectors.length === 0) {\n    throw Error('$and/$or/$nor must be nonempty array');\n  }\n\n  return selectors.map(subSelector => {\n    if (!LocalCollection._isPlainObject(subSelector)) {\n      throw Error('$or/$and/$nor entries need to be full objects');\n    }\n\n    return compileDocumentSelector(subSelector, matcher, {inElemMatch});\n  });\n}\n\n// Takes in a selector that could match a full document (eg, the original\n// selector). Returns a function mapping document->result object.\n//\n// matcher is the Matcher object we are compiling.\n//\n// If this is the root document selector (ie, not wrapped in $and or the like),\n// then isRoot is true. (This is used by $near.)\nexport function compileDocumentSelector(docSelector, matcher, options = {}) {\n  const docMatchers = Object.keys(docSelector).map(key => {\n    const subSelector = docSelector[key];\n\n    if (key.substr(0, 1) === '$') {\n      // Outer operators are either logical operators (they recurse back into\n      // this function), or $where.\n      if (!hasOwn.call(LOGICAL_OPERATORS, key)) {\n        throw new Error(`Unrecognized logical operator: ${key}`);\n      }\n\n      matcher._isSimple = false;\n      return LOGICAL_OPERATORS[key](subSelector, matcher, options.inElemMatch);\n    }\n\n    // Record this path, but only if we aren't in an elemMatcher, since in an\n    // elemMatch this is a path inside an object in an array, not in the doc\n    // root.\n    if (!options.inElemMatch) {\n      matcher._recordPathUsed(key);\n    }\n\n    // Don't add a matcher if subSelector is a function -- this is to match\n    // the behavior of Meteor on the server (inherited from the node mongodb\n    // driver), which is to ignore any part of a selector which is a function.\n    if (typeof subSelector === 'function') {\n      return undefined;\n    }\n\n    const lookUpByIndex = makeLookupFunction(key);\n    const valueMatcher = compileValueSelector(\n      subSelector,\n      matcher,\n      options.isRoot\n    );\n\n    return doc => valueMatcher(lookUpByIndex(doc));\n  }).filter(Boolean);\n\n  return andDocumentMatchers(docMatchers);\n}\n\n// Takes in a selector that could match a key-indexed value in a document; eg,\n// {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to\n// indicate equality).  Returns a branched matcher: a function mapping\n// [branched value]->result object.\nfunction compileValueSelector(valueSelector, matcher, isRoot) {\n  if (valueSelector instanceof RegExp) {\n    matcher._isSimple = false;\n    return convertElementMatcherToBranchedMatcher(\n      regexpElementMatcher(valueSelector)\n    );\n  }\n\n  if (isOperatorObject(valueSelector)) {\n    return operatorBranchedMatcher(valueSelector, matcher, isRoot);\n  }\n\n  return convertElementMatcherToBranchedMatcher(\n    equalityElementMatcher(valueSelector)\n  );\n}\n\n// Given an element matcher (which evaluates a single value), returns a branched\n// value (which evaluates the element matcher on all the branches and returns a\n// more structured return value possibly including arrayIndices).\nfunction convertElementMatcherToBranchedMatcher(elementMatcher, options = {}) {\n  return branches => {\n    const expanded = options.dontExpandLeafArrays\n      ? branches\n      : expandArraysInBranches(branches, options.dontIncludeLeafArrays);\n\n    const match = {};\n    match.result = expanded.some(element => {\n      let matched = elementMatcher(element.value);\n\n      // Special case for $elemMatch: it means \"true, and use this as an array\n      // index if I didn't already have one\".\n      if (typeof matched === 'number') {\n        // XXX This code dates from when we only stored a single array index\n        // (for the outermost array). Should we be also including deeper array\n        // indices from the $elemMatch match?\n        if (!element.arrayIndices) {\n          element.arrayIndices = [matched];\n        }\n\n        matched = true;\n      }\n\n      // If some element matched, and it's tagged with array indices, include\n      // those indices in our result object.\n      if (matched && element.arrayIndices) {\n        match.arrayIndices = element.arrayIndices;\n      }\n\n      return matched;\n    });\n\n    return match;\n  };\n}\n\n// Helpers for $near.\nfunction distanceCoordinatePairs(a, b) {\n  const pointA = pointToArray(a);\n  const pointB = pointToArray(b);\n\n  return Math.hypot(pointA[0] - pointB[0], pointA[1] - pointB[1]);\n}\n\n// Takes something that is not an operator object and returns an element matcher\n// for equality with that thing.\nexport function equalityElementMatcher(elementSelector) {\n  if (isOperatorObject(elementSelector)) {\n    throw Error('Can\\'t create equalityValueSelector for operator object');\n  }\n\n  // Special-case: null and undefined are equal (if you got undefined in there\n  // somewhere, or if you got it due to some branch being non-existent in the\n  // weird special case), even though they aren't with EJSON.equals.\n  // undefined or null\n  if (elementSelector == null) {\n    return value => value == null;\n  }\n\n  return value => LocalCollection._f._equal(elementSelector, value);\n}\n\nfunction everythingMatcher(docOrBranchedValues) {\n  return {result: true};\n}\n\nexport function expandArraysInBranches(branches, skipTheArrays) {\n  const branchesOut = [];\n\n  branches.forEach(branch => {\n    const thisIsArray = Array.isArray(branch.value);\n\n    // We include the branch itself, *UNLESS* we it's an array that we're going\n    // to iterate and we're told to skip arrays.  (That's right, we include some\n    // arrays even skipTheArrays is true: these are arrays that were found via\n    // explicit numerical indices.)\n    if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {\n      branchesOut.push({arrayIndices: branch.arrayIndices, value: branch.value});\n    }\n\n    if (thisIsArray && !branch.dontIterate) {\n      branch.value.forEach((value, i) => {\n        branchesOut.push({\n          arrayIndices: (branch.arrayIndices || []).concat(i),\n          value\n        });\n      });\n    }\n  });\n\n  return branchesOut;\n}\n\n// Helpers for $bitsAllSet/$bitsAnySet/$bitsAllClear/$bitsAnyClear.\nfunction getOperandBitmask(operand, selector) {\n  // numeric bitmask\n  // You can provide a numeric bitmask to be matched against the operand field.\n  // It must be representable as a non-negative 32-bit signed integer.\n  // Otherwise, $bitsAllSet will return an error.\n  if (Number.isInteger(operand) && operand >= 0) {\n    return new Uint8Array(new Int32Array([operand]).buffer);\n  }\n\n  // bindata bitmask\n  // You can also use an arbitrarily large BinData instance as a bitmask.\n  if (EJSON.isBinary(operand)) {\n    return new Uint8Array(operand.buffer);\n  }\n\n  // position list\n  // If querying a list of bit positions, each <position> must be a non-negative\n  // integer. Bit positions start at 0 from the least significant bit.\n  if (Array.isArray(operand) &&\n      operand.every(x => Number.isInteger(x) && x >= 0)) {\n    const buffer = new ArrayBuffer((Math.max(...operand) >> 3) + 1);\n    const view = new Uint8Array(buffer);\n\n    operand.forEach(x => {\n      view[x >> 3] |= 1 << (x & 0x7);\n    });\n\n    return view;\n  }\n\n  // bad operand\n  throw Error(\n    `operand to ${selector} must be a numeric bitmask (representable as a ` +\n    'non-negative 32-bit signed integer), a bindata bitmask or an array with ' +\n    'bit positions (non-negative integers)'\n  );\n}\n\nfunction getValueBitmask(value, length) {\n  // The field value must be either numerical or a BinData instance. Otherwise,\n  // $bits... will not match the current document.\n\n  // numerical\n  if (Number.isSafeInteger(value)) {\n    // $bits... will not match numerical values that cannot be represented as a\n    // signed 64-bit integer. This can be the case if a value is either too\n    // large or small to fit in a signed 64-bit integer, or if it has a\n    // fractional component.\n    const buffer = new ArrayBuffer(\n      Math.max(length, 2 * Uint32Array.BYTES_PER_ELEMENT)\n    );\n\n    let view = new Uint32Array(buffer, 0, 2);\n    view[0] = value % ((1 << 16) * (1 << 16)) | 0;\n    view[1] = value / ((1 << 16) * (1 << 16)) | 0;\n\n    // sign extension\n    if (value < 0) {\n      view = new Uint8Array(buffer, 2);\n      view.forEach((byte, i) => {\n        view[i] = 0xff;\n      });\n    }\n\n    return new Uint8Array(buffer);\n  }\n\n  // bindata\n  if (EJSON.isBinary(value)) {\n    return new Uint8Array(value.buffer);\n  }\n\n  // no match\n  return false;\n}\n\n// Actually inserts a key value into the selector document\n// However, this checks there is no ambiguity in setting\n// the value for the given key, throws otherwise\nfunction insertIntoDocument(document, key, value) {\n  Object.keys(document).forEach(existingKey => {\n    if (\n      (existingKey.length > key.length && existingKey.indexOf(`${key}.`) === 0) ||\n      (key.length > existingKey.length && key.indexOf(`${existingKey}.`) === 0)\n    ) {\n      throw new Error(\n        `cannot infer query fields to set, both paths '${existingKey}' and ` +\n        `'${key}' are matched`\n      );\n    } else if (existingKey === key) {\n      throw new Error(\n        `cannot infer query fields to set, path '${key}' is matched twice`\n      );\n    }\n  });\n\n  document[key] = value;\n}\n\n// Returns a branched matcher that matches iff the given matcher does not.\n// Note that this implicitly \"deMorganizes\" the wrapped function.  ie, it\n// means that ALL branch values need to fail to match innerBranchedMatcher.\nfunction invertBranchedMatcher(branchedMatcher) {\n  return branchValues => {\n    // We explicitly choose to strip arrayIndices here: it doesn't make sense to\n    // say \"update the array element that does not match something\", at least\n    // in mongo-land.\n    return {result: !branchedMatcher(branchValues).result};\n  };\n}\n\nexport function isIndexable(obj) {\n  return Array.isArray(obj) || LocalCollection._isPlainObject(obj);\n}\n\nexport function isNumericKey(s) {\n  return /^[0-9]+$/.test(s);\n}\n\n// Returns true if this is an object with at least one key and all keys begin\n// with $.  Unless inconsistentOK is set, throws if some keys begin with $ and\n// others don't.\nexport function isOperatorObject(valueSelector, inconsistentOK) {\n  if (!LocalCollection._isPlainObject(valueSelector)) {\n    return false;\n  }\n\n  let theseAreOperators = undefined;\n  Object.keys(valueSelector).forEach(selKey => {\n    const thisIsOperator = selKey.substr(0, 1) === '$';\n\n    if (theseAreOperators === undefined) {\n      theseAreOperators = thisIsOperator;\n    } else if (theseAreOperators !== thisIsOperator) {\n      if (!inconsistentOK) {\n        throw new Error(\n          `Inconsistent operator: ${JSON.stringify(valueSelector)}`\n        );\n      }\n\n      theseAreOperators = false;\n    }\n  });\n\n  return !!theseAreOperators; // {} has no operators\n}\n\n// Helper for $lt/$gt/$lte/$gte.\nfunction makeInequality(cmpValueComparator) {\n  return {\n    compileElementSelector(operand) {\n      // Arrays never compare false with non-arrays for any inequality.\n      // XXX This was behavior we observed in pre-release MongoDB 2.5, but\n      //     it seems to have been reverted.\n      //     See https://jira.mongodb.org/browse/SERVER-11444\n      if (Array.isArray(operand)) {\n        return () => false;\n      }\n\n      // Special case: consider undefined and null the same (so true with\n      // $gte/$lte).\n      if (operand === undefined) {\n        operand = null;\n      }\n\n      const operandType = LocalCollection._f._type(operand);\n\n      return value => {\n        if (value === undefined) {\n          value = null;\n        }\n\n        // Comparisons are never true among things of different type (except\n        // null vs undefined).\n        if (LocalCollection._f._type(value) !== operandType) {\n          return false;\n        }\n\n        return cmpValueComparator(LocalCollection._f._cmp(value, operand));\n      };\n    },\n  };\n}\n\n// makeLookupFunction(key) returns a lookup function.\n//\n// A lookup function takes in a document and returns an array of matching\n// branches.  If no arrays are found while looking up the key, this array will\n// have exactly one branches (possibly 'undefined', if some segment of the key\n// was not found).\n//\n// If arrays are found in the middle, this can have more than one element, since\n// we 'branch'. When we 'branch', if there are more key segments to look up,\n// then we only pursue branches that are plain objects (not arrays or scalars).\n// This means we can actually end up with no branches!\n//\n// We do *NOT* branch on arrays that are found at the end (ie, at the last\n// dotted member of the key). We just return that array; if you want to\n// effectively 'branch' over the array's values, post-process the lookup\n// function with expandArraysInBranches.\n//\n// Each branch is an object with keys:\n//  - value: the value at the branch\n//  - dontIterate: an optional bool; if true, it means that 'value' is an array\n//    that expandArraysInBranches should NOT expand. This specifically happens\n//    when there is a numeric index in the key, and ensures the\n//    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT\n//    match {a: [[5]]}.\n//  - arrayIndices: if any array indexing was done during lookup (either due to\n//    explicit numeric indices or implicit branching), this will be an array of\n//    the array indices used, from outermost to innermost; it is falsey or\n//    absent if no array index is used. If an explicit numeric index is used,\n//    the index will be followed in arrayIndices by the string 'x'.\n//\n//    Note: arrayIndices is used for two purposes. First, it is used to\n//    implement the '$' modifier feature, which only ever looks at its first\n//    element.\n//\n//    Second, it is used for sort key generation, which needs to be able to tell\n//    the difference between different paths. Moreover, it needs to\n//    differentiate between explicit and implicit branching, which is why\n//    there's the somewhat hacky 'x' entry: this means that explicit and\n//    implicit array lookups will have different full arrayIndices paths. (That\n//    code only requires that different paths have different arrayIndices; it\n//    doesn't actually 'parse' arrayIndices. As an alternative, arrayIndices\n//    could contain objects with flags like 'implicit', but I think that only\n//    makes the code surrounding them more complex.)\n//\n//    (By the way, this field ends up getting passed around a lot without\n//    cloning, so never mutate any arrayIndices field/var in this package!)\n//\n//\n// At the top level, you may only pass in a plain object or array.\n//\n// See the test 'minimongo - lookup' for some examples of what lookup functions\n// return.\nexport function makeLookupFunction(key, options = {}) {\n  const parts = key.split('.');\n  const firstPart = parts.length ? parts[0] : '';\n  const lookupRest = (\n    parts.length > 1 &&\n    makeLookupFunction(parts.slice(1).join('.'), options)\n  );\n\n  const omitUnnecessaryFields = result => {\n    if (!result.dontIterate) {\n      delete result.dontIterate;\n    }\n\n    if (result.arrayIndices && !result.arrayIndices.length) {\n      delete result.arrayIndices;\n    }\n\n    return result;\n  };\n\n  // Doc will always be a plain object or an array.\n  // apply an explicit numeric index, an array.\n  return (doc, arrayIndices = []) => {\n    if (Array.isArray(doc)) {\n      // If we're being asked to do an invalid lookup into an array (non-integer\n      // or out-of-bounds), return no results (which is different from returning\n      // a single undefined result, in that `null` equality checks won't match).\n      if (!(isNumericKey(firstPart) && firstPart < doc.length)) {\n        return [];\n      }\n\n      // Remember that we used this array index. Include an 'x' to indicate that\n      // the previous index came from being considered as an explicit array\n      // index (not branching).\n      arrayIndices = arrayIndices.concat(+firstPart, 'x');\n    }\n\n    // Do our first lookup.\n    const firstLevel = doc[firstPart];\n\n    // If there is no deeper to dig, return what we found.\n    //\n    // If what we found is an array, most value selectors will choose to treat\n    // the elements of the array as matchable values in their own right, but\n    // that's done outside of the lookup function. (Exceptions to this are $size\n    // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:\n    // [[1, 2]]}.)\n    //\n    // That said, if we just did an *explicit* array lookup (on doc) to find\n    // firstLevel, and firstLevel is an array too, we do NOT want value\n    // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.\n    // So in that case, we mark the return value as 'don't iterate'.\n    if (!lookupRest) {\n      return [omitUnnecessaryFields({\n        arrayIndices,\n        dontIterate: Array.isArray(doc) && Array.isArray(firstLevel),\n        value: firstLevel\n      })];\n    }\n\n    // We need to dig deeper.  But if we can't, because what we've found is not\n    // an array or plain object, we're done. If we just did a numeric index into\n    // an array, we return nothing here (this is a change in Mongo 2.5 from\n    // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,\n    // return a single `undefined` (which can, for example, match via equality\n    // with `null`).\n    if (!isIndexable(firstLevel)) {\n      if (Array.isArray(doc)) {\n        return [];\n      }\n\n      return [omitUnnecessaryFields({arrayIndices, value: undefined})];\n    }\n\n    const result = [];\n    const appendToResult = more => {\n      result.push(...more);\n    };\n\n    // Dig deeper: look up the rest of the parts on whatever we've found.\n    // (lookupRest is smart enough to not try to do invalid lookups into\n    // firstLevel if it's an array.)\n    appendToResult(lookupRest(firstLevel, arrayIndices));\n\n    // If we found an array, then in *addition* to potentially treating the next\n    // part as a literal integer lookup, we should also 'branch': try to look up\n    // the rest of the parts on each array element in parallel.\n    //\n    // In this case, we *only* dig deeper into array elements that are plain\n    // objects. (Recall that we only got this far if we have further to dig.)\n    // This makes sense: we certainly don't dig deeper into non-indexable\n    // objects. And it would be weird to dig into an array: it's simpler to have\n    // a rule that explicit integer indexes only apply to an outer array, not to\n    // an array you find after a branching search.\n    //\n    // In the special case of a numeric part in a *sort selector* (not a query\n    // selector), we skip the branching: we ONLY allow the numeric part to mean\n    // 'look up this index' in that case, not 'also look up this index in all\n    // the elements of the array'.\n    if (Array.isArray(firstLevel) &&\n        !(isNumericKey(parts[1]) && options.forSort)) {\n      firstLevel.forEach((branch, arrayIndex) => {\n        if (LocalCollection._isPlainObject(branch)) {\n          appendToResult(lookupRest(branch, arrayIndices.concat(arrayIndex)));\n        }\n      });\n    }\n\n    return result;\n  };\n}\n\n// Object exported only for unit testing.\n// Use it to export private functions to test in Tinytest.\nMinimongoTest = {makeLookupFunction};\nMinimongoError = (message, options = {}) => {\n  if (typeof message === 'string' && options.field) {\n    message += ` for field '${options.field}'`;\n  }\n\n  const error = new Error(message);\n  error.name = 'MinimongoError';\n  return error;\n};\n\nexport function nothingMatcher(docOrBranchedValues) {\n  return {result: false};\n}\n\n// Takes an operator object (an object with $ keys) and returns a branched\n// matcher for it.\nfunction operatorBranchedMatcher(valueSelector, matcher, isRoot) {\n  // Each valueSelector works separately on the various branches.  So one\n  // operator can match one branch and another can match another branch.  This\n  // is OK.\n  const operatorMatchers = Object.keys(valueSelector).map(operator => {\n    const operand = valueSelector[operator];\n\n    const simpleRange = (\n      ['$lt', '$lte', '$gt', '$gte'].includes(operator) &&\n      typeof operand === 'number'\n    );\n\n    const simpleEquality = (\n      ['$ne', '$eq'].includes(operator) &&\n      operand !== Object(operand)\n    );\n\n    const simpleInclusion = (\n      ['$in', '$nin'].includes(operator)\n      && Array.isArray(operand)\n      && !operand.some(x => x === Object(x))\n    );\n\n    if (!(simpleRange || simpleInclusion || simpleEquality)) {\n      matcher._isSimple = false;\n    }\n\n    if (hasOwn.call(VALUE_OPERATORS, operator)) {\n      return VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot);\n    }\n\n    if (hasOwn.call(ELEMENT_OPERATORS, operator)) {\n      const options = ELEMENT_OPERATORS[operator];\n      return convertElementMatcherToBranchedMatcher(\n        options.compileElementSelector(operand, valueSelector, matcher),\n        options\n      );\n    }\n\n    throw new Error(`Unrecognized operator: ${operator}`);\n  });\n\n  return andBranchedMatchers(operatorMatchers);\n}\n\n// paths - Array: list of mongo style paths\n// newLeafFn - Function: of form function(path) should return a scalar value to\n//                       put into list created for that path\n// conflictFn - Function: of form function(node, path, fullPath) is called\n//                        when building a tree path for 'fullPath' node on\n//                        'path' was already a leaf with a value. Must return a\n//                        conflict resolution.\n// initial tree - Optional Object: starting tree.\n// @returns - Object: tree represented as a set of nested objects\nexport function pathsToTree(paths, newLeafFn, conflictFn, root = {}) {\n  paths.forEach(path => {\n    const pathArray = path.split('.');\n    let tree = root;\n\n    // use .every just for iteration with break\n    const success = pathArray.slice(0, -1).every((key, i) => {\n      if (!hasOwn.call(tree, key)) {\n        tree[key] = {};\n      } else if (tree[key] !== Object(tree[key])) {\n        tree[key] = conflictFn(\n          tree[key],\n          pathArray.slice(0, i + 1).join('.'),\n          path\n        );\n\n        // break out of loop if we are failing for this path\n        if (tree[key] !== Object(tree[key])) {\n          return false;\n        }\n      }\n\n      tree = tree[key];\n\n      return true;\n    });\n\n    if (success) {\n      const lastKey = pathArray[pathArray.length - 1];\n      if (hasOwn.call(tree, lastKey)) {\n        tree[lastKey] = conflictFn(tree[lastKey], path, path);\n      } else {\n        tree[lastKey] = newLeafFn(path);\n      }\n    }\n  });\n\n  return root;\n}\n\n// Makes sure we get 2 elements array and assume the first one to be x and\n// the second one to y no matter what user passes.\n// In case user passes { lon: x, lat: y } returns [x, y]\nfunction pointToArray(point) {\n  return Array.isArray(point) ? point.slice() : [point.x, point.y];\n}\n\n// Creating a document from an upsert is quite tricky.\n// E.g. this selector: {\"$or\": [{\"b.foo\": {\"$all\": [\"bar\"]}}]}, should result\n// in: {\"b.foo\": \"bar\"}\n// But this selector: {\"$or\": [{\"b\": {\"foo\": {\"$all\": [\"bar\"]}}}]} should throw\n// an error\n\n// Some rules (found mainly with trial & error, so there might be more):\n// - handle all childs of $and (or implicit $and)\n// - handle $or nodes with exactly 1 child\n// - ignore $or nodes with more than 1 child\n// - ignore $nor and $not nodes\n// - throw when a value can not be set unambiguously\n// - every value for $all should be dealt with as separate $eq-s\n// - threat all children of $all as $eq setters (=> set if $all.length === 1,\n//   otherwise throw error)\n// - you can not mix '$'-prefixed keys and non-'$'-prefixed keys\n// - you can only have dotted keys on a root-level\n// - you can not have '$'-prefixed keys more than one-level deep in an object\n\n// Handles one key/value pair to put in the selector document\nfunction populateDocumentWithKeyValue(document, key, value) {\n  if (value && Object.getPrototypeOf(value) === Object.prototype) {\n    populateDocumentWithObject(document, key, value);\n  } else if (!(value instanceof RegExp)) {\n    insertIntoDocument(document, key, value);\n  }\n}\n\n// Handles a key, value pair to put in the selector document\n// if the value is an object\nfunction populateDocumentWithObject(document, key, value) {\n  const keys = Object.keys(value);\n  const unprefixedKeys = keys.filter(op => op[0] !== '$');\n\n  if (unprefixedKeys.length > 0 || !keys.length) {\n    // Literal (possibly empty) object ( or empty object )\n    // Don't allow mixing '$'-prefixed with non-'$'-prefixed fields\n    if (keys.length !== unprefixedKeys.length) {\n      throw new Error(`unknown operator: ${unprefixedKeys[0]}`);\n    }\n\n    validateObject(value, key);\n    insertIntoDocument(document, key, value);\n  } else {\n    Object.keys(value).forEach(op => {\n      const object = value[op];\n\n      if (op === '$eq') {\n        populateDocumentWithKeyValue(document, key, object);\n      } else if (op === '$all') {\n        // every value for $all should be dealt with as separate $eq-s\n        object.forEach(element =>\n          populateDocumentWithKeyValue(document, key, element)\n        );\n      }\n    });\n  }\n}\n\n// Fills a document with certain fields from an upsert selector\nexport function populateDocumentWithQueryFields(query, document = {}) {\n  if (Object.getPrototypeOf(query) === Object.prototype) {\n    // handle implicit $and\n    Object.keys(query).forEach(key => {\n      const value = query[key];\n\n      if (key === '$and') {\n        // handle explicit $and\n        value.forEach(element =>\n          populateDocumentWithQueryFields(element, document)\n        );\n      } else if (key === '$or') {\n        // handle $or nodes with exactly 1 child\n        if (value.length === 1) {\n          populateDocumentWithQueryFields(value[0], document);\n        }\n      } else if (key[0] !== '$') {\n        // Ignore other '$'-prefixed logical selectors\n        populateDocumentWithKeyValue(document, key, value);\n      }\n    });\n  } else {\n    // Handle meteor-specific shortcut for selecting _id\n    if (LocalCollection._selectorIsId(query)) {\n      insertIntoDocument(document, '_id', query);\n    }\n  }\n\n  return document;\n}\n\n// Traverses the keys of passed projection and constructs a tree where all\n// leaves are either all True or all False\n// @returns Object:\n//  - tree - Object - tree representation of keys involved in projection\n//  (exception for '_id' as it is a special case handled separately)\n//  - including - Boolean - \"take only certain fields\" type of projection\nexport function projectionDetails(fields) {\n  // Find the non-_id keys (_id is handled specially because it is included\n  // unless explicitly excluded). Sort the keys, so that our code to detect\n  // overlaps like 'foo' and 'foo.bar' can assume that 'foo' comes first.\n  let fieldsKeys = Object.keys(fields).sort();\n\n  // If _id is the only field in the projection, do not remove it, since it is\n  // required to determine if this is an exclusion or exclusion. Also keep an\n  // inclusive _id, since inclusive _id follows the normal rules about mixing\n  // inclusive and exclusive fields. If _id is not the only field in the\n  // projection and is exclusive, remove it so it can be handled later by a\n  // special case, since exclusive _id is always allowed.\n  if (!(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') &&\n      !(fieldsKeys.includes('_id') && fields._id)) {\n    fieldsKeys = fieldsKeys.filter(key => key !== '_id');\n  }\n\n  let including = null; // Unknown\n\n  fieldsKeys.forEach(keyPath => {\n    const rule = !!fields[keyPath];\n\n    if (including === null) {\n      including = rule;\n    }\n\n    // This error message is copied from MongoDB shell\n    if (including !== rule) {\n      throw MinimongoError(\n        'You cannot currently mix including and excluding fields.'\n      );\n    }\n  });\n\n  const projectionRulesTree = pathsToTree(\n    fieldsKeys,\n    path => including,\n    (node, path, fullPath) => {\n      // Check passed projection fields' keys: If you have two rules such as\n      // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If\n      // that happens, there is a probability you are doing something wrong,\n      // framework should notify you about such mistake earlier on cursor\n      // compilation step than later during runtime.  Note, that real mongo\n      // doesn't do anything about it and the later rule appears in projection\n      // project, more priority it takes.\n      //\n      // Example, assume following in mongo shell:\n      // > db.coll.insert({ a: { b: 23, c: 44 } })\n      // > db.coll.find({}, { 'a': 1, 'a.b': 1 })\n      // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23}}\n      // > db.coll.find({}, { 'a.b': 1, 'a': 1 })\n      // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23, \"c\": 44}}\n      //\n      // Note, how second time the return set of keys is different.\n      const currentPath = fullPath;\n      const anotherPath = path;\n      throw MinimongoError(\n        `both ${currentPath} and ${anotherPath} found in fields option, ` +\n        'using both of them may trigger unexpected behavior. Did you mean to ' +\n        'use only one of them?'\n      );\n    });\n\n  return {including, tree: projectionRulesTree};\n}\n\n// Takes a RegExp object and returns an element matcher.\nexport function regexpElementMatcher(regexp) {\n  return value => {\n    if (value instanceof RegExp) {\n      return value.toString() === regexp.toString();\n    }\n\n    // Regexps only work against strings.\n    if (typeof value !== 'string') {\n      return false;\n    }\n\n    // Reset regexp's state to avoid inconsistent matching for objects with the\n    // same value on consecutive calls of regexp.test. This happens only if the\n    // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for\n    // which we should *not* change the lastIndex but MongoDB doesn't support\n    // either of these flags.\n    regexp.lastIndex = 0;\n\n    return regexp.test(value);\n  };\n}\n\n// Validates the key in a path.\n// Objects that are nested more then 1 level cannot have dotted fields\n// or fields starting with '$'\nfunction validateKeyInPath(key, path) {\n  if (key.includes('.')) {\n    throw new Error(\n      `The dotted field '${key}' in '${path}.${key} is not valid for storage.`\n    );\n  }\n\n  if (key[0] === '$') {\n    throw new Error(\n      `The dollar ($) prefixed field  '${path}.${key} is not valid for storage.`\n    );\n  }\n}\n\n// Recursively validates an object that is nested more than one level deep\nfunction validateObject(object, path) {\n  if (object && Object.getPrototypeOf(object) === Object.prototype) {\n    Object.keys(object).forEach(key => {\n      validateKeyInPath(key, path);\n      validateObject(object[key], path + '.' + key);\n    });\n  }\n}\n","import LocalCollection from './local_collection.js';\nimport { hasOwn } from './common.js';\n\n// Cursor: a specification for a particular subset of documents, w/ a defined\n// order, limit, and offset.  creating a Cursor with LocalCollection.find(),\nexport default class Cursor {\n  // don't call this ctor directly.  use LocalCollection.find().\n  constructor(collection, selector, options = {}) {\n    this.collection = collection;\n    this.sorter = null;\n    this.matcher = new Minimongo.Matcher(selector);\n\n    if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n      // stash for fast _id and { _id }\n      this._selectorId = hasOwn.call(selector, '_id')\n        ? selector._id\n        : selector;\n    } else {\n      this._selectorId = undefined;\n\n      if (this.matcher.hasGeoQuery() || options.sort) {\n        this.sorter = new Minimongo.Sorter(options.sort || []);\n      }\n    }\n\n    this.skip = options.skip || 0;\n    this.limit = options.limit;\n    this.fields = options.fields;\n\n    this._projectionFn = LocalCollection._compileProjection(this.fields || {});\n\n    this._transform = LocalCollection.wrapTransform(options.transform);\n\n    // by default, queries register w/ Tracker when it is available.\n    if (typeof Tracker !== 'undefined') {\n      this.reactive = options.reactive === undefined ? true : options.reactive;\n    }\n  }\n\n  /**\n   * @summary Returns the number of documents that match a query.\n   * @memberOf Mongo.Cursor\n   * @method  count\n   * @param {boolean} [applySkipLimit=true] If set to `false`, the value\n   *                                         returned will reflect the total\n   *                                         number of matching documents,\n   *                                         ignoring any value supplied for\n   *                                         limit\n   * @instance\n   * @locus Anywhere\n   * @returns {Number}\n   */\n  count(applySkipLimit = true) {\n    if (this.reactive) {\n      // allow the observe to be unordered\n      this._depend({added: true, removed: true}, true);\n    }\n\n    return this._getRawObjects({\n      ordered: true,\n      applySkipLimit\n    }).length;\n  }\n\n  /**\n   * @summary Return all matching documents as an Array.\n   * @memberOf Mongo.Cursor\n   * @method  fetch\n   * @instance\n   * @locus Anywhere\n   * @returns {Object[]}\n   */\n  fetch() {\n    const result = [];\n\n    this.forEach(doc => {\n      result.push(doc);\n    });\n\n    return result;\n  }\n\n  [Symbol.iterator]() {\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true});\n    }\n\n    let index = 0;\n    const objects = this._getRawObjects({ordered: true});\n\n    return {\n      next: () => {\n        if (index < objects.length) {\n          // This doubles as a clone operation.\n          let element = this._projectionFn(objects[index++]);\n\n          if (this._transform)\n            element = this._transform(element);\n\n          return {value: element};\n        }\n\n        return {done: true};\n      }\n    };\n  }\n\n  /**\n   * @callback IterationCallback\n   * @param {Object} doc\n   * @param {Number} index\n   */\n  /**\n   * @summary Call `callback` once for each matching document, sequentially and\n   *          synchronously.\n   * @locus Anywhere\n   * @method  forEach\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  forEach(callback, thisArg) {\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true});\n    }\n\n    this._getRawObjects({ordered: true}).forEach((element, i) => {\n      // This doubles as a clone operation.\n      element = this._projectionFn(element);\n\n      if (this._transform) {\n        element = this._transform(element);\n      }\n\n      callback.call(thisArg, element, i, this);\n    });\n  }\n\n  getTransform() {\n    return this._transform;\n  }\n\n  /**\n   * @summary Map callback over all matching documents.  Returns an Array.\n   * @locus Anywhere\n   * @method map\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  map(callback, thisArg) {\n    const result = [];\n\n    this.forEach((doc, i) => {\n      result.push(callback.call(thisArg, doc, i, this));\n    });\n\n    return result;\n  }\n\n  // options to contain:\n  //  * callbacks for observe():\n  //    - addedAt (document, atIndex)\n  //    - added (document)\n  //    - changedAt (newDocument, oldDocument, atIndex)\n  //    - changed (newDocument, oldDocument)\n  //    - removedAt (document, atIndex)\n  //    - removed (document)\n  //    - movedTo (document, oldIndex, newIndex)\n  //\n  // attributes available on returned query handle:\n  //  * stop(): end updates\n  //  * collection: the collection this query is querying\n  //\n  // iff x is a returned query handle, (x instanceof\n  // LocalCollection.ObserveHandle) is true\n  //\n  // initial results delivered through added callback\n  // XXX maybe callbacks should take a list of objects, to expose transactions?\n  // XXX maybe support field limiting (to limit what you're notified on)\n\n  /**\n   * @summary Watch a query.  Receive callbacks as the result set changes.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  observe(options) {\n    return LocalCollection._observeFromObserveChanges(this, options);\n  }\n\n  /**\n   * @summary Watch a query. Receive callbacks as the result set changes. Only\n   *          the differences between the old and new documents are passed to\n   *          the callbacks.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  observeChanges(options) {\n    const ordered = LocalCollection._observeChangesCallbacksAreOrdered(options);\n\n    // there are several places that assume you aren't combining skip/limit with\n    // unordered observe.  eg, update's EJSON.clone, and the \"there are several\"\n    // comment in _modifyAndNotify\n    // XXX allow skip/limit with unordered observe\n    if (!options._allow_unordered && !ordered && (this.skip || this.limit)) {\n      throw new Error(\n        \"Must use an ordered observe with skip or limit (i.e. 'addedBefore' \" +\n        \"for observeChanges or 'addedAt' for observe, instead of 'added').\"\n      );\n    }\n\n    if (this.fields && (this.fields._id === 0 || this.fields._id === false)) {\n      throw Error('You may not observe a cursor with {fields: {_id: 0}}');\n    }\n\n    const distances = (\n      this.matcher.hasGeoQuery() &&\n      ordered &&\n      new LocalCollection._IdMap\n    );\n\n    const query = {\n      cursor: this,\n      dirty: false,\n      distances,\n      matcher: this.matcher, // not fast pathed\n      ordered,\n      projectionFn: this._projectionFn,\n      resultsSnapshot: null,\n      sorter: ordered && this.sorter\n    };\n\n    let qid;\n\n    // Non-reactive queries call added[Before] and then never call anything\n    // else.\n    if (this.reactive) {\n      qid = this.collection.next_qid++;\n      this.collection.queries[qid] = query;\n    }\n\n    query.results = this._getRawObjects({ordered, distances: query.distances});\n\n    if (this.collection.paused) {\n      query.resultsSnapshot = ordered ? [] : new LocalCollection._IdMap;\n    }\n\n    // wrap callbacks we were passed. callbacks only fire when not paused and\n    // are never undefined\n    // Filters out blacklisted fields according to cursor's projection.\n    // XXX wrong place for this?\n\n    // furthermore, callbacks enqueue until the operation we're working on is\n    // done.\n    const wrapCallback = fn => {\n      if (!fn) {\n        return () => {};\n      }\n\n      const self = this;\n      return function(/* args*/) {\n        if (self.collection.paused) {\n          return;\n        }\n\n        const args = arguments;\n\n        self.collection._observeQueue.queueTask(() => {\n          fn.apply(this, args);\n        });\n      };\n    };\n\n    query.added = wrapCallback(options.added);\n    query.changed = wrapCallback(options.changed);\n    query.removed = wrapCallback(options.removed);\n\n    if (ordered) {\n      query.addedBefore = wrapCallback(options.addedBefore);\n      query.movedBefore = wrapCallback(options.movedBefore);\n    }\n\n    if (!options._suppress_initial && !this.collection.paused) {\n      query.results.forEach(doc => {\n        const fields = EJSON.clone(doc);\n\n        delete fields._id;\n\n        if (ordered) {\n          query.addedBefore(doc._id, this._projectionFn(fields), null);\n        }\n\n        query.added(doc._id, this._projectionFn(fields));\n      });\n    }\n\n    const handle = Object.assign(new LocalCollection.ObserveHandle, {\n      collection: this.collection,\n      stop: () => {\n        if (this.reactive) {\n          delete this.collection.queries[qid];\n        }\n      }\n    });\n\n    if (this.reactive && Tracker.active) {\n      // XXX in many cases, the same observe will be recreated when\n      // the current autorun is rerun.  we could save work by\n      // letting it linger across rerun and potentially get\n      // repurposed if the same observe is performed, using logic\n      // similar to that of Meteor.subscribe.\n      Tracker.onInvalidate(() => {\n        handle.stop();\n      });\n    }\n\n    // run the observe callbacks resulting from the initial contents\n    // before we leave the observe.\n    this.collection._observeQueue.drain();\n\n    return handle;\n  }\n\n  // Since we don't actually have a \"nextObject\" interface, there's really no\n  // reason to have a \"rewind\" interface.  All it did was make multiple calls\n  // to fetch/map/forEach return nothing the second time.\n  // XXX COMPAT WITH 0.8.1\n  rewind() {}\n\n  // XXX Maybe we need a version of observe that just calls a callback if\n  // anything changed.\n  _depend(changers, _allow_unordered) {\n    if (Tracker.active) {\n      const dependency = new Tracker.Dependency;\n      const notify = dependency.changed.bind(dependency);\n\n      dependency.depend();\n\n      const options = {_allow_unordered, _suppress_initial: true};\n\n      ['added', 'addedBefore', 'changed', 'movedBefore', 'removed']\n        .forEach(fn => {\n          if (changers[fn]) {\n            options[fn] = notify;\n          }\n        });\n\n      // observeChanges will stop() when this computation is invalidated\n      this.observeChanges(options);\n    }\n  }\n\n  _getCollectionName() {\n    return this.collection.name;\n  }\n\n  // Returns a collection of matching objects, but doesn't deep copy them.\n  //\n  // If ordered is set, returns a sorted array, respecting sorter, skip, and\n  // limit properties of the query provided that options.applySkipLimit is\n  // not set to false (#1201). If sorter is falsey, no sort -- you get the\n  // natural order.\n  //\n  // If ordered is not set, returns an object mapping from ID to doc (sorter,\n  // skip and limit should not be set).\n  //\n  // If ordered is set and this cursor is a $near geoquery, then this function\n  // will use an _IdMap to track each distance from the $near argument point in\n  // order to use it as a sort key. If an _IdMap is passed in the 'distances'\n  // argument, this function will clear it and use it for this purpose\n  // (otherwise it will just create its own _IdMap). The observeChanges\n  // implementation uses this to remember the distances after this function\n  // returns.\n  _getRawObjects(options = {}) {\n    // By default this method will respect skip and limit because .fetch(),\n    // .forEach() etc... expect this behaviour. It can be forced to ignore\n    // skip and limit by setting applySkipLimit to false (.count() does this,\n    // for example)\n    const applySkipLimit = options.applySkipLimit !== false;\n\n    // XXX use OrderedDict instead of array, and make IdMap and OrderedDict\n    // compatible\n    const results = options.ordered ? [] : new LocalCollection._IdMap;\n\n    // fast path for single ID value\n    if (this._selectorId !== undefined) {\n      // If you have non-zero skip and ask for a single id, you get nothing.\n      // This is so it matches the behavior of the '{_id: foo}' path.\n      if (applySkipLimit && this.skip) {\n        return results;\n      }\n\n      const selectedDoc = this.collection._docs.get(this._selectorId);\n\n      if (selectedDoc) {\n        if (options.ordered) {\n          results.push(selectedDoc);\n        } else {\n          results.set(this._selectorId, selectedDoc);\n        }\n      }\n\n      return results;\n    }\n\n    // slow path for arbitrary selector, sort, skip, limit\n\n    // in the observeChanges case, distances is actually part of the \"query\"\n    // (ie, live results set) object.  in other cases, distances is only used\n    // inside this function.\n    let distances;\n    if (this.matcher.hasGeoQuery() && options.ordered) {\n      if (options.distances) {\n        distances = options.distances;\n        distances.clear();\n      } else {\n        distances = new LocalCollection._IdMap();\n      }\n    }\n\n    this.collection._docs.forEach((doc, id) => {\n      const matchResult = this.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (options.ordered) {\n          results.push(doc);\n\n          if (distances && matchResult.distance !== undefined) {\n            distances.set(id, matchResult.distance);\n          }\n        } else {\n          results.set(id, doc);\n        }\n      }\n\n      // Override to ensure all docs are matched if ignoring skip & limit\n      if (!applySkipLimit) {\n        return true;\n      }\n\n      // Fast path for limited unsorted queries.\n      // XXX 'length' check here seems wrong for ordered\n      return (\n        !this.limit ||\n        this.skip ||\n        this.sorter ||\n        results.length !== this.limit\n      );\n    });\n\n    if (!options.ordered) {\n      return results;\n    }\n\n    if (this.sorter) {\n      results.sort(this.sorter.getComparator({distances}));\n    }\n\n    // Return the full set of results if there is no skip or limit or if we're\n    // ignoring them\n    if (!applySkipLimit || (!this.limit && !this.skip)) {\n      return results;\n    }\n\n    return results.slice(\n      this.skip,\n      this.limit ? this.limit + this.skip : results.length\n    );\n  }\n\n  _publishCursor(subscription) {\n    // XXX minimongo should not depend on mongo-livedata!\n    if (!Package.mongo) {\n      throw new Error(\n        'Can\\'t publish from Minimongo without the `mongo` package.'\n      );\n    }\n\n    if (!this.collection.name) {\n      throw new Error(\n        'Can\\'t publish a cursor from a collection without a name.'\n      );\n    }\n\n    return Package.mongo.Mongo.Collection._publishCursor(\n      this,\n      subscription,\n      this.collection.name\n    );\n  }\n}\n","import Cursor from './cursor.js';\nimport ObserveHandle from './observe_handle.js';\nimport {\n  hasOwn,\n  isIndexable,\n  isNumericKey,\n  isOperatorObject,\n  populateDocumentWithQueryFields,\n  projectionDetails,\n} from './common.js';\n\n// XXX type checking on selectors (graceful error if malformed)\n\n// LocalCollection: a set of documents that supports queries and modifiers.\nexport default class LocalCollection {\n  constructor(name) {\n    this.name = name;\n    // _id -> document (also containing id)\n    this._docs = new LocalCollection._IdMap;\n\n    this._observeQueue = new Meteor._SynchronousQueue();\n\n    this.next_qid = 1; // live query id generator\n\n    // qid -> live query object. keys:\n    //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.\n    //  results: array (ordered) or object (unordered) of current results\n    //    (aliased with this._docs!)\n    //  resultsSnapshot: snapshot of results. null if not paused.\n    //  cursor: Cursor object for the query.\n    //  selector, sorter, (callbacks): functions\n    this.queries = Object.create(null);\n\n    // null if not saving originals; an IdMap from id to original document value\n    // if saving originals. See comments before saveOriginals().\n    this._savedOriginals = null;\n\n    // True when observers are paused and we should not send callbacks.\n    this.paused = false;\n  }\n\n  // options may include sort, skip, limit, reactive\n  // sort may be any of these forms:\n  //     {a: 1, b: -1}\n  //     [[\"a\", \"asc\"], [\"b\", \"desc\"]]\n  //     [\"a\", [\"b\", \"desc\"]]\n  //   (in the first form you're beholden to key enumeration order in\n  //   your javascript VM)\n  //\n  // reactive: if given, and false, don't register with Tracker (default\n  // is true)\n  //\n  // XXX possibly should support retrieving a subset of fields? and\n  // have it be a hint (ignored on the client, when not copying the\n  // doc?)\n  //\n  // XXX sort does not yet support subkeys ('a.b') .. fix that!\n  // XXX add one more sort form: \"key\"\n  // XXX tests\n  find(selector, options) {\n    // default syntax for everything is to omit the selector argument.\n    // but if selector is explicitly passed in as false or undefined, we\n    // want a selector that matches nothing.\n    if (arguments.length === 0) {\n      selector = {};\n    }\n\n    return new LocalCollection.Cursor(this, selector, options);\n  }\n\n  findOne(selector, options = {}) {\n    if (arguments.length === 0) {\n      selector = {};\n    }\n\n    // NOTE: by setting limit 1 here, we end up using very inefficient\n    // code that recomputes the whole query on each update. The upside is\n    // that when you reactively depend on a findOne you only get\n    // invalidated when the found object changes, not any object in the\n    // collection. Most findOne will be by id, which has a fast path, so\n    // this might not be a big deal. In most cases, invalidation causes\n    // the called to re-query anyway, so this should be a net performance\n    // improvement.\n    options.limit = 1;\n\n    return this.find(selector, options).fetch()[0];\n  }\n\n  // XXX possibly enforce that 'undefined' does not appear (we assume\n  // this in our handling of null and $exists)\n  insert(doc, callback) {\n    doc = EJSON.clone(doc);\n\n    assertHasValidFieldNames(doc);\n\n    // if you really want to use ObjectIDs, set this global.\n    // Mongo.Collection specifies its own ids and does not use this code.\n    if (!hasOwn.call(doc, '_id')) {\n      doc._id = LocalCollection._useOID ? new MongoID.ObjectID() : Random.id();\n    }\n\n    const id = doc._id;\n\n    if (this._docs.has(id)) {\n      throw MinimongoError(`Duplicate _id '${id}'`);\n    }\n\n    this._saveOriginal(id, undefined);\n    this._docs.set(id, doc);\n\n    const queriesToRecompute = [];\n\n    // trigger live queries that match\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      const matchResult = query.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (query.distances && matchResult.distance !== undefined) {\n          query.distances.set(id, matchResult.distance);\n        }\n\n        if (query.cursor.skip || query.cursor.limit) {\n          queriesToRecompute.push(qid);\n        } else {\n          LocalCollection._insertInResults(query, doc);\n        }\n      }\n    });\n\n    queriesToRecompute.forEach(qid => {\n      if (this.queries[qid]) {\n        this._recomputeResults(this.queries[qid]);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    // Defer because the caller likely doesn't expect the callback to be run\n    // immediately.\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, id);\n      });\n    }\n\n    return id;\n  }\n\n  // Pause the observers. No callbacks from observers will fire until\n  // 'resumeObservers' is called.\n  pauseObservers() {\n    // No-op if already paused.\n    if (this.paused) {\n      return;\n    }\n\n    // Set the 'paused' flag such that new observer messages don't fire.\n    this.paused = true;\n\n    // Take a snapshot of the query results for each query.\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n      query.resultsSnapshot = EJSON.clone(query.results);\n    });\n  }\n\n  remove(selector, callback) {\n    // Easy special case: if we're not calling observeChanges callbacks and\n    // we're not saving originals and we got asked to remove everything, then\n    // just empty everything directly.\n    if (this.paused && !this._savedOriginals && EJSON.equals(selector, {})) {\n      const result = this._docs.size();\n\n      this._docs.clear();\n\n      Object.keys(this.queries).forEach(qid => {\n        const query = this.queries[qid];\n\n        if (query.ordered) {\n          query.results = [];\n        } else {\n          query.results.clear();\n        }\n      });\n\n      if (callback) {\n        Meteor.defer(() => {\n          callback(null, result);\n        });\n      }\n\n      return result;\n    }\n\n    const matcher = new Minimongo.Matcher(selector);\n    const remove = [];\n\n    this._eachPossiblyMatchingDoc(selector, (doc, id) => {\n      if (matcher.documentMatches(doc).result) {\n        remove.push(id);\n      }\n    });\n\n    const queriesToRecompute = [];\n    const queryRemove = [];\n\n    for (let i = 0; i < remove.length; i++) {\n      const removeId = remove[i];\n      const removeDoc = this._docs.get(removeId);\n\n      Object.keys(this.queries).forEach(qid => {\n        const query = this.queries[qid];\n\n        if (query.dirty) {\n          return;\n        }\n\n        if (query.matcher.documentMatches(removeDoc).result) {\n          if (query.cursor.skip || query.cursor.limit) {\n            queriesToRecompute.push(qid);\n          } else {\n            queryRemove.push({qid, doc: removeDoc});\n          }\n        }\n      });\n\n      this._saveOriginal(removeId, removeDoc);\n      this._docs.remove(removeId);\n    }\n\n    // run live query callbacks _after_ we've removed the documents.\n    queryRemove.forEach(remove => {\n      const query = this.queries[remove.qid];\n\n      if (query) {\n        query.distances && query.distances.remove(remove.doc._id);\n        LocalCollection._removeFromResults(query, remove.doc);\n      }\n    });\n\n    queriesToRecompute.forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query) {\n        this._recomputeResults(query);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    const result = remove.length;\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  }\n\n  // Resume the observers. Observers immediately receive change\n  // notifications to bring them to the current state of the\n  // database. Note that this is not just replaying all the changes that\n  // happened during the pause, it is a smarter 'coalesced' diff.\n  resumeObservers() {\n    // No-op if not paused.\n    if (!this.paused) {\n      return;\n    }\n\n    // Unset the 'paused' flag. Make sure to do this first, otherwise\n    // observer methods won't actually fire when we trigger them.\n    this.paused = false;\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        query.dirty = false;\n\n        // re-compute results will perform `LocalCollection._diffQueryChanges`\n        // automatically.\n        this._recomputeResults(query, query.resultsSnapshot);\n      } else {\n        // Diff the current results against the snapshot and send to observers.\n        // pass the query object for its observer callbacks.\n        LocalCollection._diffQueryChanges(\n          query.ordered,\n          query.resultsSnapshot,\n          query.results,\n          query,\n          {projectionFn: query.projectionFn}\n        );\n      }\n\n      query.resultsSnapshot = null;\n    });\n\n    this._observeQueue.drain();\n  }\n\n  retrieveOriginals() {\n    if (!this._savedOriginals) {\n      throw new Error('Called retrieveOriginals without saveOriginals');\n    }\n\n    const originals = this._savedOriginals;\n\n    this._savedOriginals = null;\n\n    return originals;\n  }\n\n  // To track what documents are affected by a piece of code, call\n  // saveOriginals() before it and retrieveOriginals() after it.\n  // retrieveOriginals returns an object whose keys are the ids of the documents\n  // that were affected since the call to saveOriginals(), and the values are\n  // equal to the document's contents at the time of saveOriginals. (In the case\n  // of an inserted document, undefined is the value.) You must alternate\n  // between calls to saveOriginals() and retrieveOriginals().\n  saveOriginals() {\n    if (this._savedOriginals) {\n      throw new Error('Called saveOriginals twice without retrieveOriginals');\n    }\n\n    this._savedOriginals = new LocalCollection._IdMap;\n  }\n\n  // XXX atomicity: if multi is true, and one modification fails, do\n  // we rollback the whole operation, or what?\n  update(selector, mod, options, callback) {\n    if (! callback && options instanceof Function) {\n      callback = options;\n      options = null;\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    const matcher = new Minimongo.Matcher(selector, true);\n\n    // Save the original results of any query that we might need to\n    // _recomputeResults on, because _modifyAndNotify will mutate the objects in\n    // it. (We don't need to save the original results of paused queries because\n    // they already have a resultsSnapshot and we won't be diffing in\n    // _recomputeResults.)\n    const qidToOriginalResults = {};\n\n    // We should only clone each document once, even if it appears in multiple\n    // queries\n    const docMap = new LocalCollection._IdMap;\n    const idsMatched = LocalCollection._idsMatchedBySelector(selector);\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if ((query.cursor.skip || query.cursor.limit) && ! this.paused) {\n        // Catch the case of a reactive `count()` on a cursor with skip\n        // or limit, which registers an unordered observe. This is a\n        // pretty rare case, so we just clone the entire result set with\n        // no optimizations for documents that appear in these result\n        // sets and other queries.\n        if (query.results instanceof LocalCollection._IdMap) {\n          qidToOriginalResults[qid] = query.results.clone();\n          return;\n        }\n\n        if (!(query.results instanceof Array)) {\n          throw new Error('Assertion failed: query.results not an array');\n        }\n\n        // Clones a document to be stored in `qidToOriginalResults`\n        // because it may be modified before the new and old result sets\n        // are diffed. But if we know exactly which document IDs we're\n        // going to modify, then we only need to clone those.\n        const memoizedCloneIfNeeded = doc => {\n          if (docMap.has(doc._id)) {\n            return docMap.get(doc._id);\n          }\n\n          const docToMemoize = (\n            idsMatched &&\n            !idsMatched.some(id => EJSON.equals(id, doc._id))\n          ) ? doc : EJSON.clone(doc);\n\n          docMap.set(doc._id, docToMemoize);\n\n          return docToMemoize;\n        };\n\n        qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);\n      }\n    });\n\n    const recomputeQids = {};\n\n    let updateCount = 0;\n\n    this._eachPossiblyMatchingDoc(selector, (doc, id) => {\n      const queryResult = matcher.documentMatches(doc);\n\n      if (queryResult.result) {\n        // XXX Should we save the original even if mod ends up being a no-op?\n        this._saveOriginal(id, doc);\n        this._modifyAndNotify(\n          doc,\n          mod,\n          recomputeQids,\n          queryResult.arrayIndices\n        );\n\n        ++updateCount;\n\n        if (!options.multi) {\n          return false; // break\n        }\n      }\n\n      return true;\n    });\n\n    Object.keys(recomputeQids).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query) {\n        this._recomputeResults(query, qidToOriginalResults[qid]);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    // If we are doing an upsert, and we didn't modify any documents yet, then\n    // it's time to do an insert. Figure out what document we are inserting, and\n    // generate an id for it.\n    let insertedId;\n    if (updateCount === 0 && options.upsert) {\n      const doc = LocalCollection._createUpsertDocument(selector, mod);\n      if (! doc._id && options.insertedId) {\n        doc._id = options.insertedId;\n      }\n\n      insertedId = this.insert(doc);\n      updateCount = 1;\n    }\n\n    // Return the number of affected documents, or in the upsert case, an object\n    // containing the number of affected docs and the id of the doc that was\n    // inserted, if any.\n    let result;\n    if (options._returnObject) {\n      result = {numberAffected: updateCount};\n\n      if (insertedId !== undefined) {\n        result.insertedId = insertedId;\n      }\n    } else {\n      result = updateCount;\n    }\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  }\n\n  // A convenience wrapper on update. LocalCollection.upsert(sel, mod) is\n  // equivalent to LocalCollection.update(sel, mod, {upsert: true,\n  // _returnObject: true}).\n  upsert(selector, mod, options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    return this.update(\n      selector,\n      mod,\n      Object.assign({}, options, {upsert: true, _returnObject: true}),\n      callback\n    );\n  }\n\n  // Iterates over a subset of documents that could match selector; calls\n  // fn(doc, id) on each of them.  Specifically, if selector specifies\n  // specific _id's, it only looks at those.  doc is *not* cloned: it is the\n  // same object that is in _docs.\n  _eachPossiblyMatchingDoc(selector, fn) {\n    const specificIds = LocalCollection._idsMatchedBySelector(selector);\n\n    if (specificIds) {\n      specificIds.some(id => {\n        const doc = this._docs.get(id);\n\n        if (doc) {\n          return fn(doc, id) === false;\n        }\n      });\n    } else {\n      this._docs.forEach(fn);\n    }\n  }\n\n  _modifyAndNotify(doc, mod, recomputeQids, arrayIndices) {\n    const matched_before = {};\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      if (query.ordered) {\n        matched_before[qid] = query.matcher.documentMatches(doc).result;\n      } else {\n        // Because we don't support skip or limit (yet) in unordered queries, we\n        // can just do a direct lookup.\n        matched_before[qid] = query.results.has(doc._id);\n      }\n    });\n\n    const old_doc = EJSON.clone(doc);\n\n    LocalCollection._modify(doc, mod, {arrayIndices});\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      const afterMatch = query.matcher.documentMatches(doc);\n      const after = afterMatch.result;\n      const before = matched_before[qid];\n\n      if (after && query.distances && afterMatch.distance !== undefined) {\n        query.distances.set(doc._id, afterMatch.distance);\n      }\n\n      if (query.cursor.skip || query.cursor.limit) {\n        // We need to recompute any query where the doc may have been in the\n        // cursor's window either before or after the update. (Note that if skip\n        // or limit is set, \"before\" and \"after\" being true do not necessarily\n        // mean that the document is in the cursor's output after skip/limit is\n        // applied... but if they are false, then the document definitely is NOT\n        // in the output. So it's safe to skip recompute if neither before or\n        // after are true.)\n        if (before || after) {\n          recomputeQids[qid] = true;\n        }\n      } else if (before && !after) {\n        LocalCollection._removeFromResults(query, doc);\n      } else if (!before && after) {\n        LocalCollection._insertInResults(query, doc);\n      } else if (before && after) {\n        LocalCollection._updateInResults(query, doc, old_doc);\n      }\n    });\n  }\n\n  // Recomputes the results of a query and runs observe callbacks for the\n  // difference between the previous results and the current results (unless\n  // paused). Used for skip/limit queries.\n  //\n  // When this is used by insert or remove, it can just use query.results for\n  // the old results (and there's no need to pass in oldResults), because these\n  // operations don't mutate the documents in the collection. Update needs to\n  // pass in an oldResults which was deep-copied before the modifier was\n  // applied.\n  //\n  // oldResults is guaranteed to be ignored if the query is not paused.\n  _recomputeResults(query, oldResults) {\n    if (this.paused) {\n      // There's no reason to recompute the results now as we're still paused.\n      // By flagging the query as \"dirty\", the recompute will be performed\n      // when resumeObservers is called.\n      query.dirty = true;\n      return;\n    }\n\n    if (!this.paused && !oldResults) {\n      oldResults = query.results;\n    }\n\n    if (query.distances) {\n      query.distances.clear();\n    }\n\n    query.results = query.cursor._getRawObjects({\n      distances: query.distances,\n      ordered: query.ordered\n    });\n\n    if (!this.paused) {\n      LocalCollection._diffQueryChanges(\n        query.ordered,\n        oldResults,\n        query.results,\n        query,\n        {projectionFn: query.projectionFn}\n      );\n    }\n  }\n\n  _saveOriginal(id, doc) {\n    // Are we even trying to save originals?\n    if (!this._savedOriginals) {\n      return;\n    }\n\n    // Have we previously mutated the original (and so 'doc' is not actually\n    // original)?  (Note the 'has' check rather than truth: we store undefined\n    // here for inserted docs!)\n    if (this._savedOriginals.has(id)) {\n      return;\n    }\n\n    this._savedOriginals.set(id, EJSON.clone(doc));\n  }\n}\n\nLocalCollection.Cursor = Cursor;\n\nLocalCollection.ObserveHandle = ObserveHandle;\n\n// XXX maybe move these into another ObserveHelpers package or something\n\n// _CachingChangeObserver is an object which receives observeChanges callbacks\n// and keeps a cache of the current cursor state up to date in this.docs. Users\n// of this class should read the docs field but not modify it. You should pass\n// the \"applyChange\" field as the callbacks to the underlying observeChanges\n// call. Optionally, you can specify your own observeChanges callbacks which are\n// invoked immediately before the docs field is updated; this object is made\n// available as `this` to those callbacks.\nLocalCollection._CachingChangeObserver = class _CachingChangeObserver {\n  constructor(options = {}) {\n    const orderedFromCallbacks = (\n      options.callbacks &&\n      LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks)\n    );\n\n    if (hasOwn.call(options, 'ordered')) {\n      this.ordered = options.ordered;\n\n      if (options.callbacks && options.ordered !== orderedFromCallbacks) {\n        throw Error('ordered option doesn\\'t match callbacks');\n      }\n    } else if (options.callbacks) {\n      this.ordered = orderedFromCallbacks;\n    } else {\n      throw Error('must provide ordered or callbacks');\n    }\n\n    const callbacks = options.callbacks || {};\n\n    if (this.ordered) {\n      this.docs = new OrderedDict(MongoID.idStringify);\n      this.applyChange = {\n        addedBefore: (id, fields, before) => {\n          const doc = EJSON.clone(fields);\n\n          doc._id = id;\n\n          if (callbacks.addedBefore) {\n            callbacks.addedBefore.call(this, id, fields, before);\n          }\n\n          // This line triggers if we provide added with movedBefore.\n          if (callbacks.added) {\n            callbacks.added.call(this, id, fields);\n          }\n\n          // XXX could `before` be a falsy ID?  Technically\n          // idStringify seems to allow for them -- though\n          // OrderedDict won't call stringify on a falsy arg.\n          this.docs.putBefore(id, doc, before || null);\n        },\n        movedBefore: (id, before) => {\n          const doc = this.docs.get(id);\n\n          if (callbacks.movedBefore) {\n            callbacks.movedBefore.call(this, id, before);\n          }\n\n          this.docs.moveBefore(id, before || null);\n        },\n      };\n    } else {\n      this.docs = new LocalCollection._IdMap;\n      this.applyChange = {\n        added: (id, fields) => {\n          const doc = EJSON.clone(fields);\n\n          if (callbacks.added) {\n            callbacks.added.call(this, id, fields);\n          }\n\n          doc._id = id;\n\n          this.docs.set(id,  doc);\n        },\n      };\n    }\n\n    // The methods in _IdMap and OrderedDict used by these callbacks are\n    // identical.\n    this.applyChange.changed = (id, fields) => {\n      const doc = this.docs.get(id);\n\n      if (!doc) {\n        throw new Error(`Unknown id for changed: ${id}`);\n      }\n\n      if (callbacks.changed) {\n        callbacks.changed.call(this, id, EJSON.clone(fields));\n      }\n\n      DiffSequence.applyChanges(doc, fields);\n    };\n\n    this.applyChange.removed = id => {\n      if (callbacks.removed) {\n        callbacks.removed.call(this, id);\n      }\n\n      this.docs.remove(id);\n    };\n  }\n};\n\nLocalCollection._IdMap = class _IdMap extends IdMap {\n  constructor() {\n    super(MongoID.idStringify, MongoID.idParse);\n  }\n};\n\n// Wrap a transform function to return objects that have the _id field\n// of the untransformed document. This ensures that subsystems such as\n// the observe-sequence package that call `observe` can keep track of\n// the documents identities.\n//\n// - Require that it returns objects\n// - If the return value has an _id field, verify that it matches the\n//   original _id field\n// - If the return value doesn't have an _id field, add it back.\nLocalCollection.wrapTransform = transform => {\n  if (!transform) {\n    return null;\n  }\n\n  // No need to doubly-wrap transforms.\n  if (transform.__wrappedTransform__) {\n    return transform;\n  }\n\n  const wrapped = doc => {\n    if (!hasOwn.call(doc, '_id')) {\n      // XXX do we ever have a transform on the oplog's collection? because that\n      // collection has no _id.\n      throw new Error('can only transform documents with _id');\n    }\n\n    const id = doc._id;\n\n    // XXX consider making tracker a weak dependency and checking\n    // Package.tracker here\n    const transformed = Tracker.nonreactive(() => transform(doc));\n\n    if (!LocalCollection._isPlainObject(transformed)) {\n      throw new Error('transform must return object');\n    }\n\n    if (hasOwn.call(transformed, '_id')) {\n      if (!EJSON.equals(transformed._id, id)) {\n        throw new Error('transformed document can\\'t have different _id');\n      }\n    } else {\n      transformed._id = id;\n    }\n\n    return transformed;\n  };\n\n  wrapped.__wrappedTransform__ = true;\n\n  return wrapped;\n};\n\n// XXX the sorted-query logic below is laughably inefficient. we'll\n// need to come up with a better datastructure for this.\n//\n// XXX the logic for observing with a skip or a limit is even more\n// laughably inefficient. we recompute the whole results every time!\n\n// This binary search puts a value between any equal values, and the first\n// lesser value.\nLocalCollection._binarySearch = (cmp, array, value) => {\n  let first = 0;\n  let range = array.length;\n\n  while (range > 0) {\n    const halfRange = Math.floor(range / 2);\n\n    if (cmp(value, array[first + halfRange]) >= 0) {\n      first += halfRange + 1;\n      range -= halfRange + 1;\n    } else {\n      range = halfRange;\n    }\n  }\n\n  return first;\n};\n\nLocalCollection._checkSupportedProjection = fields => {\n  if (fields !== Object(fields) || Array.isArray(fields)) {\n    throw MinimongoError('fields option must be an object');\n  }\n\n  Object.keys(fields).forEach(keyPath => {\n    if (keyPath.split('.').includes('$')) {\n      throw MinimongoError(\n        'Minimongo doesn\\'t support $ operator in projections yet.'\n      );\n    }\n\n    const value = fields[keyPath];\n\n    if (typeof value === 'object' &&\n        ['$elemMatch', '$meta', '$slice'].some(key =>\n          hasOwn.call(value, key)\n        )) {\n      throw MinimongoError(\n        'Minimongo doesn\\'t support operators in projections yet.'\n      );\n    }\n\n    if (![1, 0, true, false].includes(value)) {\n      throw MinimongoError(\n        'Projection values should be one of 1, 0, true, or false'\n      );\n    }\n  });\n};\n\n// Knows how to compile a fields projection to a predicate function.\n// @returns - Function: a closure that filters out an object according to the\n//            fields projection rules:\n//            @param obj - Object: MongoDB-styled document\n//            @returns - Object: a document with the fields filtered out\n//                       according to projection rules. Doesn't retain subfields\n//                       of passed argument.\nLocalCollection._compileProjection = fields => {\n  LocalCollection._checkSupportedProjection(fields);\n\n  const _idProjection = fields._id === undefined ? true : fields._id;\n  const details = projectionDetails(fields);\n\n  // returns transformed doc according to ruleTree\n  const transform = (doc, ruleTree) => {\n    // Special case for \"sets\"\n    if (Array.isArray(doc)) {\n      return doc.map(subdoc => transform(subdoc, ruleTree));\n    }\n\n    const result = details.including ? {} : EJSON.clone(doc);\n\n    Object.keys(ruleTree).forEach(key => {\n      if (!hasOwn.call(doc, key)) {\n        return;\n      }\n\n      const rule = ruleTree[key];\n\n      if (rule === Object(rule)) {\n        // For sub-objects/subsets we branch\n        if (doc[key] === Object(doc[key])) {\n          result[key] = transform(doc[key], rule);\n        }\n      } else if (details.including) {\n        // Otherwise we don't even touch this subfield\n        result[key] = EJSON.clone(doc[key]);\n      } else {\n        delete result[key];\n      }\n    });\n\n    return result;\n  };\n\n  return doc => {\n    const result = transform(doc, details.tree);\n\n    if (_idProjection && hasOwn.call(doc, '_id')) {\n      result._id = doc._id;\n    }\n\n    if (!_idProjection && hasOwn.call(result, '_id')) {\n      delete result._id;\n    }\n\n    return result;\n  };\n};\n\n// Calculates the document to insert in case we're doing an upsert and the\n// selector does not match any elements\nLocalCollection._createUpsertDocument = (selector, modifier) => {\n  const selectorDocument = populateDocumentWithQueryFields(selector);\n  const isModify = LocalCollection._isModificationMod(modifier);\n\n  const newDoc = {};\n\n  if (selectorDocument._id) {\n    newDoc._id = selectorDocument._id;\n    delete selectorDocument._id;\n  }\n\n  // This double _modify call is made to help with nested properties (see issue\n  // #8631). We do this even if it's a replacement for validation purposes (e.g.\n  // ambiguous id's)\n  LocalCollection._modify(newDoc, {$set: selectorDocument});\n  LocalCollection._modify(newDoc, modifier, {isInsert: true});\n\n  if (isModify) {\n    return newDoc;\n  }\n\n  // Replacement can take _id from query document\n  const replacement = Object.assign({}, modifier);\n  if (newDoc._id) {\n    replacement._id = newDoc._id;\n  }\n\n  return replacement;\n};\n\nLocalCollection._diffObjects = (left, right, callbacks) => {\n  return DiffSequence.diffObjects(left, right, callbacks);\n};\n\n// ordered: bool.\n// old_results and new_results: collections of documents.\n//    if ordered, they are arrays.\n//    if unordered, they are IdMaps\nLocalCollection._diffQueryChanges = (ordered, oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options)\n;\n\nLocalCollection._diffQueryOrderedChanges = (oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options)\n;\n\nLocalCollection._diffQueryUnorderedChanges = (oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options)\n;\n\nLocalCollection._findInOrderedResults = (query, doc) => {\n  if (!query.ordered) {\n    throw new Error('Can\\'t call _findInOrderedResults on unordered query');\n  }\n\n  for (let i = 0; i < query.results.length; i++) {\n    if (query.results[i] === doc) {\n      return i;\n    }\n  }\n\n  throw Error('object missing from query');\n};\n\n// If this is a selector which explicitly constrains the match by ID to a finite\n// number of documents, returns a list of their IDs.  Otherwise returns\n// null. Note that the selector may have other restrictions so it may not even\n// match those document!  We care about $in and $and since those are generated\n// access-controlled update and remove.\nLocalCollection._idsMatchedBySelector = selector => {\n  // Is the selector just an ID?\n  if (LocalCollection._selectorIsId(selector)) {\n    return [selector];\n  }\n\n  if (!selector) {\n    return null;\n  }\n\n  // Do we have an _id clause?\n  if (hasOwn.call(selector, '_id')) {\n    // Is the _id clause just an ID?\n    if (LocalCollection._selectorIsId(selector._id)) {\n      return [selector._id];\n    }\n\n    // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?\n    if (selector._id\n        && Array.isArray(selector._id.$in)\n        && selector._id.$in.length\n        && selector._id.$in.every(LocalCollection._selectorIsId)) {\n      return selector._id.$in;\n    }\n\n    return null;\n  }\n\n  // If this is a top-level $and, and any of the clauses constrain their\n  // documents, then the whole selector is constrained by any one clause's\n  // constraint. (Well, by their intersection, but that seems unlikely.)\n  if (Array.isArray(selector.$and)) {\n    for (let i = 0; i < selector.$and.length; ++i) {\n      const subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);\n\n      if (subIds) {\n        return subIds;\n      }\n    }\n  }\n\n  return null;\n};\n\nLocalCollection._insertInResults = (query, doc) => {\n  const fields = EJSON.clone(doc);\n\n  delete fields._id;\n\n  if (query.ordered) {\n    if (!query.sorter) {\n      query.addedBefore(doc._id, query.projectionFn(fields), null);\n      query.results.push(doc);\n    } else {\n      const i = LocalCollection._insertInSortedList(\n        query.sorter.getComparator({distances: query.distances}),\n        query.results,\n        doc\n      );\n\n      let next = query.results[i + 1];\n      if (next) {\n        next = next._id;\n      } else {\n        next = null;\n      }\n\n      query.addedBefore(doc._id, query.projectionFn(fields), next);\n    }\n\n    query.added(doc._id, query.projectionFn(fields));\n  } else {\n    query.added(doc._id, query.projectionFn(fields));\n    query.results.set(doc._id, doc);\n  }\n};\n\nLocalCollection._insertInSortedList = (cmp, array, value) => {\n  if (array.length === 0) {\n    array.push(value);\n    return 0;\n  }\n\n  const i = LocalCollection._binarySearch(cmp, array, value);\n\n  array.splice(i, 0, value);\n\n  return i;\n};\n\nLocalCollection._isModificationMod = mod => {\n  let isModify = false;\n  let isReplace = false;\n\n  Object.keys(mod).forEach(key => {\n    if (key.substr(0, 1) === '$') {\n      isModify = true;\n    } else {\n      isReplace = true;\n    }\n  });\n\n  if (isModify && isReplace) {\n    throw new Error(\n      'Update parameter cannot have both modifier and non-modifier fields.'\n    );\n  }\n\n  return isModify;\n};\n\n// XXX maybe this should be EJSON.isObject, though EJSON doesn't know about\n// RegExp\n// XXX note that _type(undefined) === 3!!!!\nLocalCollection._isPlainObject = x => {\n  return x && LocalCollection._f._type(x) === 3;\n};\n\n// XXX need a strategy for passing the binding of $ into this\n// function, from the compiled selector\n//\n// maybe just {key.up.to.just.before.dollarsign: array_index}\n//\n// XXX atomicity: if one modification fails, do we roll back the whole\n// change?\n//\n// options:\n//   - isInsert is set when _modify is being called to compute the document to\n//     insert as part of an upsert operation. We use this primarily to figure\n//     out when to set the fields in $setOnInsert, if present.\nLocalCollection._modify = (doc, modifier, options = {}) => {\n  if (!LocalCollection._isPlainObject(modifier)) {\n    throw MinimongoError('Modifier must be an object');\n  }\n\n  // Make sure the caller can't mutate our data structures.\n  modifier = EJSON.clone(modifier);\n\n  const isModifier = isOperatorObject(modifier);\n  const newDoc = isModifier ? EJSON.clone(doc) : modifier;\n\n  if (isModifier) {\n    // apply modifiers to the doc.\n    Object.keys(modifier).forEach(operator => {\n      // Treat $setOnInsert as $set if this is an insert.\n      const setOnInsert = options.isInsert && operator === '$setOnInsert';\n      const modFunc = MODIFIERS[setOnInsert ? '$set' : operator];\n      const operand = modifier[operator];\n\n      if (!modFunc) {\n        throw MinimongoError(`Invalid modifier specified ${operator}`);\n      }\n\n      Object.keys(operand).forEach(keypath => {\n        const arg = operand[keypath];\n\n        if (keypath === '') {\n          throw MinimongoError('An empty update path is not valid.');\n        }\n\n        const keyparts = keypath.split('.');\n\n        if (!keyparts.every(Boolean)) {\n          throw MinimongoError(\n            `The update path '${keypath}' contains an empty field name, ` +\n            'which is not allowed.'\n          );\n        }\n\n        const target = findModTarget(newDoc, keyparts, {\n          arrayIndices: options.arrayIndices,\n          forbidArray: operator === '$rename',\n          noCreate: NO_CREATE_MODIFIERS[operator]\n        });\n\n        modFunc(target, keyparts.pop(), arg, keypath, newDoc);\n      });\n    });\n\n    if (doc._id && !EJSON.equals(doc._id, newDoc._id)) {\n      throw MinimongoError(\n        `After applying the update to the document {_id: \"${doc._id}\", ...},` +\n        ' the (immutable) field \\'_id\\' was found to have been altered to ' +\n        `_id: \"${newDoc._id}\"`\n      );\n    }\n  } else {\n    if (doc._id && modifier._id && !EJSON.equals(doc._id, modifier._id)) {\n      throw MinimongoError(\n        `The _id field cannot be changed from {_id: \"${doc._id}\"} to ` +\n        `{_id: \"${modifier._id}\"}`\n      );\n    }\n\n    // replace the whole document\n    assertHasValidFieldNames(modifier);\n  }\n\n  // move new document into place.\n  Object.keys(doc).forEach(key => {\n    // Note: this used to be for (var key in doc) however, this does not\n    // work right in Opera. Deleting from a doc while iterating over it\n    // would sometimes cause opera to skip some keys.\n    if (key !== '_id') {\n      delete doc[key];\n    }\n  });\n\n  Object.keys(newDoc).forEach(key => {\n    doc[key] = newDoc[key];\n  });\n};\n\nLocalCollection._observeFromObserveChanges = (cursor, observeCallbacks) => {\n  const transform = cursor.getTransform() || (doc => doc);\n  let suppressed = !!observeCallbacks._suppress_initial;\n\n  let observeChangesCallbacks;\n  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {\n    // The \"_no_indices\" option sets all index arguments to -1 and skips the\n    // linear scans required to generate them.  This lets observers that don't\n    // need absolute indices benefit from the other features of this API --\n    // relative order, transforms, and applyChanges -- without the speed hit.\n    const indices = !observeCallbacks._no_indices;\n\n    observeChangesCallbacks = {\n      addedBefore(id, fields, before) {\n        if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added)) {\n          return;\n        }\n\n        const doc = transform(Object.assign(fields, {_id: id}));\n\n        if (observeCallbacks.addedAt) {\n          observeCallbacks.addedAt(\n            doc,\n            indices\n              ? before\n                ? this.docs.indexOf(before)\n                : this.docs.size()\n              : -1,\n            before\n          );\n        } else {\n          observeCallbacks.added(doc);\n        }\n      },\n      changed(id, fields) {\n        if (!(observeCallbacks.changedAt || observeCallbacks.changed)) {\n          return;\n        }\n\n        let doc = EJSON.clone(this.docs.get(id));\n        if (!doc) {\n          throw new Error(`Unknown id for changed: ${id}`);\n        }\n\n        const oldDoc = transform(EJSON.clone(doc));\n\n        DiffSequence.applyChanges(doc, fields);\n\n        if (observeCallbacks.changedAt) {\n          observeCallbacks.changedAt(\n            transform(doc),\n            oldDoc,\n            indices ? this.docs.indexOf(id) : -1\n          );\n        } else {\n          observeCallbacks.changed(transform(doc), oldDoc);\n        }\n      },\n      movedBefore(id, before) {\n        if (!observeCallbacks.movedTo) {\n          return;\n        }\n\n        const from = indices ? this.docs.indexOf(id) : -1;\n        let to = indices\n          ? before\n            ? this.docs.indexOf(before)\n            : this.docs.size()\n          : -1;\n\n        // When not moving backwards, adjust for the fact that removing the\n        // document slides everything back one slot.\n        if (to > from) {\n          --to;\n        }\n\n        observeCallbacks.movedTo(\n          transform(EJSON.clone(this.docs.get(id))),\n          from,\n          to,\n          before || null\n        );\n      },\n      removed(id) {\n        if (!(observeCallbacks.removedAt || observeCallbacks.removed)) {\n          return;\n        }\n\n        // technically maybe there should be an EJSON.clone here, but it's about\n        // to be removed from this.docs!\n        const doc = transform(this.docs.get(id));\n\n        if (observeCallbacks.removedAt) {\n          observeCallbacks.removedAt(doc, indices ? this.docs.indexOf(id) : -1);\n        } else {\n          observeCallbacks.removed(doc);\n        }\n      },\n    };\n  } else {\n    observeChangesCallbacks = {\n      added(id, fields) {\n        if (!suppressed && observeCallbacks.added) {\n          observeCallbacks.added(transform(Object.assign(fields, {_id: id})));\n        }\n      },\n      changed(id, fields) {\n        if (observeCallbacks.changed) {\n          const oldDoc = this.docs.get(id);\n          const doc = EJSON.clone(oldDoc);\n\n          DiffSequence.applyChanges(doc, fields);\n\n          observeCallbacks.changed(\n            transform(doc),\n            transform(EJSON.clone(oldDoc))\n          );\n        }\n      },\n      removed(id) {\n        if (observeCallbacks.removed) {\n          observeCallbacks.removed(transform(this.docs.get(id)));\n        }\n      },\n    };\n  }\n\n  const changeObserver = new LocalCollection._CachingChangeObserver({\n    callbacks: observeChangesCallbacks\n  });\n\n  const handle = cursor.observeChanges(changeObserver.applyChange);\n\n  suppressed = false;\n\n  return handle;\n};\n\nLocalCollection._observeCallbacksAreOrdered = callbacks => {\n  if (callbacks.added && callbacks.addedAt) {\n    throw new Error('Please specify only one of added() and addedAt()');\n  }\n\n  if (callbacks.changed && callbacks.changedAt) {\n    throw new Error('Please specify only one of changed() and changedAt()');\n  }\n\n  if (callbacks.removed && callbacks.removedAt) {\n    throw new Error('Please specify only one of removed() and removedAt()');\n  }\n\n  return !!(\n    callbacks.addedAt ||\n    callbacks.changedAt ||\n    callbacks.movedTo ||\n    callbacks.removedAt\n  );\n};\n\nLocalCollection._observeChangesCallbacksAreOrdered = callbacks => {\n  if (callbacks.added && callbacks.addedBefore) {\n    throw new Error('Please specify only one of added() and addedBefore()');\n  }\n\n  return !!(callbacks.addedBefore || callbacks.movedBefore);\n};\n\nLocalCollection._removeFromResults = (query, doc) => {\n  if (query.ordered) {\n    const i = LocalCollection._findInOrderedResults(query, doc);\n\n    query.removed(doc._id);\n    query.results.splice(i, 1);\n  } else {\n    const id = doc._id;  // in case callback mutates doc\n\n    query.removed(doc._id);\n    query.results.remove(id);\n  }\n};\n\n// Is this selector just shorthand for lookup by _id?\nLocalCollection._selectorIsId = selector =>\n  typeof selector === 'number' ||\n  typeof selector === 'string' ||\n  selector instanceof MongoID.ObjectID\n;\n\n// Is the selector just lookup by _id (shorthand or not)?\nLocalCollection._selectorIsIdPerhapsAsObject = selector =>\n  LocalCollection._selectorIsId(selector) ||\n  LocalCollection._selectorIsId(selector && selector._id) &&\n  Object.keys(selector).length === 1\n;\n\nLocalCollection._updateInResults = (query, doc, old_doc) => {\n  if (!EJSON.equals(doc._id, old_doc._id)) {\n    throw new Error('Can\\'t change a doc\\'s _id while updating');\n  }\n\n  const projectionFn = query.projectionFn;\n  const changedFields = DiffSequence.makeChangedFields(\n    projectionFn(doc),\n    projectionFn(old_doc)\n  );\n\n  if (!query.ordered) {\n    if (Object.keys(changedFields).length) {\n      query.changed(doc._id, changedFields);\n      query.results.set(doc._id, doc);\n    }\n\n    return;\n  }\n\n  const old_idx = LocalCollection._findInOrderedResults(query, doc);\n\n  if (Object.keys(changedFields).length) {\n    query.changed(doc._id, changedFields);\n  }\n\n  if (!query.sorter) {\n    return;\n  }\n\n  // just take it out and put it back in again, and see if the index changes\n  query.results.splice(old_idx, 1);\n\n  const new_idx = LocalCollection._insertInSortedList(\n    query.sorter.getComparator({distances: query.distances}),\n    query.results,\n    doc\n  );\n\n  if (old_idx !== new_idx) {\n    let next = query.results[new_idx + 1];\n    if (next) {\n      next = next._id;\n    } else {\n      next = null;\n    }\n\n    query.movedBefore && query.movedBefore(doc._id, next);\n  }\n};\n\nconst MODIFIERS = {\n  $currentDate(target, field, arg) {\n    if (typeof arg === 'object' && hasOwn.call(arg, '$type')) {\n      if (arg.$type !== 'date') {\n        throw MinimongoError(\n          'Minimongo does currently only support the date type in ' +\n          '$currentDate modifiers',\n          {field}\n        );\n      }\n    } else if (arg !== true) {\n      throw MinimongoError('Invalid $currentDate modifier', {field});\n    }\n\n    target[field] = new Date();\n  },\n  $min(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $min allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $min modifier to non-number',\n          {field}\n        );\n      }\n\n      if (target[field] > arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $max(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $max allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $max modifier to non-number',\n          {field}\n        );\n      }\n\n      if (target[field] < arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $inc(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $inc allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $inc modifier to non-number',\n          {field}\n        );\n      }\n\n      target[field] += arg;\n    } else {\n      target[field] = arg;\n    }\n  },\n  $set(target, field, arg) {\n    if (target !== Object(target)) { // not an array or an object\n      const error = MinimongoError(\n        'Cannot set property on non-object field',\n        {field}\n      );\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    if (target === null) {\n      const error = MinimongoError('Cannot set property on null', {field});\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    assertHasValidFieldNames(arg);\n\n    target[field] = arg;\n  },\n  $setOnInsert(target, field, arg) {\n    // converted to `$set` in `_modify`\n  },\n  $unset(target, field, arg) {\n    if (target !== undefined) {\n      if (target instanceof Array) {\n        if (field in target) {\n          target[field] = null;\n        }\n      } else {\n        delete target[field];\n      }\n    }\n  },\n  $push(target, field, arg) {\n    if (target[field] === undefined) {\n      target[field] = [];\n    }\n\n    if (!(target[field] instanceof Array)) {\n      throw MinimongoError('Cannot apply $push modifier to non-array', {field});\n    }\n\n    if (!(arg && arg.$each)) {\n      // Simple mode: not $each\n      assertHasValidFieldNames(arg);\n\n      target[field].push(arg);\n\n      return;\n    }\n\n    // Fancy mode: $each (and maybe $slice and $sort and $position)\n    const toPush = arg.$each;\n    if (!(toPush instanceof Array)) {\n      throw MinimongoError('$each must be an array', {field});\n    }\n\n    assertHasValidFieldNames(toPush);\n\n    // Parse $position\n    let position = undefined;\n    if ('$position' in arg) {\n      if (typeof arg.$position !== 'number') {\n        throw MinimongoError('$position must be a numeric value', {field});\n      }\n\n      // XXX should check to make sure integer\n      if (arg.$position < 0) {\n        throw MinimongoError(\n          '$position in $push must be zero or positive',\n          {field}\n        );\n      }\n\n      position = arg.$position;\n    }\n\n    // Parse $slice.\n    let slice = undefined;\n    if ('$slice' in arg) {\n      if (typeof arg.$slice !== 'number') {\n        throw MinimongoError('$slice must be a numeric value', {field});\n      }\n\n      // XXX should check to make sure integer\n      slice = arg.$slice;\n    }\n\n    // Parse $sort.\n    let sortFunction = undefined;\n    if (arg.$sort) {\n      if (slice === undefined) {\n        throw MinimongoError('$sort requires $slice to be present', {field});\n      }\n\n      // XXX this allows us to use a $sort whose value is an array, but that's\n      // actually an extension of the Node driver, so it won't work\n      // server-side. Could be confusing!\n      // XXX is it correct that we don't do geo-stuff here?\n      sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();\n\n      toPush.forEach(element => {\n        if (LocalCollection._f._type(element) !== 3) {\n          throw MinimongoError(\n            '$push like modifiers using $sort require all elements to be ' +\n            'objects',\n            {field}\n          );\n        }\n      });\n    }\n\n    // Actually push.\n    if (position === undefined) {\n      toPush.forEach(element => {\n        target[field].push(element);\n      });\n    } else {\n      const spliceArguments = [position, 0];\n\n      toPush.forEach(element => {\n        spliceArguments.push(element);\n      });\n\n      target[field].splice(...spliceArguments);\n    }\n\n    // Actually sort.\n    if (sortFunction) {\n      target[field].sort(sortFunction);\n    }\n\n    // Actually slice.\n    if (slice !== undefined) {\n      if (slice === 0) {\n        target[field] = []; // differs from Array.slice!\n      } else if (slice < 0) {\n        target[field] = target[field].slice(slice);\n      } else {\n        target[field] = target[field].slice(0, slice);\n      }\n    }\n  },\n  $pushAll(target, field, arg) {\n    if (!(typeof arg === 'object' && arg instanceof Array)) {\n      throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only');\n    }\n\n    assertHasValidFieldNames(arg);\n\n    const toPush = target[field];\n\n    if (toPush === undefined) {\n      target[field] = arg;\n    } else if (!(toPush instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pushAll modifier to non-array',\n        {field}\n      );\n    } else {\n      toPush.push(...arg);\n    }\n  },\n  $addToSet(target, field, arg) {\n    let isEach = false;\n\n    if (typeof arg === 'object') {\n      // check if first key is '$each'\n      const keys = Object.keys(arg);\n      if (keys[0] === '$each') {\n        isEach = true;\n      }\n    }\n\n    const values = isEach ? arg.$each : [arg];\n\n    assertHasValidFieldNames(values);\n\n    const toAdd = target[field];\n    if (toAdd === undefined) {\n      target[field] = values;\n    } else if (!(toAdd instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $addToSet modifier to non-array',\n        {field}\n      );\n    } else {\n      values.forEach(value => {\n        if (toAdd.some(element => LocalCollection._f._equal(value, element))) {\n          return;\n        }\n\n        toAdd.push(value);\n      });\n    }\n  },\n  $pop(target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n\n    const toPop = target[field];\n\n    if (toPop === undefined) {\n      return;\n    }\n\n    if (!(toPop instanceof Array)) {\n      throw MinimongoError('Cannot apply $pop modifier to non-array', {field});\n    }\n\n    if (typeof arg === 'number' && arg < 0) {\n      toPop.splice(0, 1);\n    } else {\n      toPop.pop();\n    }\n  },\n  $pull(target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n\n    const toPull = target[field];\n    if (toPull === undefined) {\n      return;\n    }\n\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pull/pullAll modifier to non-array',\n        {field}\n      );\n    }\n\n    let out;\n    if (arg != null && typeof arg === 'object' && !(arg instanceof Array)) {\n      // XXX would be much nicer to compile this once, rather than\n      // for each document we modify.. but usually we're not\n      // modifying that many documents, so we'll let it slide for\n      // now\n\n      // XXX Minimongo.Matcher isn't up for the job, because we need\n      // to permit stuff like {$pull: {a: {$gt: 4}}}.. something\n      // like {$gt: 4} is not normally a complete selector.\n      // same issue as $elemMatch possibly?\n      const matcher = new Minimongo.Matcher(arg);\n\n      out = toPull.filter(element => !matcher.documentMatches(element).result);\n    } else {\n      out = toPull.filter(element => !LocalCollection._f._equal(element, arg));\n    }\n\n    target[field] = out;\n  },\n  $pullAll(target, field, arg) {\n    if (!(typeof arg === 'object' && arg instanceof Array)) {\n      throw MinimongoError(\n        'Modifier $pushAll/pullAll allowed for arrays only',\n        {field}\n      );\n    }\n\n    if (target === undefined) {\n      return;\n    }\n\n    const toPull = target[field];\n\n    if (toPull === undefined) {\n      return;\n    }\n\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pull/pullAll modifier to non-array',\n        {field}\n      );\n    }\n\n    target[field] = toPull.filter(object =>\n      !arg.some(element => LocalCollection._f._equal(object, element))\n    );\n  },\n  $rename(target, field, arg, keypath, doc) {\n    // no idea why mongo has this restriction..\n    if (keypath === arg) {\n      throw MinimongoError('$rename source must differ from target', {field});\n    }\n\n    if (target === null) {\n      throw MinimongoError('$rename source field invalid', {field});\n    }\n\n    if (typeof arg !== 'string') {\n      throw MinimongoError('$rename target must be a string', {field});\n    }\n\n    if (arg.includes('\\0')) {\n      // Null bytes are not allowed in Mongo field names\n      // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n      throw MinimongoError(\n        'The \\'to\\' field for $rename cannot contain an embedded null byte',\n        {field}\n      );\n    }\n\n    if (target === undefined) {\n      return;\n    }\n\n    const object = target[field];\n\n    delete target[field];\n\n    const keyparts = arg.split('.');\n    const target2 = findModTarget(doc, keyparts, {forbidArray: true});\n\n    if (target2 === null) {\n      throw MinimongoError('$rename target field invalid', {field});\n    }\n\n    target2[keyparts.pop()] = object;\n  },\n  $bit(target, field, arg) {\n    // XXX mongo only supports $bit on integers, and we only support\n    // native javascript numbers (doubles) so far, so we can't support $bit\n    throw MinimongoError('$bit is not supported', {field});\n  },\n  $v() {\n    // As discussed in https://github.com/meteor/meteor/issues/9623,\n    // the `$v` operator is not needed by Meteor, but problems can occur if\n    // it's not at least callable (as of Mongo >= 3.6). It's defined here as\n    // a no-op to work around these problems.\n  }\n};\n\nconst NO_CREATE_MODIFIERS = {\n  $pop: true,\n  $pull: true,\n  $pullAll: true,\n  $rename: true,\n  $unset: true\n};\n\n// Make sure field names do not contain Mongo restricted\n// characters ('.', '$', '\\0').\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\nconst invalidCharMsg = {\n  $: 'start with \\'$\\'',\n  '.': 'contain \\'.\\'',\n  '\\0': 'contain null bytes'\n};\n\n// checks if all field names in an object are valid\nfunction assertHasValidFieldNames(doc) {\n  if (doc && typeof doc === 'object') {\n    JSON.stringify(doc, (key, value) => {\n      assertIsValidFieldName(key);\n      return value;\n    });\n  }\n}\n\nfunction assertIsValidFieldName(key) {\n  let match;\n  if (typeof key === 'string' && (match = key.match(/^\\$|\\.|\\0/))) {\n    throw MinimongoError(`Key ${key} must not ${invalidCharMsg[match[0]]}`);\n  }\n}\n\n// for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],\n// and then you would operate on the 'e' property of the returned\n// object.\n//\n// if options.noCreate is falsey, creates intermediate levels of\n// structure as necessary, like mkdir -p (and raises an exception if\n// that would mean giving a non-numeric property to an array.) if\n// options.noCreate is true, return undefined instead.\n//\n// may modify the last element of keyparts to signal to the caller that it needs\n// to use a different value to index into the returned object (for example,\n// ['a', '01'] -> ['a', 1]).\n//\n// if forbidArray is true, return null if the keypath goes through an array.\n//\n// if options.arrayIndices is set, use its first element for the (first) '$' in\n// the path.\nfunction findModTarget(doc, keyparts, options = {}) {\n  let usedArrayIndex = false;\n\n  for (let i = 0; i < keyparts.length; i++) {\n    const last = i === keyparts.length - 1;\n    let keypart = keyparts[i];\n\n    if (!isIndexable(doc)) {\n      if (options.noCreate) {\n        return undefined;\n      }\n\n      const error = MinimongoError(\n        `cannot use the part '${keypart}' to traverse ${doc}`\n      );\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    if (doc instanceof Array) {\n      if (options.forbidArray) {\n        return null;\n      }\n\n      if (keypart === '$') {\n        if (usedArrayIndex) {\n          throw MinimongoError('Too many positional (i.e. \\'$\\') elements');\n        }\n\n        if (!options.arrayIndices || !options.arrayIndices.length) {\n          throw MinimongoError(\n            'The positional operator did not find the match needed from the ' +\n            'query'\n          );\n        }\n\n        keypart = options.arrayIndices[0];\n        usedArrayIndex = true;\n      } else if (isNumericKey(keypart)) {\n        keypart = parseInt(keypart);\n      } else {\n        if (options.noCreate) {\n          return undefined;\n        }\n\n        throw MinimongoError(\n          `can't append to array using string field name [${keypart}]`\n        );\n      }\n\n      if (last) {\n        keyparts[i] = keypart; // handle 'a.01'\n      }\n\n      if (options.noCreate && keypart >= doc.length) {\n        return undefined;\n      }\n\n      while (doc.length < keypart) {\n        doc.push(null);\n      }\n\n      if (!last) {\n        if (doc.length === keypart) {\n          doc.push({});\n        } else if (typeof doc[keypart] !== 'object') {\n          throw MinimongoError(\n            `can't modify field '${keyparts[i + 1]}' of list value ` +\n            JSON.stringify(doc[keypart])\n          );\n        }\n      }\n    } else {\n      assertIsValidFieldName(keypart);\n\n      if (!(keypart in doc)) {\n        if (options.noCreate) {\n          return undefined;\n        }\n\n        if (!last) {\n          doc[keypart] = {};\n        }\n      }\n    }\n\n    if (last) {\n      return doc;\n    }\n\n    doc = doc[keypart];\n  }\n\n  // notreached\n}\n","import LocalCollection from './local_collection.js';\nimport {\n  compileDocumentSelector,\n  hasOwn,\n  nothingMatcher,\n} from './common.js';\n\n// The minimongo selector compiler!\n\n// Terminology:\n//  - a 'selector' is the EJSON object representing a selector\n//  - a 'matcher' is its compiled form (whether a full Minimongo.Matcher\n//    object or one of the component lambdas that matches parts of it)\n//  - a 'result object' is an object with a 'result' field and maybe\n//    distance and arrayIndices.\n//  - a 'branched value' is an object with a 'value' field and maybe\n//    'dontIterate' and 'arrayIndices'.\n//  - a 'document' is a top-level object that can be stored in a collection.\n//  - a 'lookup function' is a function that takes in a document and returns\n//    an array of 'branched values'.\n//  - a 'branched matcher' maps from an array of branched values to a result\n//    object.\n//  - an 'element matcher' maps from a single value to a bool.\n\n// Main entry point.\n//   var matcher = new Minimongo.Matcher({a: {$gt: 5}});\n//   if (matcher.documentMatches({a: 7})) ...\nexport default class Matcher {\n  constructor(selector, isUpdate) {\n    // A set (object mapping string -> *) of all of the document paths looked\n    // at by the selector. Also includes the empty string if it may look at any\n    // path (eg, $where).\n    this._paths = {};\n    // Set to true if compilation finds a $near.\n    this._hasGeoQuery = false;\n    // Set to true if compilation finds a $where.\n    this._hasWhere = false;\n    // Set to false if compilation finds anything other than a simple equality\n    // or one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used\n    // with scalars as operands.\n    this._isSimple = true;\n    // Set to a dummy document which always matches this Matcher. Or set to null\n    // if such document is too hard to find.\n    this._matchingDocument = undefined;\n    // A clone of the original selector. It may just be a function if the user\n    // passed in a function; otherwise is definitely an object (eg, IDs are\n    // translated into {_id: ID} first. Used by canBecomeTrueByModifier and\n    // Sorter._useWithMatcher.\n    this._selector = null;\n    this._docMatcher = this._compileSelector(selector);\n    // Set to true if selection is done for an update operation\n    // Default is false\n    // Used for $near array update (issue #3599)\n    this._isUpdate = isUpdate;\n  }\n\n  documentMatches(doc) {\n    if (doc !== Object(doc)) {\n      throw Error('documentMatches needs a document');\n    }\n\n    return this._docMatcher(doc);\n  }\n\n  hasGeoQuery() {\n    return this._hasGeoQuery;\n  }\n\n  hasWhere() {\n    return this._hasWhere;\n  }\n\n  isSimple() {\n    return this._isSimple;\n  }\n\n  // Given a selector, return a function that takes one argument, a\n  // document. It returns a result object.\n  _compileSelector(selector) {\n    // you can pass a literal function instead of a selector\n    if (selector instanceof Function) {\n      this._isSimple = false;\n      this._selector = selector;\n      this._recordPathUsed('');\n\n      return doc => ({result: !!selector.call(doc)});\n    }\n\n    // shorthand -- scalar _id\n    if (LocalCollection._selectorIsId(selector)) {\n      this._selector = {_id: selector};\n      this._recordPathUsed('_id');\n\n      return doc => ({result: EJSON.equals(doc._id, selector)});\n    }\n\n    // protect against dangerous selectors.  falsey and {_id: falsey} are both\n    // likely programmer error, and not what you want, particularly for\n    // destructive operations.\n    if (!selector || hasOwn.call(selector, '_id') && !selector._id) {\n      this._isSimple = false;\n      return nothingMatcher;\n    }\n\n    // Top level can't be an array or true or binary.\n    if (Array.isArray(selector) ||\n        EJSON.isBinary(selector) ||\n        typeof selector === 'boolean') {\n      throw new Error(`Invalid selector: ${selector}`);\n    }\n\n    this._selector = EJSON.clone(selector);\n\n    return compileDocumentSelector(selector, this, {isRoot: true});\n  }\n\n  // Returns a list of key paths the given selector is looking for. It includes\n  // the empty string if there is a $where.\n  _getPaths() {\n    return Object.keys(this._paths);\n  }\n\n  _recordPathUsed(path) {\n    this._paths[path] = true;\n  }\n}\n\n// helpers used by compiled selector code\nLocalCollection._f = {\n  // XXX for _all and _in, consider building 'inquery' at compile time..\n  _type(v) {\n    if (typeof v === 'number') {\n      return 1;\n    }\n\n    if (typeof v === 'string') {\n      return 2;\n    }\n\n    if (typeof v === 'boolean') {\n      return 8;\n    }\n\n    if (Array.isArray(v)) {\n      return 4;\n    }\n\n    if (v === null) {\n      return 10;\n    }\n\n    // note that typeof(/x/) === \"object\"\n    if (v instanceof RegExp) {\n      return 11;\n    }\n\n    if (typeof v === 'function') {\n      return 13;\n    }\n\n    if (v instanceof Date) {\n      return 9;\n    }\n\n    if (EJSON.isBinary(v)) {\n      return 5;\n    }\n\n    if (v instanceof MongoID.ObjectID) {\n      return 7;\n    }\n\n    // object\n    return 3;\n\n    // XXX support some/all of these:\n    // 14, symbol\n    // 15, javascript code with scope\n    // 16, 18: 32-bit/64-bit integer\n    // 17, timestamp\n    // 255, minkey\n    // 127, maxkey\n  },\n\n  // deep equality test: use for literal document and array matches\n  _equal(a, b) {\n    return EJSON.equals(a, b, {keyOrderSensitive: true});\n  },\n\n  // maps a type code to a value that can be used to sort values of different\n  // types\n  _typeorder(t) {\n    // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types\n    // XXX what is the correct sort position for Javascript code?\n    // ('100' in the matrix below)\n    // XXX minkey/maxkey\n    return [\n      -1,  // (not a type)\n      1,   // number\n      2,   // string\n      3,   // object\n      4,   // array\n      5,   // binary\n      -1,  // deprecated\n      6,   // ObjectID\n      7,   // bool\n      8,   // Date\n      0,   // null\n      9,   // RegExp\n      -1,  // deprecated\n      100, // JS code\n      2,   // deprecated (symbol)\n      100, // JS code\n      1,   // 32-bit int\n      8,   // Mongo timestamp\n      1    // 64-bit int\n    ][t];\n  },\n\n  // compare two values of unknown type according to BSON ordering\n  // semantics. (as an extension, consider 'undefined' to be less than\n  // any other value.) return negative if a is less, positive if b is\n  // less, or 0 if equal\n  _cmp(a, b) {\n    if (a === undefined) {\n      return b === undefined ? 0 : -1;\n    }\n\n    if (b === undefined) {\n      return 1;\n    }\n\n    let ta = LocalCollection._f._type(a);\n    let tb = LocalCollection._f._type(b);\n\n    const oa = LocalCollection._f._typeorder(ta);\n    const ob = LocalCollection._f._typeorder(tb);\n\n    if (oa !== ob) {\n      return oa < ob ? -1 : 1;\n    }\n\n    // XXX need to implement this if we implement Symbol or integers, or\n    // Timestamp\n    if (ta !== tb) {\n      throw Error('Missing type coercion logic in _cmp');\n    }\n\n    if (ta === 7) { // ObjectID\n      // Convert to string.\n      ta = tb = 2;\n      a = a.toHexString();\n      b = b.toHexString();\n    }\n\n    if (ta === 9) { // Date\n      // Convert to millis.\n      ta = tb = 1;\n      a = a.getTime();\n      b = b.getTime();\n    }\n\n    if (ta === 1) // double\n      return a - b;\n\n    if (tb === 2) // string\n      return a < b ? -1 : a === b ? 0 : 1;\n\n    if (ta === 3) { // Object\n      // this could be much more efficient in the expected case ...\n      const toArray = object => {\n        const result = [];\n\n        Object.keys(object).forEach(key => {\n          result.push(key, object[key]);\n        });\n\n        return result;\n      };\n\n      return LocalCollection._f._cmp(toArray(a), toArray(b));\n    }\n\n    if (ta === 4) { // Array\n      for (let i = 0; ; i++) {\n        if (i === a.length) {\n          return i === b.length ? 0 : -1;\n        }\n\n        if (i === b.length) {\n          return 1;\n        }\n\n        const s = LocalCollection._f._cmp(a[i], b[i]);\n        if (s !== 0) {\n          return s;\n        }\n      }\n    }\n\n    if (ta === 5) { // binary\n      // Surprisingly, a small binary blob is always less than a large one in\n      // Mongo.\n      if (a.length !== b.length) {\n        return a.length - b.length;\n      }\n\n      for (let i = 0; i < a.length; i++) {\n        if (a[i] < b[i]) {\n          return -1;\n        }\n\n        if (a[i] > b[i]) {\n          return 1;\n        }\n      }\n\n      return 0;\n    }\n\n    if (ta === 8) { // boolean\n      if (a) {\n        return b ? 0 : 1;\n      }\n\n      return b ? -1 : 0;\n    }\n\n    if (ta === 10) // null\n      return 0;\n\n    if (ta === 11) // regexp\n      throw Error('Sorting not supported on regular expression'); // XXX\n\n    // 13: javascript code\n    // 14: symbol\n    // 15: javascript code with scope\n    // 16: 32-bit integer\n    // 17: timestamp\n    // 18: 64-bit integer\n    // 255: minkey\n    // 127: maxkey\n    if (ta === 13) // javascript code\n      throw Error('Sorting not supported on Javascript code'); // XXX\n\n    throw Error('Unknown type to sort');\n  },\n};\n","import LocalCollection_ from './local_collection.js';\nimport Matcher from './matcher.js';\nimport Sorter from './sorter.js';\n\nLocalCollection = LocalCollection_;\nMinimongo = {\n    LocalCollection: LocalCollection_,\n    Matcher,\n    Sorter\n};\n","// ObserveHandle: the return value of a live query.\nexport default class ObserveHandle {}\n","import {\n  ELEMENT_OPERATORS,\n  equalityElementMatcher,\n  expandArraysInBranches,\n  hasOwn,\n  isOperatorObject,\n  makeLookupFunction,\n  regexpElementMatcher,\n} from './common.js';\n\n// Give a sort spec, which can be in any of these forms:\n//   {\"key1\": 1, \"key2\": -1}\n//   [[\"key1\", \"asc\"], [\"key2\", \"desc\"]]\n//   [\"key1\", [\"key2\", \"desc\"]]\n//\n// (.. with the first form being dependent on the key enumeration\n// behavior of your javascript VM, which usually does what you mean in\n// this case if the key names don't look like integers ..)\n//\n// return a function that takes two objects, and returns -1 if the\n// first object comes first in order, 1 if the second object comes\n// first, or 0 if neither object comes before the other.\n\nexport default class Sorter {\n  constructor(spec) {\n    this._sortSpecParts = [];\n    this._sortFunction = null;\n\n    const addSpecPart = (path, ascending) => {\n      if (!path) {\n        throw Error('sort keys must be non-empty');\n      }\n\n      if (path.charAt(0) === '$') {\n        throw Error(`unsupported sort key: ${path}`);\n      }\n\n      this._sortSpecParts.push({\n        ascending,\n        lookup: makeLookupFunction(path, {forSort: true}),\n        path\n      });\n    };\n\n    if (spec instanceof Array) {\n      spec.forEach(element => {\n        if (typeof element === 'string') {\n          addSpecPart(element, true);\n        } else {\n          addSpecPart(element[0], element[1] !== 'desc');\n        }\n      });\n    } else if (typeof spec === 'object') {\n      Object.keys(spec).forEach(key => {\n        addSpecPart(key, spec[key] >= 0);\n      });\n    } else if (typeof spec === 'function') {\n      this._sortFunction = spec;\n    } else {\n      throw Error(`Bad sort specification: ${JSON.stringify(spec)}`);\n    }\n\n    // If a function is specified for sorting, we skip the rest.\n    if (this._sortFunction) {\n      return;\n    }\n\n    // To implement affectedByModifier, we piggy-back on top of Matcher's\n    // affectedByModifier code; we create a selector that is affected by the\n    // same modifiers as this sort order. This is only implemented on the\n    // server.\n    if (this.affectedByModifier) {\n      const selector = {};\n\n      this._sortSpecParts.forEach(spec => {\n        selector[spec.path] = 1;\n      });\n\n      this._selectorForAffectedByModifier = new Minimongo.Matcher(selector);\n    }\n\n    this._keyComparator = composeComparators(\n      this._sortSpecParts.map((spec, i) => this._keyFieldComparator(i))\n    );\n  }\n\n  getComparator(options) {\n    // If sort is specified or have no distances, just use the comparator from\n    // the source specification (which defaults to \"everything is equal\".\n    // issue #3599\n    // https://docs.mongodb.com/manual/reference/operator/query/near/#sort-operation\n    // sort effectively overrides $near\n    if (this._sortSpecParts.length || !options || !options.distances) {\n      return this._getBaseComparator();\n    }\n\n    const distances = options.distances;\n\n    // Return a comparator which compares using $near distances.\n    return (a, b) => {\n      if (!distances.has(a._id)) {\n        throw Error(`Missing distance for ${a._id}`);\n      }\n\n      if (!distances.has(b._id)) {\n        throw Error(`Missing distance for ${b._id}`);\n      }\n\n      return distances.get(a._id) - distances.get(b._id);\n    };\n  }\n\n  // Takes in two keys: arrays whose lengths match the number of spec\n  // parts. Returns negative, 0, or positive based on using the sort spec to\n  // compare fields.\n  _compareKeys(key1, key2) {\n    if (key1.length !== this._sortSpecParts.length ||\n        key2.length !== this._sortSpecParts.length) {\n      throw Error('Key has wrong length');\n    }\n\n    return this._keyComparator(key1, key2);\n  }\n\n  // Iterates over each possible \"key\" from doc (ie, over each branch), calling\n  // 'cb' with the key.\n  _generateKeysFromDoc(doc, cb) {\n    if (this._sortSpecParts.length === 0) {\n      throw new Error('can\\'t generate keys without a spec');\n    }\n\n    const pathFromIndices = indices => `${indices.join(',')},`;\n\n    let knownPaths = null;\n\n    // maps index -> ({'' -> value} or {path -> value})\n    const valuesByIndexAndPath = this._sortSpecParts.map(spec => {\n      // Expand any leaf arrays that we find, and ignore those arrays\n      // themselves.  (We never sort based on an array itself.)\n      let branches = expandArraysInBranches(spec.lookup(doc), true);\n\n      // If there are no values for a key (eg, key goes to an empty array),\n      // pretend we found one undefined value.\n      if (!branches.length) {\n        branches = [{ value: void 0 }];\n      }\n\n      const element = Object.create(null);\n      let usedPaths = false;\n\n      branches.forEach(branch => {\n        if (!branch.arrayIndices) {\n          // If there are no array indices for a branch, then it must be the\n          // only branch, because the only thing that produces multiple branches\n          // is the use of arrays.\n          if (branches.length > 1) {\n            throw Error('multiple branches but no array used?');\n          }\n\n          element[''] = branch.value;\n          return;\n        }\n\n        usedPaths = true;\n\n        const path = pathFromIndices(branch.arrayIndices);\n\n        if (hasOwn.call(element, path)) {\n          throw Error(`duplicate path: ${path}`);\n        }\n\n        element[path] = branch.value;\n\n        // If two sort fields both go into arrays, they have to go into the\n        // exact same arrays and we have to find the same paths.  This is\n        // roughly the same condition that makes MongoDB throw this strange\n        // error message.  eg, the main thing is that if sort spec is {a: 1,\n        // b:1} then a and b cannot both be arrays.\n        //\n        // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'\n        // and 'a.x.y' are both arrays, but we don't allow this for now.\n        // #NestedArraySort\n        // XXX achieve full compatibility here\n        if (knownPaths && !hasOwn.call(knownPaths, path)) {\n          throw Error('cannot index parallel arrays');\n        }\n      });\n\n      if (knownPaths) {\n        // Similarly to above, paths must match everywhere, unless this is a\n        // non-array field.\n        if (!hasOwn.call(element, '') &&\n            Object.keys(knownPaths).length !== Object.keys(element).length) {\n          throw Error('cannot index parallel arrays!');\n        }\n      } else if (usedPaths) {\n        knownPaths = {};\n\n        Object.keys(element).forEach(path => {\n          knownPaths[path] = true;\n        });\n      }\n\n      return element;\n    });\n\n    if (!knownPaths) {\n      // Easy case: no use of arrays.\n      const soleKey = valuesByIndexAndPath.map(values => {\n        if (!hasOwn.call(values, '')) {\n          throw Error('no value in sole key case?');\n        }\n\n        return values[''];\n      });\n\n      cb(soleKey);\n\n      return;\n    }\n\n    Object.keys(knownPaths).forEach(path => {\n      const key = valuesByIndexAndPath.map(values => {\n        if (hasOwn.call(values, '')) {\n          return values[''];\n        }\n\n        if (!hasOwn.call(values, path)) {\n          throw Error('missing path?');\n        }\n\n        return values[path];\n      });\n\n      cb(key);\n    });\n  }\n\n  // Returns a comparator that represents the sort specification (but not\n  // including a possible geoquery distance tie-breaker).\n  _getBaseComparator() {\n    if (this._sortFunction) {\n      return this._sortFunction;\n    }\n\n    // If we're only sorting on geoquery distance and no specs, just say\n    // everything is equal.\n    if (!this._sortSpecParts.length) {\n      return (doc1, doc2) => 0;\n    }\n\n    return (doc1, doc2) => {\n      const key1 = this._getMinKeyFromDoc(doc1);\n      const key2 = this._getMinKeyFromDoc(doc2);\n      return this._compareKeys(key1, key2);\n    };\n  }\n\n  // Finds the minimum key from the doc, according to the sort specs.  (We say\n  // \"minimum\" here but this is with respect to the sort spec, so \"descending\"\n  // sort fields mean we're finding the max for that field.)\n  //\n  // Note that this is NOT \"find the minimum value of the first field, the\n  // minimum value of the second field, etc\"... it's \"choose the\n  // lexicographically minimum value of the key vector, allowing only keys which\n  // you can find along the same paths\".  ie, for a doc {a: [{x: 0, y: 5}, {x:\n  // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and\n  // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.\n  _getMinKeyFromDoc(doc) {\n    let minKey = null;\n\n    this._generateKeysFromDoc(doc, key => {\n      if (minKey === null) {\n        minKey = key;\n        return;\n      }\n\n      if (this._compareKeys(key, minKey) < 0) {\n        minKey = key;\n      }\n    });\n\n    return minKey;\n  }\n\n  _getPaths() {\n    return this._sortSpecParts.map(part => part.path);\n  }\n\n  // Given an index 'i', returns a comparator that compares two key arrays based\n  // on field 'i'.\n  _keyFieldComparator(i) {\n    const invert = !this._sortSpecParts[i].ascending;\n\n    return (key1, key2) => {\n      const compare = LocalCollection._f._cmp(key1[i], key2[i]);\n      return invert ? -compare : compare;\n    };\n  }\n}\n\n// Given an array of comparators\n// (functions (a,b)->(negative or positive or zero)), returns a single\n// comparator which uses each comparator in order and returns the first\n// non-zero value.\nfunction composeComparators(comparatorArray) {\n  return (a, b) => {\n    for (let i = 0; i < comparatorArray.length; ++i) {\n      const compare = comparatorArray[i](a, b);\n      if (compare !== 0) {\n        return compare;\n      }\n    }\n\n    return 0;\n  };\n}\n"]}