{"version":3,"sources":["meteor://ðŸ’»app/packages/autoupdate/autoupdate_client.js","meteor://ðŸ’»app/packages/autoupdate/client_versions.js"],"names":["module","export","Autoupdate","ClientVersions","link","v","clientArch","Meteor","isCordova","isModern","autoupdateVersions","__meteor_runtime_config__","autoupdate","versions","version","versionRefreshable","versionNonRefreshable","assets","clientVersions","_clientVersions","connection","registerStore","createStore","newClientAvailable","knownToSupportCssOnLoad","retry","Retry","minCount","baseTimeout","failures","_retrySubscription","subscribe","onError","error","_debug","retryLater","onReady","resolved","Promise","resolve","check","doc","then","checkNewVersionDocument","stop","watch","_id","Package","reload","Reload","_reload","waitUntilCssLoads","callback","called","onload","id","setInterval","sheet","clearInterval","removeOldLinks","oldLinks","length","newLinksLeftToLoad","splice","forEach","parentNode","removeChild","newCss","Array","prototype","call","document","getElementsByTagName","className","push","css","newLink","createElement","setAttribute","url","setTimeout","head","item","appendChild","Tracker","_versions","Map","_watchCallbacks","Set","update","msg","fields","set","hasVersions","size","get","isNew","Object","assign","fn","filter","skipInitial","add","delete","currentVersion","isNewVersion","some","field","dependency","Dependency","depend","changed"],"mappings":"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","file":"/packages/autoupdate.js","sourcesContent":["// Subscribe to the `meteor_autoupdate_clientVersions` collection,\n// which contains the set of acceptable client versions.\n//\n// A \"hard code push\" occurs when the running client version is not in\n// the set of acceptable client versions (or the server updates the\n// collection, there is a published client version marked `current` and\n// the running client version is no longer in the set).\n//\n// When the `reload` package is loaded, a hard code push causes\n// the browser to reload, so that it will load the latest client\n// version from the server.\n//\n// A \"soft code push\" represents the situation when the running client\n// version is in the set of acceptable versions, but there is a newer\n// version available on the server.\n//\n// `Autoupdate.newClientAvailable` is a reactive data source which\n// becomes `true` if there is a new version of the client is available on\n// the server.\n//\n// This package doesn't implement a soft code reload process itself,\n// but `newClientAvailable` could be used for example to display a\n// \"click to reload\" link to the user.\n\n// The client version of the client code currently running in the\n// browser.\n\nimport { ClientVersions } from \"./client_versions.js\";\n\nconst clientArch = Meteor.isCordova ? \"web.cordova\" :\n  Meteor.isModern ? \"web.browser\" : \"web.browser.legacy\";\n\nconst autoupdateVersions =\n  ((__meteor_runtime_config__.autoupdate || {}).versions || {})[clientArch] || {\n    version: \"unknown\",\n    versionRefreshable: \"unknown\",\n    versionNonRefreshable: \"unknown\",\n    assets: [],\n  };\n\nexport const Autoupdate = {};\n\n// Stores acceptable client versions.\nconst clientVersions =\n  Autoupdate._clientVersions = // Used by a self-test.\n  new ClientVersions();\n\nMeteor.connection.registerStore(\n  \"meteor_autoupdate_clientVersions\",\n  clientVersions.createStore()\n);\n\nAutoupdate.newClientAvailable = function () {\n  return clientVersions.newClientAvailable(\n    clientArch,\n    [\"versionRefreshable\", \"versionNonRefreshable\"],\n    autoupdateVersions\n  );\n};\n\n// Set to true if the link.onload callback ever fires for any <link> node.\nlet knownToSupportCssOnLoad = false;\n\nconst retry = new Retry({\n  // Unlike the stream reconnect use of Retry, which we want to be instant\n  // in normal operation, this is a wacky failure. We don't want to retry\n  // right away, we can start slowly.\n  //\n  // A better way than timeconstants here might be to use the knowledge\n  // of when we reconnect to help trigger these retries. Typically, the\n  // server fixing code will result in a restart and reconnect, but\n  // potentially the subscription could have a transient error.\n  minCount: 0, // don't do any immediate retries\n  baseTimeout: 30*1000 // start with 30s\n});\n\nlet failures = 0;\n\nAutoupdate._retrySubscription = () => {\n  Meteor.subscribe(\"meteor_autoupdate_clientVersions\", {\n    onError(error) {\n      Meteor._debug(\"autoupdate subscription failed\", error);\n      failures++;\n      retry.retryLater(failures, function () {\n        // Just retry making the subscription, don't reload the whole\n        // page. While reloading would catch more cases (for example,\n        // the server went back a version and is now doing old-style hot\n        // code push), it would also be more prone to reload loops,\n        // which look really bad to the user. Just retrying the\n        // subscription over DDP means it is at least possible to fix by\n        // updating the server.\n        Autoupdate._retrySubscription();\n      });\n    },\n\n    onReady() {\n      // Call checkNewVersionDocument with a slight delay, so that the\n      // const handle declaration is guaranteed to be initialized, even if\n      // the added or changed callbacks are called synchronously.\n      const resolved = Promise.resolve();\n      function check(doc) {\n        resolved.then(() => checkNewVersionDocument(doc));\n      }\n\n      const stop = clientVersions.watch(check);\n\n      function checkNewVersionDocument(doc) {\n        if (doc._id !== clientArch) {\n          return;\n        }\n\n        if (doc.versionNonRefreshable !==\n            autoupdateVersions.versionNonRefreshable) {\n          // Non-refreshable assets have changed, so we have to reload the\n          // whole page rather than just replacing <link> tags.\n          if (stop) stop();\n          if (Package.reload) {\n            // The reload package should be provided by ddp-client, which\n            // is provided by the ddp package that autoupdate depends on.\n            Package.reload.Reload._reload();\n          }\n          return;\n        }\n\n        if (doc.versionRefreshable !== autoupdateVersions.versionRefreshable) {\n          autoupdateVersions.versionRefreshable = doc.versionRefreshable;\n\n          // Switch out old css links for the new css links. Inspired by:\n          // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710\n          var newCss = doc.assets || [];\n          var oldLinks = [];\n\n          Array.prototype.forEach.call(\n            document.getElementsByTagName('link'),\n            function (link) {\n              if (link.className === '__meteor-css__') {\n                oldLinks.push(link);\n              }\n            }\n          );\n\n          function waitUntilCssLoads(link, callback) {\n            var called;\n\n            link.onload = function () {\n              knownToSupportCssOnLoad = true;\n              if (! called) {\n                called = true;\n                callback();\n              }\n            };\n\n            if (! knownToSupportCssOnLoad) {\n              var id = Meteor.setInterval(function () {\n                if (link.sheet) {\n                  if (! called) {\n                    called = true;\n                    callback();\n                  }\n                  Meteor.clearInterval(id);\n                }\n              }, 50);\n            }\n          }\n\n          let newLinksLeftToLoad = newCss.length;\n          function removeOldLinks() {\n            if (oldLinks.length > 0 &&\n                --newLinksLeftToLoad < 1) {\n              oldLinks.splice(0).forEach(link => {\n                link.parentNode.removeChild(link);\n              });\n            }\n          }\n\n          if (newCss.length > 0) {\n            newCss.forEach(css => {\n              const newLink = document.createElement(\"link\");\n              newLink.setAttribute(\"rel\", \"stylesheet\");\n              newLink.setAttribute(\"type\", \"text/css\");\n              newLink.setAttribute(\"class\", \"__meteor-css__\");\n              newLink.setAttribute(\"href\", css.url);\n\n              waitUntilCssLoads(newLink, function () {\n                Meteor.setTimeout(removeOldLinks, 200);\n              });\n\n              const head = document.getElementsByTagName(\"head\").item(0);\n              head.appendChild(newLink);\n            });\n          } else {\n            removeOldLinks();\n          }\n        }\n      }\n    }\n  });\n};\n\nAutoupdate._retrySubscription();\n","import { Tracker } from \"meteor/tracker\";\n\nexport class ClientVersions {\n  constructor() {\n    this._versions = new Map();\n    this._watchCallbacks = new Set();\n  }\n\n  // Creates a Livedata store for use with `Meteor.connection.registerStore`.\n  // After the store is registered, document updates reported by Livedata are\n  // merged with the documents in this `ClientVersions` instance.\n  createStore() {\n    return {\n      update: ({ id, msg, fields }) => {\n        if (msg === \"added\" || msg === \"changed\") {\n          this.set(id, fields);\n        }\n      }\n    };\n  }\n\n  hasVersions() {\n    return this._versions.size > 0;\n  }\n\n  get(id) {\n    return this._versions.get(id);\n  }\n\n  // Adds or updates a version document and invokes registered callbacks for the\n  // added/updated document. If a document with the given ID already exists, its\n  // fields are merged with `fields`.\n  set(id, fields) {\n    let version = this._versions.get(id);\n    let isNew = false;\n\n    if (version) {\n      Object.assign(version, fields);\n    } else {\n      version = {\n        _id: id,\n        ...fields\n      };\n\n      isNew = true;\n      this._versions.set(id, version);\n    }\n\n    this._watchCallbacks.forEach(({ fn, filter }) => {\n      if (! filter || filter === version._id) {\n        fn(version, isNew);\n      }\n    });\n  }\n\n  // Registers a callback that will be invoked when a version document is added\n  // or changed. Calling the function returned by `watch` removes the callback.\n  // If `skipInitial` is true, the callback isn't be invoked for existing\n  // documents. If `filter` is set, the callback is only invoked for documents\n  // with ID `filter`.\n  watch(fn, { skipInitial, filter } = {}) {\n    if (! skipInitial) {\n      const resolved = Promise.resolve();\n\n      this._versions.forEach((version) => {\n        if (! filter || filter === version._id) {\n          resolved.then(() => fn(version, true));\n        }\n      });\n    }\n\n    const callback = { fn, filter };\n    this._watchCallbacks.add(callback);\n\n    return () => this._watchCallbacks.delete(callback);\n  }\n\n  // A reactive data source for `Autoupdate.newClientAvailable`.\n  newClientAvailable(id, fields, currentVersion) {\n    function isNewVersion(version) {\n      return (\n        version._id === id &&\n        fields.some((field) => version[field] !== currentVersion[field])\n      );\n    }\n\n    const dependency = new Tracker.Dependency();\n    const version = this.get(id);\n\n    dependency.depend();\n\n    const stop = this.watch(\n      (version) => {\n        if (isNewVersion(version)) {\n          dependency.changed();\n          stop();\n        }\n      },\n      { skipInitial: true }\n    );\n\n    return !! version && isNewVersion(version);\n  }\n}\n"]}