{"version":3,"sources":["meteor://ðŸ’»app/packages/reload/reload.js"],"names":["module","export","Reload","KEY_NAME","old_data","old_json","safeSessionStorage","window","sessionStorage","setItem","removeItem","e","_getData","getItem","old_parsed","JSON","parse","Meteor","_debug","err","reload","data","providers","_onMigrate","name","callback","undefined","push","_migrationData","pollProviders","tryReload","options","migrationData","remaining","slice","allReady","length","p","shift","status","immediateMigration","_migrate","json","stringify","_withFreshProvidersForTest","f","originalProviders","reloading","_reload","setTimeout","forceBrowserReload","location","hash","href","endsWith","replace","isCordova","WebAppLocalServer","switchToPendingVersion"],"mappings":"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","file":"/packages/reload.js","sourcesContent":["/**\n * This code does _NOT_ support hot (session-restoring) reloads on\n * IE6,7. It only works on browsers with sessionStorage support.\n *\n * There are a couple approaches to add IE6,7 support:\n *\n * - use IE's \"userData\" mechanism in combination with window.name.\n * This mostly works, however the problem is that it can not get to the\n * data until after DOMReady. This is a problem for us since this API\n * relies on the data being ready before API users run. We could\n * refactor using Meteor.startup in all API users, but that might slow\n * page loads as we couldn't start the stream until after DOMReady.\n * Here are some resources on this approach:\n * https://github.com/hugeinc/USTORE.js\n * http://thudjs.tumblr.com/post/419577524/localstorage-userdata\n * http://www.javascriptkit.com/javatutors/domstorage2.shtml\n *\n * - POST the data to the server, and have the server send it back on\n * page load. This is nice because it sidesteps all the local storage\n * compatibility issues, however it is kinda tricky. We can use a unique\n * token in the URL, then get rid of it with HTML5 pushstate, but that\n * only works on pushstate browsers.\n *\n * This will all need to be reworked entirely when we add server-side\n * HTML rendering. In that case, the server will need to have access to\n * the client's session to render properly.\n */\n\n// XXX when making this API public, also expose a flag for the app\n// developer to know whether a hot code push is happening. This is\n// useful for apps using `window.onbeforeunload`. See\n// https://github.com/meteor/meteor/pull/657\n\nexport const Reload = {};\n\nvar KEY_NAME = 'Meteor_Reload';\n\nvar old_data = {};\n// read in old data at startup.\nvar old_json;\n\n// This logic for sessionStorage detection is based on browserstate/history.js\nvar safeSessionStorage = null;\ntry {\n  // This throws a SecurityError on Chrome if cookies & localStorage are\n  // explicitly disabled\n  //\n  // On Firefox with dom.storage.enabled set to false, sessionStorage is null\n  //\n  // We can't even do (typeof sessionStorage) on Chrome, it throws.  So we rely\n  // on the throw if sessionStorage == null; the alternative is browser\n  // detection, but this seems better.\n  safeSessionStorage = window.sessionStorage;\n\n  // Check we can actually use it\n  if (safeSessionStorage) {\n    safeSessionStorage.setItem('__dummy__', '1');\n    safeSessionStorage.removeItem('__dummy__');\n  } else {\n    // Be consistently null, for safety\n    safeSessionStorage = null;\n  }\n} catch (e) {\n  // Expected on chrome with strict security, or if sessionStorage not supported\n  safeSessionStorage = null;\n}\n\n// Exported for test.\nReload._getData = function () {\n  return safeSessionStorage && safeSessionStorage.getItem(KEY_NAME);\n};\n\nif (safeSessionStorage) {\n  old_json = Reload._getData();\n  safeSessionStorage.removeItem(KEY_NAME);\n} else {\n  // Unsupported browser (IE 6,7) or locked down security settings.\n  // No session resumption.\n  // Meteor._debug(\"XXX UNSUPPORTED BROWSER/SETTINGS\");\n}\n\nif (!old_json) old_json = '{}';\nvar old_parsed = {};\ntry {\n  old_parsed = JSON.parse(old_json);\n  if (typeof old_parsed !== \"object\") {\n    Meteor._debug(\"Got bad data on reload. Ignoring.\");\n    old_parsed = {};\n  }\n} catch (err) {\n  Meteor._debug(\"Got invalid JSON on reload. Ignoring.\");\n}\n\nif (old_parsed.reload && typeof old_parsed.data === \"object\") {\n  // Meteor._debug(\"Restoring reload data.\");\n  old_data = old_parsed.data;\n}\n\n\nvar providers = [];\n\n////////// External API //////////\n\n// Packages that support migration should register themselves by calling\n// this function. When it's time to migrate, callback will be called\n// with one argument, the \"retry function,\" and an optional 'option'\n// argument (containing a key 'immediateMigration'). If the package\n// is ready to migrate, it should return [true, data], where data is\n// its migration data, an arbitrary JSON value (or [true] if it has\n// no migration data this time). If the package needs more time\n// before it is ready to migrate, it should return false. Then, once\n// it is ready to migrating again, it should call the retry\n// function. The retry function will return immediately, but will\n// schedule the migration to be retried, meaning that every package\n// will be polled once again for its migration data. If they are all\n// ready this time, then the migration will happen. name must be set if there\n// is migration data. If 'immediateMigration' is set in the options\n// argument, then it doesn't matter whether the package is ready to\n// migrate or not; the reload will happen immediately without waiting\n// (used for OAuth redirect login).\n//\nReload._onMigrate = function (name, callback) {\n  if (!callback) {\n    // name not provided, so first arg is callback.\n    callback = name;\n    name = undefined;\n  }\n  providers.push({ name: name, callback: callback });\n};\n\n// Called by packages when they start up.\n// Returns the object that was saved, or undefined if none saved.\n//\nReload._migrationData = function (name) {\n  return old_data[name];\n};\n\n// Options are the same as for `Reload._migrate`.\nvar pollProviders = function (tryReload, options) {\n  tryReload = tryReload || function () {};\n  options = options || {};\n\n  var migrationData = {};\n  var remaining = providers.slice(0);\n  var allReady = true;\n  while (remaining.length) {\n    var p = remaining.shift();\n    var status = p.callback(tryReload, options);\n    if (!status[0])\n      allReady = false;\n    if (status.length > 1 && p.name)\n      migrationData[p.name] = status[1];\n  };\n  if (allReady || options.immediateMigration)\n    return migrationData;\n  else\n    return null;\n};\n\n// Options are:\n//  - immediateMigration: true if the page will be reloaded immediately\n//    regardless of whether packages report that they are ready or not.\nReload._migrate = function (tryReload, options) {\n  // Make sure each package is ready to go, and collect their\n  // migration data\n  var migrationData = pollProviders(tryReload, options);\n  if (migrationData === null)\n    return false; // not ready yet..\n\n  try {\n    // Persist the migration data\n    var json = JSON.stringify({\n      data: migrationData, reload: true\n    });\n  } catch (err) {\n    Meteor._debug(\"Couldn't serialize data for migration\", migrationData);\n    throw err;\n  }\n\n  if (safeSessionStorage) {\n    try {\n      safeSessionStorage.setItem(KEY_NAME, json);\n    } catch (err) {\n      // We should have already checked this, but just log - don't throw\n      Meteor._debug(\"Couldn't save data for migration to sessionStorage\", err);\n    }\n  } else {\n    Meteor._debug(\"Browser does not support sessionStorage. Not saving migration state.\");\n  }\n\n  return true;\n};\n\n// Allows tests to isolate the list of providers.\nReload._withFreshProvidersForTest = function (f) {\n  var originalProviders = providers.slice(0);\n  providers = [];\n  try {\n    f();\n  } finally {\n    providers = originalProviders;\n  }\n};\n\n// Migrating reload: reload this page (presumably to pick up a new\n// version of the code or assets), but save the program state and\n// migrate it over. This function returns immediately. The reload\n// will happen at some point in the future once all of the packages\n// are ready to migrate.\n//\nvar reloading = false;\nReload._reload = function (options) {\n  options = options || {};\n\n  if (reloading)\n    return;\n  reloading = true;\n\n  function tryReload() {\n    setTimeout(reload, 1);\n  }\n\n  function forceBrowserReload() {\n    // We'd like to make the browser reload the page using location.replace()\n    // instead of location.reload(), because this avoids validating assets\n    // with the server if we still have a valid cached copy. This doesn't work\n    // when the location contains a hash however, because that wouldn't reload\n    // the page and just scroll to the hash location instead.\n    if (window.location.hash || window.location.href.endsWith(\"#\")) {\n      window.location.reload();\n    } else {\n      window.location.replace(window.location.href);\n    }\n  }\n\n  function reload() {\n    if (Reload._migrate(tryReload, options)) {\n      if (Meteor.isCordova) {\n        WebAppLocalServer.switchToPendingVersion(() => {\n          forceBrowserReload();\n        });\n      } else {\n        forceBrowserReload();\n      }\n    }\n  }\n\n  tryReload();\n};\n"]}