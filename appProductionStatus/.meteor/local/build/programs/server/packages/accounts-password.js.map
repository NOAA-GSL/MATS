{"version":3,"sources":["meteor://ðŸ’»app/packages/accounts-password/email_templates.js","meteor://ðŸ’»app/packages/accounts-password/password_server.js"],"names":["greet","welcomeMsg","user","url","greeting","profile","name","Accounts","emailTemplates","from","siteName","Meteor","absoluteUrl","replace","resetPassword","subject","text","verifyEmail","enrollAccount","bcrypt","NpmModuleBcrypt","bcryptHash","wrapAsync","hash","bcryptCompare","compare","_bcryptRounds","_options","bcryptRounds","getPasswordString","password","SHA256","algorithm","Error","digest","hashPassword","getRoundsFromBcryptHash","rounds","hashSegments","split","length","parseInt","_checkPassword","result","userId","_id","formattedPassword","services","hashRounds","error","handleError","defer","users","update","$set","checkPassword","msg","throwError","ambiguousErrorMessages","_findUserByQuery","query","id","findOne","fieldName","fieldValue","username","email","selector","selectorForFastCaseInsensitiveLookup","candidateUsers","find","fetch","findUserByUsername","findUserByEmail","string","prefix","substring","Math","min","orClause","_","map","generateCasePermutationsForString","prefixPermutation","RegExp","_escapeRegExp","caseInsensitiveClause","$and","$or","permutations","i","ch","charAt","flatten","lowerCaseChar","toLowerCase","upperCaseChar","toUpperCase","checkForCaseInsensitiveDuplicates","displayName","ownUserId","skipCheck","has","_skipCaseInsensitiveChecksForTest","matchedUsers","NonEmptyString","Match","Where","x","check","String","userQueryValidator","Optional","keys","passwordValidator","OneOf","registerLoginHandler","options","srp","undefined","verifier","newVerifier","SRP","generateVerifier","identity","salt","EJSON","stringify","format","v1","v2","hashedIdentityAndPassword","salted","$unset","setUsername","newUsername","oldUsername","ex","methods","changePassword","oldPassword","newPassword","hashed","currentToken","_getLoginToken","connection","$pull","hashedToken","$ne","passwordChanged","setPassword","newPlaintextPassword","extend","logout","forgotPassword","emails","pluck","caseSensitiveEmail","sendResetPasswordEmail","generateResetToken","reason","extraTokenData","address","contains","token","Random","secret","tokenRecord","when","Date","_ensure","reset","generateVerificationToken","emailRecord","e","verified","$push","verificationTokens","push","generateOptionsForEmail","to","html","headers","realEmail","urls","Email","send","sendEnrollmentEmail","self","_loginMethod","arguments","tokenLifetimeMs","_getPasswordResetTokenLifetimeMs","_getPasswordEnrollTokenLifetimeMs","currentTimeMs","now","include","oldToken","_setLoginToken","resetToOldToken","affectedRecords","err","_clearAllLoginTokens","sendVerificationEmail","t","emailsRecord","addEmail","newEmail","Boolean","isUndefined","caseInsensitiveRegExp","didUpdateOwnEmail","any","index","test","$addToSet","removeEmail","createUser","ObjectIncluding","insertUserDoc","remove","Object","forbidClientAccountCreation","callback","clone","_ensureIndex","unique","sparse"],"mappings":"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","file":"/packages/accounts-password.js","sourcesContent":["function greet(welcomeMsg) {\n  return function(user, url) {\n      var greeting = (user.profile && user.profile.name) ?\n            (\"Hello \" + user.profile.name + \",\") : \"Hello,\";\n      return `${greeting}\n\n${welcomeMsg}, simply click the link below.\n\n${url}\n\nThanks.\n`;\n  };\n}\n\n/**\n * @summary Options to customize emails sent from the Accounts system.\n * @locus Server\n * @importFromPackage accounts-base\n */\nAccounts.emailTemplates = {\n  from: \"Accounts Example <no-reply@example.com>\",\n  siteName: Meteor.absoluteUrl().replace(/^https?:\\/\\//, '').replace(/\\/$/, ''),\n\n  resetPassword: {\n    subject: function(user) {\n      return \"How to reset your password on \" + Accounts.emailTemplates.siteName;\n    },\n    text: greet(\"To reset your password\")\n  },\n  verifyEmail: {\n    subject: function(user) {\n      return \"How to verify email address on \" + Accounts.emailTemplates.siteName;\n    },\n    text: greet(\"To verify your account email\")\n  },\n  enrollAccount: {\n    subject: function(user) {\n      return \"An account has been created for you on \" + Accounts.emailTemplates.siteName;\n    },\n    text: greet(\"To start using the service\")\n  }\n};\n","/// BCRYPT\n\nvar bcrypt = NpmModuleBcrypt;\nvar bcryptHash = Meteor.wrapAsync(bcrypt.hash);\nvar bcryptCompare = Meteor.wrapAsync(bcrypt.compare);\n\n// User records have a 'services.password.bcrypt' field on them to hold\n// their hashed passwords (unless they have a 'services.password.srp'\n// field, in which case they will be upgraded to bcrypt the next time\n// they log in).\n//\n// When the client sends a password to the server, it can either be a\n// string (the plaintext password) or an object with keys 'digest' and\n// 'algorithm' (must be \"sha-256\" for now). The Meteor client always sends\n// password objects { digest: *, algorithm: \"sha-256\" }, but DDP clients\n// that don't have access to SHA can just send plaintext passwords as\n// strings.\n//\n// When the server receives a plaintext password as a string, it always\n// hashes it with SHA256 before passing it into bcrypt. When the server\n// receives a password as an object, it asserts that the algorithm is\n// \"sha-256\" and then passes the digest to bcrypt.\n\n\nAccounts._bcryptRounds = () => Accounts._options.bcryptRounds || 10;\n\n// Given a 'password' from the client, extract the string that we should\n// bcrypt. 'password' can be one of:\n//  - String (the plaintext password)\n//  - Object with 'digest' and 'algorithm' keys. 'algorithm' must be \"sha-256\".\n//\nvar getPasswordString = function (password) {\n  if (typeof password === \"string\") {\n    password = SHA256(password);\n  } else { // 'password' is an object\n    if (password.algorithm !== \"sha-256\") {\n      throw new Error(\"Invalid password hash algorithm. \" +\n                      \"Only 'sha-256' is allowed.\");\n    }\n    password = password.digest;\n  }\n  return password;\n};\n\n// Use bcrypt to hash the password for storage in the database.\n// `password` can be a string (in which case it will be run through\n// SHA256 before bcrypt) or an object with properties `digest` and\n// `algorithm` (in which case we bcrypt `password.digest`).\n//\nvar hashPassword = function (password) {\n  password = getPasswordString(password);\n  return bcryptHash(password, Accounts._bcryptRounds());\n};\n\n// Extract the number of rounds used in the specified bcrypt hash.\nconst getRoundsFromBcryptHash = hash => {\n  let rounds;\n  if (hash) {\n    const hashSegments = hash.split('$');\n    if (hashSegments.length > 2) {\n      rounds = parseInt(hashSegments[2], 10);\n    }\n  }\n  return rounds;\n};\n\n// Check whether the provided password matches the bcrypt'ed password in\n// the database user record. `password` can be a string (in which case\n// it will be run through SHA256 before bcrypt) or an object with\n// properties `digest` and `algorithm` (in which case we bcrypt\n// `password.digest`).\n//\nAccounts._checkPassword = function (user, password) {\n  var result = {\n    userId: user._id\n  };\n\n  const formattedPassword = getPasswordString(password);\n  const hash = user.services.password.bcrypt;\n  const hashRounds = getRoundsFromBcryptHash(hash);\n\n  if (! bcryptCompare(formattedPassword, hash)) {\n    result.error = handleError(\"Incorrect password\", false);\n  } else if (hash && Accounts._bcryptRounds() != hashRounds) {\n    // The password checks out, but the user's bcrypt hash needs to be updated.\n    Meteor.defer(() => {\n      Meteor.users.update({ _id: user._id }, {\n        $set: {\n          'services.password.bcrypt':\n            bcryptHash(formattedPassword, Accounts._bcryptRounds())\n        }\n      });\n    });\n  }\n\n  return result;\n};\nvar checkPassword = Accounts._checkPassword;\n\n///\n/// ERROR HANDLER\n///\nconst handleError = (msg, throwError = true) => {\n  const error = new Meteor.Error(\n    403,\n    Accounts._options.ambiguousErrorMessages\n      ? \"Something went wrong. Please check your credentials.\"\n      : msg\n  );\n  if (throwError) {\n    throw error;\n  }\n  return error;\n};\n\n///\n/// LOGIN\n///\n\nAccounts._findUserByQuery = function (query) {\n  var user = null;\n\n  if (query.id) {\n    user = Meteor.users.findOne({ _id: query.id });\n  } else {\n    var fieldName;\n    var fieldValue;\n    if (query.username) {\n      fieldName = 'username';\n      fieldValue = query.username;\n    } else if (query.email) {\n      fieldName = 'emails.address';\n      fieldValue = query.email;\n    } else {\n      throw new Error(\"shouldn't happen (validation missed something)\");\n    }\n    var selector = {};\n    selector[fieldName] = fieldValue;\n    user = Meteor.users.findOne(selector);\n    // If user is not found, try a case insensitive lookup\n    if (!user) {\n      selector = selectorForFastCaseInsensitiveLookup(fieldName, fieldValue);\n      var candidateUsers = Meteor.users.find(selector).fetch();\n      // No match if multiple candidates are found\n      if (candidateUsers.length === 1) {\n        user = candidateUsers[0];\n      }\n    }\n  }\n\n  return user;\n};\n\n/**\n * @summary Finds the user with the specified username.\n * First tries to match username case sensitively; if that fails, it\n * tries case insensitively; but if more than one user matches the case\n * insensitive search, it returns null.\n * @locus Server\n * @param {String} username The username to look for\n * @returns {Object} A user if found, else null\n * @importFromPackage accounts-base\n */\nAccounts.findUserByUsername = function (username) {\n  return Accounts._findUserByQuery({\n    username: username\n  });\n};\n\n/**\n * @summary Finds the user with the specified email.\n * First tries to match email case sensitively; if that fails, it\n * tries case insensitively; but if more than one user matches the case\n * insensitive search, it returns null.\n * @locus Server\n * @param {String} email The email address to look for\n * @returns {Object} A user if found, else null\n * @importFromPackage accounts-base\n */\nAccounts.findUserByEmail = function (email) {\n  return Accounts._findUserByQuery({\n    email: email\n  });\n};\n\n// Generates a MongoDB selector that can be used to perform a fast case\n// insensitive lookup for the given fieldName and string. Since MongoDB does\n// not support case insensitive indexes, and case insensitive regex queries\n// are slow, we construct a set of prefix selectors for all permutations of\n// the first 4 characters ourselves. We first attempt to matching against\n// these, and because 'prefix expression' regex queries do use indexes (see\n// http://docs.mongodb.org/v2.6/reference/operator/query/regex/#index-use),\n// this has been found to greatly improve performance (from 1200ms to 5ms in a\n// test with 1.000.000 users).\nvar selectorForFastCaseInsensitiveLookup = function (fieldName, string) {\n  // Performance seems to improve up to 4 prefix characters\n  var prefix = string.substring(0, Math.min(string.length, 4));\n  var orClause = _.map(generateCasePermutationsForString(prefix),\n    function (prefixPermutation) {\n      var selector = {};\n      selector[fieldName] =\n        new RegExp('^' + Meteor._escapeRegExp(prefixPermutation));\n      return selector;\n    });\n  var caseInsensitiveClause = {};\n  caseInsensitiveClause[fieldName] =\n    new RegExp('^' + Meteor._escapeRegExp(string) + '$', 'i')\n  return {$and: [{$or: orClause}, caseInsensitiveClause]};\n}\n\n// Generates permutations of all case variations of a given string.\nvar generateCasePermutationsForString = function (string) {\n  var permutations = [''];\n  for (var i = 0; i < string.length; i++) {\n    var ch = string.charAt(i);\n    permutations = _.flatten(_.map(permutations, function (prefix) {\n      var lowerCaseChar = ch.toLowerCase();\n      var upperCaseChar = ch.toUpperCase();\n      // Don't add unneccesary permutations when ch is not a letter\n      if (lowerCaseChar === upperCaseChar) {\n        return [prefix + ch];\n      } else {\n        return [prefix + lowerCaseChar, prefix + upperCaseChar];\n      }\n    }));\n  }\n  return permutations;\n}\n\nvar checkForCaseInsensitiveDuplicates = function (fieldName, displayName, fieldValue, ownUserId) {\n  // Some tests need the ability to add users with the same case insensitive\n  // value, hence the _skipCaseInsensitiveChecksForTest check\n  var skipCheck = _.has(Accounts._skipCaseInsensitiveChecksForTest, fieldValue);\n\n  if (fieldValue && !skipCheck) {\n    var matchedUsers = Meteor.users.find(\n      selectorForFastCaseInsensitiveLookup(fieldName, fieldValue)).fetch();\n\n    if (matchedUsers.length > 0 &&\n        // If we don't have a userId yet, any match we find is a duplicate\n        (!ownUserId ||\n        // Otherwise, check to see if there are multiple matches or a match\n        // that is not us\n        (matchedUsers.length > 1 || matchedUsers[0]._id !== ownUserId))) {\n      handleError(displayName + \" already exists.\");\n    }\n  }\n};\n\n// XXX maybe this belongs in the check package\nvar NonEmptyString = Match.Where(function (x) {\n  check(x, String);\n  return x.length > 0;\n});\n\nvar userQueryValidator = Match.Where(function (user) {\n  check(user, {\n    id: Match.Optional(NonEmptyString),\n    username: Match.Optional(NonEmptyString),\n    email: Match.Optional(NonEmptyString)\n  });\n  if (_.keys(user).length !== 1)\n    throw new Match.Error(\"User property must have exactly one field\");\n  return true;\n});\n\nvar passwordValidator = Match.OneOf(\n  String,\n  { digest: String, algorithm: String }\n);\n\n// Handler to login with a password.\n//\n// The Meteor client sets options.password to an object with keys\n// 'digest' (set to SHA256(password)) and 'algorithm' (\"sha-256\").\n//\n// For other DDP clients which don't have access to SHA, the handler\n// also accepts the plaintext password in options.password as a string.\n//\n// (It might be nice if servers could turn the plaintext password\n// option off. Or maybe it should be opt-in, not opt-out?\n// Accounts.config option?)\n//\n// Note that neither password option is secure without SSL.\n//\nAccounts.registerLoginHandler(\"password\", function (options) {\n  if (! options.password || options.srp)\n    return undefined; // don't handle\n\n  check(options, {\n    user: userQueryValidator,\n    password: passwordValidator\n  });\n\n\n  var user = Accounts._findUserByQuery(options.user);\n  if (!user) {\n    handleError(\"User not found\");\n  }\n\n  if (!user.services || !user.services.password ||\n      !(user.services.password.bcrypt || user.services.password.srp)) {\n    handleError(\"User has no password set\");\n  }\n\n  if (!user.services.password.bcrypt) {\n    if (typeof options.password === \"string\") {\n      // The client has presented a plaintext password, and the user is\n      // not upgraded to bcrypt yet. We don't attempt to tell the client\n      // to upgrade to bcrypt, because it might be a standalone DDP\n      // client doesn't know how to do such a thing.\n      var verifier = user.services.password.srp;\n      var newVerifier = SRP.generateVerifier(options.password, {\n        identity: verifier.identity, salt: verifier.salt});\n\n      if (verifier.verifier !== newVerifier.verifier) {\n        return {\n          userId: Accounts._options.ambiguousErrorMessages ? null : user._id,\n          error: handleError(\"Incorrect password\", false)\n        };\n      }\n\n      return {userId: user._id};\n    } else {\n      // Tell the client to use the SRP upgrade process.\n      throw new Meteor.Error(400, \"old password format\", EJSON.stringify({\n        format: 'srp',\n        identity: user.services.password.srp.identity\n      }));\n    }\n  }\n\n  return checkPassword(\n    user,\n    options.password\n  );\n});\n\n// Handler to login using the SRP upgrade path. To use this login\n// handler, the client must provide:\n//   - srp: H(identity + \":\" + password)\n//   - password: a string or an object with properties 'digest' and 'algorithm'\n//\n// We use `options.srp` to verify that the client knows the correct\n// password without doing a full SRP flow. Once we've checked that, we\n// upgrade the user to bcrypt and remove the SRP information from the\n// user document.\n//\n// The client ends up using this login handler after trying the normal\n// login handler (above), which throws an error telling the client to\n// try the SRP upgrade path.\n//\n// XXX COMPAT WITH 0.8.1.3\nAccounts.registerLoginHandler(\"password\", function (options) {\n  if (!options.srp || !options.password) {\n    return undefined; // don't handle\n  }\n\n  check(options, {\n    user: userQueryValidator,\n    srp: String,\n    password: passwordValidator\n  });\n\n  var user = Accounts._findUserByQuery(options.user);\n  if (!user) {\n    handleError(\"User not found\");\n  }\n\n  // Check to see if another simultaneous login has already upgraded\n  // the user record to bcrypt.\n  if (user.services && user.services.password && user.services.password.bcrypt) {\n    return checkPassword(user, options.password);\n  }\n\n  if (!(user.services && user.services.password && user.services.password.srp)) {\n    handleError(\"User has no password set\");\n  }\n\n  var v1 = user.services.password.srp.verifier;\n  var v2 = SRP.generateVerifier(\n    null,\n    {\n      hashedIdentityAndPassword: options.srp,\n      salt: user.services.password.srp.salt\n    }\n  ).verifier;\n  if (v1 !== v2) {\n    return {\n      userId: Accounts._options.ambiguousErrorMessages ? null : user._id,\n      error: handleError(\"Incorrect password\", false)\n    };\n  }\n\n  // Upgrade to bcrypt on successful login.\n  var salted = hashPassword(options.password);\n  Meteor.users.update(\n    user._id,\n    {\n      $unset: { 'services.password.srp': 1 },\n      $set: { 'services.password.bcrypt': salted }\n    }\n  );\n\n  return {userId: user._id};\n});\n\n\n///\n/// CHANGING\n///\n\n/**\n * @summary Change a user's username. Use this instead of updating the\n * database directly. The operation will fail if there is an existing user\n * with a username only differing in case.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} newUsername A new username for the user.\n * @importFromPackage accounts-base\n */\nAccounts.setUsername = function (userId, newUsername) {\n  check(userId, NonEmptyString);\n  check(newUsername, NonEmptyString);\n\n  var user = Meteor.users.findOne(userId);\n  if (!user) {\n    handleError(\"User not found\");\n  }\n\n  var oldUsername = user.username;\n\n  // Perform a case insensitive check for duplicates before update\n  checkForCaseInsensitiveDuplicates('username', 'Username', newUsername, user._id);\n\n  Meteor.users.update({_id: user._id}, {$set: {username: newUsername}});\n\n  // Perform another check after update, in case a matching user has been\n  // inserted in the meantime\n  try {\n    checkForCaseInsensitiveDuplicates('username', 'Username', newUsername, user._id);\n  } catch (ex) {\n    // Undo update if the check fails\n    Meteor.users.update({_id: user._id}, {$set: {username: oldUsername}});\n    throw ex;\n  }\n};\n\n// Let the user change their own password if they know the old\n// password. `oldPassword` and `newPassword` should be objects with keys\n// `digest` and `algorithm` (representing the SHA256 of the password).\n//\n// XXX COMPAT WITH 0.8.1.3\n// Like the login method, if the user hasn't been upgraded from SRP to\n// bcrypt yet, then this method will throw an 'old password format'\n// error. The client should call the SRP upgrade login handler and then\n// retry this method again.\n//\n// UNLIKE the login method, there is no way to avoid getting SRP upgrade\n// errors thrown. The reasoning for this is that clients using this\n// method directly will need to be updated anyway because we no longer\n// support the SRP flow that they would have been doing to use this\n// method previously.\nMeteor.methods({changePassword: function (oldPassword, newPassword) {\n  check(oldPassword, passwordValidator);\n  check(newPassword, passwordValidator);\n\n  if (!this.userId) {\n    throw new Meteor.Error(401, \"Must be logged in\");\n  }\n\n  var user = Meteor.users.findOne(this.userId);\n  if (!user) {\n    handleError(\"User not found\");\n  }\n\n  if (!user.services || !user.services.password ||\n      (!user.services.password.bcrypt && !user.services.password.srp)) {\n    handleError(\"User has no password set\");\n  }\n\n  if (! user.services.password.bcrypt) {\n    throw new Meteor.Error(400, \"old password format\", EJSON.stringify({\n      format: 'srp',\n      identity: user.services.password.srp.identity\n    }));\n  }\n\n  var result = checkPassword(user, oldPassword);\n  if (result.error) {\n    throw result.error;\n  }\n\n  var hashed = hashPassword(newPassword);\n\n  // It would be better if this removed ALL existing tokens and replaced\n  // the token for the current connection with a new one, but that would\n  // be tricky, so we'll settle for just replacing all tokens other than\n  // the one for the current connection.\n  var currentToken = Accounts._getLoginToken(this.connection.id);\n  Meteor.users.update(\n    { _id: this.userId },\n    {\n      $set: { 'services.password.bcrypt': hashed },\n      $pull: {\n        'services.resume.loginTokens': { hashedToken: { $ne: currentToken } }\n      },\n      $unset: { 'services.password.reset': 1 }\n    }\n  );\n\n  return {passwordChanged: true};\n}});\n\n\n// Force change the users password.\n\n/**\n * @summary Forcibly change the password for a user.\n * @locus Server\n * @param {String} userId The id of the user to update.\n * @param {String} newPassword A new password for the user.\n * @param {Object} [options]\n * @param {Object} options.logout Logout all current connections with this userId (default: true)\n * @importFromPackage accounts-base\n */\nAccounts.setPassword = function (userId, newPlaintextPassword, options) {\n  options = _.extend({logout: true}, options);\n\n  var user = Meteor.users.findOne(userId);\n  if (!user) {\n    throw new Meteor.Error(403, \"User not found\");\n  }\n\n  var update = {\n    $unset: {\n      'services.password.srp': 1, // XXX COMPAT WITH 0.8.1.3\n      'services.password.reset': 1\n    },\n    $set: {'services.password.bcrypt': hashPassword(newPlaintextPassword)}\n  };\n\n  if (options.logout) {\n    update.$unset['services.resume.loginTokens'] = 1;\n  }\n\n  Meteor.users.update({_id: user._id}, update);\n};\n\n\n///\n/// RESETTING VIA EMAIL\n///\n\n// Method called by a user to request a password reset email. This is\n// the start of the reset process.\nMeteor.methods({forgotPassword: function (options) {\n  check(options, {email: String});\n\n  var user = Accounts.findUserByEmail(options.email);\n  if (!user) {\n    handleError(\"User not found\");\n  }\n\n  const emails = _.pluck(user.emails || [], 'address');\n  const caseSensitiveEmail = _.find(emails, email => {\n    return email.toLowerCase() === options.email.toLowerCase();\n  });\n\n  Accounts.sendResetPasswordEmail(user._id, caseSensitiveEmail);\n}});\n\n/**\n * @summary Generates a reset token and saves it into the database.\n * @locus Server\n * @param {String} userId The id of the user to generate the reset token for.\n * @param {String} email Which address of the user to generate the reset token for. This address must be in the user's `emails` list. If `null`, defaults to the first email in the list.\n * @param {String} reason `resetPassword` or `enrollAccount`.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @returns {Object} Object with {email, user, token} values.\n * @importFromPackage accounts-base\n */\nAccounts.generateResetToken = function (userId, email, reason, extraTokenData) {\n  // Make sure the user exists, and email is one of their addresses.\n  var user = Meteor.users.findOne(userId);\n  if (!user) {\n    handleError(\"Can't find user\");\n  }\n\n  // pick the first email if we weren't passed an email.\n  if (!email && user.emails && user.emails[0]) {\n    email = user.emails[0].address;\n  }\n\n  // make sure we have a valid email\n  if (!email || !_.contains(_.pluck(user.emails || [], 'address'), email)) {\n    handleError(\"No such email for user.\");\n  }\n\n  var token = Random.secret();\n  var tokenRecord = {\n    token: token,\n    email: email,\n    when: new Date()\n  };\n\n  if (reason === 'resetPassword') {\n    tokenRecord.reason = 'reset';\n  } else if (reason === 'enrollAccount') {\n    tokenRecord.reason = 'enroll';\n  } else if (reason) {\n    // fallback so that this function can be used for unknown reasons as well\n    tokenRecord.reason = reason;\n  }\n\n  if (extraTokenData) {\n    _.extend(tokenRecord, extraTokenData);\n  }\n\n  Meteor.users.update({_id: user._id}, {$set: {\n    'services.password.reset': tokenRecord\n  }});\n\n  // before passing to template, update user object with new token\n  Meteor._ensure(user, 'services', 'password').reset = tokenRecord;\n\n  return {email, user, token};\n};\n\n/**\n * @summary Generates an e-mail verification token and saves it into the database.\n * @locus Server\n * @param {String} userId The id of the user to generate the  e-mail verification token for.\n * @param {String} email Which address of the user to generate the e-mail verification token for. This address must be in the user's `emails` list. If `null`, defaults to the first unverified email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @returns {Object} Object with {email, user, token} values.\n * @importFromPackage accounts-base\n */\nAccounts.generateVerificationToken = function (userId, email, extraTokenData) {\n  // Make sure the user exists, and email is one of their addresses.\n  var user = Meteor.users.findOne(userId);\n  if (!user) {\n    handleError(\"Can't find user\");\n  }\n\n  // pick the first unverified email if we weren't passed an email.\n  if (!email) {\n    var emailRecord = _.find(user.emails || [], function (e) { return !e.verified; });\n    email = (emailRecord || {}).address;\n\n    if (!email) {\n      handleError(\"That user has no unverified email addresses.\");\n    }\n  }\n\n  // make sure we have a valid email\n  if (!email || !_.contains(_.pluck(user.emails || [], 'address'), email)) {\n    handleError(\"No such email for user.\");\n  }\n\n  var token = Random.secret();\n  var tokenRecord = {\n    token: token,\n    // TODO: This should probably be renamed to \"email\" to match reset token record.\n    address: email,\n    when: new Date()\n  };\n\n  if (extraTokenData) {\n    _.extend(tokenRecord, extraTokenData);\n  }\n\n  Meteor.users.update({_id: user._id}, {$push: {\n    'services.email.verificationTokens': tokenRecord\n  }});\n\n  // before passing to template, update user object with new token\n  Meteor._ensure(user, 'services', 'email');\n  if (!user.services.email.verificationTokens) {\n    user.services.email.verificationTokens = [];\n  }\n  user.services.email.verificationTokens.push(tokenRecord);\n\n  return {email, user, token};\n};\n\n/**\n * @summary Creates options for email sending for reset password and enroll account emails.\n * You can use this function when customizing a reset password or enroll account email sending.\n * @locus Server\n * @param {Object} email Which address of the user's to send the email to.\n * @param {Object} user The user object to generate options for.\n * @param {String} url URL to which user is directed to confirm the email.\n * @param {String} reason `resetPassword` or `enrollAccount`.\n * @returns {Object} Options which can be passed to `Email.send`.\n * @importFromPackage accounts-base\n */\nAccounts.generateOptionsForEmail = function (email, user, url, reason) {\n  var options = {\n    to: email,\n    from: Accounts.emailTemplates[reason].from\n      ? Accounts.emailTemplates[reason].from(user)\n      : Accounts.emailTemplates.from,\n    subject: Accounts.emailTemplates[reason].subject(user)\n  };\n\n  if (typeof Accounts.emailTemplates[reason].text === 'function') {\n    options.text = Accounts.emailTemplates[reason].text(user, url);\n  }\n\n  if (typeof Accounts.emailTemplates[reason].html === 'function') {\n    options.html = Accounts.emailTemplates[reason].html(user, url);\n  }\n\n  if (typeof Accounts.emailTemplates.headers === 'object') {\n    options.headers = Accounts.emailTemplates.headers;\n  }\n\n  return options;\n};\n\n// send the user an email with a link that when opened allows the user\n// to set a new password, without the old password.\n\n/**\n * @summary Send an email with a link the user can use to reset their password.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @returns {Object} Object with {email, user, token, url, options} values.\n * @importFromPackage accounts-base\n */\nAccounts.sendResetPasswordEmail = function (userId, email, extraTokenData) {\n  const {email: realEmail, user, token} =\n    Accounts.generateResetToken(userId, email, 'resetPassword', extraTokenData);\n  const url = Accounts.urls.resetPassword(token);\n  const options = Accounts.generateOptionsForEmail(realEmail, user, url, 'resetPassword');\n  Email.send(options);\n  return {email: realEmail, user, token, url, options};\n};\n\n// send the user an email informing them that their account was created, with\n// a link that when opened both marks their email as verified and forces them\n// to choose their password. The email must be one of the addresses in the\n// user's emails field, or undefined to pick the first email automatically.\n//\n// This is not called automatically. It must be called manually if you\n// want to use enrollment emails.\n\n/**\n * @summary Send an email with a link the user can use to set their initial password.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @returns {Object} Object with {email, user, token, url, options} values.\n * @importFromPackage accounts-base\n */\nAccounts.sendEnrollmentEmail = function (userId, email, extraTokenData) {\n  const {email: realEmail, user, token} =\n    Accounts.generateResetToken(userId, email, 'enrollAccount', extraTokenData);\n  const url = Accounts.urls.enrollAccount(token);\n  const options = Accounts.generateOptionsForEmail(realEmail, user, url, 'enrollAccount');\n  Email.send(options);\n  return {email: realEmail, user, token, url, options};\n};\n\n\n// Take token from sendResetPasswordEmail or sendEnrollmentEmail, change\n// the users password, and log them in.\nMeteor.methods({resetPassword: function (token, newPassword) {\n  var self = this;\n  return Accounts._loginMethod(\n    self,\n    \"resetPassword\",\n    arguments,\n    \"password\",\n    function () {\n      check(token, String);\n      check(newPassword, passwordValidator);\n\n      var user = Meteor.users.findOne({\n        \"services.password.reset.token\": token});\n      if (!user) {\n        throw new Meteor.Error(403, \"Token expired\");\n      }\n      var when = user.services.password.reset.when;\n      var reason = user.services.password.reset.reason;\n      var tokenLifetimeMs = Accounts._getPasswordResetTokenLifetimeMs();\n      if (reason === \"enroll\") {\n        tokenLifetimeMs = Accounts._getPasswordEnrollTokenLifetimeMs();\n      }\n      var currentTimeMs = Date.now();\n      if ((currentTimeMs - when) > tokenLifetimeMs)\n        throw new Meteor.Error(403, \"Token expired\");\n      var email = user.services.password.reset.email;\n      if (!_.include(_.pluck(user.emails || [], 'address'), email))\n        return {\n          userId: user._id,\n          error: new Meteor.Error(403, \"Token has invalid email address\")\n        };\n\n      var hashed = hashPassword(newPassword);\n\n      // NOTE: We're about to invalidate tokens on the user, who we might be\n      // logged in as. Make sure to avoid logging ourselves out if this\n      // happens. But also make sure not to leave the connection in a state\n      // of having a bad token set if things fail.\n      var oldToken = Accounts._getLoginToken(self.connection.id);\n      Accounts._setLoginToken(user._id, self.connection, null);\n      var resetToOldToken = function () {\n        Accounts._setLoginToken(user._id, self.connection, oldToken);\n      };\n\n      try {\n        // Update the user record by:\n        // - Changing the password to the new one\n        // - Forgetting about the reset token that was just used\n        // - Verifying their email, since they got the password reset via email.\n        var affectedRecords = Meteor.users.update(\n          {\n            _id: user._id,\n            'emails.address': email,\n            'services.password.reset.token': token\n          },\n          {$set: {'services.password.bcrypt': hashed,\n                  'emails.$.verified': true},\n           $unset: {'services.password.reset': 1,\n                    'services.password.srp': 1}});\n        if (affectedRecords !== 1)\n          return {\n            userId: user._id,\n            error: new Meteor.Error(403, \"Invalid email\")\n          };\n      } catch (err) {\n        resetToOldToken();\n        throw err;\n      }\n\n      // Replace all valid login tokens with new ones (changing\n      // password should invalidate existing sessions).\n      Accounts._clearAllLoginTokens(user._id);\n\n      return {userId: user._id};\n    }\n  );\n}});\n\n///\n/// EMAIL VERIFICATION\n///\n\n\n// send the user an email with a link that when opened marks that\n// address as verified\n\n/**\n * @summary Send an email with a link the user can use verify their email address.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first unverified email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @returns {Object} Object with {email, user, token, url, options} values.\n * @importFromPackage accounts-base\n */\nAccounts.sendVerificationEmail = function (userId, email, extraTokenData) {\n  // XXX Also generate a link using which someone can delete this\n  // account if they own said address but weren't those who created\n  // this account.\n\n  const {email: realEmail, user, token} =\n    Accounts.generateVerificationToken(userId, email, extraTokenData);\n  const url = Accounts.urls.verifyEmail(token);\n  const options = Accounts.generateOptionsForEmail(realEmail, user, url, 'verifyEmail');\n  Email.send(options);\n  return {email: realEmail, user, token, url, options};\n};\n\n// Take token from sendVerificationEmail, mark the email as verified,\n// and log them in.\nMeteor.methods({verifyEmail: function (token) {\n  var self = this;\n  return Accounts._loginMethod(\n    self,\n    \"verifyEmail\",\n    arguments,\n    \"password\",\n    function () {\n      check(token, String);\n\n      var user = Meteor.users.findOne(\n        {'services.email.verificationTokens.token': token});\n      if (!user)\n        throw new Meteor.Error(403, \"Verify email link expired\");\n\n      var tokenRecord = _.find(user.services.email.verificationTokens,\n                               function (t) {\n                                 return t.token == token;\n                               });\n      if (!tokenRecord)\n        return {\n          userId: user._id,\n          error: new Meteor.Error(403, \"Verify email link expired\")\n        };\n\n      var emailsRecord = _.find(user.emails, function (e) {\n        return e.address == tokenRecord.address;\n      });\n      if (!emailsRecord)\n        return {\n          userId: user._id,\n          error: new Meteor.Error(403, \"Verify email link is for unknown address\")\n        };\n\n      // By including the address in the query, we can use 'emails.$' in the\n      // modifier to get a reference to the specific object in the emails\n      // array. See\n      // http://www.mongodb.org/display/DOCS/Updating/#Updating-The%24positionaloperator)\n      // http://www.mongodb.org/display/DOCS/Updating#Updating-%24pull\n      Meteor.users.update(\n        {_id: user._id,\n         'emails.address': tokenRecord.address},\n        {$set: {'emails.$.verified': true},\n         $pull: {'services.email.verificationTokens': {address: tokenRecord.address}}});\n\n      return {userId: user._id};\n    }\n  );\n}});\n\n/**\n * @summary Add an email address for a user. Use this instead of directly\n * updating the database. The operation will fail if there is a different user\n * with an email only differing in case. If the specified user has an existing\n * email only differing in case however, we replace it.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} newEmail A new email address for the user.\n * @param {Boolean} [verified] Optional - whether the new email address should\n * be marked as verified. Defaults to false.\n * @importFromPackage accounts-base\n */\nAccounts.addEmail = function (userId, newEmail, verified) {\n  check(userId, NonEmptyString);\n  check(newEmail, NonEmptyString);\n  check(verified, Match.Optional(Boolean));\n\n  if (_.isUndefined(verified)) {\n    verified = false;\n  }\n\n  var user = Meteor.users.findOne(userId);\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  // Allow users to change their own email to a version with a different case\n\n  // We don't have to call checkForCaseInsensitiveDuplicates to do a case\n  // insensitive check across all emails in the database here because: (1) if\n  // there is no case-insensitive duplicate between this user and other users,\n  // then we are OK and (2) if this would create a conflict with other users\n  // then there would already be a case-insensitive duplicate and we can't fix\n  // that in this code anyway.\n  var caseInsensitiveRegExp =\n    new RegExp('^' + Meteor._escapeRegExp(newEmail) + '$', 'i');\n\n  var didUpdateOwnEmail = _.any(user.emails, function(email, index) {\n    if (caseInsensitiveRegExp.test(email.address)) {\n      Meteor.users.update({\n        _id: user._id,\n        'emails.address': email.address\n      }, {$set: {\n        'emails.$.address': newEmail,\n        'emails.$.verified': verified\n      }});\n      return true;\n    }\n\n    return false;\n  });\n\n  // In the other updates below, we have to do another call to\n  // checkForCaseInsensitiveDuplicates to make sure that no conflicting values\n  // were added to the database in the meantime. We don't have to do this for\n  // the case where the user is updating their email address to one that is the\n  // same as before, but only different because of capitalization. Read the\n  // big comment above to understand why.\n\n  if (didUpdateOwnEmail) {\n    return;\n  }\n\n  // Perform a case insensitive check for duplicates before update\n  checkForCaseInsensitiveDuplicates('emails.address', 'Email', newEmail, user._id);\n\n  Meteor.users.update({\n    _id: user._id\n  }, {\n    $addToSet: {\n      emails: {\n        address: newEmail,\n        verified: verified\n      }\n    }\n  });\n\n  // Perform another check after update, in case a matching user has been\n  // inserted in the meantime\n  try {\n    checkForCaseInsensitiveDuplicates('emails.address', 'Email', newEmail, user._id);\n  } catch (ex) {\n    // Undo update if the check fails\n    Meteor.users.update({_id: user._id},\n      {$pull: {emails: {address: newEmail}}});\n    throw ex;\n  }\n}\n\n/**\n * @summary Remove an email address for a user. Use this instead of updating\n * the database directly.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} email The email address to remove.\n * @importFromPackage accounts-base\n */\nAccounts.removeEmail = function (userId, email) {\n  check(userId, NonEmptyString);\n  check(email, NonEmptyString);\n\n  var user = Meteor.users.findOne(userId);\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  Meteor.users.update({_id: user._id},\n    {$pull: {emails: {address: email}}});\n}\n\n///\n/// CREATING USERS\n///\n\n// Shared createUser function called from the createUser method, both\n// if originates in client or server code. Calls user provided hooks,\n// does the actual user insertion.\n//\n// returns the user id\nvar createUser = function (options) {\n  // Unknown keys allowed, because a onCreateUserHook can take arbitrary\n  // options.\n  check(options, Match.ObjectIncluding({\n    username: Match.Optional(String),\n    email: Match.Optional(String),\n    password: Match.Optional(passwordValidator)\n  }));\n\n  var username = options.username;\n  var email = options.email;\n  if (!username && !email)\n    throw new Meteor.Error(400, \"Need to set a username or email\");\n\n  var user = {services: {}};\n  if (options.password) {\n    var hashed = hashPassword(options.password);\n    user.services.password = { bcrypt: hashed };\n  }\n\n  if (username)\n    user.username = username;\n  if (email)\n    user.emails = [{address: email, verified: false}];\n\n  // Perform a case insensitive check before insert\n  checkForCaseInsensitiveDuplicates('username', 'Username', username);\n  checkForCaseInsensitiveDuplicates('emails.address', 'Email', email);\n\n  var userId = Accounts.insertUserDoc(options, user);\n  // Perform another check after insert, in case a matching user has been\n  // inserted in the meantime\n  try {\n    checkForCaseInsensitiveDuplicates('username', 'Username', username, userId);\n    checkForCaseInsensitiveDuplicates('emails.address', 'Email', email, userId);\n  } catch (ex) {\n    // Remove inserted user if the check fails\n    Meteor.users.remove(userId);\n    throw ex;\n  }\n  return userId;\n};\n\n// method for create user. Requests come from the client.\nMeteor.methods({createUser: function (options) {\n  var self = this;\n  return Accounts._loginMethod(\n    self,\n    \"createUser\",\n    arguments,\n    \"password\",\n    function () {\n      // createUser() above does more checking.\n      check(options, Object);\n      if (Accounts._options.forbidClientAccountCreation)\n        return {\n          error: new Meteor.Error(403, \"Signups forbidden\")\n        };\n\n      // Create user. result contains id and token.\n      var userId = createUser(options);\n      // safety belt. createUser is supposed to throw on error. send 500 error\n      // instead of sending a verification email with empty userid.\n      if (! userId)\n        throw new Error(\"createUser failed to insert new user\");\n\n      // If `Accounts._options.sendVerificationEmail` is set, register\n      // a token to verify the user's primary email, and send it to\n      // that address.\n      if (options.email && Accounts._options.sendVerificationEmail)\n        Accounts.sendVerificationEmail(userId, options.email);\n\n      // client gets logged in as the new user afterwards.\n      return {userId: userId};\n    }\n  );\n}});\n\n// Create user directly on the server.\n//\n// Unlike the client version, this does not log you in as this user\n// after creation.\n//\n// returns userId or throws an error if it can't create\n//\n// XXX add another argument (\"server options\") that gets sent to onCreateUser,\n// which is always empty when called from the createUser method? eg, \"admin:\n// true\", which we want to prevent the client from setting, but which a custom\n// method calling Accounts.createUser could set?\n//\nAccounts.createUser = function (options, callback) {\n  options = _.clone(options);\n\n  // XXX allow an optional callback?\n  if (callback) {\n    throw new Error(\"Accounts.createUser with callback not supported on the server yet.\");\n  }\n\n  return createUser(options);\n};\n\n///\n/// PASSWORD-SPECIFIC INDEXES ON USERS\n///\nMeteor.users._ensureIndex('services.email.verificationTokens.token',\n                          {unique: 1, sparse: 1});\nMeteor.users._ensureIndex('services.password.reset.token',\n                          {unique: 1, sparse: 1});\n"]}