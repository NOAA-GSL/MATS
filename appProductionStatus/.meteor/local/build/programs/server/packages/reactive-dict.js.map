{"version":3,"sources":["meteor://ðŸ’»app/packages/reactive-dict/migration.js","meteor://ðŸ’»app/packages/reactive-dict/reactive-dict.js"],"names":["module","export","ReactiveDict","link","v","hasOwn","Object","prototype","hasOwnProperty","_migratedDictData","_dictsToMigrate","_loadMigratedDict","dictName","call","data","_registerDictForMigrate","dict","Error","Meteor","isClient","Package","reload","migrationData","Reload","_migrationData","dicts","_onMigrate","dictsToMigrate","dataToMigrate","_getMigrationData","stringify","value","undefined","EJSON","parse","serialized","changed","constructor","dictData","keys","migratedData","_setObject","name","allDeps","Tracker","Dependency","keyDeps","keyValueDeps","set","keyOrObject","key","keyExisted","oldSerializedValue","isNewValue","setDefault","_setDefaultObject","get","_ensureKey","depend","equals","ObjectID","mongo","Mongo","Date","serializedValue","active","isNew","onInvalidate","hasDependents","oldValue","all","ret","forEach","clear","oldKeys","delete","didRemove","destroy","object"],"mappings":"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","file":"/packages/reactive-dict.js","sourcesContent":["import { ReactiveDict } from './reactive-dict';\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nReactiveDict._migratedDictData = {}; // name -> data\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict\n\nReactiveDict._loadMigratedDict = function (dictName) {\n  if (hasOwn.call(ReactiveDict._migratedDictData, dictName)) {\n    const data = ReactiveDict._migratedDictData[dictName];\n    delete ReactiveDict._migratedDictData[dictName];\n    return data;\n  }\n\n  return null;\n};\n\nReactiveDict._registerDictForMigrate = function (dictName, dict) {\n  if (hasOwn.call(ReactiveDict._dictsToMigrate, dictName))\n    throw new Error(\"Duplicate ReactiveDict name: \" + dictName);\n\n  ReactiveDict._dictsToMigrate[dictName] = dict;\n};\n\nif (Meteor.isClient && Package.reload) {\n  // Put old migrated data into ReactiveDict._migratedDictData,\n  // where it can be accessed by ReactiveDict._loadMigratedDict.\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');\n  if (migrationData && migrationData.dicts)\n    ReactiveDict._migratedDictData = migrationData.dicts;\n\n  // On migration, assemble the data from all the dicts that have been\n  // registered.\n  Package.reload.Reload._onMigrate('reactive-dict', function () {\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;\n    var dataToMigrate = {};\n\n    for (var dictName in dictsToMigrate)\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();\n\n    return [true, {dicts: dataToMigrate}];\n  });\n}\n\nexport { ReactiveDict };\n","const hasOwn = Object.prototype.hasOwnProperty;\n\n// XXX come up with a serialization method which canonicalizes object key\n// order, which would allow us to use objects as values for equals.\nfunction stringify(value) {\n  if (value === undefined) {\n    return 'undefined';\n  }\n  return EJSON.stringify(value);\n}\n\nfunction parse(serialized) {\n  if (serialized === undefined || serialized === 'undefined') {\n    return undefined;\n  }\n  return EJSON.parse(serialized);\n}\n\nfunction changed(v) {\n  v && v.changed();\n}\n\n// XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName\n/**\n * @class\n * @instanceName ReactiveDict\n * @summary Constructor for a ReactiveDict, which represents a reactive dictionary of key/value pairs.\n * @locus Client\n * @param {String} [name] Optional.  When a name is passed, preserves contents across Hot Code Pushes\n * @param {Object} [initialValue] Optional.  The default values for the dictionary\n */\nexport class ReactiveDict {\n  constructor(dictName, dictData) {\n    // this.keys: key -> value\n    this.keys = {};\n\n    if (dictName) {\n      // name given; migration will be performed\n      if (typeof dictName === 'string') {\n        // the normal case, argument is a string name.\n\n        // Only run migration logic on client, it will cause\n        // duplicate name errors on server during reloads.\n        // _registerDictForMigrate will throw an error on duplicate name.\n        Meteor.isClient && ReactiveDict._registerDictForMigrate(dictName, this);\n        const migratedData = Meteor.isClient && ReactiveDict._loadMigratedDict(dictName);\n\n        if (migratedData) {\n          // Don't stringify migrated data\n          this.keys = migratedData;\n        } else {\n          // Use _setObject to make sure values are stringified\n          this._setObject(dictData || {});\n        }\n        this.name = dictName;\n      } else if (typeof dictName === 'object') {\n        // back-compat case: dictName is actually migrationData\n        // Use _setObject to make sure values are stringified\n        this._setObject(dictName);\n      } else {\n        throw new Error(\"Invalid ReactiveDict argument: \" + dictName);\n      }\n    } else if (typeof dictData === 'object') {\n      this._setObject(dictData);\n    }\n\n    this.allDeps = new Tracker.Dependency;\n    this.keyDeps = {}; // key -> Dependency\n    this.keyValueDeps = {}; // key -> Dependency\n  }\n\n  // set() began as a key/value method, but we are now overloading it\n  // to take an object of key/value pairs, similar to backbone\n  // http://backbonejs.org/#Model-set\n  /**\n   * @summary Set a value for a key in the ReactiveDict. Notify any listeners\n   * that the value has changed (eg: redraw templates, and rerun any\n   * [`Tracker.autorun`](#tracker_autorun) computations, that called\n   * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)\n   * @locus Client\n   * @param {String} key The key to set, eg, `selectedItem`\n   * @param {EJSONable | undefined} value The new value for `key`\n   */\n  set(keyOrObject, value) {\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {\n      // Called as `dict.set({...})`\n      this._setObject(keyOrObject);\n      return;\n    }\n    // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n    const key = keyOrObject;\n\n    value = stringify(value);\n\n    const keyExisted = hasOwn.call(this.keys, key);\n    const oldSerializedValue = keyExisted ? this.keys[key] : 'undefined';\n    const isNewValue = (value !== oldSerializedValue);\n\n    this.keys[key] = value;\n\n    if (isNewValue || !keyExisted) {\n      // Using the changed utility function here because this.allDeps might not exist yet,\n      // when setting initial data from constructor\n      changed(this.allDeps);\n    }\n\n    // Don't trigger changes when setting initial data from constructor,\n    // this.KeyDeps is undefined in this case\n    if (isNewValue && this.keyDeps) {\n      changed(this.keyDeps[key]);\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][oldSerializedValue]);\n        changed(this.keyValueDeps[key][value]);\n      }\n    }\n  }\n\n  /**\n   * @summary Set a value for a key if it hasn't been set before.\n   * Otherwise works exactly the same as [`ReactiveDict.set`](#ReactiveDict-set).\n   * @locus Client\n   * @param {String} key The key to set, eg, `selectedItem`\n   * @param {EJSONable | undefined} value The new value for `key`\n   */\n  setDefault(keyOrObject, value) {\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {\n      // Called as `dict.setDefault({...})`\n      this._setDefaultObject(keyOrObject);\n      return;\n    }\n    // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n    const key = keyOrObject;\n\n    if (! hasOwn.call(this.keys, key)) {\n      this.set(key, value);\n    }\n  }\n\n  /**\n   * @summary Get the value assiciated with a key. If inside a [reactive\n   * computation](#reactivity), invalidate the computation the next time the\n   * value associated with this key is changed by\n   * [`ReactiveDict.set`](#ReactiveDict-set).\n   * This returns a clone of the value, so if it's an object or an array,\n   * mutating the returned value has no effect on the value stored in the\n   * ReactiveDict.\n   * @locus Client\n   * @param {String} key The key of the element to return\n   */\n  get(key) {\n    this._ensureKey(key);\n    this.keyDeps[key].depend();\n    return parse(this.keys[key]);\n  }\n\n  /**\n   * @summary Test if the stored entry for a key is equal to a value. If inside a\n   * [reactive computation](#reactivity), invalidate the computation the next\n   * time the variable changes to or from the value.\n   * @locus Client\n   * @param {String} key The name of the session variable to test\n   * @param {String | Number | Boolean | null | undefined} value The value to\n   * test against\n   */\n  equals(key, value) {\n    // Mongo.ObjectID is in the 'mongo' package\n    let ObjectID = null;\n    if (Package.mongo) {\n      ObjectID = Package.mongo.Mongo.ObjectID;\n    }\n    // We don't allow objects (or arrays that might include objects) for\n    // .equals, because JSON.stringify doesn't canonicalize object key\n    // order. (We can make equals have the right return value by parsing the\n    // current value and using EJSON.equals, but we won't have a canonical\n    // element of keyValueDeps[key] to store the dependency.) You can still use\n    // \"EJSON.equals(reactiveDict.get(key), value)\".\n    //\n    // XXX we could allow arrays as long as we recursively check that there\n    // are no objects\n    if (typeof value !== 'string' &&\n        typeof value !== 'number' &&\n        typeof value !== 'boolean' &&\n        typeof value !== 'undefined' &&\n        !(value instanceof Date) &&\n        !(ObjectID && value instanceof ObjectID) &&\n        value !== null) {\n      throw new Error(\"ReactiveDict.equals: value must be scalar\");\n    }\n    const serializedValue = stringify(value);\n\n    if (Tracker.active) {\n      this._ensureKey(key);\n\n      if (! hasOwn.call(this.keyValueDeps[key], serializedValue)) {\n        this.keyValueDeps[key][serializedValue] = new Tracker.Dependency;\n      }\n\n      var isNew = this.keyValueDeps[key][serializedValue].depend();\n      if (isNew) {\n        Tracker.onInvalidate(() => {\n          // clean up [key][serializedValue] if it's now empty, so we don't\n          // use O(n) memory for n = values seen ever\n          if (! this.keyValueDeps[key][serializedValue].hasDependents()) {\n            delete this.keyValueDeps[key][serializedValue];\n          }\n        });\n      }\n    }\n\n    let oldValue = undefined;\n    if (hasOwn.call(this.keys, key)) {\n      oldValue = parse(this.keys[key]);\n    }\n    return EJSON.equals(oldValue, value);\n  }\n\n  /**\n   * @summary Get all key-value pairs as a plain object. If inside a [reactive\n   * computation](#reactivity), invalidate the computation the next time the\n   * value associated with any key is changed by\n   * [`ReactiveDict.set`](#ReactiveDict-set).\n   * This returns a clone of each value, so if it's an object or an array,\n   * mutating the returned value has no effect on the value stored in the\n   * ReactiveDict.\n   * @locus Client\n   */\n  all() {\n    this.allDeps.depend();\n    let ret = {};\n    Object.keys(this.keys).forEach(key => {\n      ret[key] = parse(this.keys[key]);\n    });\n    return ret;\n  }\n\n  /**\n   * @summary remove all key-value pairs from the ReactiveDict. Notify any\n   * listeners that the value has changed (eg: redraw templates, and rerun any\n   * [`Tracker.autorun`](#tracker_autorun) computations, that called\n   * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)\n   * @locus Client\n   */\n  clear() {\n    const oldKeys = this.keys;\n    this.keys = {};\n\n    this.allDeps.changed();\n\n    Object.keys(oldKeys).forEach(key => {\n      changed(this.keyDeps[key]);\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][oldKeys[key]]);\n        changed(this.keyValueDeps[key]['undefined']);\n      }\n    });\n  }\n\n  /**\n   * @summary remove a key-value pair from the ReactiveDict. Notify any listeners\n   * that the value has changed (eg: redraw templates, and rerun any\n   * [`Tracker.autorun`](#tracker_autorun) computations, that called\n   * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)\n   * @locus Client\n   * @param {String} key The key to delete, eg, `selectedItem`\n   */\n  delete(key) {\n    let didRemove = false;\n\n    if (hasOwn.call(this.keys, key)) {\n      const oldValue = this.keys[key];\n      delete this.keys[key];\n      changed(this.keyDeps[key]);\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][oldValue]);\n        changed(this.keyValueDeps[key]['undefined']);\n      }\n      this.allDeps.changed();\n      didRemove = true;\n    }\n    return didRemove;\n  }\n\n  /**\n   * @summary Clear all values from the reactiveDict and prevent it from being\n   * migrated on a Hot Code Pushes. Notify any listeners\n   * that the value has changed (eg: redraw templates, and rerun any\n   * [`Tracker.autorun`](#tracker_autorun) computations, that called\n   * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)\n   * @locus Client\n   */\n  destroy() {\n    this.clear();\n    if (this.name && hasOwn.call(ReactiveDict._dictsToMigrate, this.name)) {\n      delete ReactiveDict._dictsToMigrate[this.name];\n    }\n  }\n\n  _setObject(object) {\n    Object.keys(object).forEach(key => {\n      this.set(key, object[key]);\n    });\n  }\n\n  _setDefaultObject(object) {\n    Object.keys(object).forEach(key => {\n      this.setDefault(key, object[key]);\n    });\n  }\n\n  _ensureKey(key) {\n    if (!(key in this.keyDeps)) {\n      this.keyDeps[key] = new Tracker.Dependency;\n      this.keyValueDeps[key] = {};\n    }\n  }\n\n  // Get a JSON value that can be passed to the constructor to\n  // create a new ReactiveDict with the same contents as this one\n  _getMigrationData() {\n    // XXX sanitize and make sure it's JSONible?\n    return this.keys;\n  }\n}\n"]}