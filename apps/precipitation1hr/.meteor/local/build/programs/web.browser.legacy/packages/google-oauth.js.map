{"version":3,"sources":["meteor://ðŸ’»app/packages/google-oauth/google_client.js","meteor://ðŸ’»app/packages/google-oauth/namespace.js"],"names":["Google","module","link","v","hasOwn","Object","prototype","hasOwnProperty","ILLEGAL_PARAMETERS","requestCredential","options","credentialRequestCompleteCallback","config","ServiceConfiguration","configurations","findOne","service","ConfigError","credentialToken","Random","secret","requiredScopes","scopes","requestPermissions","forEach","scope","keys","loginUrlParameters","assign","key","call","Error","requestOfflineToken","access_type","prompt","forceApprovalPrompt","loginHint","login_hint","loginStyle","OAuth","_loginStyle","clientId","join","_redirectUri","_stateParam","redirectUrl","loginUrl","map","param","encodeURIComponent","launchLogin","loginService","popupOptions","height","exports"],"mappings":"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","file":"/packages/google-oauth.js","sourcesContent":["import Google from './namespace.js';\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nconst ILLEGAL_PARAMETERS = {\n  'response_type': 1,\n  'client_id': 1,\n  'scope': 1,\n  'redirect_uri': 1,\n  'state': 1\n};\n\n// Request Google credentials for the user\n// @param options {optional}\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\n//   completion. Takes one argument, credentialToken on success, or Error on\n//   error.\nGoogle.requestCredential = (options, credentialRequestCompleteCallback) => {\n  // support both (options, callback) and (callback).\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {\n    credentialRequestCompleteCallback = options;\n    options = {};\n  } else if (!options) {\n    options = {};\n  }\n\n  const config = ServiceConfiguration.configurations.findOne({service: 'google'});\n  if (!config) {\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(\n      new ServiceConfiguration.ConfigError());\n    return;\n  }\n\n  const credentialToken = Random.secret();\n\n  // we need the email scope to get user id from google.\n  const requiredScopes = { 'email': 1 };\n  let scopes = options.requestPermissions || ['profile'];\n  scopes.forEach(scope => requiredScopes[scope] = 1);\n  scopes = Object.keys(requiredScopes);\n\n  const loginUrlParameters = {};\n  if (config.loginUrlParameters){\n    Object.assign(loginUrlParameters, config.loginUrlParameters);\n  }\n  if (options.loginUrlParameters){\n    Object.assign(loginUrlParameters, options.loginUrlParameters);\n  }\n\n  // validate options keys\n  Object.keys(loginUrlParameters).forEach(key => {\n    if (hasOwn.call(ILLEGAL_PARAMETERS, key)) {\n      throw new Error(`Google.requestCredential: Invalid loginUrlParameter: ${key}`);\n    }\n  });\n\n  // backwards compatible options\n  if (options.requestOfflineToken != null){\n    loginUrlParameters.access_type = options.requestOfflineToken ? 'offline' : 'online'\n  }\n  if (options.prompt != null) {\n    loginUrlParameters.prompt = options.prompt;\n  } else if (options.forceApprovalPrompt) {\n    loginUrlParameters.prompt = 'consent'\n  }\n\n  if (options.loginHint) {\n    loginUrlParameters.login_hint = options.loginHint;\n  }\n\n  const loginStyle = OAuth._loginStyle('google', config, options);\n  // https://developers.google.com/accounts/docs/OAuth2WebServer#formingtheurl\n  Object.assign(loginUrlParameters, {\n    \"response_type\": \"code\",\n    \"client_id\":  config.clientId,\n    \"scope\": scopes.join(' '), // space delimited\n    \"redirect_uri\": OAuth._redirectUri('google', config),\n    \"state\": OAuth._stateParam(loginStyle, credentialToken, options.redirectUrl)\n  });\n  const loginUrl = 'https://accounts.google.com/o/oauth2/auth?' +\n    Object.keys(loginUrlParameters).map(param => \n      `${encodeURIComponent(param)}=${encodeURIComponent(loginUrlParameters[param])}`\n    ).join(\"&\");\n\n  OAuth.launchLogin({\n    loginService: \"google\",\n    loginStyle,\n    loginUrl,\n    credentialRequestCompleteCallback,\n    credentialToken,\n    popupOptions: { height: 600 }\n  });\n};\n","// The module.exports object of this module becomes the Google namespace\n// for other modules in this package.\nGoogle = module.exports;\n\n// So that api.export finds the \"Google\" property.\nGoogle.Google = Google;\n"]}