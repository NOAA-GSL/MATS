[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar EJSON = Package.ejson.EJSON;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar IdMap;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"id-map\":{\"id-map.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// packages/id-map/id-map.js                                                                //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\nmodule.export({\n  IdMap: function () {\n    return IdMap;\n  }\n});\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nvar IdMap =\n/*#__PURE__*/\nfunction () {\n  function IdMap(idStringify, idParse) {\n    this.clear();\n    this._idStringify = idStringify || JSON.stringify;\n    this._idParse = idParse || JSON.parse;\n  } // Some of these methods are designed to match methods on OrderedDict, since\n  // (eg) ObserveMultiplex and _CachingChangeObserver use them interchangeably.\n  // (Conceivably, this should be replaced with \"UnorderedDict\" with a specific\n  // set of methods that overlap between the two.)\n\n\n  var _proto = IdMap.prototype;\n\n  _proto.get = function () {\n    function get(id) {\n      var key = this._idStringify(id);\n\n      return this._map[key];\n    }\n\n    return get;\n  }();\n\n  _proto.set = function () {\n    function set(id, value) {\n      var key = this._idStringify(id);\n\n      this._map[key] = value;\n    }\n\n    return set;\n  }();\n\n  _proto.remove = function () {\n    function remove(id) {\n      var key = this._idStringify(id);\n\n      delete this._map[key];\n    }\n\n    return remove;\n  }();\n\n  _proto.has = function () {\n    function has(id) {\n      var key = this._idStringify(id);\n\n      return hasOwn.call(this._map, key);\n    }\n\n    return has;\n  }();\n\n  _proto.empty = function () {\n    function empty() {\n      for (var key in meteorBabelHelpers.sanitizeForInObject(this._map)) {\n        return false;\n      }\n\n      return true;\n    }\n\n    return empty;\n  }();\n\n  _proto.clear = function () {\n    function clear() {\n      this._map = Object.create(null);\n    }\n\n    return clear;\n  }(); // Iterates over the items in the map. Return `false` to break the loop.\n\n\n  _proto.forEach = function () {\n    function forEach(iterator) {\n      // don't use _.each, because we can't break out of it.\n      var keys = Object.keys(this._map);\n\n      for (var i = 0; i < keys.length; i++) {\n        var breakIfFalse = iterator.call(null, this._map[keys[i]], this._idParse(keys[i]));\n\n        if (breakIfFalse === false) {\n          return;\n        }\n      }\n    }\n\n    return forEach;\n  }();\n\n  _proto.size = function () {\n    function size() {\n      return Object.keys(this._map).length;\n    }\n\n    return size;\n  }();\n\n  _proto.setDefault = function () {\n    function setDefault(id, def) {\n      var key = this._idStringify(id);\n\n      if (hasOwn.call(this._map, key)) {\n        return this._map[key];\n      }\n\n      this._map[key] = def;\n      return def;\n    }\n\n    return setDefault;\n  }(); // Assumes that values are EJSON-cloneable, and that we don't need to clone\n  // IDs (ie, that nobody is going to mutate an ObjectId).\n\n\n  _proto.clone = function () {\n    function clone() {\n      var clone = new IdMap(this._idStringify, this._idParse);\n      this.forEach(function (value, id) {\n        clone.set(id, EJSON.clone(value));\n      });\n      return clone;\n    }\n\n    return clone;\n  }();\n\n  return IdMap;\n}();\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/id-map/id-map.js\");\n\n/* Exports */\nPackage._define(\"id-map\", exports, {\n  IdMap: IdMap\n});\n\n})();\n","servePath":"/packages/id-map.js","sourceMap":{"version":3,"sources":["packages/id-map/id-map.js"],"names":["module","export","IdMap","hasOwn","Object","prototype","hasOwnProperty","idStringify","idParse","clear","_idStringify","JSON","stringify","_idParse","parse","get","id","key","_map","set","value","remove","has","call","empty","create","forEach","iterator","keys","i","length","breakIfFalse","size","setDefault","def","clone","EJSON"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,OAAK,EAAC;AAAA,WAAIA,KAAJ;AAAA;AAAP,CAAd;AAAA,IAAMC,MAAM,GAAGC,MAAM,CAACC,SAAP,CAAiBC,cAAhC;;IAEaJ,K;;;AACX,iBAAYK,WAAZ,EAAyBC,OAAzB,EAAkC;AAChC,SAAKC,KAAL;AACA,SAAKC,YAAL,GAAoBH,WAAW,IAAII,IAAI,CAACC,SAAxC;AACA,SAAKC,QAAL,GAAgBL,OAAO,IAAIG,IAAI,CAACG,KAAhC;AACD,G,CAEH;AACA;AACA;AACA;;;;;SAEEC,G;iBAAIC,E,EAAI;AACN,UAAIC,GAAG,GAAG,KAAKP,YAAL,CAAkBM,EAAlB,CAAV;;AACA,aAAO,KAAKE,IAAL,CAAUD,GAAV,CAAP;AACD;;;;;SAEDE,G;iBAAIH,E,EAAII,K,EAAO;AACb,UAAIH,GAAG,GAAG,KAAKP,YAAL,CAAkBM,EAAlB,CAAV;;AACA,WAAKE,IAAL,CAAUD,GAAV,IAAiBG,KAAjB;AACD;;;;;SAEDC,M;oBAAOL,E,EAAI;AACT,UAAIC,GAAG,GAAG,KAAKP,YAAL,CAAkBM,EAAlB,CAAV;;AACA,aAAO,KAAKE,IAAL,CAAUD,GAAV,CAAP;AACD;;;;;SAEDK,G;iBAAIN,E,EAAI;AACN,UAAIC,GAAG,GAAG,KAAKP,YAAL,CAAkBM,EAAlB,CAAV;;AACA,aAAOb,MAAM,CAACoB,IAAP,CAAY,KAAKL,IAAjB,EAAuBD,GAAvB,CAAP;AACD;;;;;SAEDO,K;qBAAQ;AACN,WAAK,IAAIP,GAAT,2CAAgB,KAAKC,IAArB,GAA2B;AACzB,eAAO,KAAP;AACD;;AACD,aAAO,IAAP;AACD;;;;;SAEDT,K;qBAAQ;AACN,WAAKS,IAAL,GAAYd,MAAM,CAACqB,MAAP,CAAc,IAAd,CAAZ;AACD;;;OAED;;;SACAC,O;qBAAQC,Q,EAAU;AAChB;AACA,UAAIC,IAAI,GAAGxB,MAAM,CAACwB,IAAP,CAAY,KAAKV,IAAjB,CAAX;;AACA,WAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACE,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,YAAIE,YAAY,GAAGJ,QAAQ,CAACJ,IAAT,CACjB,IADiB,EAEjB,KAAKL,IAAL,CAAUU,IAAI,CAACC,CAAD,CAAd,CAFiB,EAGjB,KAAKhB,QAAL,CAAce,IAAI,CAACC,CAAD,CAAlB,CAHiB,CAAnB;;AAKA,YAAIE,YAAY,KAAK,KAArB,EAA4B;AAC1B;AACD;AACF;AACF;;;;;SAEDC,I;oBAAO;AACL,aAAO5B,MAAM,CAACwB,IAAP,CAAY,KAAKV,IAAjB,EAAuBY,MAA9B;AACD;;;;;SAEDG,U;wBAAWjB,E,EAAIkB,G,EAAK;AAClB,UAAIjB,GAAG,GAAG,KAAKP,YAAL,CAAkBM,EAAlB,CAAV;;AACA,UAAIb,MAAM,CAACoB,IAAP,CAAY,KAAKL,IAAjB,EAAuBD,GAAvB,CAAJ,EAAiC;AAC/B,eAAO,KAAKC,IAAL,CAAUD,GAAV,CAAP;AACD;;AACD,WAAKC,IAAL,CAAUD,GAAV,IAAiBiB,GAAjB;AACA,aAAOA,GAAP;AACD;;;OAED;AACA;;;SACAC,K;qBAAQ;AACN,UAAIA,KAAK,GAAG,IAAIjC,KAAJ,CAAU,KAAKQ,YAAf,EAA6B,KAAKG,QAAlC,CAAZ;AACA,WAAKa,OAAL,CAAa,UAAUN,KAAV,EAAiBJ,EAAjB,EAAqB;AAChCmB,aAAK,CAAChB,GAAN,CAAUH,EAAV,EAAcoB,KAAK,CAACD,KAAN,CAAYf,KAAZ,CAAd;AACD,OAFD;AAGA,aAAOe,KAAP;AACD","file":"/packages/id-map.js","sourcesContent":["const hasOwn = Object.prototype.hasOwnProperty;\n\nexport class IdMap {\n  constructor(idStringify, idParse) {\n    this.clear();\n    this._idStringify = idStringify || JSON.stringify;\n    this._idParse = idParse || JSON.parse;\n  }\n\n// Some of these methods are designed to match methods on OrderedDict, since\n// (eg) ObserveMultiplex and _CachingChangeObserver use them interchangeably.\n// (Conceivably, this should be replaced with \"UnorderedDict\" with a specific\n// set of methods that overlap between the two.)\n\n  get(id) {\n    var key = this._idStringify(id);\n    return this._map[key];\n  }\n\n  set(id, value) {\n    var key = this._idStringify(id);\n    this._map[key] = value;\n  }\n\n  remove(id) {\n    var key = this._idStringify(id);\n    delete this._map[key];\n  }\n\n  has(id) {\n    var key = this._idStringify(id);\n    return hasOwn.call(this._map, key);\n  }\n\n  empty() {\n    for (let key in this._map) {\n      return false;\n    }\n    return true;\n  }\n\n  clear() {\n    this._map = Object.create(null);\n  }\n\n  // Iterates over the items in the map. Return `false` to break the loop.\n  forEach(iterator) {\n    // don't use _.each, because we can't break out of it.\n    var keys = Object.keys(this._map);\n    for (var i = 0; i < keys.length; i++) {\n      var breakIfFalse = iterator.call(\n        null,\n        this._map[keys[i]],\n        this._idParse(keys[i])\n      );\n      if (breakIfFalse === false) {\n        return;\n      }\n    }\n  }\n\n  size() {\n    return Object.keys(this._map).length;\n  }\n\n  setDefault(id, def) {\n    var key = this._idStringify(id);\n    if (hasOwn.call(this._map, key)) {\n      return this._map[key];\n    }\n    this._map[key] = def;\n    return def;\n  }\n\n  // Assumes that values are EJSON-cloneable, and that we don't need to clone\n  // IDs (ie, that nobody is going to mutate an ObjectId).\n  clone() {\n    var clone = new IdMap(this._idStringify, this._idParse);\n    this.forEach(function (value, id) {\n      clone.set(id, EJSON.clone(value));\n    });\n    return clone;\n  }\n}\n"]}}]