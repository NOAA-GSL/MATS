[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Retry = Package.retry.Retry;\nvar DDP = Package['ddp-client'].DDP;\nvar Mongo = Package.mongo.Mongo;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar Autoupdate;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"autoupdate\":{\"autoupdate_client.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                          //\n// packages/autoupdate/autoupdate_client.js                                                                 //\n//                                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                            //\nmodule.export({\n  Autoupdate: function () {\n    return Autoupdate;\n  }\n});\n// Subscribe to the `meteor_autoupdate_clientVersions` collection,\n// which contains the set of acceptable client versions.\n//\n// A \"hard code push\" occurs when the running client version is not in\n// the set of acceptable client versions (or the server updates the\n// collection, there is a published client version marked `current` and\n// the running client version is no longer in the set).\n//\n// When the `reload` package is loaded, a hard code push causes\n// the browser to reload, so that it will load the latest client\n// version from the server.\n//\n// A \"soft code push\" represents the situation when the running client\n// version is in the set of acceptable versions, but there is a newer\n// version available on the server.\n//\n// `Autoupdate.newClientAvailable` is a reactive data source which\n// becomes `true` if there is a new version of the client is available on\n// the server.\n//\n// This package doesn't implement a soft code reload process itself,\n// but `newClientAvailable` could be used for example to display a\n// \"click to reload\" link to the user.\n// The client version of the client code currently running in the\n// browser.\nvar clientArch = Meteor.isCordova ? \"web.cordova\" : Meteor.isModern ? \"web.browser\" : \"web.browser.legacy\";\nvar autoupdateVersions = ((__meteor_runtime_config__.autoupdate || {}).versions || {})[clientArch] || {\n  version: \"unknown\",\n  versionRefreshable: \"unknown\",\n  versionNonRefreshable: \"unknown\",\n  assets: []\n};\nvar Autoupdate = {};\n// The collection of acceptable client versions.\nvar ClientVersions = Autoupdate._ClientVersions = // Used by a self-test.\nnew Mongo.Collection(\"meteor_autoupdate_clientVersions\");\n\nAutoupdate.newClientAvailable = function () {\n  return !!(ClientVersions.findOne({\n    _id: clientArch,\n    versionNonRefreshable: {\n      $ne: autoupdateVersions.versionNonRefreshable\n    }\n  }) || ClientVersions.findOne({\n    _id: clientArch,\n    versionRefreshable: {\n      $ne: autoupdateVersions.versionRefreshable\n    }\n  }));\n}; // Set to true if the link.onload callback ever fires for any <link> node.\n\n\nvar knownToSupportCssOnLoad = false;\nvar retry = new Retry({\n  // Unlike the stream reconnect use of Retry, which we want to be instant\n  // in normal operation, this is a wacky failure. We don't want to retry\n  // right away, we can start slowly.\n  //\n  // A better way than timeconstants here might be to use the knowledge\n  // of when we reconnect to help trigger these retries. Typically, the\n  // server fixing code will result in a restart and reconnect, but\n  // potentially the subscription could have a transient error.\n  minCount: 0,\n  // don't do any immediate retries\n  baseTimeout: 30 * 1000 // start with 30s\n\n});\nvar failures = 0;\n\nAutoupdate._retrySubscription = function () {\n  Meteor.subscribe(\"meteor_autoupdate_clientVersions\", {\n    onError: function (error) {\n      Meteor._debug(\"autoupdate subscription failed\", error);\n\n      failures++;\n      retry.retryLater(failures, function () {\n        // Just retry making the subscription, don't reload the whole\n        // page. While reloading would catch more cases (for example,\n        // the server went back a version and is now doing old-style hot\n        // code push), it would also be more prone to reload loops,\n        // which look really bad to the user. Just retrying the\n        // subscription over DDP means it is at least possible to fix by\n        // updating the server.\n        Autoupdate._retrySubscription();\n      });\n    },\n    onReady: function () {\n      // Call checkNewVersionDocument with a slight delay, so that the\n      // const handle declaration is guaranteed to be initialized, even if\n      // the added or changed callbacks are called synchronously.\n      var resolved = Promise.resolve();\n\n      function check(doc) {\n        resolved.then(function () {\n          return checkNewVersionDocument(doc);\n        });\n      }\n\n      var handle = ClientVersions.find().observe({\n        added: check,\n        changed: check\n      });\n\n      function checkNewVersionDocument(doc) {\n        if (doc._id !== clientArch) {\n          return;\n        }\n\n        if (doc.versionNonRefreshable !== autoupdateVersions.versionNonRefreshable) {\n          // Non-refreshable assets have changed, so we have to reload the\n          // whole page rather than just replacing <link> tags.\n          if (handle) handle.stop();\n\n          if (Package.reload) {\n            // The reload package should be provided by ddp-client, which\n            // is provided by the ddp package that autoupdate depends on.\n            Package.reload.Reload._reload();\n          }\n\n          return;\n        }\n\n        if (doc.versionRefreshable !== autoupdateVersions.versionRefreshable) {\n          var waitUntilCssLoads = function (link, callback) {\n            var called;\n\n            link.onload = function () {\n              knownToSupportCssOnLoad = true;\n\n              if (!called) {\n                called = true;\n                callback();\n              }\n            };\n\n            if (!knownToSupportCssOnLoad) {\n              var id = Meteor.setInterval(function () {\n                if (link.sheet) {\n                  if (!called) {\n                    called = true;\n                    callback();\n                  }\n\n                  Meteor.clearInterval(id);\n                }\n              }, 50);\n            }\n          };\n\n          var removeOldLinks = function () {\n            if (oldLinks.length > 0 && --newLinksLeftToLoad < 1) {\n              oldLinks.splice(0).forEach(function (link) {\n                link.parentNode.removeChild(link);\n              });\n            }\n          };\n\n          autoupdateVersions.versionRefreshable = doc.versionRefreshable; // Switch out old css links for the new css links. Inspired by:\n          // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710\n\n          var newCss = doc.assets || [];\n          var oldLinks = [];\n          Array.prototype.forEach.call(document.getElementsByTagName('link'), function (link) {\n            if (link.className === '__meteor-css__') {\n              oldLinks.push(link);\n            }\n          });\n          var newLinksLeftToLoad = newCss.length;\n\n          if (newCss.length > 0) {\n            newCss.forEach(function (css) {\n              var newLink = document.createElement(\"link\");\n              newLink.setAttribute(\"rel\", \"stylesheet\");\n              newLink.setAttribute(\"type\", \"text/css\");\n              newLink.setAttribute(\"class\", \"__meteor-css__\");\n              newLink.setAttribute(\"href\", css.url);\n              waitUntilCssLoads(newLink, function () {\n                Meteor.setTimeout(removeOldLinks, 200);\n              });\n              var head = document.getElementsByTagName(\"head\").item(0);\n              head.appendChild(newLink);\n            });\n          } else {\n            removeOldLinks();\n          }\n        }\n      }\n    }\n  });\n};\n\nAutoupdate._retrySubscription();\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/autoupdate/autoupdate_client.js\");\n\n/* Exports */\nPackage._define(\"autoupdate\", exports, {\n  Autoupdate: Autoupdate\n});\n\n})();\n","servePath":"/packages/autoupdate.js","sourceMap":{"version":3,"sources":["packages/autoupdate/autoupdate_client.js"],"names":["module","export","Autoupdate","clientArch","Meteor","isCordova","isModern","autoupdateVersions","__meteor_runtime_config__","autoupdate","versions","version","versionRefreshable","versionNonRefreshable","assets","ClientVersions","_ClientVersions","Mongo","Collection","newClientAvailable","findOne","_id","$ne","knownToSupportCssOnLoad","retry","Retry","minCount","baseTimeout","failures","_retrySubscription","subscribe","onError","error","_debug","retryLater","onReady","resolved","Promise","resolve","check","doc","then","checkNewVersionDocument","handle","find","observe","added","changed","stop","Package","reload","Reload","_reload","waitUntilCssLoads","link","callback","called","onload","id","setInterval","sheet","clearInterval","removeOldLinks","oldLinks","length","newLinksLeftToLoad","splice","forEach","parentNode","removeChild","newCss","Array","prototype","call","document","getElementsByTagName","className","push","css","newLink","createElement","setAttribute","url","setTimeout","head","item","appendChild"],"mappings":"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","file":"/packages/autoupdate.js","sourcesContent":["// Subscribe to the `meteor_autoupdate_clientVersions` collection,\n// which contains the set of acceptable client versions.\n//\n// A \"hard code push\" occurs when the running client version is not in\n// the set of acceptable client versions (or the server updates the\n// collection, there is a published client version marked `current` and\n// the running client version is no longer in the set).\n//\n// When the `reload` package is loaded, a hard code push causes\n// the browser to reload, so that it will load the latest client\n// version from the server.\n//\n// A \"soft code push\" represents the situation when the running client\n// version is in the set of acceptable versions, but there is a newer\n// version available on the server.\n//\n// `Autoupdate.newClientAvailable` is a reactive data source which\n// becomes `true` if there is a new version of the client is available on\n// the server.\n//\n// This package doesn't implement a soft code reload process itself,\n// but `newClientAvailable` could be used for example to display a\n// \"click to reload\" link to the user.\n\n// The client version of the client code currently running in the\n// browser.\n\nconst clientArch = Meteor.isCordova ? \"web.cordova\" :\n  Meteor.isModern ? \"web.browser\" : \"web.browser.legacy\";\n\nconst autoupdateVersions =\n  ((__meteor_runtime_config__.autoupdate || {}).versions || {})[clientArch] || {\n    version: \"unknown\",\n    versionRefreshable: \"unknown\",\n    versionNonRefreshable: \"unknown\",\n    assets: [],\n  };\n\nexport const Autoupdate = {};\n\n// The collection of acceptable client versions.\nconst ClientVersions =\n  Autoupdate._ClientVersions = // Used by a self-test.\n  new Mongo.Collection(\"meteor_autoupdate_clientVersions\");\n\nAutoupdate.newClientAvailable = function () {\n  return !! (\n    ClientVersions.findOne({\n      _id: clientArch,\n      versionNonRefreshable: {\n        $ne: autoupdateVersions.versionNonRefreshable,\n      }\n    }) ||\n    ClientVersions.findOne({\n      _id: clientArch,\n      versionRefreshable: {\n        $ne: autoupdateVersions.versionRefreshable,\n      }\n    })\n  );\n};\n\n// Set to true if the link.onload callback ever fires for any <link> node.\nlet knownToSupportCssOnLoad = false;\n\nconst retry = new Retry({\n  // Unlike the stream reconnect use of Retry, which we want to be instant\n  // in normal operation, this is a wacky failure. We don't want to retry\n  // right away, we can start slowly.\n  //\n  // A better way than timeconstants here might be to use the knowledge\n  // of when we reconnect to help trigger these retries. Typically, the\n  // server fixing code will result in a restart and reconnect, but\n  // potentially the subscription could have a transient error.\n  minCount: 0, // don't do any immediate retries\n  baseTimeout: 30*1000 // start with 30s\n});\n\nlet failures = 0;\n\nAutoupdate._retrySubscription = () => {\n  Meteor.subscribe(\"meteor_autoupdate_clientVersions\", {\n    onError(error) {\n      Meteor._debug(\"autoupdate subscription failed\", error);\n      failures++;\n      retry.retryLater(failures, function () {\n        // Just retry making the subscription, don't reload the whole\n        // page. While reloading would catch more cases (for example,\n        // the server went back a version and is now doing old-style hot\n        // code push), it would also be more prone to reload loops,\n        // which look really bad to the user. Just retrying the\n        // subscription over DDP means it is at least possible to fix by\n        // updating the server.\n        Autoupdate._retrySubscription();\n      });\n    },\n\n    onReady() {\n      // Call checkNewVersionDocument with a slight delay, so that the\n      // const handle declaration is guaranteed to be initialized, even if\n      // the added or changed callbacks are called synchronously.\n      const resolved = Promise.resolve();\n      function check(doc) {\n        resolved.then(() => checkNewVersionDocument(doc));\n      }\n\n      const handle = ClientVersions.find().observe({\n        added: check,\n        changed: check\n      });\n\n      function checkNewVersionDocument(doc) {\n        if (doc._id !== clientArch) {\n          return;\n        }\n\n        if (doc.versionNonRefreshable !==\n            autoupdateVersions.versionNonRefreshable) {\n          // Non-refreshable assets have changed, so we have to reload the\n          // whole page rather than just replacing <link> tags.\n          if (handle) handle.stop();\n          if (Package.reload) {\n            // The reload package should be provided by ddp-client, which\n            // is provided by the ddp package that autoupdate depends on.\n            Package.reload.Reload._reload();\n          }\n          return;\n        }\n\n        if (doc.versionRefreshable !== autoupdateVersions.versionRefreshable) {\n          autoupdateVersions.versionRefreshable = doc.versionRefreshable;\n\n          // Switch out old css links for the new css links. Inspired by:\n          // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710\n          var newCss = doc.assets || [];\n          var oldLinks = [];\n\n          Array.prototype.forEach.call(\n            document.getElementsByTagName('link'),\n            function (link) {\n              if (link.className === '__meteor-css__') {\n                oldLinks.push(link);\n              }\n            }\n          );\n\n          function waitUntilCssLoads(link, callback) {\n            var called;\n\n            link.onload = function () {\n              knownToSupportCssOnLoad = true;\n              if (! called) {\n                called = true;\n                callback();\n              }\n            };\n\n            if (! knownToSupportCssOnLoad) {\n              var id = Meteor.setInterval(function () {\n                if (link.sheet) {\n                  if (! called) {\n                    called = true;\n                    callback();\n                  }\n                  Meteor.clearInterval(id);\n                }\n              }, 50);\n            }\n          }\n\n          let newLinksLeftToLoad = newCss.length;\n          function removeOldLinks() {\n            if (oldLinks.length > 0 &&\n                --newLinksLeftToLoad < 1) {\n              oldLinks.splice(0).forEach(link => {\n                link.parentNode.removeChild(link);\n              });\n            }\n          }\n\n          if (newCss.length > 0) {\n            newCss.forEach(css => {\n              const newLink = document.createElement(\"link\");\n              newLink.setAttribute(\"rel\", \"stylesheet\");\n              newLink.setAttribute(\"type\", \"text/css\");\n              newLink.setAttribute(\"class\", \"__meteor-css__\");\n              newLink.setAttribute(\"href\", css.url);\n\n              waitUntilCssLoads(newLink, function () {\n                Meteor.setTimeout(removeOldLinks, 200);\n              });\n\n              const head = document.getElementsByTagName(\"head\").item(0);\n              head.appendChild(newLink);\n            });\n          } else {\n            removeOldLinks();\n          }\n        }\n      }\n    }\n  });\n};\n\nAutoupdate._retrySubscription();\n"]}}]