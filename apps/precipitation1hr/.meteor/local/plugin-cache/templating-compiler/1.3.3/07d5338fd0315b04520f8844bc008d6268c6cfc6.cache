{"head":"","body":"","js":"\nTemplate.__checkName(\"curveParams\");\nTemplate[\"curveParams\"] = new Template(\"Template.curveParams\", (function() {\n  var view = this;\n  return [ HTML.STYLE({\n    id: \"jsbin-css\"\n  }, \"\\n        #apstMoleculeModal .form-group {\\n            padding-right: 20px;\\n            position: relative;\\n        }\\n\\n        #apstMoleculeModal .help {\\n            position: absolute;\\n            right: -8px;\\n            top: 12px;\\n        }\\n    \"), \"\\n    \", HTML.DIV({\n    id: \"curveParamsModal\",\n    class: \"modal wide-modal\",\n    role: \"dialog\"\n  }, \"\\n        \", HTML.DIV({\n    class: \"modal-dialog\",\n    style: \"width:80%;\"\n  }, \"\\n            \", HTML.DIV({\n    class: \"modal-content container\"\n  }, \"\\n                \", HTML.Raw('<div class=\"modal-header\">\\n                    <h4 class=\"modal-title\">Curve Parameters</h4>\\n                </div>'), \"\\n                \", HTML.DIV({\n    class: \"modal-body container\"\n  }, \"\\n                    \", HTML.FORM({\n    class: \"form-horizontal\",\n    name: \"cpForm\",\n    novalidate: \"\"\n  }, \"\\n                        \", HTML.DIV({\n    class: \"form-group\"\n  }, \"\\n                            \", HTML.DIV({\n    class: \"form-group row\"\n  }, \"\\n                                \", HTML.Raw('<div class=\"controls col-xs-1\" style=\"min-width:6em\">\\n                                    <label>Parameter</label>\\n                                </div>'), \"\\n                                \", HTML.Raw('<div class=\"controls col-xs-1\">\\n                                    <button type=\"button\" id=\"curveParams-selection-add\" class=\"curveParams-selection-add btn btn-xs btn-success fa fa-plus\"></button>\\n                                    <button type=\"button\" id=\"curveParams-selection-remove\" class=\"curveParams-selection-remove btn btn-xs btn-danger fa fa-minus\"></button>\\n                                </div>'), \"\\n                                \", HTML.DIV({\n    class: \"controls col-xs-8\"\n  }, \"\\n                                    \", HTML.SELECT({\n    class: \"curveParams-selection\",\n    size: \"5\",\n    name: \"curveParams-selection\",\n    id: \"curveParams-selection\"\n  }, \"\\n                                      \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"curveParams\"));\n  }, function() {\n    return [ \"\\n                                          \", HTML.OPTION({\n      value: function() {\n        return Spacebars.mustache(view.lookup(\"name\"));\n      }\n    }, Blaze.View(\"lookup:name\", function() {\n      return Spacebars.mustache(view.lookup(\"name\"));\n    })), \"\\n                                      \" ];\n  }), \"\\n                                    \"), \"\\n                                \"), \"\\n\\n\\n                            \"), \"\\n\\n                          \", Blaze.If(function() {\n    return Spacebars.dataMustache(view.lookup(\"errorTypeIs\"), \"\");\n  }, function() {\n    return [ \"\\n                              \", HTML.DIV({\n      id: \"errorMessage\",\n      class: \"errorMessage\",\n      style: \"color: red; display: none\"\n    }, Blaze.View(\"lookup:errorMessage\", function() {\n      return Spacebars.mustache(view.lookup(\"errorMessage\"));\n    })), \"\\n                          \" ];\n  }), \"\\n\\n                          \", Blaze.If(function() {\n    return Spacebars.dataMustache(view.lookup(\"errorTypeIs\"), \"name\");\n  }, function() {\n    return [ \"\\n                              \", HTML.DIV({\n      id: \"errorMessage\",\n      class: \"errorMessage\",\n      style: \"color: red; display: none\"\n    }, Blaze.View(\"lookup:errorMessage\", function() {\n      return Spacebars.mustache(view.lookup(\"errorMessage\"));\n    })), \"\\n                          \" ];\n  }), \"\\n                            \", HTML.Raw('<div class=\"form-group row\">\\n                                <div class=\"controls col-xs-2\">\\n                                    <label>Name</label>\\n                                </div>\\n                                <div class=\"controls col-xs-2\" style=\"min-width:12em;\">\\n                                    <input id=\"curveParams-name\" data-field=\"name\" class=\"form-control data-input textInput name\" type=\"text\" placeholder=\"name\" name=\"name\">\\n                                </div>\\n                            </div>'), \"\\n                          \", Blaze.If(function() {\n    return Spacebars.dataMustache(view.lookup(\"errorTypeIs\"), \"type\");\n  }, function() {\n    return [ \"\\n                              \", HTML.DIV({\n      id: \"errorMessage\",\n      class: \"errorMessage\",\n      style: \"color: red; display: none\"\n    }, Blaze.View(\"lookup:errorMessage\", function() {\n      return Spacebars.mustache(view.lookup(\"errorMessage\"));\n    })), \"\\n                          \" ];\n  }), \"\\n                            \", HTML.DIV({\n    class: \"form-group row\"\n  }, \"\\n                                \", HTML.Raw('<div class=\"controls col-xs-2\">\\n                                    <label>Type</label>\\n                                </div>'), \"\\n                                \", HTML.DIV({\n    class: \"controls col-xs-4\"\n  }, \"\\n                                    \", HTML.SELECT({\n    class: \"data-value curveParamsType\",\n    size: \"5\",\n    \"data-field\": \"type\",\n    id: \"curveParams-type\"\n  }, \"\\n                                      \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"types\"));\n  }, function() {\n    return [ \"\\n                                          \", HTML.OPTION({\n      value: function() {\n        return Spacebars.mustache(view.lookup(\".\"));\n      }\n    }, Blaze.View(\"lookup:.\", function() {\n      return Spacebars.mustache(view.lookup(\".\"));\n    })), \"\\n                                      \" ];\n  }), \"\\n                                    \"), \"\\n                                \"), \"\\n                            \"), \"\\n\\n                            \", Blaze.If(function() {\n    return Spacebars.dataMustache(view.lookup(\"errorTypeIs\"), \"options\");\n  }, function() {\n    return [ \"\\n                                \", HTML.DIV({\n      id: \"errorMessage\",\n      class: \"errorMessage\",\n      style: \"color: red; display: none\"\n    }, Blaze.View(\"lookup:errorMessage\", function() {\n      return Spacebars.mustache(view.lookup(\"errorMessage\"));\n    })), \"\\n                            \" ];\n  }), \"\\n                            \", HTML.DIV({\n    class: \"form-group row\"\n  }, \"\\n                                \", HTML.Raw('<div class=\"controls col-xs-1\" style=\"min-width:8em;\">\\n                                    <label>Options Map</label>\\n                                </div>'), \"\\n                                \", HTML.Raw('<div class=\"controls col-xs-1\">\\n                                    <button type=\"button\" id=\"curveParams-option-add\" class=\"curveParams-option-add btn btn-xs btn-success fa fa-plus\"></button>\\n                                    <button type=\"button\" id=\"curveParams-option-remove\" class=\"curveParams-option-remove btn btn-xs btn-danger fa fa-minus\"></button>\\n                                </div>'), \"\\n                                \", HTML.DIV({\n    class: \"controls col-xs-10\"\n  }, \"\\n                                    \", HTML.TABLE({\n    class: \"table table-condensed table-responsive table-bordered\",\n    id: \"optionsTable\"\n  }, \"\\n                                        \", HTML.TBODY(\"\\n                                        \", Blaze.View(\"lookup:optionRows\", function() {\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"optionRows\")));\n  }), \"\\n                                        \"), \"\\n                                    \"), \"\\n                                \"), \"\\n                            \"), \"\\n\\n                            \", Blaze.If(function() {\n    return Spacebars.dataMustache(view.lookup(\"errorTypeIs\"), \"controlButtonCovered\");\n  }, function() {\n    return [ \"\\n                                \", HTML.DIV({\n      id: \"errorMessage\",\n      class: \"errorMessage\",\n      style: \"color: red; display: none\"\n    }, Blaze.View(\"lookup:errorMessage\", function() {\n      return Spacebars.mustache(view.lookup(\"errorMessage\"));\n    })), \"\\n                            \" ];\n  }), \"\\n                            \", HTML.Raw('<div class=\"form-group row\">\\n                                <div class=\"controls col-xs-2\" style=\"min-width:12em;\">\\n                                    <label>Control Button Covered</label>\\n                                </div>\\n                                <div class=\"controls col-xs-2\">\\n                                        <input class=\"data-radio\" type=\"radio\" id=\"curveParams-controlButtonCovered-true\" data-field=\"controlButtonCovered\" name=\"controlButtonCovered\" value=\"true\" checked=\"\">True\\n                                        <input class=\"data-radio\" type=\"radio\" id=\"curveParams-controlButtonCovered-false\" data-field=\"controlButtonCovered\" name=\"controlButtonCovered\" value=\"false\">False\\n                                </div>\\n                            </div>'), \"\\n\\n\\n                            \", Blaze.If(function() {\n    return Spacebars.dataMustache(view.lookup(\"errorTypeIs\"), \"unique\");\n  }, function() {\n    return [ \"\\n                                \", HTML.DIV({\n      id: \"errorMessage\",\n      class: \"errorMessage\",\n      style: \"color: red; display: none\"\n    }, Blaze.View(\"lookup:errorMessage\", function() {\n      return Spacebars.mustache(view.lookup(\"errorMessage\"));\n    })), \"\\n                            \" ];\n  }), \"\\n                            \", HTML.Raw('<div class=\"form-group row\">\\n                                <div class=\"controls col-xs-2\" style=\"min-width:12em;\">\\n                                    <label>Ensure Uniqueness</label>\\n                                </div>\\n                                <div class=\"controls col-xs-2\">\\n                                    <input class=\"data-radio\" type=\"radio\" id=\"curveParams-unique-true\" data-field=\"unique\" name=\"unique\" value=\"true\" checked=\"\">True\\n                                    <input class=\"data-radio\" type=\"radio\" id=\"curveParams-unique-false\" data-field=\"unique\" name=\"unique\" value=\"false\">False\\n                                </div>\\n                            </div>'), \"\\n\\n                            \", Blaze.If(function() {\n    return Spacebars.dataMustache(view.lookup(\"errorTypeIs\"), \"default\");\n  }, function() {\n    return [ \"\\n                                \", HTML.DIV({\n      id: \"errorMessage\",\n      class: \"errorMessage\",\n      style: \"color: red; display: none\"\n    }, Blaze.View(\"lookup:errorMessage\", function() {\n      return Spacebars.mustache(view.lookup(\"errorMessage\"));\n    })), \"\\n                            \" ];\n  }), \"\\n                            \", HTML.DIV({\n    class: \"form-group row\"\n  }, \"\\n                                \", HTML.Raw('<div class=\"controls col-xs-2\" style=\"min-width:12em;\">\\n                                    <label>Default Value</label>\\n                                </div>'), \"\\n                                \", HTML.DIV({\n    class: \"controls col-xs-4\"\n  }, \"\\n                                    \", HTML.INPUT({\n    id: \"curveParams-default\",\n    \"data-field\": \"default\",\n    class: \"form-control data-input textInput default\",\n    type: \"text\",\n    placeholder: function() {\n      return Spacebars.mustache(view.lookup(\"default\"));\n    }\n  }), \"\\n                                \"), \"\\n                            \"), \"\\n\\n                            \", Blaze.If(function() {\n    return Spacebars.dataMustache(view.lookup(\"errorTypeIs\"), \"controlButtonVisibility\");\n  }, function() {\n    return [ \"\\n                                \", HTML.DIV({\n      id: \"errorMessage\",\n      class: \"errorMessage\",\n      style: \"color: red; display: none\"\n    }, Blaze.View(\"lookup:errorMessage\", function() {\n      return Spacebars.mustache(view.lookup(\"errorMessage\"));\n    })), \"\\n                            \" ];\n  }), \"\\n                            \", HTML.Raw('<div class=\"form-group row\">\\n                                <div class=\"controls col-xs-2\" style=\"min-width:12em;\">\\n                                    <label>Control Button Visibility</label>\\n                                </div>\\n                                <div class=\"controls col-xs-2\">\\n                                    <input class=\"data-radio\" type=\"radio\" id=\"curveParams-controlButtonVisibility-block\" data-field=\"curveParams-controlButtonVisibility\" name=\"curveParams-controlButtonVisibility\" value=\"block\" checked=\"\">Visible\\n                                    <input class=\"data-radio\" type=\"radio\" id=\"curveParams-controlButtonVisibility-none\" data-field=\"curveParams-controlButtonVisibility\" name=\"curveParams-controlButtonVisibility\" value=\"none\">Hidden\\n                                </div>\\n                            </div>'), \"\\n\\n                            \", Blaze.If(function() {\n    return Spacebars.dataMustache(view.lookup(\"errorTypeIs\"), \"displayOrder\");\n  }, function() {\n    return [ \"\\n                                \", HTML.DIV({\n      id: \"errorMessage\",\n      class: \"errorMessage\",\n      style: \"color: red; display: none\"\n    }, Blaze.View(\"lookup:errorMessage\", function() {\n      return Spacebars.mustache(view.lookup(\"errorMessage\"));\n    })), \"\\n                            \" ];\n  }), \"\\n                            \", HTML.DIV({\n    class: \"form-group row\"\n  }, \"\\n                                \", HTML.Raw('<div class=\"controls col-xs-2\" style=\"min-width:12em;\">\\n                                    <label>DisplayOrder</label>\\n                                </div>'), \"\\n                                \", HTML.DIV({\n    class: \"controls col-xs-4\"\n  }, \"\\n                                    \", HTML.INPUT({\n    id: \"curveParams-displayOrder\",\n    \"data-field\": \"displayOrder\",\n    class: \"form-control data-input textInput displayOrder\",\n    type: \"number\",\n    placeholder: function() {\n      return Spacebars.mustache(view.lookup(\"displayOrder\"));\n    },\n    min: \"1\",\n    max: \"25\",\n    step: \"1\"\n  }), \"\\n                                \"), \"\\n                            \"), \"\\n\\n                            \", Blaze.If(function() {\n    return Spacebars.dataMustache(view.lookup(\"errorTypeIs\"), \"displayPriority\");\n  }, function() {\n    return [ \"\\n                                \", HTML.DIV({\n      id: \"errorMessage\",\n      class: \"errorMessage\",\n      style: \"color: red; display: none\"\n    }, Blaze.View(\"lookup:errorMessage\", function() {\n      return Spacebars.mustache(view.lookup(\"errorMessage\"));\n    })), \"\\n                            \" ];\n  }), \"\\n                            \", HTML.DIV({\n    class: \"form-group row\"\n  }, \"\\n                                \", HTML.Raw('<div class=\"controls col-xs-2\" style=\"min-width:12em;\">\\n                                    <label>displayPriority</label>\\n                                </div>'), \"\\n                                \", HTML.DIV({\n    class: \"controls col-xs-4\"\n  }, \"\\n                                    \", HTML.INPUT({\n    id: \"curveParams-displayPriority\",\n    \"data-field\": \"displayPriority\",\n    class: \"form-control data-input textInput displayPriority\",\n    type: \"number\",\n    placeholder: function() {\n      return Spacebars.mustache(view.lookup(\"displayPriority\"));\n    },\n    min: \"1\",\n    max: \"10\",\n    step: \"1\"\n  }), \"\\n                                \"), \"\\n                            \"), \"\\n\\n                            \", Blaze.If(function() {\n    return Spacebars.dataMustache(view.lookup(\"errorTypeIs\"), \"displayGroup\");\n  }, function() {\n    return [ \"\\n                                \", HTML.DIV({\n      id: \"errorMessage\",\n      class: \"errorMessage\",\n      style: \"color: red; display: none\"\n    }, Blaze.View(\"lookup:errorMessage\", function() {\n      return Spacebars.mustache(view.lookup(\"errorMessage\"));\n    })), \"\\n                            \" ];\n  }), \"\\n                            \", HTML.DIV({\n    class: \"form-group row\"\n  }, \"\\n                                \", HTML.Raw('<div class=\"controls col-xs-2\" style=\"min-width:12em;\">\\n                                    <label>displayGroup</label>\\n                                </div>'), \"\\n                                \", HTML.DIV({\n    class: \"controls col-xs-4\"\n  }, \"\\n                                    \", HTML.INPUT({\n    id: \"curveParams-displayGroup\",\n    \"data-field\": \"displayGroup\",\n    class: \"form-control data-input textInput displayGroup\",\n    type: \"number\",\n    placeholder: function() {\n      return Spacebars.mustache(view.lookup(\"displayGroup\"));\n    },\n    min: \"1\",\n    max: \"10\",\n    step: \"1\"\n  }), \"\\n                                \"), \"\\n                                \", HTML.Raw('<div class=\"col-xs-9\"></div>'), \"\\n                            \"), \"\\n\\n                        \"), \"\\n                        \", HTML.DIV({\n    id: \"applyCurveParamsModal\",\n    class: \"modal\",\n    role: \"dialog\"\n  }, \"\\n                            \", HTML.DIV({\n    class: \"modal-dialog\"\n  }, \"\\n                                \", HTML.DIV({\n    class: \"modal-content\"\n  }, \"\\n                                    \", HTML.Raw('<div class=\"modal-header\">\\n                                        <h4>Apply Curve Params</h4>\\n                                    </div>'), \"\\n                                    \", HTML.Raw('<div class=\"modal-body\">\\n                                        <label>Apply Comment...</label>\\n                                    </div>'), \"\\n                                    \", HTML.DIV({\n    class: \"controls col-xs-4\"\n  }, \"\\n                                        \", HTML.TEXTAREA({\n    id: \"applyCurveParamsComment\",\n    class: \"applyCurveParamsComment textInput\",\n    value: \"Enter Comment\",\n    placeholder: \"Enter Comment\"\n  }), \"\\n                                    \"), \"\\n                                    \", HTML.Raw('<div class=\"modal-footer btn-group\">\\n                                        <button type=\"button\" class=\"cancel-restore btn btn-info\" data-dismiss=\"modal\">&nbsp;&nbsp;Cancel</button>\\n                                        <button name=\"applyCurveParamsWithComment\" class=\"applyCurveParamsWithComment btn btn-primary\">&nbsp;&nbsp;Apply</button>\\n                                    </div>'), \"\\n                                \"), \"\\n                                \", HTML.Raw(\"<!-- /.modal-content -->\"), \"\\n                            \"), \"\\n                            \", HTML.Raw(\"<!-- /.modal-dialog -->\"), \"\\n                        \"), \"\\n\\n                        \", HTML.DIV({\n    id: \"restoreCurveParamsModal\",\n    class: \"modal\",\n    role: \"dialog\"\n  }, \"\\n                            \", HTML.DIV({\n    class: \"modal-dialog\"\n  }, \"\\n                                \", HTML.DIV({\n    class: \"modal-content\"\n  }, \"\\n                                    \", HTML.Raw('<div class=\"modal-header\">\\n                                        <h4>Restore Curve Params</h4>\\n                                    </div>'), \"\\n                                    \", HTML.DIV({\n    class: \"modal-body\"\n  }, \"\\n                                        \", HTML.Raw(\"<label>Restore from date...</label>\"), \"\\n                                        \", HTML.Raw('<input style=\"font-size: x-small\" type=\"text\" class=\"restoreFromSeconds form-control\" id=\"restoreFromSeconds\" placeholder=\"choose from Restore From\">'), \"\\n                                        \", HTML.DIV({\n    class: \"dropdown\"\n  }, \"\\n                                            \", HTML.Raw('<button id=\"restore-choose-date-toggle\" class=\"btn btn-default btn-xs dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\\n                                                Choose Date (toggle user for comments)<span class=\"caret\"></span>\\n                                            </button>'), \"\\n                                            \", HTML.UL({\n    class: \"dropdown-menu\"\n  }, \"\\n                                                \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"restoreDates\"));\n  }, function() {\n    return [ \"\\n                                                    \", HTML.LI(\"\\n                                                        \", HTML.DIV({\n      class: \"btn-toolbar btn-group-xs\",\n      role: \"toolbar\"\n    }, \"\\n                                                        \", HTML.BUTTON({\n      class: \"restoreCurveParamsDate btn  btn-primary\",\n      \"data-date\": function() {\n        return Spacebars.mustache(view.lookup(\"date\"));\n      },\n      \"data-second\": function() {\n        return Spacebars.mustache(view.lookup(\"second\"));\n      },\n      \"data-user\": function() {\n        return Spacebars.mustache(view.lookup(\"userName\"));\n      },\n      \"data-comment\": function() {\n        return Spacebars.mustache(view.lookup(\"commentStr\"));\n      },\n      id: function() {\n        return [ \"restoreCurveParamsDate-\", Spacebars.mustache(view.lookup(\"second\")) ];\n      }\n    }, Blaze.View(\"lookup:date\", function() {\n      return Spacebars.mustache(view.lookup(\"date\"));\n    })), \"\\n                                                        \", Blaze.View(\"lookup:user\", function() {\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"user\")));\n    }), \"\\n                                                        \", Blaze.View(\"lookup:comment\", function() {\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"comment\")));\n    }), \"\\n                                                        \"), \"\\n                                                    \"), \"\\n                                                \" ];\n  }), \"\\n                                            \"), \"\\n                                        \"), \"\\n                                    \"), \"\\n                                    \", HTML.Raw('<div class=\"modal-footer btn-group\">\\n                                        <button type=\"button\" class=\"cancel-restoreCurveParamsFromDate btn btn-info\">&nbsp;&nbsp;Cancel</button>\\n                                        <button name=\"restoreCurveParamsFromDate\" class=\"restoreCurveParamsFromDate btn btn-primary\">&nbsp;&nbsp;Restore From</button>\\n                                    </div>'), \"\\n                                \"), \"\\n                                \", HTML.Raw(\"<!-- /.modal-content -->\"), \"\\n                            \"), \"\\n                            \", HTML.Raw(\"<!-- /.modal-dialog -->\"), \"\\n                        \"), \"\\n                        \", HTML.Raw('<div class=\"modal-footer btn-group\">\\n                            <button name=\"cancelCurveParams\" type=\"button\" class=\"cancel-curveParams btn btn-info\" data-dismiss=\"modal\">Cancel</button>\\n                            <button name=\"applyCurveParams\" type=\"button\" class=\"applyCurveParams btn btn-primary\">Apply</button>\\n                            <button name=\"restoreCurveParams\" type=\"button\" class=\"restoreCurveParams btn btn-primary\">Restore Previous</button>\\n                        </div>'), \"\\n                    \"), \"\\n                \"), \"\\n            \"), \"\\n            \", HTML.Raw(\"<!-- /.modal-content -->\"), \"\\n        \"), \"\\n        \", HTML.Raw(\"<!-- /.modal-dialog -->\"), \"\\n    \") ];\n}));\n","bodyAttrs":{}}