{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/accounts-base/accounts_client.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/accounts-base/accounts_client.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/accounts-base/accounts_client.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/accounts-base/accounts_client.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/accounts-base/accounts_client.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  AccountsClient: () => AccountsClient,\n  AccountsTest: () => AccountsTest\n});\nlet AccountsCommon;\nmodule.link(\"./accounts_common.js\", {\n  AccountsCommon(v) {\n    AccountsCommon = v;\n  }\n\n}, 0);\n\nclass AccountsClient extends AccountsCommon {\n  constructor(options) {\n    super(options);\n    this._loggingIn = new ReactiveVar(false);\n    this._loggingOut = new ReactiveVar(false);\n    this._loginServicesHandle = this.connection.subscribe(\"meteor.loginServiceConfiguration\");\n    this._pageLoadLoginCallbacks = [];\n    this._pageLoadLoginAttemptInfo = null;\n    this.savedHash = window.location.hash;\n\n    this._initUrlMatching(); // Defined in localstorage_token.js.\n\n\n    this._initLocalStorage(); // This is for .registerClientLoginFunction & .callLoginFunction.\n\n\n    this._loginFuncs = {};\n  } ///\n  /// CURRENT USER\n  ///\n  // @override\n\n\n  userId() {\n    return this.connection.userId();\n  } // This is mostly just called within this file, but Meteor.loginWithPassword\n  // also uses it to make loggingIn() be true during the beginPasswordExchange\n  // method call too.\n\n\n  _setLoggingIn(x) {\n    this._loggingIn.set(x);\n  }\n  /**\n   * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n\n\n  loggingIn() {\n    return this._loggingIn.get();\n  }\n  /**\n   * @summary True if a logout method (such as `Meteor.logout`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n\n\n  loggingOut() {\n    return this._loggingOut.get();\n  }\n  /**\n   * @summary Register a new login function on the client. Intended for OAuth package authors. You can call the login function by using\n   `Accounts.callLoginFunction` or `Accounts.callLoginFunction`.\n   * @locus Client\n   * @param {String} funcName The name of your login function. Used by `Accounts.callLoginFunction` and `Accounts.applyLoginFunction`.\n   Should be the OAuth provider name accordingly.\n   * @param {Function} func The actual function you want to call. Just write it in the manner of `loginWithFoo`.\n   */\n\n\n  registerClientLoginFunction(funcName, func) {\n    if (this._loginFuncs[funcName]) {\n      throw new Error(\"\".concat(funcName, \" has been defined already\"));\n    }\n\n    this._loginFuncs[funcName] = func;\n  }\n  /**\n   * @summary Call a login function defined using `Accounts.registerClientLoginFunction`. Excluding the first argument, all remaining\n   arguments are passed to the login function accordingly. Use `applyLoginFunction` if you want to pass in an arguments array that contains\n   all arguments for the login function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   */\n\n\n  callLoginFunction(funcName) {\n    if (!this._loginFuncs[funcName]) {\n      throw new Error(\"\".concat(funcName, \" was not defined\"));\n    }\n\n    for (var _len = arguments.length, funcArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      funcArgs[_key - 1] = arguments[_key];\n    }\n\n    return this._loginFuncs[funcName].apply(this, funcArgs);\n  }\n  /**\n   * @summary Same as ``callLoginFunction` but accept an `arguments` which contains all arguments for the login\n   function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   * @param {Array} funcArgs The `arguments` for the login function.\n   */\n\n\n  applyLoginFunction(funcName, funcArgs) {\n    if (!this._loginFuncs[funcName]) {\n      throw new Error(\"\".concat(funcName, \" was not defined\"));\n    }\n\n    return this._loginFuncs[funcName].apply(this, funcArgs);\n  }\n  /**\n   * @summary Log the user out.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n\n\n  logout(callback) {\n    this._loggingOut.set(true);\n\n    this.connection.apply('logout', [], {\n      wait: true\n    }, (error, result) => {\n      this._loggingOut.set(false);\n\n      if (error) {\n        callback && callback(error);\n      } else {\n        this.makeClientLoggedOut();\n        callback && callback();\n      }\n    });\n  }\n  /**\n   * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n\n\n  logoutOtherClients(callback) {\n    // We need to make two method calls: one to replace our current token,\n    // and another to remove all tokens except the current one. We want to\n    // call these two methods one after the other, without any other\n    // methods running between them. For example, we don't want `logout`\n    // to be called in between our two method calls (otherwise the second\n    // method call would return an error). Another example: we don't want\n    // logout to be called before the callback for `getNewToken`;\n    // otherwise we would momentarily log the user out and then write a\n    // new token to localStorage.\n    //\n    // To accomplish this, we make both calls as wait methods, and queue\n    // them one after the other, without spinning off the event loop in\n    // between. Even though we queue `removeOtherTokens` before\n    // `getNewToken`, we won't actually send the `removeOtherTokens` call\n    // until the `getNewToken` callback has finished running, because they\n    // are both wait methods.\n    this.connection.apply('getNewToken', [], {\n      wait: true\n    }, (err, result) => {\n      if (!err) {\n        this._storeLoginToken(this.userId(), result.token, result.tokenExpires);\n      }\n    });\n    this.connection.apply('removeOtherTokens', [], {\n      wait: true\n    }, err => callback && callback(err));\n  } ///\n  /// LOGIN METHODS\n  ///\n  // Call a login method on the server.\n  //\n  // A login method is a method which on success calls `this.setUserId(id)` and\n  // `Accounts._setLoginToken` on the server and returns an object with fields\n  // 'id' (containing the user id), 'token' (containing a resume token), and\n  // optionally `tokenExpires`.\n  //\n  // This function takes care of:\n  //   - Updating the Meteor.loggingIn() reactive data source\n  //   - Calling the method in 'wait' mode\n  //   - On success, saving the resume token to localStorage\n  //   - On success, calling Accounts.connection.setUserId()\n  //   - Setting up an onReconnect handler which logs in with\n  //     the resume token\n  //\n  // Options:\n  // - methodName: The method to call (default 'login')\n  // - methodArguments: The arguments for the method\n  // - validateResult: If provided, will be called with the result of the\n  //                 method. If it throws, the client will not be logged in (and\n  //                 its error will be passed to the callback).\n  // - userCallback: Will be called with no arguments once the user is fully\n  //                 logged in, or with the error on error.\n  //\n\n\n  callLoginMethod(options) {\n    options = (0, _objectSpread2.default)({\n      methodName: 'login',\n      methodArguments: [{}],\n      _suppressLoggingIn: false\n    }, options); // Set defaults for callback arguments to no-op functions; make sure we\n    // override falsey values too.\n\n    ['validateResult', 'userCallback'].forEach(f => {\n      if (!options[f]) options[f] = () => null;\n    }); // Prepare callbacks: user provided and onLogin/onLoginFailure hooks.\n\n    let called;\n\n    const loginCallbacks = (_ref) => {\n      let {\n        error,\n        loginDetails\n      } = _ref;\n\n      if (!called) {\n        called = true;\n\n        if (!error) {\n          this._onLoginHook.each(callback => {\n            callback(loginDetails);\n            return true;\n          });\n        } else {\n          this._onLoginFailureHook.each(callback => {\n            callback({\n              error\n            });\n            return true;\n          });\n        }\n\n        options.userCallback(error, loginDetails);\n      }\n    };\n\n    let reconnected = false; // We want to set up onReconnect as soon as we get a result token back from\n    // the server, without having to wait for subscriptions to rerun. This is\n    // because if we disconnect and reconnect between getting the result and\n    // getting the results of subscription rerun, we WILL NOT re-send this\n    // method (because we never re-send methods whose results we've received)\n    // but we WILL call loggedInAndDataReadyCallback at \"reconnect quiesce\"\n    // time. This will lead to makeClientLoggedIn(result.id) even though we\n    // haven't actually sent a login method!\n    //\n    // But by making sure that we send this \"resume\" login in that case (and\n    // calling makeClientLoggedOut if it fails), we'll end up with an accurate\n    // client-side userId. (It's important that livedata_connection guarantees\n    // that the \"reconnect quiesce\"-time call to loggedInAndDataReadyCallback\n    // will occur before the callback from the resume login call.)\n\n    const onResultReceived = (err, result) => {\n      if (err || !result || !result.token) {// Leave onReconnect alone if there was an error, so that if the user was\n        // already logged in they will still get logged in on reconnect.\n        // See issue #4970.\n      } else {\n        // First clear out any previously set Acccounts login onReconnect\n        // callback (to make sure we don't keep piling up duplicate callbacks,\n        // which would then all be triggered when reconnecting).\n        if (this._reconnectStopper) {\n          this._reconnectStopper.stop();\n        }\n\n        this._reconnectStopper = DDP.onReconnect(conn => {\n          if (conn != this.connection) {\n            return;\n          }\n\n          reconnected = true; // If our token was updated in storage, use the latest one.\n\n          const storedToken = this._storedLoginToken();\n\n          if (storedToken) {\n            result = {\n              token: storedToken,\n              tokenExpires: this._storedLoginTokenExpires()\n            };\n          }\n\n          if (!result.tokenExpires) result.tokenExpires = this._tokenExpiration(new Date());\n\n          if (this._tokenExpiresSoon(result.tokenExpires)) {\n            this.makeClientLoggedOut();\n          } else {\n            this.callLoginMethod({\n              methodArguments: [{\n                resume: result.token\n              }],\n              // Reconnect quiescence ensures that the user doesn't see an\n              // intermediate state before the login method finishes. So we don't\n              // need to show a logging-in animation.\n              _suppressLoggingIn: true,\n              userCallback: (error, loginDetails) => {\n                const storedTokenNow = this._storedLoginToken();\n\n                if (error) {\n                  // If we had a login error AND the current stored token is the\n                  // one that we tried to log in with, then declare ourselves\n                  // logged out. If there's a token in storage but it's not the\n                  // token that we tried to log in with, we don't know anything\n                  // about whether that token is valid or not, so do nothing. The\n                  // periodic localStorage poll will decide if we are logged in or\n                  // out with this token, if it hasn't already. Of course, even\n                  // with this check, another tab could insert a new valid token\n                  // immediately before we clear localStorage here, which would\n                  // lead to both tabs being logged out, but by checking the token\n                  // in storage right now we hope to make that unlikely to happen.\n                  //\n                  // If there is no token in storage right now, we don't have to\n                  // do anything; whatever code removed the token from storage was\n                  // responsible for calling `makeClientLoggedOut()`, or the\n                  // periodic localStorage poll will call `makeClientLoggedOut`\n                  // eventually if another tab wiped the token from storage.\n                  if (storedTokenNow && storedTokenNow === result.token) {\n                    this.makeClientLoggedOut();\n                  }\n                } // Possibly a weird callback to call, but better than nothing if\n                // there is a reconnect between \"login result received\" and \"data\n                // ready\".\n\n\n                loginCallbacks({\n                  error,\n                  loginDetails\n                });\n              }\n            });\n          }\n        });\n      }\n    }; // This callback is called once the local cache of the current-user\n    // subscription (and all subscriptions, in fact) are guaranteed to be up to\n    // date.\n\n\n    const loggedInAndDataReadyCallback = (error, result) => {\n      // If the login method returns its result but the connection is lost\n      // before the data is in the local cache, it'll set an onReconnect (see\n      // above). The onReconnect will try to log in using the token, and *it*\n      // will call userCallback via its own version of this\n      // loggedInAndDataReadyCallback. So we don't have to do anything here.\n      if (reconnected) return; // Note that we need to call this even if _suppressLoggingIn is true,\n      // because it could be matching a _setLoggingIn(true) from a\n      // half-completed pre-reconnect login method.\n\n      this._setLoggingIn(false);\n\n      if (error || !result) {\n        error = error || new Error(\"No result from call to \".concat(options.methodName));\n        loginCallbacks({\n          error\n        });\n        return;\n      }\n\n      try {\n        options.validateResult(result);\n      } catch (e) {\n        loginCallbacks({\n          error: e\n        });\n        return;\n      } // Make the client logged in. (The user data should already be loaded!)\n\n\n      this.makeClientLoggedIn(result.id, result.token, result.tokenExpires);\n      loginCallbacks({\n        loginDetails: {\n          type: result.type\n        }\n      });\n    };\n\n    if (!options._suppressLoggingIn) {\n      this._setLoggingIn(true);\n    }\n\n    this.connection.apply(options.methodName, options.methodArguments, {\n      wait: true,\n      onResultReceived: onResultReceived\n    }, loggedInAndDataReadyCallback);\n  }\n\n  makeClientLoggedOut() {\n    // Ensure client was successfully logged in before running logout hooks.\n    if (this.connection._userId) {\n      this._onLogoutHook.each(callback => {\n        callback();\n        return true;\n      });\n    }\n\n    this._unstoreLoginToken();\n\n    this.connection.setUserId(null);\n    this._reconnectStopper && this._reconnectStopper.stop();\n  }\n\n  makeClientLoggedIn(userId, token, tokenExpires) {\n    this._storeLoginToken(userId, token, tokenExpires);\n\n    this.connection.setUserId(userId);\n  } ///\n  /// LOGIN SERVICES\n  ///\n  // A reactive function returning whether the loginServiceConfiguration\n  // subscription is ready. Used by accounts-ui to hide the login button\n  // until we have all the configuration loaded\n  //\n\n\n  loginServicesConfigured() {\n    return this._loginServicesHandle.ready();\n  }\n\n  // Some login services such as the redirect login flow or the resume\n  // login handler can log the user in at page load time.  The\n  // Meteor.loginWithX functions have a callback argument, but the\n  // callback function instance won't be in memory any longer if the\n  // page was reloaded.  The `onPageLoadLogin` function allows a\n  // callback to be registered for the case where the login was\n  // initiated in a previous VM, and we now have the result of the login\n  // attempt in a new VM.\n  // Register a callback to be called if we have information about a\n  // login attempt at page load time.  Call the callback immediately if\n  // we already have the page load login attempt info, otherwise stash\n  // the callback to be called if and when we do get the attempt info.\n  //\n  onPageLoadLogin(f) {\n    if (this._pageLoadLoginAttemptInfo) {\n      f(this._pageLoadLoginAttemptInfo);\n    } else {\n      this._pageLoadLoginCallbacks.push(f);\n    }\n  }\n\n  // Receive the information about the login attempt at page load time.\n  // Call registered callbacks, and also record the info in case\n  // someone's callback hasn't been registered yet.\n  //\n  _pageLoadLogin(attemptInfo) {\n    if (this._pageLoadLoginAttemptInfo) {\n      Meteor._debug('Ignoring unexpected duplicate page load login attempt info');\n\n      return;\n    }\n\n    this._pageLoadLoginCallbacks.forEach(callback => callback(attemptInfo));\n\n    this._pageLoadLoginCallbacks = [];\n    this._pageLoadLoginAttemptInfo = attemptInfo;\n  }\n\n  ///\n  /// LOGIN TOKENS\n  ///\n  // These methods deal with storing a login token and user id in the\n  // browser's localStorage facility. It polls local storage every few\n  // seconds to synchronize login state between multiple tabs in the same\n  // browser.\n  loginWithToken(token, callback) {\n    this.callLoginMethod({\n      methodArguments: [{\n        resume: token\n      }],\n      userCallback: callback\n    });\n  }\n\n  // Semi-internal API. Call this function to re-enable auto login after\n  // if it was disabled at startup.\n  _enableAutoLogin() {\n    this._autoLoginEnabled = true;\n\n    this._pollStoredLoginToken();\n  }\n\n  ///\n  /// STORING\n  ///\n  // Call this from the top level of the test file for any test that does\n  // logging in and out, to protect multiple tabs running the same tests\n  // simultaneously from interfering with each others' localStorage.\n  _isolateLoginTokenForTest() {\n    this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();\n    this.USER_ID_KEY = this.USER_ID_KEY + Random.id();\n  }\n\n  _storeLoginToken(userId, token, tokenExpires) {\n    Meteor._localStorage.setItem(this.USER_ID_KEY, userId);\n\n    Meteor._localStorage.setItem(this.LOGIN_TOKEN_KEY, token);\n\n    if (!tokenExpires) tokenExpires = this._tokenExpiration(new Date());\n\n    Meteor._localStorage.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires); // to ensure that the localstorage poller doesn't end up trying to\n    // connect a second time\n\n\n    this._lastLoginTokenWhenPolled = token;\n  }\n\n  _unstoreLoginToken() {\n    Meteor._localStorage.removeItem(this.USER_ID_KEY);\n\n    Meteor._localStorage.removeItem(this.LOGIN_TOKEN_KEY);\n\n    Meteor._localStorage.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY); // to ensure that the localstorage poller doesn't end up trying to\n    // connect a second time\n\n\n    this._lastLoginTokenWhenPolled = null;\n  }\n\n  // This is private, but it is exported for now because it is used by a\n  // test in accounts-password.\n  _storedLoginToken() {\n    return Meteor._localStorage.getItem(this.LOGIN_TOKEN_KEY);\n  }\n\n  _storedLoginTokenExpires() {\n    return Meteor._localStorage.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n  }\n\n  _storedUserId() {\n    return Meteor._localStorage.getItem(this.USER_ID_KEY);\n  }\n\n  _unstoreLoginTokenIfExpiresSoon() {\n    const tokenExpires = this._storedLoginTokenExpires();\n\n    if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {\n      this._unstoreLoginToken();\n    }\n  }\n\n  ///\n  /// AUTO-LOGIN\n  ///\n  _initLocalStorage() {\n    // Key names to use in localStorage\n    this.LOGIN_TOKEN_KEY = \"Meteor.loginToken\";\n    this.LOGIN_TOKEN_EXPIRES_KEY = \"Meteor.loginTokenExpires\";\n    this.USER_ID_KEY = \"Meteor.userId\";\n    const rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;\n\n    if (rootUrlPathPrefix || this.connection !== Meteor.connection) {\n      // We want to keep using the same keys for existing apps that do not\n      // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have\n      // to log in again after an app updates to a version of Meteor that\n      // contains this code, but it's generally preferable to namespace the\n      // keys so that connections from distinct apps to distinct DDP URLs\n      // will be distinct in Meteor._localStorage.\n      let namespace = \":\".concat(this.connection._stream.rawUrl);\n\n      if (rootUrlPathPrefix) {\n        namespace += \":\".concat(rootUrlPathPrefix);\n      }\n\n      this.LOGIN_TOKEN_KEY += namespace;\n      this.LOGIN_TOKEN_EXPIRES_KEY += namespace;\n      this.USER_ID_KEY += namespace;\n    }\n\n    let token;\n\n    if (this._autoLoginEnabled) {\n      // Immediately try to log in via local storage, so that any DDP\n      // messages are sent after we have established our user account\n      this._unstoreLoginTokenIfExpiresSoon();\n\n      token = this._storedLoginToken();\n\n      if (token) {\n        // On startup, optimistically present us as logged in while the\n        // request is in flight. This reduces page flicker on startup.\n        const userId = this._storedUserId();\n\n        userId && this.connection.setUserId(userId);\n        this.loginWithToken(token, err => {\n          if (err) {\n            Meteor._debug(\"Error logging in with token: \".concat(err));\n\n            this.makeClientLoggedOut();\n          }\n\n          this._pageLoadLogin({\n            type: \"resume\",\n            allowed: !err,\n            error: err,\n            methodName: \"login\",\n            // XXX This is duplicate code with loginWithToken, but\n            // loginWithToken can also be called at other times besides\n            // page load.\n            methodArguments: [{\n              resume: token\n            }]\n          });\n        });\n      }\n    } // Poll local storage every 3 seconds to login if someone logged in in\n    // another tab\n\n\n    this._lastLoginTokenWhenPolled = token;\n\n    if (this._pollIntervalTimer) {\n      // Unlikely that _initLocalStorage will be called more than once for\n      // the same AccountsClient instance, but just in case...\n      clearInterval(this._pollIntervalTimer);\n    }\n\n    this._pollIntervalTimer = setInterval(() => {\n      this._pollStoredLoginToken();\n    }, 3000);\n  }\n\n  _pollStoredLoginToken() {\n    if (!this._autoLoginEnabled) {\n      return;\n    }\n\n    const currentLoginToken = this._storedLoginToken(); // != instead of !== just to make sure undefined and null are treated the same\n\n\n    if (this._lastLoginTokenWhenPolled != currentLoginToken) {\n      if (currentLoginToken) {\n        this.loginWithToken(currentLoginToken, err => {\n          if (err) {\n            this.makeClientLoggedOut();\n          }\n        });\n      } else {\n        this.logout();\n      }\n    }\n\n    this._lastLoginTokenWhenPolled = currentLoginToken;\n  }\n\n  ///\n  /// URLS\n  ///\n  _initUrlMatching() {\n    // By default, allow the autologin process to happen.\n    this._autoLoginEnabled = true; // We only support one callback per URL.\n\n    this._accountsCallbacks = {}; // Try to match the saved value of window.location.hash.\n\n    this._attemptToMatchHash();\n  }\n\n  // Separate out this functionality for testing\n  _attemptToMatchHash() {\n    attemptToMatchHash(this, this.savedHash, defaultSuccessHandler);\n  }\n\n  /**\n   * @summary Register a function to call when a reset password link is clicked\n   * in an email sent by\n   * [`Accounts.sendResetPasswordEmail`](#accounts_sendresetpasswordemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onResetPasswordLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: A password reset token that can be passed to\n   * [`Accounts.resetPassword`](#accounts_resetpassword).\n   * 2. `done`: A function to call when the password reset UI flow is complete. The normal\n   * login process is suspended until this function is called, so that the\n   * password for user A can be reset even if user B was logged in.\n   * @locus Client\n   */\n  onResetPasswordLink(callback) {\n    if (this._accountsCallbacks[\"reset-password\"]) {\n      Meteor._debug(\"Accounts.onResetPasswordLink was called more than once. \" + \"Only one callback added will be executed.\");\n    }\n\n    this._accountsCallbacks[\"reset-password\"] = callback;\n  }\n\n  /**\n   * @summary Register a function to call when an email verification link is\n   * clicked in an email sent by\n   * [`Accounts.sendVerificationEmail`](#accounts_sendverificationemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onEmailVerificationLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: An email verification token that can be passed to\n   * [`Accounts.verifyEmail`](#accounts_verifyemail).\n   * 2. `done`: A function to call when the email verification UI flow is complete.\n   * The normal login process is suspended until this function is called, so\n   * that the user can be notified that they are verifying their email before\n   * being logged in.\n   * @locus Client\n   */\n  onEmailVerificationLink(callback) {\n    if (this._accountsCallbacks[\"verify-email\"]) {\n      Meteor._debug(\"Accounts.onEmailVerificationLink was called more than once. \" + \"Only one callback added will be executed.\");\n    }\n\n    this._accountsCallbacks[\"verify-email\"] = callback;\n  }\n\n  /**\n   * @summary Register a function to call when an account enrollment link is\n   * clicked in an email sent by\n   * [`Accounts.sendEnrollmentEmail`](#accounts_sendenrollmentemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onEnrollmentLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: A password reset token that can be passed to\n   * [`Accounts.resetPassword`](#accounts_resetpassword) to give the newly\n   * enrolled account a password.\n   * 2. `done`: A function to call when the enrollment UI flow is complete.\n   * The normal login process is suspended until this function is called, so that\n   * user A can be enrolled even if user B was logged in.\n   * @locus Client\n   */\n  onEnrollmentLink(callback) {\n    if (this._accountsCallbacks[\"enroll-account\"]) {\n      Meteor._debug(\"Accounts.onEnrollmentLink was called more than once. \" + \"Only one callback added will be executed.\");\n    }\n\n    this._accountsCallbacks[\"enroll-account\"] = callback;\n  }\n\n}\n\n;\n/**\n * @summary True if a login method (such as `Meteor.loginWithPassword`, \n * `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in \n * progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\n\nMeteor.loggingIn = () => Accounts.loggingIn();\n/**\n * @summary True if a logout method (such as `Meteor.logout`) is currently in \n * progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\n\n\nMeteor.loggingOut = () => Accounts.loggingOut();\n/**\n * @summary Log the user out.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\n\n\nMeteor.logout = callback => Accounts.logout(callback);\n/**\n * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\n\n\nMeteor.logoutOtherClients = callback => Accounts.logoutOtherClients(callback);\n/**\n * @summary Login with a Meteor access token.\n * @locus Client\n * @param {Object} [token] Local storage token for use with login across \n * multiple tabs in the same browser.\n * @param {Function} [callback] Optional callback. Called with no arguments on\n * success.\n * @importFromPackage meteor\n */\n\n\nMeteor.loginWithToken = (token, callback) => Accounts.loginWithToken(token, callback); ///\n/// HANDLEBARS HELPERS\n///\n// If our app has a Blaze, register the {{currentUser}} and {{loggingIn}}\n// global helpers.\n\n\nif (Package.blaze) {\n  const {\n    Template\n  } = Package.blaze.Blaze;\n  /**\n   * @global\n   * @name  currentUser\n   * @isHelper true\n   * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.\n   */\n\n  Template.registerHelper('currentUser', () => Meteor.user());\n  /**\n   * @global\n   * @name  loggingIn\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin).\n   */\n\n  Template.registerHelper('loggingIn', () => Meteor.loggingIn());\n  /**\n   * @global\n   * @name  loggingOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingOut()](#meteor_loggingout).\n   */\n\n  Template.registerHelper('loggingOut', () => Meteor.loggingOut());\n  /**\n   * @global\n   * @name  loggingInOrOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin) or [Meteor.loggingOut()](#meteor_loggingout).\n   */\n\n  Template.registerHelper('loggingInOrOut', () => Meteor.loggingIn() || Meteor.loggingOut());\n}\n\nconst defaultSuccessHandler = function (token, urlPart) {\n  // put login in a suspended state to wait for the interaction to finish\n  this._autoLoginEnabled = false; // wait for other packages to register callbacks\n\n  Meteor.startup(() => {\n    // if a callback has been registered for this kind of token, call it\n    if (this._accountsCallbacks[urlPart]) {\n      this._accountsCallbacks[urlPart](token, () => this._enableAutoLogin());\n    }\n  });\n}; // Note that both arguments are optional and are currently only passed by\n// accounts_url_tests.js.\n\n\nconst attemptToMatchHash = (accounts, hash, success) => {\n  // All of the special hash URLs we support for accounts interactions\n  [\"reset-password\", \"verify-email\", \"enroll-account\"].forEach(urlPart => {\n    let token;\n    const tokenRegex = new RegExp(\"^\\\\#\\\\/\".concat(urlPart, \"\\\\/(.*)$\"));\n    const match = hash.match(tokenRegex);\n\n    if (match) {\n      token = match[1]; // XXX COMPAT WITH 0.9.3\n\n      if (urlPart === \"reset-password\") {\n        accounts._resetPasswordToken = token;\n      } else if (urlPart === \"verify-email\") {\n        accounts._verifyEmailToken = token;\n      } else if (urlPart === \"enroll-account\") {\n        accounts._enrollAccountToken = token;\n      }\n    } else {\n      return;\n    } // If no handlers match the hash, then maybe it's meant to be consumed\n    // by some entirely different code, so we only clear it the first time\n    // a handler successfully matches. Note that later handlers reuse the\n    // savedHash, so clearing window.location.hash here will not interfere\n    // with their needs.\n\n\n    window.location.hash = \"\"; // Do some stuff with the token we matched\n\n    success.call(accounts, token, urlPart);\n  });\n}; // Export for testing\n\n\nconst AccountsTest = {\n  attemptToMatchHash: (hash, success) => attemptToMatchHash(Accounts, hash, success)\n};","map":{"version":3,"sources":["packages/accounts-base/accounts_client.js"],"names":["module","export","AccountsClient","AccountsTest","AccountsCommon","link","v","constructor","options","_loggingIn","ReactiveVar","_loggingOut","_loginServicesHandle","connection","subscribe","_pageLoadLoginCallbacks","_pageLoadLoginAttemptInfo","savedHash","window","location","hash","_initUrlMatching","_initLocalStorage","_loginFuncs","userId","_setLoggingIn","x","set","loggingIn","get","loggingOut","registerClientLoginFunction","funcName","func","Error","callLoginFunction","funcArgs","apply","applyLoginFunction","logout","callback","wait","error","result","makeClientLoggedOut","logoutOtherClients","err","_storeLoginToken","token","tokenExpires","callLoginMethod","methodName","methodArguments","_suppressLoggingIn","forEach","f","called","loginCallbacks","loginDetails","_onLoginHook","each","_onLoginFailureHook","userCallback","reconnected","onResultReceived","_reconnectStopper","stop","DDP","onReconnect","conn","storedToken","_storedLoginToken","_storedLoginTokenExpires","_tokenExpiration","Date","_tokenExpiresSoon","resume","storedTokenNow","loggedInAndDataReadyCallback","validateResult","e","makeClientLoggedIn","id","type","_userId","_onLogoutHook","_unstoreLoginToken","setUserId","loginServicesConfigured","ready","onPageLoadLogin","push","_pageLoadLogin","attemptInfo","Meteor","_debug","loginWithToken","_enableAutoLogin","_autoLoginEnabled","_pollStoredLoginToken","_isolateLoginTokenForTest","LOGIN_TOKEN_KEY","Random","USER_ID_KEY","_localStorage","setItem","LOGIN_TOKEN_EXPIRES_KEY","_lastLoginTokenWhenPolled","removeItem","getItem","_storedUserId","_unstoreLoginTokenIfExpiresSoon","rootUrlPathPrefix","__meteor_runtime_config__","ROOT_URL_PATH_PREFIX","namespace","_stream","rawUrl","allowed","_pollIntervalTimer","clearInterval","setInterval","currentLoginToken","_accountsCallbacks","_attemptToMatchHash","attemptToMatchHash","defaultSuccessHandler","onResetPasswordLink","onEmailVerificationLink","onEnrollmentLink","Accounts","Package","blaze","Template","Blaze","registerHelper","user","urlPart","startup","accounts","success","tokenRegex","RegExp","match","_resetPasswordToken","_verifyEmailToken","_enrollAccountToken","call"],"mappings":"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","sourcesContent":["import {AccountsCommon} from \"./accounts_common.js\";\n\n/**\n * @summary Constructor for the `Accounts` object on the client.\n * @locus Client\n * @class AccountsClient\n * @extends AccountsCommon\n * @instancename accountsClient\n * @param {Object} options an object with fields:\n * @param {Object} options.connection Optional DDP connection to reuse.\n * @param {String} options.ddpUrl Optional URL for creating a new DDP connection.\n */\nexport class AccountsClient extends AccountsCommon {\n  constructor(options) {\n    super(options);\n\n    this._loggingIn = new ReactiveVar(false);\n    this._loggingOut = new ReactiveVar(false);\n\n    this._loginServicesHandle =\n      this.connection.subscribe(\"meteor.loginServiceConfiguration\");\n\n    this._pageLoadLoginCallbacks = [];\n    this._pageLoadLoginAttemptInfo = null;\n\n    this.savedHash = window.location.hash;\n    this._initUrlMatching();\n\n    // Defined in localstorage_token.js.\n    this._initLocalStorage();\n\n    // This is for .registerClientLoginFunction & .callLoginFunction.\n    this._loginFuncs = {};\n  }\n\n  ///\n  /// CURRENT USER\n  ///\n\n  // @override\n  userId() {\n    return this.connection.userId();\n  }\n\n  // This is mostly just called within this file, but Meteor.loginWithPassword\n  // also uses it to make loggingIn() be true during the beginPasswordExchange\n  // method call too.\n  _setLoggingIn(x) {\n    this._loggingIn.set(x);\n  }\n\n  /**\n   * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  loggingIn() {\n    return this._loggingIn.get();\n  }\n\n  /**\n   * @summary True if a logout method (such as `Meteor.logout`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  loggingOut() {\n    return this._loggingOut.get();\n  }\n\n  /**\n   * @summary Register a new login function on the client. Intended for OAuth package authors. You can call the login function by using\n   `Accounts.callLoginFunction` or `Accounts.callLoginFunction`.\n   * @locus Client\n   * @param {String} funcName The name of your login function. Used by `Accounts.callLoginFunction` and `Accounts.applyLoginFunction`.\n   Should be the OAuth provider name accordingly.\n   * @param {Function} func The actual function you want to call. Just write it in the manner of `loginWithFoo`.\n   */\n  registerClientLoginFunction(funcName, func) {\n    if (this._loginFuncs[funcName]) {\n      throw new Error(`${funcName} has been defined already`);\n    }\n    this._loginFuncs[funcName] = func;\n  }\n\n  /**\n   * @summary Call a login function defined using `Accounts.registerClientLoginFunction`. Excluding the first argument, all remaining\n   arguments are passed to the login function accordingly. Use `applyLoginFunction` if you want to pass in an arguments array that contains\n   all arguments for the login function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   */\n  callLoginFunction(funcName, ...funcArgs) {\n    if (!this._loginFuncs[funcName]) {\n      throw new Error(`${funcName} was not defined`);\n    }\n    return this._loginFuncs[funcName].apply(this, funcArgs);\n  }\n\n  /**\n   * @summary Same as ``callLoginFunction` but accept an `arguments` which contains all arguments for the login\n   function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   * @param {Array} funcArgs The `arguments` for the login function.\n   */\n  applyLoginFunction(funcName, funcArgs) {\n    if (!this._loginFuncs[funcName]) {\n      throw new Error(`${funcName} was not defined`);\n    }\n    return this._loginFuncs[funcName].apply(this, funcArgs);\n  }\n\n  /**\n   * @summary Log the user out.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logout(callback) {\n    this._loggingOut.set(true);\n    this.connection.apply('logout', [], {\n      wait: true\n    }, (error, result) => {\n      this._loggingOut.set(false);\n      if (error) {\n        callback && callback(error);\n      } else {\n        this.makeClientLoggedOut();\n        callback && callback();\n      }\n    });\n  }\n\n  /**\n   * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logoutOtherClients(callback) {\n    // We need to make two method calls: one to replace our current token,\n    // and another to remove all tokens except the current one. We want to\n    // call these two methods one after the other, without any other\n    // methods running between them. For example, we don't want `logout`\n    // to be called in between our two method calls (otherwise the second\n    // method call would return an error). Another example: we don't want\n    // logout to be called before the callback for `getNewToken`;\n    // otherwise we would momentarily log the user out and then write a\n    // new token to localStorage.\n    //\n    // To accomplish this, we make both calls as wait methods, and queue\n    // them one after the other, without spinning off the event loop in\n    // between. Even though we queue `removeOtherTokens` before\n    // `getNewToken`, we won't actually send the `removeOtherTokens` call\n    // until the `getNewToken` callback has finished running, because they\n    // are both wait methods.\n    this.connection.apply(\n      'getNewToken',\n      [],\n      { wait: true },\n      (err, result) => {\n        if (! err) {\n          this._storeLoginToken(\n            this.userId(),\n            result.token,\n            result.tokenExpires\n          );\n        }\n      }\n    );\n\n    this.connection.apply(\n      'removeOtherTokens',\n      [],\n      { wait: true },\n      err => callback && callback(err)\n    );\n  }\n\n  ///\n  /// LOGIN METHODS\n  ///\n\n  // Call a login method on the server.\n  //\n  // A login method is a method which on success calls `this.setUserId(id)` and\n  // `Accounts._setLoginToken` on the server and returns an object with fields\n  // 'id' (containing the user id), 'token' (containing a resume token), and\n  // optionally `tokenExpires`.\n  //\n  // This function takes care of:\n  //   - Updating the Meteor.loggingIn() reactive data source\n  //   - Calling the method in 'wait' mode\n  //   - On success, saving the resume token to localStorage\n  //   - On success, calling Accounts.connection.setUserId()\n  //   - Setting up an onReconnect handler which logs in with\n  //     the resume token\n  //\n  // Options:\n  // - methodName: The method to call (default 'login')\n  // - methodArguments: The arguments for the method\n  // - validateResult: If provided, will be called with the result of the\n  //                 method. If it throws, the client will not be logged in (and\n  //                 its error will be passed to the callback).\n  // - userCallback: Will be called with no arguments once the user is fully\n  //                 logged in, or with the error on error.\n  //\n  callLoginMethod(options) {\n    options = { \n      methodName: 'login',\n      methodArguments: [{}],\n      _suppressLoggingIn: false,\n      ...options,\n    };\n\n    // Set defaults for callback arguments to no-op functions; make sure we\n    // override falsey values too.\n    ['validateResult', 'userCallback'].forEach(f => {\n      if (!options[f])\n        options[f] = () => null;\n    })\n\n    // Prepare callbacks: user provided and onLogin/onLoginFailure hooks.\n    let called;\n    const loginCallbacks = ({ error, loginDetails }) => {\n      if (!called) {\n        called = true;\n        if (!error) {\n          this._onLoginHook.each(callback => {\n            callback(loginDetails);\n            return true;\n          });\n        } else {\n          this._onLoginFailureHook.each(callback => {\n            callback({ error });\n            return true;\n          });\n        }\n        options.userCallback(error, loginDetails);\n      }\n    }\n\n    let reconnected = false;\n\n    // We want to set up onReconnect as soon as we get a result token back from\n    // the server, without having to wait for subscriptions to rerun. This is\n    // because if we disconnect and reconnect between getting the result and\n    // getting the results of subscription rerun, we WILL NOT re-send this\n    // method (because we never re-send methods whose results we've received)\n    // but we WILL call loggedInAndDataReadyCallback at \"reconnect quiesce\"\n    // time. This will lead to makeClientLoggedIn(result.id) even though we\n    // haven't actually sent a login method!\n    //\n    // But by making sure that we send this \"resume\" login in that case (and\n    // calling makeClientLoggedOut if it fails), we'll end up with an accurate\n    // client-side userId. (It's important that livedata_connection guarantees\n    // that the \"reconnect quiesce\"-time call to loggedInAndDataReadyCallback\n    // will occur before the callback from the resume login call.)\n    const onResultReceived = (err, result) => {\n      if (err || !result || !result.token) {\n        // Leave onReconnect alone if there was an error, so that if the user was\n        // already logged in they will still get logged in on reconnect.\n        // See issue #4970.\n      } else {\n        // First clear out any previously set Acccounts login onReconnect\n        // callback (to make sure we don't keep piling up duplicate callbacks,\n        // which would then all be triggered when reconnecting).\n        if (this._reconnectStopper) {\n          this._reconnectStopper.stop();\n        }\n\n        this._reconnectStopper = DDP.onReconnect(conn => {\n          if (conn != this.connection) {\n            return;\n          }\n          reconnected = true;\n          // If our token was updated in storage, use the latest one.\n          const storedToken = this._storedLoginToken();\n          if (storedToken) {\n            result = {\n              token: storedToken,\n              tokenExpires: this._storedLoginTokenExpires()\n            };\n          }\n          if (!result.tokenExpires)\n            result.tokenExpires = this._tokenExpiration(new Date());\n          if (this._tokenExpiresSoon(result.tokenExpires)) {\n            this.makeClientLoggedOut();\n          } else {\n            this.callLoginMethod({\n              methodArguments: [{resume: result.token}],\n              // Reconnect quiescence ensures that the user doesn't see an\n              // intermediate state before the login method finishes. So we don't\n              // need to show a logging-in animation.\n              _suppressLoggingIn: true,\n              userCallback: (error, loginDetails) => {\n                const storedTokenNow = this._storedLoginToken();\n                if (error) {\n                  // If we had a login error AND the current stored token is the\n                  // one that we tried to log in with, then declare ourselves\n                  // logged out. If there's a token in storage but it's not the\n                  // token that we tried to log in with, we don't know anything\n                  // about whether that token is valid or not, so do nothing. The\n                  // periodic localStorage poll will decide if we are logged in or\n                  // out with this token, if it hasn't already. Of course, even\n                  // with this check, another tab could insert a new valid token\n                  // immediately before we clear localStorage here, which would\n                  // lead to both tabs being logged out, but by checking the token\n                  // in storage right now we hope to make that unlikely to happen.\n                  //\n                  // If there is no token in storage right now, we don't have to\n                  // do anything; whatever code removed the token from storage was\n                  // responsible for calling `makeClientLoggedOut()`, or the\n                  // periodic localStorage poll will call `makeClientLoggedOut`\n                  // eventually if another tab wiped the token from storage.\n                  if (storedTokenNow && storedTokenNow === result.token) {\n                    this.makeClientLoggedOut();\n                  }\n                }\n                // Possibly a weird callback to call, but better than nothing if\n                // there is a reconnect between \"login result received\" and \"data\n                // ready\".\n                loginCallbacks({ error, loginDetails });\n              }});\n          }\n        });\n      }\n    };\n\n    // This callback is called once the local cache of the current-user\n    // subscription (and all subscriptions, in fact) are guaranteed to be up to\n    // date.\n    const loggedInAndDataReadyCallback = (error, result) => {\n      // If the login method returns its result but the connection is lost\n      // before the data is in the local cache, it'll set an onReconnect (see\n      // above). The onReconnect will try to log in using the token, and *it*\n      // will call userCallback via its own version of this\n      // loggedInAndDataReadyCallback. So we don't have to do anything here.\n      if (reconnected)\n        return;\n\n      // Note that we need to call this even if _suppressLoggingIn is true,\n      // because it could be matching a _setLoggingIn(true) from a\n      // half-completed pre-reconnect login method.\n      this._setLoggingIn(false);\n      if (error || !result) {\n        error = error || new Error(\n          `No result from call to ${options.methodName}`\n        );\n        loginCallbacks({ error });\n        return;\n      }\n      try {\n        options.validateResult(result);\n      } catch (e) {\n        loginCallbacks({ error: e });\n        return;\n      }\n\n      // Make the client logged in. (The user data should already be loaded!)\n      this.makeClientLoggedIn(result.id, result.token, result.tokenExpires);\n      loginCallbacks({ loginDetails: { type: result.type } });\n    };\n\n    if (!options._suppressLoggingIn) {\n      this._setLoggingIn(true);\n    }\n    this.connection.apply(\n      options.methodName,\n      options.methodArguments,\n      { wait: true, onResultReceived: onResultReceived },\n      loggedInAndDataReadyCallback);\n  }\n\n  makeClientLoggedOut() {\n    // Ensure client was successfully logged in before running logout hooks.\n    if (this.connection._userId) {\n      this._onLogoutHook.each(callback => {\n        callback();\n        return true;\n      });\n    }\n    this._unstoreLoginToken();\n    this.connection.setUserId(null);\n    this._reconnectStopper && this._reconnectStopper.stop();\n  }\n  \n  makeClientLoggedIn(userId, token, tokenExpires) {\n    this._storeLoginToken(userId, token, tokenExpires);\n    this.connection.setUserId(userId);\n  }\n\n  ///\n  /// LOGIN SERVICES\n  ///\n\n  // A reactive function returning whether the loginServiceConfiguration\n  // subscription is ready. Used by accounts-ui to hide the login button\n  // until we have all the configuration loaded\n  //\n  loginServicesConfigured() {\n    return this._loginServicesHandle.ready();\n  };\n\n  // Some login services such as the redirect login flow or the resume\n  // login handler can log the user in at page load time.  The\n  // Meteor.loginWithX functions have a callback argument, but the\n  // callback function instance won't be in memory any longer if the\n  // page was reloaded.  The `onPageLoadLogin` function allows a\n  // callback to be registered for the case where the login was\n  // initiated in a previous VM, and we now have the result of the login\n  // attempt in a new VM.\n\n  // Register a callback to be called if we have information about a\n  // login attempt at page load time.  Call the callback immediately if\n  // we already have the page load login attempt info, otherwise stash\n  // the callback to be called if and when we do get the attempt info.\n  //\n  onPageLoadLogin(f) {\n    if (this._pageLoadLoginAttemptInfo) {\n      f(this._pageLoadLoginAttemptInfo);\n    } else {\n      this._pageLoadLoginCallbacks.push(f);\n    }\n  };\n\n  // Receive the information about the login attempt at page load time.\n  // Call registered callbacks, and also record the info in case\n  // someone's callback hasn't been registered yet.\n  //\n  _pageLoadLogin(attemptInfo) {\n    if (this._pageLoadLoginAttemptInfo) {\n      Meteor._debug(\n        'Ignoring unexpected duplicate page load login attempt info'\n      );\n      return;\n    }\n\n    this._pageLoadLoginCallbacks.forEach(callback => callback(attemptInfo));\n    this._pageLoadLoginCallbacks = [];\n    this._pageLoadLoginAttemptInfo = attemptInfo;\n  };\n\n  ///\n  /// LOGIN TOKENS\n  ///\n\n  // These methods deal with storing a login token and user id in the\n  // browser's localStorage facility. It polls local storage every few\n  // seconds to synchronize login state between multiple tabs in the same\n  // browser.\n\n  loginWithToken(token, callback) {\n    this.callLoginMethod({\n      methodArguments: [{\n        resume: token\n      }],\n      userCallback: callback\n    });\n  };\n\n  // Semi-internal API. Call this function to re-enable auto login after\n  // if it was disabled at startup.\n  _enableAutoLogin() {\n    this._autoLoginEnabled = true;\n    this._pollStoredLoginToken();\n  };\n\n  ///\n  /// STORING\n  ///\n\n  // Call this from the top level of the test file for any test that does\n  // logging in and out, to protect multiple tabs running the same tests\n  // simultaneously from interfering with each others' localStorage.\n  _isolateLoginTokenForTest() {\n    this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();\n    this.USER_ID_KEY = this.USER_ID_KEY + Random.id();\n  };\n\n  _storeLoginToken(userId, token, tokenExpires) {\n    Meteor._localStorage.setItem(this.USER_ID_KEY, userId);\n    Meteor._localStorage.setItem(this.LOGIN_TOKEN_KEY, token);\n    if (! tokenExpires)\n      tokenExpires = this._tokenExpiration(new Date());\n    Meteor._localStorage.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires);\n\n    // to ensure that the localstorage poller doesn't end up trying to\n    // connect a second time\n    this._lastLoginTokenWhenPolled = token;\n  };\n\n  _unstoreLoginToken() {\n    Meteor._localStorage.removeItem(this.USER_ID_KEY);\n    Meteor._localStorage.removeItem(this.LOGIN_TOKEN_KEY);\n    Meteor._localStorage.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n\n    // to ensure that the localstorage poller doesn't end up trying to\n    // connect a second time\n    this._lastLoginTokenWhenPolled = null;\n  };\n\n  // This is private, but it is exported for now because it is used by a\n  // test in accounts-password.\n  _storedLoginToken() {\n    return Meteor._localStorage.getItem(this.LOGIN_TOKEN_KEY);\n  };\n\n  _storedLoginTokenExpires() {\n    return Meteor._localStorage.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n  };\n\n  _storedUserId() {\n    return Meteor._localStorage.getItem(this.USER_ID_KEY);\n  };\n\n  _unstoreLoginTokenIfExpiresSoon() {\n    const tokenExpires = this._storedLoginTokenExpires();\n    if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {\n      this._unstoreLoginToken();\n    }\n  };\n\n  ///\n  /// AUTO-LOGIN\n  ///\n\n  _initLocalStorage() {\n    // Key names to use in localStorage\n    this.LOGIN_TOKEN_KEY = \"Meteor.loginToken\";\n    this.LOGIN_TOKEN_EXPIRES_KEY = \"Meteor.loginTokenExpires\";\n    this.USER_ID_KEY = \"Meteor.userId\";\n\n    const rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;\n    if (rootUrlPathPrefix || this.connection !== Meteor.connection) {\n      // We want to keep using the same keys for existing apps that do not\n      // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have\n      // to log in again after an app updates to a version of Meteor that\n      // contains this code, but it's generally preferable to namespace the\n      // keys so that connections from distinct apps to distinct DDP URLs\n      // will be distinct in Meteor._localStorage.\n      let namespace = `:${this.connection._stream.rawUrl}`;\n      if (rootUrlPathPrefix) {\n        namespace += `:${rootUrlPathPrefix}`;\n      }\n      this.LOGIN_TOKEN_KEY += namespace;\n      this.LOGIN_TOKEN_EXPIRES_KEY += namespace;\n      this.USER_ID_KEY += namespace;\n    }\n\n    let token;\n    if (this._autoLoginEnabled) {\n      // Immediately try to log in via local storage, so that any DDP\n      // messages are sent after we have established our user account\n      this._unstoreLoginTokenIfExpiresSoon();\n      token = this._storedLoginToken();\n      if (token) {\n        // On startup, optimistically present us as logged in while the\n        // request is in flight. This reduces page flicker on startup.\n        const userId = this._storedUserId();\n        userId && this.connection.setUserId(userId);\n        this.loginWithToken(token, err => {\n          if (err) {\n            Meteor._debug(`Error logging in with token: ${err}`);\n            this.makeClientLoggedOut();\n          }\n\n          this._pageLoadLogin({\n            type: \"resume\",\n            allowed: !err,\n            error: err,\n            methodName: \"login\",\n            // XXX This is duplicate code with loginWithToken, but\n            // loginWithToken can also be called at other times besides\n            // page load.\n            methodArguments: [{resume: token}]\n          });\n        });\n      }\n    }\n\n    // Poll local storage every 3 seconds to login if someone logged in in\n    // another tab\n    this._lastLoginTokenWhenPolled = token;\n\n    if (this._pollIntervalTimer) {\n      // Unlikely that _initLocalStorage will be called more than once for\n      // the same AccountsClient instance, but just in case...\n      clearInterval(this._pollIntervalTimer);\n    }\n\n    this._pollIntervalTimer = setInterval(() => {\n      this._pollStoredLoginToken();\n    }, 3000);\n  };\n\n  _pollStoredLoginToken() {\n    if (! this._autoLoginEnabled) {\n      return;\n    }\n\n    const currentLoginToken = this._storedLoginToken();\n\n    // != instead of !== just to make sure undefined and null are treated the same\n    if (this._lastLoginTokenWhenPolled != currentLoginToken) {\n      if (currentLoginToken) {\n        this.loginWithToken(currentLoginToken, (err) => {\n          if (err) {\n            this.makeClientLoggedOut();\n          }\n        });\n      } else {\n        this.logout();\n      }\n    }\n\n    this._lastLoginTokenWhenPolled = currentLoginToken;\n  };\n\n  ///\n  /// URLS\n  ///\n\n  _initUrlMatching() {\n    // By default, allow the autologin process to happen.\n    this._autoLoginEnabled = true;\n  \n    // We only support one callback per URL.\n    this._accountsCallbacks = {};\n  \n    // Try to match the saved value of window.location.hash.\n    this._attemptToMatchHash();\n  };\n  \n  // Separate out this functionality for testing\n  _attemptToMatchHash() {\n    attemptToMatchHash(this, this.savedHash, defaultSuccessHandler);\n  };\n\n  /**\n   * @summary Register a function to call when a reset password link is clicked\n   * in an email sent by\n   * [`Accounts.sendResetPasswordEmail`](#accounts_sendresetpasswordemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onResetPasswordLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: A password reset token that can be passed to\n   * [`Accounts.resetPassword`](#accounts_resetpassword).\n   * 2. `done`: A function to call when the password reset UI flow is complete. The normal\n   * login process is suspended until this function is called, so that the\n   * password for user A can be reset even if user B was logged in.\n   * @locus Client\n   */\n  onResetPasswordLink(callback) {\n    if (this._accountsCallbacks[\"reset-password\"]) {\n      Meteor._debug(\"Accounts.onResetPasswordLink was called more than once. \" +\n        \"Only one callback added will be executed.\");\n    }\n\n    this._accountsCallbacks[\"reset-password\"] = callback;\n  };\n\n  /**\n   * @summary Register a function to call when an email verification link is\n   * clicked in an email sent by\n   * [`Accounts.sendVerificationEmail`](#accounts_sendverificationemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onEmailVerificationLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: An email verification token that can be passed to\n   * [`Accounts.verifyEmail`](#accounts_verifyemail).\n   * 2. `done`: A function to call when the email verification UI flow is complete.\n   * The normal login process is suspended until this function is called, so\n   * that the user can be notified that they are verifying their email before\n   * being logged in.\n   * @locus Client\n   */\n  onEmailVerificationLink(callback) {\n    if (this._accountsCallbacks[\"verify-email\"]) {\n      Meteor._debug(\"Accounts.onEmailVerificationLink was called more than once. \" +\n        \"Only one callback added will be executed.\");\n    }\n\n    this._accountsCallbacks[\"verify-email\"] = callback;\n  };\n\n  /**\n   * @summary Register a function to call when an account enrollment link is\n   * clicked in an email sent by\n   * [`Accounts.sendEnrollmentEmail`](#accounts_sendenrollmentemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onEnrollmentLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: A password reset token that can be passed to\n   * [`Accounts.resetPassword`](#accounts_resetpassword) to give the newly\n   * enrolled account a password.\n   * 2. `done`: A function to call when the enrollment UI flow is complete.\n   * The normal login process is suspended until this function is called, so that\n   * user A can be enrolled even if user B was logged in.\n   * @locus Client\n   */\n  onEnrollmentLink(callback) {\n    if (this._accountsCallbacks[\"enroll-account\"]) {\n      Meteor._debug(\"Accounts.onEnrollmentLink was called more than once. \" +\n        \"Only one callback added will be executed.\");\n    }\n\n    this._accountsCallbacks[\"enroll-account\"] = callback;\n  };\n\n};\n\n/**\n * @summary True if a login method (such as `Meteor.loginWithPassword`, \n * `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in \n * progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingIn = () => Accounts.loggingIn();\n\n/**\n * @summary True if a logout method (such as `Meteor.logout`) is currently in \n * progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingOut = () => Accounts.loggingOut();\n\n/**\n * @summary Log the user out.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logout = callback => Accounts.logout(callback);\n\n/**\n * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logoutOtherClients = callback => Accounts.logoutOtherClients(callback);\n\n/**\n * @summary Login with a Meteor access token.\n * @locus Client\n * @param {Object} [token] Local storage token for use with login across \n * multiple tabs in the same browser.\n * @param {Function} [callback] Optional callback. Called with no arguments on\n * success.\n * @importFromPackage meteor\n */\nMeteor.loginWithToken = (token, callback) =>\n  Accounts.loginWithToken(token, callback);\n\n///\n/// HANDLEBARS HELPERS\n///\n\n// If our app has a Blaze, register the {{currentUser}} and {{loggingIn}}\n// global helpers.\nif (Package.blaze) {\n  const { Template } = Package.blaze.Blaze;\n\n  /**\n   * @global\n   * @name  currentUser\n   * @isHelper true\n   * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.\n   */\n  Template.registerHelper('currentUser', () => Meteor.user());\n\n  /**\n   * @global\n   * @name  loggingIn\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin).\n   */\n  Template.registerHelper('loggingIn', () => Meteor.loggingIn());\n\n  /**\n   * @global\n   * @name  loggingOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingOut()](#meteor_loggingout).\n   */\n  Template.registerHelper('loggingOut', () => Meteor.loggingOut());\n\n  /**\n   * @global\n   * @name  loggingInOrOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin) or [Meteor.loggingOut()](#meteor_loggingout).\n   */\n  Template.registerHelper(\n    'loggingInOrOut', \n    () => Meteor.loggingIn() || Meteor.loggingOut()\n  );\n}\n\nconst defaultSuccessHandler = function(token, urlPart) {\n  // put login in a suspended state to wait for the interaction to finish\n  this._autoLoginEnabled = false;\n\n  // wait for other packages to register callbacks\n  Meteor.startup(() => {\n    // if a callback has been registered for this kind of token, call it\n    if (this._accountsCallbacks[urlPart]) {\n      this._accountsCallbacks[urlPart](token, () => this._enableAutoLogin());\n    }\n  });\n}\n\n// Note that both arguments are optional and are currently only passed by\n// accounts_url_tests.js.\nconst attemptToMatchHash = (accounts, hash, success) => {\n  // All of the special hash URLs we support for accounts interactions\n  [\"reset-password\", \"verify-email\", \"enroll-account\"].forEach(urlPart => {\n    let token;\n\n    const tokenRegex = new RegExp(`^\\\\#\\\\/${urlPart}\\\\/(.*)$`);\n    const match = hash.match(tokenRegex);\n\n    if (match) {\n      token = match[1];\n\n      // XXX COMPAT WITH 0.9.3\n      if (urlPart === \"reset-password\") {\n        accounts._resetPasswordToken = token;\n      } else if (urlPart === \"verify-email\") {\n        accounts._verifyEmailToken = token;\n      } else if (urlPart === \"enroll-account\") {\n        accounts._enrollAccountToken = token;\n      }\n    } else {\n      return;\n    }\n\n    // If no handlers match the hash, then maybe it's meant to be consumed\n    // by some entirely different code, so we only clear it the first time\n    // a handler successfully matches. Note that later handlers reuse the\n    // savedHash, so clearing window.location.hash here will not interfere\n    // with their needs.\n    window.location.hash = \"\";\n\n    // Do some stuff with the token we matched\n    success.call(accounts, token, urlPart);\n  });\n}\n\n// Export for testing\nexport const AccountsTest = {\n  attemptToMatchHash: (hash, success) => \n    attemptToMatchHash(Accounts, hash, success),\n};\n"]},"sourceType":"script","hash":"a25937686e52f37f17f1e4395cde2a0e17dd19f3"}
