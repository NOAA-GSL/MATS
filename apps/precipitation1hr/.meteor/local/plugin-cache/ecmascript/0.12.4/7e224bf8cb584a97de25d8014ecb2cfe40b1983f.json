{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/shell-server/shell-server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/shell-server/shell-server.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/shell-server/shell-server.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/shell-server/shell-server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/shell-server/shell-server.js"}},"code":"const module1 = module;\nmodule1.export({\n  listen: () => listen,\n  disable: () => disable\n});\nlet assert;\nmodule1.link(\"assert\", {\n  default(v) {\n    assert = v;\n  }\n\n}, 0);\nlet pathJoin;\nmodule1.link(\"path\", {\n  join(v) {\n    pathJoin = v;\n  }\n\n}, 1);\nlet PassThrough;\nmodule1.link(\"stream\", {\n  PassThrough(v) {\n    PassThrough = v;\n  }\n\n}, 2);\nlet closeSync, openSync, readFileSync, unlink, writeFileSync, writeSync;\nmodule1.link(\"fs\", {\n  closeSync(v) {\n    closeSync = v;\n  },\n\n  openSync(v) {\n    openSync = v;\n  },\n\n  readFileSync(v) {\n    readFileSync = v;\n  },\n\n  unlink(v) {\n    unlink = v;\n  },\n\n  writeFileSync(v) {\n    writeFileSync = v;\n  },\n\n  writeSync(v) {\n    writeSync = v;\n  }\n\n}, 3);\nlet createServer;\nmodule1.link(\"net\", {\n  createServer(v) {\n    createServer = v;\n  }\n\n}, 4);\nlet replStart;\nmodule1.link(\"repl\", {\n  start(v) {\n    replStart = v;\n  }\n\n}, 5);\nconst INFO_FILE_MODE = parseInt(\"600\", 8); // Only the owner can read or write.\n\nconst EXITING_MESSAGE = \"Shell exiting...\"; // Invoked by the server process to listen for incoming connections from\n// shell clients. Each connection gets its own REPL instance.\n\nfunction listen(shellDir) {\n  function callback() {\n    new Server(shellDir).listen();\n  } // If the server is still in the very early stages of starting up,\n  // Meteor.startup may not available yet.\n\n\n  if (typeof Meteor === \"object\") {\n    Meteor.startup(callback);\n  } else if (typeof __meteor_bootstrap__ === \"object\") {\n    const hooks = __meteor_bootstrap__.startupHooks;\n\n    if (hooks) {\n      hooks.push(callback);\n    } else {\n      // As a fallback, just call the callback asynchronously.\n      setImmediate(callback);\n    }\n  }\n}\n\nfunction disable(shellDir) {\n  try {\n    // Replace info.json with a file that says the shell server is\n    // disabled, so that any connected shell clients will fail to\n    // reconnect after the server process closes their sockets.\n    writeFileSync(getInfoFile(shellDir), JSON.stringify({\n      status: \"disabled\",\n      reason: \"Shell server has shut down.\"\n    }) + \"\\n\", {\n      mode: INFO_FILE_MODE\n    });\n  } catch (ignored) {}\n}\n\n// Shell commands need to be executed in a Fiber in case they call into\n// code that yields. Using a Promise is an even better idea, since it runs\n// its callbacks in Fibers drawn from a pool, so the Fibers are recycled.\nconst evalCommandPromise = Promise.resolve();\n\nclass Server {\n  constructor(shellDir) {\n    assert.ok(this instanceof Server);\n    this.shellDir = shellDir;\n    this.key = Math.random().toString(36).slice(2);\n    this.server = createServer(socket => {\n      this.onConnection(socket);\n    }).on(\"error\", err => {\n      console.error(err.stack);\n    });\n  }\n\n  listen() {\n    const infoFile = getInfoFile(this.shellDir);\n    unlink(infoFile, () => {\n      this.server.listen(0, \"127.0.0.1\", () => {\n        writeFileSync(infoFile, JSON.stringify({\n          status: \"enabled\",\n          port: this.server.address().port,\n          key: this.key\n        }) + \"\\n\", {\n          mode: INFO_FILE_MODE\n        });\n      });\n    });\n  }\n\n  onConnection(socket) {\n    // Make sure this function doesn't try to write anything to the socket\n    // after it has been closed.\n    socket.on(\"close\", function () {\n      socket = null;\n    }); // If communication is not established within 1000ms of the first\n    // connection, forcibly close the socket.\n\n    const timeout = setTimeout(function () {\n      if (socket) {\n        socket.removeAllListeners(\"data\");\n        socket.end(EXITING_MESSAGE + \"\\n\");\n      }\n    }, 1000); // Let connecting clients configure certain REPL options by sending a\n    // JSON object over the socket. For example, only the client knows\n    // whether it's running a TTY or an Emacs subshell or some other kind of\n    // terminal, so the client must decide the value of options.terminal.\n\n    readJSONFromStream(socket, (error, options, replInputSocket) => {\n      clearTimeout(timeout);\n\n      if (error) {\n        socket = null;\n        console.error(error.stack);\n        return;\n      }\n\n      if (options.key !== this.key) {\n        if (socket) {\n          socket.end(EXITING_MESSAGE + \"\\n\");\n        }\n\n        return;\n      }\n\n      delete options.key; // Set the columns to what is being requested by the client.\n\n      if (options.columns && socket) {\n        socket.columns = options.columns;\n      }\n\n      delete options.columns;\n      options = Object.assign(Object.create(null), // Defaults for configurable options.\n      {\n        prompt: \"> \",\n        terminal: true,\n        useColors: true,\n        ignoreUndefined: true\n      }, // Configurable options\n      options, // Immutable options.\n      {\n        input: replInputSocket,\n        useGlobal: false,\n        output: socket\n      }); // The prompt during an evaluateAndExit must be blank to ensure\n      // that the prompt doesn't inadvertently get parsed as part of\n      // the JSON communication channel.\n\n      if (options.evaluateAndExit) {\n        options.prompt = \"\";\n      } // Start the REPL.\n\n\n      this.startREPL(options);\n\n      if (options.evaluateAndExit) {\n        this._wrappedDefaultEval.call(Object.create(null), options.evaluateAndExit.command, global, options.evaluateAndExit.filename || \"<meteor shell>\", function (error, result) {\n          if (socket) {\n            function sendResultToSocket(message) {\n              // Sending back a JSON payload allows the client to\n              // distinguish between errors and successful results.\n              socket.end(JSON.stringify(message) + \"\\n\");\n            }\n\n            if (error) {\n              sendResultToSocket({\n                error: error.toString(),\n                code: 1\n              });\n            } else {\n              sendResultToSocket({\n                result\n              });\n            }\n          }\n        });\n\n        return;\n      }\n\n      delete options.evaluateAndExit;\n      this.enableInteractiveMode(options);\n    });\n  }\n\n  startREPL(options) {\n    // Make sure this function doesn't try to write anything to the output\n    // stream after it has been closed.\n    options.output.on(\"close\", function () {\n      options.output = null;\n    });\n    const repl = this.repl = replStart(options);\n    const {\n      shellDir\n    } = this; // This is technique of setting `repl.context` is similar to how the\n    // `useGlobal` option would work during a normal `repl.start()` and\n    // allows shell access (and tab completion!) to Meteor globals (i.e.\n    // Underscore _, Meteor, etc.). By using this technique, which changes\n    // the context after startup, we avoid stomping on the special `_`\n    // variable (in `repl` this equals the value of the last command) from\n    // being overridden in the client/server socket-handshaking.  Furthermore,\n    // by setting `useGlobal` back to true, we allow the default eval function\n    // to use the desired `runInThisContext` method (https://git.io/vbvAB).\n\n    repl.context = global;\n    repl.useGlobal = true;\n    setRequireAndModule(repl.context); // In order to avoid duplicating code here, specifically the complexities\n    // of catching so-called \"Recoverable Errors\" (https://git.io/vbvbl),\n    // we will wrap the default eval, run it in a Fiber (via a Promise), and\n    // give it the opportunity to decide if the user is mid-code-block.\n\n    const defaultEval = repl.eval;\n\n    function wrappedDefaultEval(code, context, file, callback) {\n      if (Package.ecmascript) {\n        try {\n          code = Package.ecmascript.ECMAScript.compileForShell(code, {\n            cacheDirectory: getCacheDirectory(shellDir)\n          });\n        } catch (err) {// Any Babel error here might be just fine since it's\n          // possible the code was incomplete (multi-line code on the REPL).\n          // The defaultEval below will use its own functionality to determine\n          // if this error is \"recoverable\".\n        }\n      }\n\n      evalCommandPromise.then(() => defaultEval(code, context, file, callback)).catch(callback);\n    } // Have the REPL use the newly wrapped function instead and store the\n    // _wrappedDefaultEval so that evalulateAndExit calls can use it directly.\n\n\n    repl.eval = this._wrappedDefaultEval = wrappedDefaultEval;\n  }\n\n  enableInteractiveMode(options) {\n    // History persists across shell sessions!\n    this.initializeHistory();\n    const repl = this.repl; // Implement an alternate means of fetching the return value,\n    // via `__` (double underscore) as originally implemented in:\n    // https://github.com/meteor/meteor/commit/2443d832265c7d1c\n\n    Object.defineProperty(repl.context, \"__\", {\n      get: () => repl.last,\n      set: val => {\n        repl.last = val;\n      },\n      // Allow this property to be (re)defined more than once (e.g. each\n      // time the server restarts).\n      configurable: true\n    }); // Some improvements to the existing help messages.\n\n    function addHelp(cmd, helpText) {\n      const info = repl.commands[cmd] || repl.commands[\".\" + cmd];\n\n      if (info) {\n        info.help = helpText;\n      }\n    }\n\n    addHelp(\"break\", \"Terminate current command input and display new prompt\");\n    addHelp(\"exit\", \"Disconnect from server and leave shell\");\n    addHelp(\"help\", \"Show this help information\"); // When the REPL exits, signal the attached client to exit by sending it\n    // the special EXITING_MESSAGE.\n\n    repl.on(\"exit\", function () {\n      if (options.output) {\n        options.output.write(EXITING_MESSAGE + \"\\n\");\n        options.output.end();\n      }\n    }); // When the server process exits, end the output stream but do not\n    // signal the attached client to exit.\n\n    process.on(\"exit\", function () {\n      if (options.output) {\n        options.output.end();\n      }\n    }); // This Meteor-specific shell command rebuilds the application as if a\n    // change was made to server code.\n\n    repl.defineCommand(\"reload\", {\n      help: \"Restart the server and the shell\",\n      action: function () {\n        process.exit(0);\n      }\n    });\n  } // This function allows a persistent history of shell commands to be saved\n  // to and loaded from .meteor/local/shell-history.\n\n\n  initializeHistory() {\n    const rli = this.repl.rli;\n    const historyFile = getHistoryFile(this.shellDir);\n    let historyFd = openSync(historyFile, \"a+\");\n    const historyLines = readFileSync(historyFile, \"utf8\").split(\"\\n\");\n    const seenLines = Object.create(null);\n\n    if (!rli.history) {\n      rli.history = [];\n      rli.historyIndex = -1;\n    }\n\n    while (rli.history && historyLines.length > 0) {\n      const line = historyLines.pop();\n\n      if (line && /\\S/.test(line) && !seenLines[line]) {\n        rli.history.push(line);\n        seenLines[line] = true;\n      }\n    }\n\n    rli.addListener(\"line\", function (line) {\n      if (historyFd >= 0 && /\\S/.test(line)) {\n        writeSync(historyFd, line + \"\\n\");\n      }\n    });\n    this.repl.on(\"exit\", function () {\n      closeSync(historyFd);\n      historyFd = -1;\n    });\n  }\n\n}\n\nfunction readJSONFromStream(inputStream, callback) {\n  const outputStream = new PassThrough();\n  let dataSoFar = \"\";\n\n  function onData(buffer) {\n    const lines = buffer.toString(\"utf8\").split(\"\\n\");\n\n    while (lines.length > 0) {\n      dataSoFar += lines.shift();\n      let json;\n\n      try {\n        json = JSON.parse(dataSoFar);\n      } catch (error) {\n        if (error instanceof SyntaxError) {\n          continue;\n        }\n\n        return finish(error);\n      }\n\n      if (lines.length > 0) {\n        outputStream.write(lines.join(\"\\n\"));\n      }\n\n      inputStream.pipe(outputStream);\n      return finish(null, json);\n    }\n  }\n\n  function onClose() {\n    finish(new Error(\"stream unexpectedly closed\"));\n  }\n\n  let finished = false;\n\n  function finish(error, json) {\n    if (!finished) {\n      finished = true;\n      inputStream.removeListener(\"data\", onData);\n      inputStream.removeListener(\"error\", finish);\n      inputStream.removeListener(\"close\", onClose);\n      callback(error, json, outputStream);\n    }\n  }\n\n  inputStream.on(\"data\", onData);\n  inputStream.on(\"error\", finish);\n  inputStream.on(\"close\", onClose);\n}\n\nfunction getInfoFile(shellDir) {\n  return pathJoin(shellDir, \"info.json\");\n}\n\nfunction getHistoryFile(shellDir) {\n  return pathJoin(shellDir, \"history\");\n}\n\nfunction getCacheDirectory(shellDir) {\n  return pathJoin(shellDir, \"cache\");\n}\n\nfunction setRequireAndModule(context) {\n  if (Package.modules) {\n    // Use the same `require` function and `module` object visible to the\n    // application.\n    const toBeInstalled = {};\n    const shellModuleName = \"meteor-shell-\" + Math.random().toString(36).slice(2) + \".js\";\n\n    toBeInstalled[shellModuleName] = function (require, exports, module) {\n      context.module = module;\n      context.require = require; // Tab completion sometimes uses require.extensions, but only for\n      // the keys.\n\n      require.extensions = {\n        \".js\": true,\n        \".json\": true,\n        \".node\": true\n      };\n    }; // This populates repl.context.{module,require} by evaluating the\n    // module defined above.\n\n\n    Package.modules.meteorInstall(toBeInstalled)(\"./\" + shellModuleName);\n  }\n}","map":{"version":3,"sources":["packages/shell-server/shell-server.js"],"names":["module1","module","export","listen","disable","assert","link","default","v","pathJoin","join","PassThrough","closeSync","openSync","readFileSync","unlink","writeFileSync","writeSync","createServer","replStart","start","INFO_FILE_MODE","parseInt","EXITING_MESSAGE","shellDir","callback","Server","Meteor","startup","__meteor_bootstrap__","hooks","startupHooks","push","setImmediate","getInfoFile","JSON","stringify","status","reason","mode","ignored","evalCommandPromise","Promise","resolve","constructor","ok","key","Math","random","toString","slice","server","socket","onConnection","on","err","console","error","stack","infoFile","port","address","timeout","setTimeout","removeAllListeners","end","readJSONFromStream","options","replInputSocket","clearTimeout","columns","Object","assign","create","prompt","terminal","useColors","ignoreUndefined","input","useGlobal","output","evaluateAndExit","startREPL","_wrappedDefaultEval","call","command","global","filename","result","sendResultToSocket","message","code","enableInteractiveMode","repl","context","setRequireAndModule","defaultEval","eval","wrappedDefaultEval","file","Package","ecmascript","ECMAScript","compileForShell","cacheDirectory","getCacheDirectory","then","catch","initializeHistory","defineProperty","get","last","set","val","configurable","addHelp","cmd","helpText","info","commands","help","write","process","defineCommand","action","exit","rli","historyFile","getHistoryFile","historyFd","historyLines","split","seenLines","history","historyIndex","length","line","pop","test","addListener","inputStream","outputStream","dataSoFar","onData","buffer","lines","shift","json","parse","SyntaxError","finish","pipe","onClose","Error","finished","removeListener","modules","toBeInstalled","shellModuleName","require","exports","extensions","meteorInstall"],"mappings":"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","sourcesContent":["import assert from \"assert\";\nimport { join as pathJoin } from \"path\";\nimport { PassThrough } from \"stream\";\nimport {\n  closeSync,\n  openSync,\n  readFileSync,\n  unlink,\n  writeFileSync,\n  writeSync,\n} from \"fs\";\nimport { createServer } from \"net\";\nimport { start as replStart } from \"repl\";\n\nconst INFO_FILE_MODE = parseInt(\"600\", 8); // Only the owner can read or write.\nconst EXITING_MESSAGE = \"Shell exiting...\";\n\n// Invoked by the server process to listen for incoming connections from\n// shell clients. Each connection gets its own REPL instance.\nexport function listen(shellDir) {\n  function callback() {\n    new Server(shellDir).listen();\n  }\n\n  // If the server is still in the very early stages of starting up,\n  // Meteor.startup may not available yet.\n  if (typeof Meteor === \"object\") {\n    Meteor.startup(callback);\n  } else if (typeof __meteor_bootstrap__ === \"object\") {\n    const hooks = __meteor_bootstrap__.startupHooks;\n    if (hooks) {\n      hooks.push(callback);\n    } else {\n      // As a fallback, just call the callback asynchronously.\n      setImmediate(callback);\n    }\n  }\n}\n\n// Disabling the shell causes all attached clients to disconnect and exit.\nexport function disable(shellDir) {\n  try {\n    // Replace info.json with a file that says the shell server is\n    // disabled, so that any connected shell clients will fail to\n    // reconnect after the server process closes their sockets.\n    writeFileSync(\n      getInfoFile(shellDir),\n      JSON.stringify({\n        status: \"disabled\",\n        reason: \"Shell server has shut down.\"\n      }) + \"\\n\",\n      { mode: INFO_FILE_MODE }\n    );\n  } catch (ignored) {}\n}\n\n// Shell commands need to be executed in a Fiber in case they call into\n// code that yields. Using a Promise is an even better idea, since it runs\n// its callbacks in Fibers drawn from a pool, so the Fibers are recycled.\nconst evalCommandPromise = Promise.resolve();\n\nclass Server {\n  constructor(shellDir) {\n    assert.ok(this instanceof Server);\n\n    this.shellDir = shellDir;\n    this.key = Math.random().toString(36).slice(2);\n\n    this.server =\n      createServer((socket) => {\n        this.onConnection(socket);\n      })\n      .on(\"error\", (err) => {\n        console.error(err.stack);\n      });\n  }\n\n  listen() {\n    const infoFile = getInfoFile(this.shellDir);\n\n    unlink(infoFile, () => {\n      this.server.listen(0, \"127.0.0.1\", () => {\n        writeFileSync(infoFile, JSON.stringify({\n          status: \"enabled\",\n          port: this.server.address().port,\n          key: this.key\n        }) + \"\\n\", {\n          mode: INFO_FILE_MODE\n        });\n      });\n    });\n  }\n\n  onConnection(socket) {\n    // Make sure this function doesn't try to write anything to the socket\n    // after it has been closed.\n    socket.on(\"close\", function() {\n      socket = null;\n    });\n\n    // If communication is not established within 1000ms of the first\n    // connection, forcibly close the socket.\n    const timeout = setTimeout(function() {\n      if (socket) {\n        socket.removeAllListeners(\"data\");\n        socket.end(EXITING_MESSAGE + \"\\n\");\n      }\n    }, 1000);\n\n    // Let connecting clients configure certain REPL options by sending a\n    // JSON object over the socket. For example, only the client knows\n    // whether it's running a TTY or an Emacs subshell or some other kind of\n    // terminal, so the client must decide the value of options.terminal.\n    readJSONFromStream(socket, (error, options, replInputSocket) => {\n      clearTimeout(timeout);\n\n      if (error) {\n        socket = null;\n        console.error(error.stack);\n        return;\n      }\n\n      if (options.key !== this.key) {\n        if (socket) {\n          socket.end(EXITING_MESSAGE + \"\\n\");\n        }\n        return;\n      }\n      delete options.key;\n\n      // Set the columns to what is being requested by the client.\n      if (options.columns && socket) {\n        socket.columns = options.columns;\n      }\n      delete options.columns;\n\n      options = Object.assign(\n        Object.create(null),\n\n        // Defaults for configurable options.\n        {\n          prompt: \"> \",\n          terminal: true,\n          useColors: true,\n          ignoreUndefined: true,\n        },\n\n        // Configurable options\n        options,\n\n        // Immutable options.\n        {\n          input: replInputSocket,\n          useGlobal: false,\n          output: socket\n        }\n      );\n\n      // The prompt during an evaluateAndExit must be blank to ensure\n      // that the prompt doesn't inadvertently get parsed as part of\n      // the JSON communication channel.\n      if (options.evaluateAndExit) {\n        options.prompt = \"\";\n      }\n\n      // Start the REPL.\n      this.startREPL(options);\n\n      if (options.evaluateAndExit) {\n        this._wrappedDefaultEval.call(\n          Object.create(null),\n          options.evaluateAndExit.command,\n          global,\n          options.evaluateAndExit.filename || \"<meteor shell>\",\n          function (error, result) {\n            if (socket) {\n              function sendResultToSocket(message) {\n                // Sending back a JSON payload allows the client to\n                // distinguish between errors and successful results.\n                socket.end(JSON.stringify(message) + \"\\n\");\n              }\n\n              if (error) {\n                sendResultToSocket({\n                  error: error.toString(),\n                  code: 1\n                });\n              } else {\n                sendResultToSocket({\n                  result,\n                });\n              }\n            }\n          }\n        );\n        return;\n      }\n      delete options.evaluateAndExit;\n\n      this.enableInteractiveMode(options);\n    });\n  }\n\n  startREPL(options) {\n    // Make sure this function doesn't try to write anything to the output\n    // stream after it has been closed.\n    options.output.on(\"close\", function() {\n      options.output = null;\n    });\n\n    const repl = this.repl = replStart(options);\n    const { shellDir } = this;\n\n    // This is technique of setting `repl.context` is similar to how the\n    // `useGlobal` option would work during a normal `repl.start()` and\n    // allows shell access (and tab completion!) to Meteor globals (i.e.\n    // Underscore _, Meteor, etc.). By using this technique, which changes\n    // the context after startup, we avoid stomping on the special `_`\n    // variable (in `repl` this equals the value of the last command) from\n    // being overridden in the client/server socket-handshaking.  Furthermore,\n    // by setting `useGlobal` back to true, we allow the default eval function\n    // to use the desired `runInThisContext` method (https://git.io/vbvAB).\n    repl.context = global;\n    repl.useGlobal = true;\n\n    setRequireAndModule(repl.context);\n\n    // In order to avoid duplicating code here, specifically the complexities\n    // of catching so-called \"Recoverable Errors\" (https://git.io/vbvbl),\n    // we will wrap the default eval, run it in a Fiber (via a Promise), and\n    // give it the opportunity to decide if the user is mid-code-block.\n    const defaultEval = repl.eval;\n\n    function wrappedDefaultEval(code, context, file, callback) {\n      if (Package.ecmascript) {\n        try {\n          code = Package.ecmascript.ECMAScript.compileForShell(code, {\n            cacheDirectory: getCacheDirectory(shellDir)\n          });\n        } catch (err) {\n          // Any Babel error here might be just fine since it's\n          // possible the code was incomplete (multi-line code on the REPL).\n          // The defaultEval below will use its own functionality to determine\n          // if this error is \"recoverable\".\n        }\n      }\n\n      evalCommandPromise\n        .then(() => defaultEval(code, context, file, callback))\n        .catch(callback);\n    }\n\n    // Have the REPL use the newly wrapped function instead and store the\n    // _wrappedDefaultEval so that evalulateAndExit calls can use it directly.\n    repl.eval = this._wrappedDefaultEval = wrappedDefaultEval;\n  }\n\n  enableInteractiveMode(options) {\n    // History persists across shell sessions!\n    this.initializeHistory();\n\n    const repl = this.repl;\n\n    // Implement an alternate means of fetching the return value,\n    // via `__` (double underscore) as originally implemented in:\n    // https://github.com/meteor/meteor/commit/2443d832265c7d1c\n    Object.defineProperty(repl.context, \"__\", {\n      get: () => repl.last,\n      set: (val) => {\n        repl.last = val;\n      },\n\n      // Allow this property to be (re)defined more than once (e.g. each\n      // time the server restarts).\n      configurable: true\n    });\n\n    // Some improvements to the existing help messages.\n    function addHelp(cmd, helpText) {\n      const info = repl.commands[cmd] || repl.commands[\".\" + cmd];\n      if (info) {\n        info.help = helpText;\n      }\n    }\n    addHelp(\"break\", \"Terminate current command input and display new prompt\");\n    addHelp(\"exit\", \"Disconnect from server and leave shell\");\n    addHelp(\"help\", \"Show this help information\");\n\n    // When the REPL exits, signal the attached client to exit by sending it\n    // the special EXITING_MESSAGE.\n    repl.on(\"exit\", function() {\n      if (options.output) {\n        options.output.write(EXITING_MESSAGE + \"\\n\");\n        options.output.end();\n      }\n    });\n\n    // When the server process exits, end the output stream but do not\n    // signal the attached client to exit.\n    process.on(\"exit\", function() {\n      if (options.output) {\n        options.output.end();\n      }\n    });\n\n    // This Meteor-specific shell command rebuilds the application as if a\n    // change was made to server code.\n    repl.defineCommand(\"reload\", {\n      help: \"Restart the server and the shell\",\n      action: function() {\n        process.exit(0);\n      }\n    });\n  }\n\n  // This function allows a persistent history of shell commands to be saved\n  // to and loaded from .meteor/local/shell-history.\n  initializeHistory() {\n    const rli = this.repl.rli;\n    const historyFile = getHistoryFile(this.shellDir);\n    let historyFd = openSync(historyFile, \"a+\");\n    const historyLines = readFileSync(historyFile, \"utf8\").split(\"\\n\");\n    const seenLines = Object.create(null);\n\n    if (! rli.history) {\n      rli.history = [];\n      rli.historyIndex = -1;\n    }\n\n    while (rli.history && historyLines.length > 0) {\n      const line = historyLines.pop();\n      if (line && /\\S/.test(line) && ! seenLines[line]) {\n        rli.history.push(line);\n        seenLines[line] = true;\n      }\n    }\n\n    rli.addListener(\"line\", function(line) {\n      if (historyFd >= 0 && /\\S/.test(line)) {\n        writeSync(historyFd, line + \"\\n\");\n      }\n    });\n\n    this.repl.on(\"exit\", function() {\n      closeSync(historyFd);\n      historyFd = -1;\n    });\n  }\n}\n\nfunction readJSONFromStream(inputStream, callback) {\n  const outputStream = new PassThrough();\n  let dataSoFar = \"\";\n\n  function onData(buffer) {\n    const lines = buffer.toString(\"utf8\").split(\"\\n\");\n\n    while (lines.length > 0) {\n      dataSoFar += lines.shift();\n\n      let json;\n      try {\n        json = JSON.parse(dataSoFar);\n      } catch (error) {\n        if (error instanceof SyntaxError) {\n          continue;\n        }\n\n        return finish(error);\n      }\n\n      if (lines.length > 0) {\n        outputStream.write(lines.join(\"\\n\"));\n      }\n\n      inputStream.pipe(outputStream);\n\n      return finish(null, json);\n    }\n  }\n\n  function onClose() {\n    finish(new Error(\"stream unexpectedly closed\"));\n  }\n\n  let finished = false;\n  function finish(error, json) {\n    if (! finished) {\n      finished = true;\n      inputStream.removeListener(\"data\", onData);\n      inputStream.removeListener(\"error\", finish);\n      inputStream.removeListener(\"close\", onClose);\n      callback(error, json, outputStream);\n    }\n  }\n\n  inputStream.on(\"data\", onData);\n  inputStream.on(\"error\", finish);\n  inputStream.on(\"close\", onClose);\n}\n\nfunction getInfoFile(shellDir) {\n  return pathJoin(shellDir, \"info.json\");\n}\n\nfunction getHistoryFile(shellDir) {\n  return pathJoin(shellDir, \"history\");\n}\n\nfunction getCacheDirectory(shellDir) {\n  return pathJoin(shellDir, \"cache\");\n}\n\nfunction setRequireAndModule(context) {\n  if (Package.modules) {\n    // Use the same `require` function and `module` object visible to the\n    // application.\n    const toBeInstalled = {};\n    const shellModuleName = \"meteor-shell-\" +\n      Math.random().toString(36).slice(2) + \".js\";\n\n    toBeInstalled[shellModuleName] = function (require, exports, module) {\n      context.module = module;\n      context.require = require;\n\n      // Tab completion sometimes uses require.extensions, but only for\n      // the keys.\n      require.extensions = {\n        \".js\": true,\n        \".json\": true,\n        \".node\": true,\n      };\n    };\n\n    // This populates repl.context.{module,require} by evaluating the\n    // module defined above.\n    Package.modules.meteorInstall(toBeInstalled)(\"./\" + shellModuleName);\n  }\n}\n"]},"sourceType":"script","hash":"7e224bf8cb584a97de25d8014ecb2cfe40b1983f"}
