{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/rate-limit/rate-limit.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/rate-limit/rate-limit.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/rate-limit/rate-limit.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/rate-limit/rate-limit.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/rate-limit/rate-limit.js"}},"code":"module.export({\n  RateLimiter: () => RateLimiter\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 1);\n// Default time interval (in milliseconds) to reset rate limit counters\nconst DEFAULT_INTERVAL_TIME_IN_MILLISECONDS = 1000; // Default number of events allowed per time interval\n\nconst DEFAULT_REQUESTS_PER_INTERVAL = 10;\nconst hasOwn = Object.prototype.hasOwnProperty; // A rule is defined by an options object that contains two fields,\n// `numRequestsAllowed` which is the number of events allowed per interval, and\n// an `intervalTime` which is the amount of time in milliseconds before the\n// rate limit restarts its internal counters, and by a matchers object. A\n// matchers object is a POJO that contains a set of keys with values that\n// define the entire set of inputs that match for each key. The values can\n// either be null (optional), a primitive or a function that returns a boolean\n// of whether the provided input's value matches for this key.\n//\n// Rules are uniquely assigned an `id` and they store a dictionary of counters,\n// which are records used to keep track of inputs that match the rule. If a\n// counter reaches the `numRequestsAllowed` within a given `intervalTime`, a\n// rate limit is reached and future inputs that map to that counter will\n// result in errors being returned to the client.\n\nclass Rule {\n  constructor(options, matchers) {\n    this.id = Random.id();\n    this.options = options;\n    this._matchers = matchers;\n    this._lastResetTime = new Date().getTime(); // Dictionary of input keys to counters\n\n    this.counters = {};\n  } // Determine if this rule applies to the given input by comparing all\n  // rule.matchers. If the match fails, search short circuits instead of\n  // iterating through all matchers.\n\n\n  match(input) {\n    return Object.entries(this._matchers).every(([key, matcher]) => {\n      if (matcher !== null) {\n        if (!hasOwn.call(input, key)) {\n          return false;\n        } else if (typeof matcher === 'function') {\n          if (!matcher(input[key])) {\n            return false;\n          }\n        } else if (matcher !== input[key]) {\n          return false;\n        }\n      }\n\n      return true;\n    });\n  } // Generates unique key string for provided input by concatenating all the\n  // keys in the matcher with the corresponding values in the input.\n  // Only called if rule matches input.\n\n\n  _generateKeyString(input) {\n    return Object.entries(this._matchers).filter(([key]) => this._matchers[key] !== null).reduce((returnString, [key, matcher]) => {\n      if (typeof matcher === 'function') {\n        if (matcher(input[key])) {\n          returnString += key + input[key];\n        }\n      } else {\n        returnString += key + input[key];\n      }\n\n      return returnString;\n    }, '');\n  } // Applies the provided input and returns the key string, time since counters\n  // were last reset and time to next reset.\n\n\n  apply(input) {\n    const key = this._generateKeyString(input);\n\n    const timeSinceLastReset = new Date().getTime() - this._lastResetTime;\n\n    const timeToNextReset = this.options.intervalTime - timeSinceLastReset;\n    return {\n      key,\n      timeSinceLastReset,\n      timeToNextReset\n    };\n  } // Reset counter dictionary for this specific rule. Called once the\n  // timeSinceLastReset has exceeded the intervalTime. _lastResetTime is\n  // set to be the current time in milliseconds.\n\n\n  resetCounter() {\n    // Delete the old counters dictionary to allow for garbage collection\n    this.counters = {};\n    this._lastResetTime = new Date().getTime();\n  }\n\n  _executeCallback(reply, ruleInput) {\n    try {\n      if (this.options.callback) {\n        this.options.callback(reply, ruleInput);\n      }\n    } catch (e) {\n      // Do not throw error here\n      console.error(e);\n    }\n  }\n\n}\n\nclass RateLimiter {\n  // Initialize rules to be an empty dictionary.\n  constructor() {\n    // Dictionary of all rules associated with this RateLimiter, keyed by their\n    // id. Each rule object stores the rule pattern, number of events allowed,\n    // last reset time and the rule reset interval in milliseconds.\n    this.rules = {};\n  }\n  /**\n  * Checks if this input has exceeded any rate limits.\n  * @param  {object} input dictionary containing key-value pairs of attributes\n  * that match to rules\n  * @return {object} Returns object of following structure\n  * { 'allowed': boolean - is this input allowed\n  *   'timeToReset': integer | Infinity - returns time until counters are reset\n  *                   in milliseconds\n  *   'numInvocationsLeft': integer | Infinity - returns number of calls left\n  *   before limit is reached\n  * }\n  * If multiple rules match, the least number of invocations left is returned.\n  * If the rate limit has been reached, the longest timeToReset is returned.\n  */\n\n\n  check(input) {\n    const reply = {\n      allowed: true,\n      timeToReset: 0,\n      numInvocationsLeft: Infinity\n    };\n\n    const matchedRules = this._findAllMatchingRules(input);\n\n    matchedRules.forEach(rule => {\n      const ruleResult = rule.apply(input);\n      let numInvocations = rule.counters[ruleResult.key];\n\n      if (ruleResult.timeToNextReset < 0) {\n        // Reset all the counters since the rule has reset\n        rule.resetCounter();\n        ruleResult.timeSinceLastReset = new Date().getTime() - rule._lastResetTime;\n        ruleResult.timeToNextReset = rule.options.intervalTime;\n        numInvocations = 0;\n      }\n\n      if (numInvocations > rule.options.numRequestsAllowed) {\n        // Only update timeToReset if the new time would be longer than the\n        // previously set time. This is to ensure that if this input triggers\n        // multiple rules, we return the longest period of time until they can\n        // successfully make another call\n        if (reply.timeToReset < ruleResult.timeToNextReset) {\n          reply.timeToReset = ruleResult.timeToNextReset;\n        }\n\n        reply.allowed = false;\n        reply.numInvocationsLeft = 0;\n\n        rule._executeCallback(reply, input);\n      } else {\n        // If this is an allowed attempt and we haven't failed on any of the\n        // other rules that match, update the reply field.\n        if (rule.options.numRequestsAllowed - numInvocations < reply.numInvocationsLeft && reply.allowed) {\n          reply.timeToReset = ruleResult.timeToNextReset;\n          reply.numInvocationsLeft = rule.options.numRequestsAllowed - numInvocations;\n        }\n\n        rule._executeCallback(reply, input);\n      }\n    });\n    return reply;\n  }\n  /**\n  * Adds a rule to dictionary of rules that are checked against on every call.\n  * Only inputs that pass all of the rules will be allowed. Returns unique rule\n  * id that can be passed to `removeRule`.\n  * @param {object} rule    Input dictionary defining certain attributes and\n  * rules associated with them.\n  * Each attribute's value can either be a value, a function or null. All\n  * functions must return a boolean of whether the input is matched by that\n  * attribute's rule or not\n  * @param {integer} numRequestsAllowed Optional. Number of events allowed per\n  * interval. Default = 10.\n  * @param {integer} intervalTime Optional. Number of milliseconds before\n  * rule's counters are reset. Default = 1000.\n  * @param {function} callback Optional. Function to be called after a\n  * rule is executed. Two objects will be passed to this function.\n  * The first one is the result of RateLimiter.prototype.check\n  * The second is the input object of the rule, it has the following structure:\n  * {\n  *   'type': string - either 'method' or 'subscription'\n  *   'name': string - the name of the method or subscription being called\n  *   'userId': string - the user ID attempting the method or subscription\n  *   'connectionId': string - a string representing the user's DDP connection\n  *   'clientAddress': string - the IP address of the user\n  * }\n  * @return {string} Returns unique rule id\n  */\n\n\n  addRule(rule, numRequestsAllowed, intervalTime, callback) {\n    const options = {\n      numRequestsAllowed: numRequestsAllowed || DEFAULT_REQUESTS_PER_INTERVAL,\n      intervalTime: intervalTime || DEFAULT_INTERVAL_TIME_IN_MILLISECONDS,\n      callback: callback && Meteor.bindEnvironment(callback)\n    };\n    const newRule = new Rule(options, rule);\n    this.rules[newRule.id] = newRule;\n    return newRule.id;\n  }\n  /**\n  * Increment counters in every rule that match to this input\n  * @param  {object} input Dictionary object containing attributes that may\n  * match to rules\n  */\n\n\n  increment(input) {\n    // Only increment rule counters that match this input\n    const matchedRules = this._findAllMatchingRules(input);\n\n    matchedRules.forEach(rule => {\n      const ruleResult = rule.apply(input);\n\n      if (ruleResult.timeSinceLastReset > rule.options.intervalTime) {\n        // Reset all the counters since the rule has reset\n        rule.resetCounter();\n      } // Check whether the key exists, incrementing it if so or otherwise\n      // adding the key and setting its value to 1\n\n\n      if (hasOwn.call(rule.counters, ruleResult.key)) {\n        rule.counters[ruleResult.key]++;\n      } else {\n        rule.counters[ruleResult.key] = 1;\n      }\n    });\n  } // Returns an array of all rules that apply to provided input\n\n\n  _findAllMatchingRules(input) {\n    return Object.values(this.rules).filter(rule => rule.match(input));\n  }\n  /**\n   * Provides a mechanism to remove rules from the rate limiter. Returns boolean\n   * about success.\n   * @param  {string} id Rule id returned from #addRule\n   * @return {boolean} Returns true if rule was found and deleted, else false.\n   */\n\n\n  removeRule(id) {\n    if (this.rules[id]) {\n      delete this.rules[id];\n      return true;\n    }\n\n    return false;\n  }\n\n}","map":{"version":3,"sources":["packages/rate-limit/rate-limit.js"],"names":["module","export","RateLimiter","Meteor","link","v","Random","DEFAULT_INTERVAL_TIME_IN_MILLISECONDS","DEFAULT_REQUESTS_PER_INTERVAL","hasOwn","Object","prototype","hasOwnProperty","Rule","constructor","options","matchers","id","_matchers","_lastResetTime","Date","getTime","counters","match","input","entries","every","key","matcher","call","_generateKeyString","filter","reduce","returnString","apply","timeSinceLastReset","timeToNextReset","intervalTime","resetCounter","_executeCallback","reply","ruleInput","callback","e","console","error","rules","check","allowed","timeToReset","numInvocationsLeft","Infinity","matchedRules","_findAllMatchingRules","forEach","rule","ruleResult","numInvocations","numRequestsAllowed","addRule","bindEnvironment","newRule","increment","values","removeRule"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\n\n// Default time interval (in milliseconds) to reset rate limit counters\nconst DEFAULT_INTERVAL_TIME_IN_MILLISECONDS = 1000;\n// Default number of events allowed per time interval\nconst DEFAULT_REQUESTS_PER_INTERVAL = 10;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\n// A rule is defined by an options object that contains two fields,\n// `numRequestsAllowed` which is the number of events allowed per interval, and\n// an `intervalTime` which is the amount of time in milliseconds before the\n// rate limit restarts its internal counters, and by a matchers object. A\n// matchers object is a POJO that contains a set of keys with values that\n// define the entire set of inputs that match for each key. The values can\n// either be null (optional), a primitive or a function that returns a boolean\n// of whether the provided input's value matches for this key.\n//\n// Rules are uniquely assigned an `id` and they store a dictionary of counters,\n// which are records used to keep track of inputs that match the rule. If a\n// counter reaches the `numRequestsAllowed` within a given `intervalTime`, a\n// rate limit is reached and future inputs that map to that counter will\n// result in errors being returned to the client.\nclass Rule {\n  constructor(options, matchers) {\n    this.id = Random.id();\n\n    this.options = options;\n\n    this._matchers = matchers;\n\n    this._lastResetTime = new Date().getTime();\n\n    // Dictionary of input keys to counters\n    this.counters = {};\n  }\n  // Determine if this rule applies to the given input by comparing all\n  // rule.matchers. If the match fails, search short circuits instead of\n  // iterating through all matchers.\n  match(input) {\n    return Object\n      .entries(this._matchers)\n      .every(([key, matcher]) => {\n        if (matcher !== null) {\n          if (!hasOwn.call(input, key)) {\n            return false;\n          } else if (typeof matcher === 'function') {\n            if (!(matcher(input[key]))) {\n              return false;\n            }\n          } else if (matcher !== input[key]) {\n            return false;\n          }\n        }\n        return true;\n      });\n  }\n\n  // Generates unique key string for provided input by concatenating all the\n  // keys in the matcher with the corresponding values in the input.\n  // Only called if rule matches input.\n  _generateKeyString(input) {\n    return Object.entries(this._matchers)\n      .filter(([key]) => this._matchers[key] !== null)\n      .reduce((returnString, [key, matcher]) => {\n        if (typeof matcher === 'function') {\n          if (matcher(input[key])) {\n            returnString += key + input[key];\n          }\n        } else {\n          returnString += key + input[key];\n        }\n        return returnString;\n      }, '');\n  }\n\n  // Applies the provided input and returns the key string, time since counters\n  // were last reset and time to next reset.\n  apply(input) {\n    const key = this._generateKeyString(input);\n    const timeSinceLastReset = new Date().getTime() - this._lastResetTime;\n    const timeToNextReset = this.options.intervalTime - timeSinceLastReset;\n    return {\n      key,\n      timeSinceLastReset,\n      timeToNextReset,\n    };\n  }\n\n  // Reset counter dictionary for this specific rule. Called once the\n  // timeSinceLastReset has exceeded the intervalTime. _lastResetTime is\n  // set to be the current time in milliseconds.\n  resetCounter() {\n    // Delete the old counters dictionary to allow for garbage collection\n    this.counters = {};\n    this._lastResetTime = new Date().getTime();\n  }\n\n  _executeCallback(reply, ruleInput) {\n    try {\n      if (this.options.callback) {\n        this.options.callback(reply, ruleInput);\n      }\n    } catch (e) {\n      // Do not throw error here\n      console.error(e);\n    }\n  }\n}\n\nclass RateLimiter {\n  // Initialize rules to be an empty dictionary.\n  constructor() {\n    // Dictionary of all rules associated with this RateLimiter, keyed by their\n    // id. Each rule object stores the rule pattern, number of events allowed,\n    // last reset time and the rule reset interval in milliseconds.\n\n    this.rules = {};\n  }\n\n  /**\n  * Checks if this input has exceeded any rate limits.\n  * @param  {object} input dictionary containing key-value pairs of attributes\n  * that match to rules\n  * @return {object} Returns object of following structure\n  * { 'allowed': boolean - is this input allowed\n  *   'timeToReset': integer | Infinity - returns time until counters are reset\n  *                   in milliseconds\n  *   'numInvocationsLeft': integer | Infinity - returns number of calls left\n  *   before limit is reached\n  * }\n  * If multiple rules match, the least number of invocations left is returned.\n  * If the rate limit has been reached, the longest timeToReset is returned.\n  */\n  check(input) {\n    const reply = {\n      allowed: true,\n      timeToReset: 0,\n      numInvocationsLeft: Infinity,\n    };\n\n    const matchedRules = this._findAllMatchingRules(input);\n    matchedRules.forEach((rule) => {\n      const ruleResult = rule.apply(input);\n      let numInvocations = rule.counters[ruleResult.key];\n\n      if (ruleResult.timeToNextReset < 0) {\n        // Reset all the counters since the rule has reset\n        rule.resetCounter();\n        ruleResult.timeSinceLastReset = new Date().getTime() -\n          rule._lastResetTime;\n        ruleResult.timeToNextReset = rule.options.intervalTime;\n        numInvocations = 0;\n      }\n\n      if (numInvocations > rule.options.numRequestsAllowed) {\n        // Only update timeToReset if the new time would be longer than the\n        // previously set time. This is to ensure that if this input triggers\n        // multiple rules, we return the longest period of time until they can\n        // successfully make another call\n        if (reply.timeToReset < ruleResult.timeToNextReset) {\n          reply.timeToReset = ruleResult.timeToNextReset;\n        }\n        reply.allowed = false;\n        reply.numInvocationsLeft = 0;\n        rule._executeCallback(reply, input);\n      } else {\n        // If this is an allowed attempt and we haven't failed on any of the\n        // other rules that match, update the reply field.\n        if (rule.options.numRequestsAllowed - numInvocations <\n          reply.numInvocationsLeft && reply.allowed) {\n          reply.timeToReset = ruleResult.timeToNextReset;\n          reply.numInvocationsLeft = rule.options.numRequestsAllowed -\n            numInvocations;\n        }\n        rule._executeCallback(reply, input);\n      }\n    });\n    return reply;\n  }\n\n  /**\n  * Adds a rule to dictionary of rules that are checked against on every call.\n  * Only inputs that pass all of the rules will be allowed. Returns unique rule\n  * id that can be passed to `removeRule`.\n  * @param {object} rule    Input dictionary defining certain attributes and\n  * rules associated with them.\n  * Each attribute's value can either be a value, a function or null. All\n  * functions must return a boolean of whether the input is matched by that\n  * attribute's rule or not\n  * @param {integer} numRequestsAllowed Optional. Number of events allowed per\n  * interval. Default = 10.\n  * @param {integer} intervalTime Optional. Number of milliseconds before\n  * rule's counters are reset. Default = 1000.\n  * @param {function} callback Optional. Function to be called after a\n  * rule is executed. Two objects will be passed to this function.\n  * The first one is the result of RateLimiter.prototype.check\n  * The second is the input object of the rule, it has the following structure:\n  * {\n  *   'type': string - either 'method' or 'subscription'\n  *   'name': string - the name of the method or subscription being called\n  *   'userId': string - the user ID attempting the method or subscription\n  *   'connectionId': string - a string representing the user's DDP connection\n  *   'clientAddress': string - the IP address of the user\n  * }\n  * @return {string} Returns unique rule id\n  */\n  addRule(rule, numRequestsAllowed, intervalTime, callback) {\n    const options = {\n      numRequestsAllowed: numRequestsAllowed || DEFAULT_REQUESTS_PER_INTERVAL,\n      intervalTime: intervalTime || DEFAULT_INTERVAL_TIME_IN_MILLISECONDS,\n      callback: callback && Meteor.bindEnvironment(callback),\n    };\n\n    const newRule = new Rule(options, rule);\n    this.rules[newRule.id] = newRule;\n    return newRule.id;\n  }\n\n  /**\n  * Increment counters in every rule that match to this input\n  * @param  {object} input Dictionary object containing attributes that may\n  * match to rules\n  */\n  increment(input) {\n    // Only increment rule counters that match this input\n    const matchedRules = this._findAllMatchingRules(input);\n    matchedRules.forEach((rule) => {\n      const ruleResult = rule.apply(input);\n\n      if (ruleResult.timeSinceLastReset > rule.options.intervalTime) {\n        // Reset all the counters since the rule has reset\n        rule.resetCounter();\n      }\n\n      // Check whether the key exists, incrementing it if so or otherwise\n      // adding the key and setting its value to 1\n      if (hasOwn.call(rule.counters, ruleResult.key)) {\n        rule.counters[ruleResult.key]++;\n      } else {\n        rule.counters[ruleResult.key] = 1;\n      }\n    });\n  }\n\n  // Returns an array of all rules that apply to provided input\n  _findAllMatchingRules(input) {\n    return Object.values(this.rules).filter(rule => rule.match(input));\n  }\n\n  /**\n   * Provides a mechanism to remove rules from the rate limiter. Returns boolean\n   * about success.\n   * @param  {string} id Rule id returned from #addRule\n   * @return {boolean} Returns true if rule was found and deleted, else false.\n   */\n  removeRule(id) {\n    if (this.rules[id]) {\n      delete this.rules[id];\n      return true;\n    }\n    return false;\n  }\n}\n\nexport { RateLimiter };\n"]},"sourceType":"script","hash":"48e55e3b746820be35458128270f49d329398094"}
