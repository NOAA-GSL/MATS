{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/google-oauth/google_server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/google-oauth/google_server.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/google-oauth/google_server.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/google-oauth/google_server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/google-oauth/google_server.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nlet Google;\nmodule.link(\"./namespace.js\", {\n  default(v) {\n    Google = v;\n  }\n\n}, 0);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 1);\nconst hasOwn = Object.prototype.hasOwnProperty; // https://developers.google.com/accounts/docs/OAuth2Login#userinfocall\n\nGoogle.whitelistedFields = ['id', 'email', 'verified_email', 'name', 'given_name', 'family_name', 'picture', 'locale', 'timezone', 'gender'];\n\nconst getServiceDataFromTokens = tokens => {\n  const {\n    accessToken,\n    idToken\n  } = tokens;\n  const scopes = getScopes(accessToken);\n  const identity = getIdentity(accessToken);\n  const serviceData = {\n    accessToken,\n    idToken,\n    scope: scopes\n  };\n\n  if (hasOwn.call(tokens, \"expiresIn\")) {\n    serviceData.expiresAt = Date.now() + 1000 * parseInt(tokens.expiresIn, 10);\n  }\n\n  const fields = Object.create(null);\n  Google.whitelistedFields.forEach(function (name) {\n    if (hasOwn.call(identity, name)) {\n      fields[name] = identity[name];\n    }\n  });\n  Object.assign(serviceData, fields); // only set the token in serviceData if it's there. this ensures\n  // that we don't lose old ones (since we only get this on the first\n  // log in attempt)\n\n  if (tokens.refreshToken) {\n    serviceData.refreshToken = tokens.refreshToken;\n  }\n\n  return {\n    serviceData,\n    options: {\n      profile: {\n        name: identity.name\n      }\n    }\n  };\n};\n\nAccounts.registerLoginHandler(request => {\n  if (request.googleSignIn !== true) {\n    return;\n  }\n\n  const tokens = {\n    accessToken: request.accessToken,\n    refreshToken: request.refreshToken,\n    idToken: request.idToken\n  };\n\n  if (request.serverAuthCode) {\n    Object.assign(tokens, getTokens({\n      code: request.serverAuthCode\n    }));\n  }\n\n  const result = getServiceDataFromTokens(tokens);\n  return Accounts.updateOrCreateUserFromExternalService(\"google\", (0, _objectSpread2.default)({\n    id: request.userId,\n    idToken: request.idToken,\n    accessToken: request.accessToken,\n    email: request.email,\n    picture: request.imageUrl\n  }, result.serviceData), result.options);\n});\n\nconst getServiceData = query => getServiceDataFromTokens(getTokens(query));\n\nOAuth.registerService('google', 2, null, getServiceData); // returns an object containing:\n// - accessToken\n// - expiresIn: lifetime of token in seconds\n// - refreshToken, if this is the first authorization request\n\nconst getTokens = query => {\n  const config = ServiceConfiguration.configurations.findOne({\n    service: 'google'\n  });\n  if (!config) throw new ServiceConfiguration.ConfigError();\n  let response;\n\n  try {\n    response = HTTP.post(\"https://accounts.google.com/o/oauth2/token\", {\n      params: {\n        code: query.code,\n        client_id: config.clientId,\n        client_secret: OAuth.openSecret(config.secret),\n        redirect_uri: OAuth._redirectUri('google', config),\n        grant_type: 'authorization_code'\n      }\n    });\n  } catch (err) {\n    throw Object.assign(new Error(`Failed to complete OAuth handshake with Google. ${err.message}`), {\n      response: err.response\n    });\n  }\n\n  if (response.data.error) {\n    // if the http response was a json object with an error attribute\n    throw new Error(`Failed to complete OAuth handshake with Google. ${response.data.error}`);\n  } else {\n    return {\n      accessToken: response.data.access_token,\n      refreshToken: response.data.refresh_token,\n      expiresIn: response.data.expires_in,\n      idToken: response.data.id_token\n    };\n  }\n};\n\nconst getIdentity = accessToken => {\n  try {\n    return HTTP.get(\"https://www.googleapis.com/oauth2/v1/userinfo\", {\n      params: {\n        access_token: accessToken\n      }\n    }).data;\n  } catch (err) {\n    throw Object.assign(new Error(`Failed to fetch identity from Google. ${err.message}`), {\n      response: err.response\n    });\n  }\n};\n\nconst getScopes = accessToken => {\n  try {\n    return HTTP.get(\"https://www.googleapis.com/oauth2/v1/tokeninfo\", {\n      params: {\n        access_token: accessToken\n      }\n    }).data.scope.split(' ');\n  } catch (err) {\n    throw Object.assign(new Error(`Failed to fetch tokeninfo from Google. ${err.message}`), {\n      response: err.response\n    });\n  }\n};\n\nGoogle.retrieveCredential = (credentialToken, credentialSecret) => OAuth.retrieveCredential(credentialToken, credentialSecret);","map":{"version":3,"sources":["packages/google-oauth/google_server.js"],"names":["Google","module","link","default","v","Accounts","hasOwn","Object","prototype","hasOwnProperty","whitelistedFields","getServiceDataFromTokens","tokens","accessToken","idToken","scopes","getScopes","identity","getIdentity","serviceData","scope","call","expiresAt","Date","now","parseInt","expiresIn","fields","create","forEach","name","assign","refreshToken","options","profile","registerLoginHandler","request","googleSignIn","serverAuthCode","getTokens","code","result","updateOrCreateUserFromExternalService","id","userId","email","picture","imageUrl","getServiceData","query","OAuth","registerService","config","ServiceConfiguration","configurations","findOne","service","ConfigError","response","HTTP","post","params","client_id","clientId","client_secret","openSecret","secret","redirect_uri","_redirectUri","grant_type","err","Error","message","data","error","access_token","refresh_token","expires_in","id_token","get","split","retrieveCredential","credentialToken","credentialSecret"],"mappings":"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","sourcesContent":["import Google from './namespace.js';\nimport { Accounts } from 'meteor/accounts-base';\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\n// https://developers.google.com/accounts/docs/OAuth2Login#userinfocall\nGoogle.whitelistedFields = ['id', 'email', 'verified_email', 'name', 'given_name',\n                   'family_name', 'picture', 'locale', 'timezone', 'gender'];\n\nconst getServiceDataFromTokens = tokens => {\n  const { accessToken, idToken } = tokens;\n  const scopes = getScopes(accessToken);\n  const identity = getIdentity(accessToken);\n  const serviceData = {\n    accessToken,\n    idToken,\n    scope: scopes\n  };\n\n  if (hasOwn.call(tokens, \"expiresIn\")) {\n    serviceData.expiresAt =\n      Date.now() + 1000 * parseInt(tokens.expiresIn, 10);\n  }\n\n  const fields = Object.create(null);\n  Google.whitelistedFields.forEach(function (name) {\n    if (hasOwn.call(identity, name)) {\n      fields[name] = identity[name];\n    }\n  });\n\n  Object.assign(serviceData, fields);\n\n  // only set the token in serviceData if it's there. this ensures\n  // that we don't lose old ones (since we only get this on the first\n  // log in attempt)\n  if (tokens.refreshToken) {\n    serviceData.refreshToken = tokens.refreshToken;\n  }\n\n  return {\n    serviceData,\n    options: {\n      profile: {\n        name: identity.name\n      }\n    }\n  };\n}\n\nAccounts.registerLoginHandler(request => {\n  if (request.googleSignIn !== true) {\n    return;\n  }\n\n  const tokens = {\n    accessToken: request.accessToken,\n    refreshToken: request.refreshToken,\n    idToken: request.idToken,\n  };\n\n  if (request.serverAuthCode) {\n    Object.assign(tokens, getTokens({\n      code: request.serverAuthCode\n    }));\n  }\n\n  const result = getServiceDataFromTokens(tokens);\n\n  return Accounts.updateOrCreateUserFromExternalService(\"google\", {\n    id: request.userId,\n    idToken: request.idToken,\n    accessToken: request.accessToken,\n    email: request.email,\n    picture: request.imageUrl,\n    ...result.serviceData,\n  }, result.options);\n});\n\nconst getServiceData = query => getServiceDataFromTokens(getTokens(query));\n\nOAuth.registerService('google', 2, null, getServiceData);\n\n// returns an object containing:\n// - accessToken\n// - expiresIn: lifetime of token in seconds\n// - refreshToken, if this is the first authorization request\nconst getTokens = query => {\n  const config = ServiceConfiguration.configurations.findOne({service: 'google'});\n  if (!config)\n    throw new ServiceConfiguration.ConfigError();\n\n  let response;\n  try {\n    response = HTTP.post(\n      \"https://accounts.google.com/o/oauth2/token\", {params: {\n        code: query.code,\n        client_id: config.clientId,\n        client_secret: OAuth.openSecret(config.secret),\n        redirect_uri: OAuth._redirectUri('google', config),\n        grant_type: 'authorization_code'\n      }});\n  } catch (err) {\n    throw Object.assign(\n      new Error(`Failed to complete OAuth handshake with Google. ${err.message}`),\n      { response: err.response }\n    );\n  }\n\n  if (response.data.error) { // if the http response was a json object with an error attribute\n    throw new Error(`Failed to complete OAuth handshake with Google. ${response.data.error}`);\n  } else {\n    return {\n      accessToken: response.data.access_token,\n      refreshToken: response.data.refresh_token,\n      expiresIn: response.data.expires_in,\n      idToken: response.data.id_token\n    };\n  }\n};\n\nconst getIdentity = accessToken => {\n  try {\n    return HTTP.get(\n      \"https://www.googleapis.com/oauth2/v1/userinfo\",\n      {params: {access_token: accessToken}}).data;\n  } catch (err) {\n    throw Object.assign(\n      new Error(`Failed to fetch identity from Google. ${err.message}`),\n      { response: err.response }\n    );\n  }\n};\n\nconst getScopes = accessToken => {\n  try {\n    return HTTP.get(\n      \"https://www.googleapis.com/oauth2/v1/tokeninfo\",\n      {params: {access_token: accessToken}}).data.scope.split(' ');\n  } catch (err) {\n    throw Object.assign(\n      new Error(`Failed to fetch tokeninfo from Google. ${err.message}`),\n      { response: err.response }\n    );\n  }\n};\n\nGoogle.retrieveCredential = (credentialToken, credentialSecret) =>\n  OAuth.retrieveCredential(credentialToken, credentialSecret);\n"]},"sourceType":"script","hash":"2c8b3c7b0ac13a4182d200946b50e41df879c195"}
