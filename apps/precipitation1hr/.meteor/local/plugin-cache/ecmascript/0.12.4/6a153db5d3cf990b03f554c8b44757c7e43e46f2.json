{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/ddp-server/writefence.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/ddp-server/writefence.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/ddp-server/writefence.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/ddp-server/writefence.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/ddp-server/writefence.js"}},"code":"var Future = Npm.require('fibers/future'); // A write fence collects a group of writes, and provides a callback\n// when all of the writes are fully committed and propagated (all\n// observers have been notified of the write and acknowledged it.)\n//\n\n\nDDPServer._WriteFence = function () {\n  var self = this;\n  self.armed = false;\n  self.fired = false;\n  self.retired = false;\n  self.outstanding_writes = 0;\n  self.before_fire_callbacks = [];\n  self.completion_callbacks = [];\n}; // The current write fence. When there is a current write fence, code\n// that writes to databases should register their writes with it using\n// beginWrite().\n//\n\n\nDDPServer._CurrentWriteFence = new Meteor.EnvironmentVariable();\n\n_.extend(DDPServer._WriteFence.prototype, {\n  // Start tracking a write, and return an object to represent it. The\n  // object has a single method, committed(). This method should be\n  // called when the write is fully committed and propagated. You can\n  // continue to add writes to the WriteFence up until it is triggered\n  // (calls its callbacks because all writes have committed.)\n  beginWrite: function () {\n    var self = this;\n    if (self.retired) return {\n      committed: function () {}\n    };\n    if (self.fired) throw new Error(\"fence has already activated -- too late to add writes\");\n    self.outstanding_writes++;\n    var committed = false;\n    return {\n      committed: function () {\n        if (committed) throw new Error(\"committed called twice on the same write\");\n        committed = true;\n        self.outstanding_writes--;\n\n        self._maybeFire();\n      }\n    };\n  },\n  // Arm the fence. Once the fence is armed, and there are no more\n  // uncommitted writes, it will activate.\n  arm: function () {\n    var self = this;\n    if (self === DDPServer._CurrentWriteFence.get()) throw Error(\"Can't arm the current fence\");\n    self.armed = true;\n\n    self._maybeFire();\n  },\n  // Register a function to be called once before firing the fence.\n  // Callback function can add new writes to the fence, in which case\n  // it won't fire until those writes are done as well.\n  onBeforeFire: function (func) {\n    var self = this;\n    if (self.fired) throw new Error(\"fence has already activated -- too late to \" + \"add a callback\");\n    self.before_fire_callbacks.push(func);\n  },\n  // Register a function to be called when the fence fires.\n  onAllCommitted: function (func) {\n    var self = this;\n    if (self.fired) throw new Error(\"fence has already activated -- too late to \" + \"add a callback\");\n    self.completion_callbacks.push(func);\n  },\n  // Convenience function. Arms the fence, then blocks until it fires.\n  armAndWait: function () {\n    var self = this;\n    var future = new Future();\n    self.onAllCommitted(function () {\n      future['return']();\n    });\n    self.arm();\n    future.wait();\n  },\n  _maybeFire: function () {\n    var self = this;\n    if (self.fired) throw new Error(\"write fence already activated?\");\n\n    if (self.armed && !self.outstanding_writes) {\n      function invokeCallback(func) {\n        try {\n          func(self);\n        } catch (err) {\n          Meteor._debug(\"exception in write fence callback\", err);\n        }\n      }\n\n      self.outstanding_writes++;\n\n      while (self.before_fire_callbacks.length > 0) {\n        var callbacks = self.before_fire_callbacks;\n        self.before_fire_callbacks = [];\n\n        _.each(callbacks, invokeCallback);\n      }\n\n      self.outstanding_writes--;\n\n      if (!self.outstanding_writes) {\n        self.fired = true;\n        var callbacks = self.completion_callbacks;\n        self.completion_callbacks = [];\n\n        _.each(callbacks, invokeCallback);\n      }\n    }\n  },\n  // Deactivate this fence so that adding more writes has no effect.\n  // The fence must have already fired.\n  retire: function () {\n    var self = this;\n    if (!self.fired) throw new Error(\"Can't retire a fence that hasn't fired.\");\n    self.retired = true;\n  }\n});","map":{"version":3,"sources":["packages/ddp-server/writefence.js"],"names":["Future","Npm","require","DDPServer","_WriteFence","self","armed","fired","retired","outstanding_writes","before_fire_callbacks","completion_callbacks","_CurrentWriteFence","Meteor","EnvironmentVariable","_","extend","prototype","beginWrite","committed","Error","_maybeFire","arm","get","onBeforeFire","func","push","onAllCommitted","armAndWait","future","wait","invokeCallback","err","_debug","length","callbacks","each","retire"],"mappings":"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","sourcesContent":["var Future = Npm.require('fibers/future');\n\n// A write fence collects a group of writes, and provides a callback\n// when all of the writes are fully committed and propagated (all\n// observers have been notified of the write and acknowledged it.)\n//\nDDPServer._WriteFence = function () {\n  var self = this;\n\n  self.armed = false;\n  self.fired = false;\n  self.retired = false;\n  self.outstanding_writes = 0;\n  self.before_fire_callbacks = [];\n  self.completion_callbacks = [];\n};\n\n// The current write fence. When there is a current write fence, code\n// that writes to databases should register their writes with it using\n// beginWrite().\n//\nDDPServer._CurrentWriteFence = new Meteor.EnvironmentVariable;\n\n_.extend(DDPServer._WriteFence.prototype, {\n  // Start tracking a write, and return an object to represent it. The\n  // object has a single method, committed(). This method should be\n  // called when the write is fully committed and propagated. You can\n  // continue to add writes to the WriteFence up until it is triggered\n  // (calls its callbacks because all writes have committed.)\n  beginWrite: function () {\n    var self = this;\n\n    if (self.retired)\n      return { committed: function () {} };\n\n    if (self.fired)\n      throw new Error(\"fence has already activated -- too late to add writes\");\n\n    self.outstanding_writes++;\n    var committed = false;\n    return {\n      committed: function () {\n        if (committed)\n          throw new Error(\"committed called twice on the same write\");\n        committed = true;\n        self.outstanding_writes--;\n        self._maybeFire();\n      }\n    };\n  },\n\n  // Arm the fence. Once the fence is armed, and there are no more\n  // uncommitted writes, it will activate.\n  arm: function () {\n    var self = this;\n    if (self === DDPServer._CurrentWriteFence.get())\n      throw Error(\"Can't arm the current fence\");\n    self.armed = true;\n    self._maybeFire();\n  },\n\n  // Register a function to be called once before firing the fence.\n  // Callback function can add new writes to the fence, in which case\n  // it won't fire until those writes are done as well.\n  onBeforeFire: function (func) {\n    var self = this;\n    if (self.fired)\n      throw new Error(\"fence has already activated -- too late to \" +\n                      \"add a callback\");\n    self.before_fire_callbacks.push(func);\n  },\n\n  // Register a function to be called when the fence fires.\n  onAllCommitted: function (func) {\n    var self = this;\n    if (self.fired)\n      throw new Error(\"fence has already activated -- too late to \" +\n                      \"add a callback\");\n    self.completion_callbacks.push(func);\n  },\n\n  // Convenience function. Arms the fence, then blocks until it fires.\n  armAndWait: function () {\n    var self = this;\n    var future = new Future;\n    self.onAllCommitted(function () {\n      future['return']();\n    });\n    self.arm();\n    future.wait();\n  },\n\n  _maybeFire: function () {\n    var self = this;\n    if (self.fired)\n      throw new Error(\"write fence already activated?\");\n    if (self.armed && !self.outstanding_writes) {\n      function invokeCallback (func) {\n        try {\n          func(self);\n        } catch (err) {\n          Meteor._debug(\"exception in write fence callback\", err);\n        }\n      }\n\n      self.outstanding_writes++;\n      while (self.before_fire_callbacks.length > 0) {\n        var callbacks = self.before_fire_callbacks;\n        self.before_fire_callbacks = [];\n        _.each(callbacks, invokeCallback);\n      }\n      self.outstanding_writes--;\n\n      if (!self.outstanding_writes) {\n        self.fired = true;\n        var callbacks = self.completion_callbacks;\n        self.completion_callbacks = [];\n        _.each(callbacks, invokeCallback);\n      }\n    }\n  },\n\n  // Deactivate this fence so that adding more writes has no effect.\n  // The fence must have already fired.\n  retire: function () {\n    var self = this;\n    if (! self.fired)\n      throw new Error(\"Can't retire a fence that hasn't fired.\");\n    self.retired = true;\n  }\n});\n"]},"sourceType":"script","hash":"6a153db5d3cf990b03f554c8b44757c7e43e46f2"}
