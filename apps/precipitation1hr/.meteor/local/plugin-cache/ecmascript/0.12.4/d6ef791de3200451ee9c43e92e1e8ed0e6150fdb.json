{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/ddp-common/method_invocation.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/ddp-common/method_invocation.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/ddp-common/method_invocation.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/ddp-common/method_invocation.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/ddp-common/method_invocation.js"}},"code":"// Instance name is this because it is usually referred to as this inside a\n// method definition\n\n/**\n * @summary The state for a single invocation of a method, referenced by this\n * inside a method definition.\n * @param {Object} options\n * @instanceName this\n * @showInstanceName true\n */\nDDPCommon.MethodInvocation = class MethodInvocation {\n  constructor(options) {\n    // true if we're running not the actual method, but a stub (that is,\n    // if we're on a client (which may be a browser, or in the future a\n    // server connecting to another server) and presently running a\n    // simulation of a server-side method for latency compensation\n    // purposes). not currently true except in a client such as a browser,\n    // since there's usually no point in running stubs unless you have a\n    // zero-latency connection to the user.\n\n    /**\n     * @summary Access inside a method invocation.  Boolean value, true if this invocation is a stub.\n     * @locus Anywhere\n     * @name  isSimulation\n     * @memberOf DDPCommon.MethodInvocation\n     * @instance\n     * @type {Boolean}\n     */\n    this.isSimulation = options.isSimulation; // call this function to allow other method invocations (from the\n    // same client) to continue running without waiting for this one to\n    // complete.\n\n    this._unblock = options.unblock || function () {};\n\n    this._calledUnblock = false; // current user id\n\n    /**\n     * @summary The id of the user that made this method call, or `null` if no user was logged in.\n     * @locus Anywhere\n     * @name  userId\n     * @memberOf DDPCommon.MethodInvocation\n     * @instance\n     */\n\n    this.userId = options.userId; // sets current user id in all appropriate server contexts and\n    // reruns subscriptions\n\n    this._setUserId = options.setUserId || function () {}; // On the server, the connection this method call came in on.\n\n    /**\n     * @summary Access inside a method invocation. The [connection](#meteor_onconnection) that this method was received on. `null` if the method is not associated with a connection, eg. a server initiated method call. Calls to methods made from a server method which was in turn initiated from the client share the same `connection`.\n     * @locus Server\n     * @name  connection\n     * @memberOf DDPCommon.MethodInvocation\n     * @instance\n     */\n\n\n    this.connection = options.connection; // The seed for randomStream value generation\n\n    this.randomSeed = options.randomSeed; // This is set by RandomStream.get; and holds the random stream state\n\n    this.randomStream = null;\n  }\n  /**\n   * @summary Call inside a method invocation.  Allow subsequent method from this client to begin running in a new fiber.\n   * @locus Server\n   * @memberOf DDPCommon.MethodInvocation\n   * @instance\n   */\n\n\n  unblock() {\n    this._calledUnblock = true;\n\n    this._unblock();\n  }\n  /**\n   * @summary Set the logged in user.\n   * @locus Server\n   * @memberOf DDPCommon.MethodInvocation\n   * @instance\n   * @param {String | null} userId The value that should be returned by `userId` on this connection.\n   */\n\n\n  setUserId(userId) {\n    if (this._calledUnblock) {\n      throw new Error(\"Can't call setUserId in a method after calling unblock\");\n    }\n\n    this.userId = userId;\n\n    this._setUserId(userId);\n  }\n\n};","map":{"version":3,"sources":["packages/ddp-common/method_invocation.js"],"names":["DDPCommon","MethodInvocation","constructor","options","isSimulation","_unblock","unblock","_calledUnblock","userId","_setUserId","setUserId","connection","randomSeed","randomStream","Error"],"mappings":"AAAA;AACA;;AACA;;;;;;;AAOAA,SAAS,CAACC,gBAAV,GAA6B,MAAMA,gBAAN,CAAuB;AAClDC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AAQA,SAAKC,YAAL,GAAoBD,OAAO,CAACC,YAA5B,CAjBmB,CAmBnB;AACA;AACA;;AACA,SAAKC,QAAL,GAAgBF,OAAO,CAACG,OAAR,IAAmB,YAAY,CAAE,CAAjD;;AACA,SAAKC,cAAL,GAAsB,KAAtB,CAvBmB,CAyBnB;;AAEA;;;;;;;;AAOA,SAAKC,MAAL,GAAcL,OAAO,CAACK,MAAtB,CAlCmB,CAoCnB;AACA;;AACA,SAAKC,UAAL,GAAkBN,OAAO,CAACO,SAAR,IAAqB,YAAY,CAAE,CAArD,CAtCmB,CAwCnB;;AAEA;;;;;;;;;AAOA,SAAKC,UAAL,GAAkBR,OAAO,CAACQ,UAA1B,CAjDmB,CAmDnB;;AACA,SAAKC,UAAL,GAAkBT,OAAO,CAACS,UAA1B,CApDmB,CAsDnB;;AACA,SAAKC,YAAL,GAAoB,IAApB;AACD;AAED;;;;;;;;AAMAP,EAAAA,OAAO,GAAG;AACR,SAAKC,cAAL,GAAsB,IAAtB;;AACA,SAAKF,QAAL;AACD;AAED;;;;;;;;;AAOAK,EAAAA,SAAS,CAACF,MAAD,EAAS;AAChB,QAAI,KAAKD,cAAT,EAAyB;AACvB,YAAM,IAAIO,KAAJ,CAAU,wDAAV,CAAN;AACD;;AACD,SAAKN,MAAL,GAAcA,MAAd;;AACA,SAAKC,UAAL,CAAgBD,MAAhB;AACD;;AAnFiD,CAApD","sourcesContent":["// Instance name is this because it is usually referred to as this inside a\n// method definition\n/**\n * @summary The state for a single invocation of a method, referenced by this\n * inside a method definition.\n * @param {Object} options\n * @instanceName this\n * @showInstanceName true\n */\nDDPCommon.MethodInvocation = class MethodInvocation {\n  constructor(options) {\n    // true if we're running not the actual method, but a stub (that is,\n    // if we're on a client (which may be a browser, or in the future a\n    // server connecting to another server) and presently running a\n    // simulation of a server-side method for latency compensation\n    // purposes). not currently true except in a client such as a browser,\n    // since there's usually no point in running stubs unless you have a\n    // zero-latency connection to the user.\n\n    /**\n     * @summary Access inside a method invocation.  Boolean value, true if this invocation is a stub.\n     * @locus Anywhere\n     * @name  isSimulation\n     * @memberOf DDPCommon.MethodInvocation\n     * @instance\n     * @type {Boolean}\n     */\n    this.isSimulation = options.isSimulation;\n\n    // call this function to allow other method invocations (from the\n    // same client) to continue running without waiting for this one to\n    // complete.\n    this._unblock = options.unblock || function () {};\n    this._calledUnblock = false;\n\n    // current user id\n\n    /**\n     * @summary The id of the user that made this method call, or `null` if no user was logged in.\n     * @locus Anywhere\n     * @name  userId\n     * @memberOf DDPCommon.MethodInvocation\n     * @instance\n     */\n    this.userId = options.userId;\n\n    // sets current user id in all appropriate server contexts and\n    // reruns subscriptions\n    this._setUserId = options.setUserId || function () {};\n\n    // On the server, the connection this method call came in on.\n\n    /**\n     * @summary Access inside a method invocation. The [connection](#meteor_onconnection) that this method was received on. `null` if the method is not associated with a connection, eg. a server initiated method call. Calls to methods made from a server method which was in turn initiated from the client share the same `connection`.\n     * @locus Server\n     * @name  connection\n     * @memberOf DDPCommon.MethodInvocation\n     * @instance\n     */\n    this.connection = options.connection;\n\n    // The seed for randomStream value generation\n    this.randomSeed = options.randomSeed;\n\n    // This is set by RandomStream.get; and holds the random stream state\n    this.randomStream = null;\n  }\n\n  /**\n   * @summary Call inside a method invocation.  Allow subsequent method from this client to begin running in a new fiber.\n   * @locus Server\n   * @memberOf DDPCommon.MethodInvocation\n   * @instance\n   */\n  unblock() {\n    this._calledUnblock = true;\n    this._unblock();\n  }\n\n  /**\n   * @summary Set the logged in user.\n   * @locus Server\n   * @memberOf DDPCommon.MethodInvocation\n   * @instance\n   * @param {String | null} userId The value that should be returned by `userId` on this connection.\n   */\n  setUserId(userId) {\n    if (this._calledUnblock) {\n      throw new Error(\"Can't call setUserId in a method after calling unblock\");\n    }\n    this.userId = userId;\n    this._setUserId(userId);\n  }\n};\n"]},"sourceType":"script","hash":"d6ef791de3200451ee9c43e92e1e8ed0e6150fdb"}
