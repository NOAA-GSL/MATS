{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/ddp-client/common/namespace.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/ddp-client/common/namespace.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/ddp-client/common/namespace.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/ddp-client/common/namespace.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/ddp-client/common/namespace.js"}},"code":"module.export({\n  DDP: () => DDP\n});\nlet DDPCommon;\nmodule.link(\"meteor/ddp-common\", {\n  DDPCommon(v) {\n    DDPCommon = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet keys;\nmodule.link(\"meteor/ddp-common/utils.js\", {\n  keys(v) {\n    keys = v;\n  }\n\n}, 2);\nlet Connection;\nmodule.link(\"./livedata_connection.js\", {\n  Connection(v) {\n    Connection = v;\n  }\n\n}, 3);\n// This array allows the `_allSubscriptionsReady` method below, which\n// is used by the `spiderable` package, to keep track of whether all\n// data is ready.\nconst allConnections = [];\n/**\n * @namespace DDP\n * @summary Namespace for DDP-related methods/classes.\n */\n\nconst DDP = {};\n// This is private but it's used in a few places. accounts-base uses\n// it to get the current user. Meteor.setTimeout and friends clear\n// it. We can probably find a better way to factor this.\nDDP._CurrentMethodInvocation = new Meteor.EnvironmentVariable();\nDDP._CurrentPublicationInvocation = new Meteor.EnvironmentVariable(); // XXX: Keep DDP._CurrentInvocation for backwards-compatibility.\n\nDDP._CurrentInvocation = DDP._CurrentMethodInvocation; // This is passed into a weird `makeErrorType` function that expects its thing\n// to be a constructor\n\nfunction connectionErrorConstructor(message) {\n  this.message = message;\n}\n\nDDP.ConnectionError = Meteor.makeErrorType('DDP.ConnectionError', connectionErrorConstructor);\nDDP.ForcedReconnectError = Meteor.makeErrorType('DDP.ForcedReconnectError', () => {}); // Returns the named sequence of pseudo-random values.\n// The scope will be DDP._CurrentMethodInvocation.get(), so the stream will produce\n// consistent values for method calls on the client and server.\n\nDDP.randomStream = name => {\n  var scope = DDP._CurrentMethodInvocation.get();\n\n  return DDPCommon.RandomStream.get(scope, name);\n}; // @param url {String} URL to Meteor app,\n//     e.g.:\n//     \"subdomain.meteor.com\",\n//     \"http://subdomain.meteor.com\",\n//     \"/\",\n//     \"ddp+sockjs://ddp--****-foo.meteor.com/sockjs\"\n\n/**\n * @summary Connect to the server of a different Meteor application to subscribe to its document sets and invoke its remote methods.\n * @locus Anywhere\n * @param {String} url The URL of another Meteor application.\n */\n\n\nDDP.connect = (url, options) => {\n  var ret = new Connection(url, options);\n  allConnections.push(ret); // hack. see below.\n\n  return ret;\n};\n\nDDP._reconnectHook = new Hook({\n  bindEnvironment: false\n});\n/**\n * @summary Register a function to call as the first step of\n * reconnecting. This function can call methods which will be executed before\n * any other outstanding methods. For example, this can be used to re-establish\n * the appropriate authentication context on the connection.\n * @locus Anywhere\n * @param {Function} callback The function to call. It will be called with a\n * single argument, the [connection object](#ddp_connect) that is reconnecting.\n */\n\nDDP.onReconnect = callback => {\n  return DDP._reconnectHook.register(callback);\n}; // Hack for `spiderable` package: a way to see if the page is done\n// loading all the data it needs.\n//\n\n\nDDP._allSubscriptionsReady = () => {\n  return allConnections.every(conn => {\n    return keys(conn._subscriptions).every(id => {\n      return conn._subscriptions[id].ready;\n    });\n  });\n};","map":{"version":3,"sources":["packages/ddp-client/common/namespace.js"],"names":["module","export","DDP","DDPCommon","link","v","Meteor","keys","Connection","allConnections","_CurrentMethodInvocation","EnvironmentVariable","_CurrentPublicationInvocation","_CurrentInvocation","connectionErrorConstructor","message","ConnectionError","makeErrorType","ForcedReconnectError","randomStream","name","scope","get","RandomStream","connect","url","options","ret","push","_reconnectHook","Hook","bindEnvironment","onReconnect","callback","register","_allSubscriptionsReady","every","conn","_subscriptions","id","ready"],"mappings":"AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,EAAAA,GAAG,EAAC,MAAIA;AAAT,CAAd;AAA6B,IAAIC,SAAJ;AAAcH,MAAM,CAACI,IAAP,CAAY,mBAAZ,EAAgC;AAACD,EAAAA,SAAS,CAACE,CAAD,EAAG;AAACF,IAAAA,SAAS,GAACE,CAAV;AAAY;;AAA1B,CAAhC,EAA4D,CAA5D;AAA+D,IAAIC,MAAJ;AAAWN,MAAM,CAACI,IAAP,CAAY,eAAZ,EAA4B;AAACE,EAAAA,MAAM,CAACD,CAAD,EAAG;AAACC,IAAAA,MAAM,GAACD,CAAP;AAAS;;AAApB,CAA5B,EAAkD,CAAlD;AAAqD,IAAIE,IAAJ;AAASP,MAAM,CAACI,IAAP,CAAY,4BAAZ,EAAyC;AAACG,EAAAA,IAAI,CAACF,CAAD,EAAG;AAACE,IAAAA,IAAI,GAACF,CAAL;AAAO;;AAAhB,CAAzC,EAA2D,CAA3D;AAA8D,IAAIG,UAAJ;AAAeR,MAAM,CAACI,IAAP,CAAY,0BAAZ,EAAuC;AAACI,EAAAA,UAAU,CAACH,CAAD,EAAG;AAACG,IAAAA,UAAU,GAACH,CAAX;AAAa;;AAA5B,CAAvC,EAAqE,CAArE;AAMhQ;AACA;AACA;AACA,MAAMI,cAAc,GAAG,EAAvB;AAEA;;;;;AAIO,MAAMP,GAAG,GAAG,EAAZ;AAEP;AACA;AACA;AACAA,GAAG,CAACQ,wBAAJ,GAA+B,IAAIJ,MAAM,CAACK,mBAAX,EAA/B;AACAT,GAAG,CAACU,6BAAJ,GAAoC,IAAIN,MAAM,CAACK,mBAAX,EAApC,C,CAEA;;AACAT,GAAG,CAACW,kBAAJ,GAAyBX,GAAG,CAACQ,wBAA7B,C,CAEA;AACA;;AACA,SAASI,0BAAT,CAAoCC,OAApC,EAA6C;AAC3C,OAAKA,OAAL,GAAeA,OAAf;AACD;;AAEDb,GAAG,CAACc,eAAJ,GAAsBV,MAAM,CAACW,aAAP,CACpB,qBADoB,EAEpBH,0BAFoB,CAAtB;AAKAZ,GAAG,CAACgB,oBAAJ,GAA2BZ,MAAM,CAACW,aAAP,CACzB,0BADyB,EAEzB,MAAM,CAAE,CAFiB,CAA3B,C,CAKA;AACA;AACA;;AACAf,GAAG,CAACiB,YAAJ,GAAmBC,IAAI,IAAI;AACzB,MAAIC,KAAK,GAAGnB,GAAG,CAACQ,wBAAJ,CAA6BY,GAA7B,EAAZ;;AACA,SAAOnB,SAAS,CAACoB,YAAV,CAAuBD,GAAvB,CAA2BD,KAA3B,EAAkCD,IAAlC,CAAP;AACD,CAHD,C,CAKA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AAKAlB,GAAG,CAACsB,OAAJ,GAAc,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAC9B,MAAIC,GAAG,GAAG,IAAInB,UAAJ,CAAeiB,GAAf,EAAoBC,OAApB,CAAV;AACAjB,EAAAA,cAAc,CAACmB,IAAf,CAAoBD,GAApB,EAF8B,CAEJ;;AAC1B,SAAOA,GAAP;AACD,CAJD;;AAMAzB,GAAG,CAAC2B,cAAJ,GAAqB,IAAIC,IAAJ,CAAS;AAAEC,EAAAA,eAAe,EAAE;AAAnB,CAAT,CAArB;AAEA;;;;;;;;;;AASA7B,GAAG,CAAC8B,WAAJ,GAAkBC,QAAQ,IAAI;AAC5B,SAAO/B,GAAG,CAAC2B,cAAJ,CAAmBK,QAAnB,CAA4BD,QAA5B,CAAP;AACD,CAFD,C,CAIA;AACA;AACA;;;AACA/B,GAAG,CAACiC,sBAAJ,GAA6B,MAAM;AACjC,SAAO1B,cAAc,CAAC2B,KAAf,CAAqBC,IAAI,IAAI;AAClC,WAAO9B,IAAI,CAAC8B,IAAI,CAACC,cAAN,CAAJ,CAA0BF,KAA1B,CAAgCG,EAAE,IAAI;AAC3C,aAAOF,IAAI,CAACC,cAAL,CAAoBC,EAApB,EAAwBC,KAA/B;AACD,KAFM,CAAP;AAGD,GAJM,CAAP;AAKD,CAND","sourcesContent":["import { DDPCommon } from 'meteor/ddp-common';\nimport { Meteor } from 'meteor/meteor';\nimport { keys } from \"meteor/ddp-common/utils.js\";\n\nimport { Connection } from './livedata_connection.js';\n\n// This array allows the `_allSubscriptionsReady` method below, which\n// is used by the `spiderable` package, to keep track of whether all\n// data is ready.\nconst allConnections = [];\n\n/**\n * @namespace DDP\n * @summary Namespace for DDP-related methods/classes.\n */\nexport const DDP = {};\n\n// This is private but it's used in a few places. accounts-base uses\n// it to get the current user. Meteor.setTimeout and friends clear\n// it. We can probably find a better way to factor this.\nDDP._CurrentMethodInvocation = new Meteor.EnvironmentVariable();\nDDP._CurrentPublicationInvocation = new Meteor.EnvironmentVariable();\n\n// XXX: Keep DDP._CurrentInvocation for backwards-compatibility.\nDDP._CurrentInvocation = DDP._CurrentMethodInvocation;\n\n// This is passed into a weird `makeErrorType` function that expects its thing\n// to be a constructor\nfunction connectionErrorConstructor(message) {\n  this.message = message;\n}\n\nDDP.ConnectionError = Meteor.makeErrorType(\n  'DDP.ConnectionError',\n  connectionErrorConstructor\n);\n\nDDP.ForcedReconnectError = Meteor.makeErrorType(\n  'DDP.ForcedReconnectError',\n  () => {}\n);\n\n// Returns the named sequence of pseudo-random values.\n// The scope will be DDP._CurrentMethodInvocation.get(), so the stream will produce\n// consistent values for method calls on the client and server.\nDDP.randomStream = name => {\n  var scope = DDP._CurrentMethodInvocation.get();\n  return DDPCommon.RandomStream.get(scope, name);\n};\n\n// @param url {String} URL to Meteor app,\n//     e.g.:\n//     \"subdomain.meteor.com\",\n//     \"http://subdomain.meteor.com\",\n//     \"/\",\n//     \"ddp+sockjs://ddp--****-foo.meteor.com/sockjs\"\n\n/**\n * @summary Connect to the server of a different Meteor application to subscribe to its document sets and invoke its remote methods.\n * @locus Anywhere\n * @param {String} url The URL of another Meteor application.\n */\nDDP.connect = (url, options) => {\n  var ret = new Connection(url, options);\n  allConnections.push(ret); // hack. see below.\n  return ret;\n};\n\nDDP._reconnectHook = new Hook({ bindEnvironment: false });\n\n/**\n * @summary Register a function to call as the first step of\n * reconnecting. This function can call methods which will be executed before\n * any other outstanding methods. For example, this can be used to re-establish\n * the appropriate authentication context on the connection.\n * @locus Anywhere\n * @param {Function} callback The function to call. It will be called with a\n * single argument, the [connection object](#ddp_connect) that is reconnecting.\n */\nDDP.onReconnect = callback => {\n  return DDP._reconnectHook.register(callback);\n};\n\n// Hack for `spiderable` package: a way to see if the page is done\n// loading all the data it needs.\n//\nDDP._allSubscriptionsReady = () => {\n  return allConnections.every(conn => {\n    return keys(conn._subscriptions).every(id => {\n      return conn._subscriptions[id].ready;\n    });\n  });\n};\n"]},"sourceType":"script","hash":"6f82c30ff2307151bc6c86cfaf6d8db723897c9e"}
