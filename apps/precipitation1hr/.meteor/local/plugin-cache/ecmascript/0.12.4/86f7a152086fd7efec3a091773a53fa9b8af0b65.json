{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/ejson/stringify.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/ejson/stringify.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/ejson/stringify.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/ejson/stringify.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/ejson/stringify.js"}},"code":"// Based on json2.js from https://github.com/douglascrockford/JSON-js\n//\n//    json2.js\n//    2012-10-08\n//\n//    Public Domain.\n//\n//    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\nfunction quote(string) {\n  return JSON.stringify(string);\n}\n\nconst str = (key, holder, singleIndent, outerIndent, canonical) => {\n  const value = holder[key]; // What happens next depends on the value's type.\n\n  switch (typeof value) {\n    case 'string':\n      return quote(value);\n\n    case 'number':\n      // JSON numbers must be finite. Encode non-finite numbers as null.\n      return isFinite(value) ? String(value) : 'null';\n\n    case 'boolean':\n      return String(value);\n    // If the type is 'object', we might be dealing with an object or an array or\n    // null.\n\n    case 'object':\n      // Due to a specification blunder in ECMAScript, typeof null is 'object',\n      // so watch out for that case.\n      if (!value) {\n        return 'null';\n      } // Make an array to hold the partial results of stringifying this object\n      // value.\n\n\n      const innerIndent = outerIndent + singleIndent;\n      const partial = []; // Is the value an array?\n\n      if (Array.isArray(value) || {}.hasOwnProperty.call(value, 'callee')) {\n        // The value is an array. Stringify every element. Use null as a\n        // placeholder for non-JSON values.\n        const length = value.length;\n\n        for (let i = 0; i < length; i += 1) {\n          partial[i] = str(i, value, singleIndent, innerIndent, canonical) || 'null';\n        } // Join all of the elements together, separated with commas, and wrap\n        // them in brackets.\n\n\n        let v;\n\n        if (partial.length === 0) {\n          v = '[]';\n        } else if (innerIndent) {\n          v = '[\\n' + innerIndent + partial.join(',\\n' + innerIndent) + '\\n' + outerIndent + ']';\n        } else {\n          v = '[' + partial.join(',') + ']';\n        }\n\n        return v;\n      } // Iterate through all of the keys in the object.\n\n\n      let keys = Object.keys(value);\n\n      if (canonical) {\n        keys = keys.sort();\n      }\n\n      keys.forEach(k => {\n        v = str(k, value, singleIndent, innerIndent, canonical);\n\n        if (v) {\n          partial.push(quote(k) + (innerIndent ? ': ' : ':') + v);\n        }\n      }); // Join all of the member texts together, separated with commas,\n      // and wrap them in braces.\n\n      if (partial.length === 0) {\n        v = '{}';\n      } else if (innerIndent) {\n        v = '{\\n' + innerIndent + partial.join(',\\n' + innerIndent) + '\\n' + outerIndent + '}';\n      } else {\n        v = '{' + partial.join(',') + '}';\n      }\n\n      return v;\n\n    default: // Do nothing\n\n  }\n}; // If the JSON object does not yet have a stringify method, give it one.\n\n\nconst canonicalStringify = (value, options) => {\n  // Make a fake root object containing our value under the key of ''.\n  // Return the result of stringifying the value.\n  const allOptions = Object.assign({\n    indent: '',\n    canonical: false\n  }, options);\n\n  if (allOptions.indent === true) {\n    allOptions.indent = '  ';\n  } else if (typeof allOptions.indent === 'number') {\n    let newIndent = '';\n\n    for (let i = 0; i < allOptions.indent; i++) {\n      newIndent += ' ';\n    }\n\n    allOptions.indent = newIndent;\n  }\n\n  return str('', {\n    '': value\n  }, allOptions.indent, '', allOptions.canonical);\n};\n\nmodule.exportDefault(canonicalStringify);","map":{"version":3,"sources":["packages/ejson/stringify.js"],"names":["quote","string","JSON","stringify","str","key","holder","singleIndent","outerIndent","canonical","value","isFinite","String","innerIndent","partial","Array","isArray","hasOwnProperty","call","length","i","v","join","keys","Object","sort","forEach","k","push","canonicalStringify","options","allOptions","assign","indent","newIndent","module","exportDefault"],"mappings":"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","sourcesContent":["// Based on json2.js from https://github.com/douglascrockford/JSON-js\n//\n//    json2.js\n//    2012-10-08\n//\n//    Public Domain.\n//\n//    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n\nfunction quote(string) {\n  return JSON.stringify(string);\n}\n\nconst str = (key, holder, singleIndent, outerIndent, canonical) => {\n  const value = holder[key];\n\n  // What happens next depends on the value's type.\n  switch (typeof value) {\n  case 'string':\n    return quote(value);\n  case 'number':\n    // JSON numbers must be finite. Encode non-finite numbers as null.\n    return isFinite(value) ? String(value) : 'null';\n  case 'boolean':\n    return String(value);\n  // If the type is 'object', we might be dealing with an object or an array or\n  // null.\n  case 'object':\n    // Due to a specification blunder in ECMAScript, typeof null is 'object',\n    // so watch out for that case.\n    if (!value) {\n      return 'null';\n    }\n    // Make an array to hold the partial results of stringifying this object\n    // value.\n    const innerIndent = outerIndent + singleIndent;\n    const partial = [];\n\n    // Is the value an array?\n    if (Array.isArray(value) || ({}).hasOwnProperty.call(value, 'callee')) {\n      // The value is an array. Stringify every element. Use null as a\n      // placeholder for non-JSON values.\n      const length = value.length;\n      for (let i = 0; i < length; i += 1) {\n        partial[i] =\n          str(i, value, singleIndent, innerIndent, canonical) || 'null';\n      }\n\n      // Join all of the elements together, separated with commas, and wrap\n      // them in brackets.\n      let v;\n      if (partial.length === 0) {\n        v = '[]';\n      } else if (innerIndent) {\n        v = '[\\n' +\n          innerIndent +\n          partial.join(',\\n' +\n          innerIndent) +\n          '\\n' +\n          outerIndent +\n          ']';\n      } else {\n        v = '[' + partial.join(',') + ']';\n      }\n      return v;\n    }\n\n    // Iterate through all of the keys in the object.\n    let keys = Object.keys(value);\n    if (canonical) {\n      keys = keys.sort();\n    }\n    keys.forEach(k => {\n      v = str(k, value, singleIndent, innerIndent, canonical);\n      if (v) {\n        partial.push(quote(k) + (innerIndent ? ': ' : ':') + v);\n      }\n    });\n\n    // Join all of the member texts together, separated with commas,\n    // and wrap them in braces.\n    if (partial.length === 0) {\n      v = '{}';\n    } else if (innerIndent) {\n      v = '{\\n' +\n        innerIndent +\n        partial.join(',\\n' +\n        innerIndent) +\n        '\\n' +\n        outerIndent +\n        '}';\n    } else {\n      v = '{' + partial.join(',') + '}';\n    }\n    return v;\n\n  default: // Do nothing\n  }\n};\n\n// If the JSON object does not yet have a stringify method, give it one.\nconst canonicalStringify = (value, options) => {\n  // Make a fake root object containing our value under the key of ''.\n  // Return the result of stringifying the value.\n  const allOptions = Object.assign({\n    indent: '',\n    canonical: false,\n  }, options);\n  if (allOptions.indent === true) {\n    allOptions.indent = '  ';\n  } else if (typeof allOptions.indent === 'number') {\n    let newIndent = '';\n    for (let i = 0; i < allOptions.indent; i++) {\n      newIndent += ' ';\n    }\n    allOptions.indent = newIndent;\n  }\n  return str('', {'': value}, allOptions.indent, '', allOptions.canonical);\n};\n\nexport default canonicalStringify;\n"]},"sourceType":"script","hash":"86f7a152086fd7efec3a091773a53fa9b8af0b65"}
