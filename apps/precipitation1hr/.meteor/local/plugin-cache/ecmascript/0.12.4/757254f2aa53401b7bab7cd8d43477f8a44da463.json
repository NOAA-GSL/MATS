{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/imports/startup/both/mats-types.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/randyp:mats-common/imports/startup/both/mats-types.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/imports/startup/both/mats-types.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/imports/startup/both/mats-types.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/randyp:mats-common/imports/startup/both/mats-types.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\n/*\n * Copyright (c) 2019 Colorado State University and Regents of the University of Colorado. All rights reserved.\n */\n\n/**\n * Created by pierce on 8/31/16.\n */\nvar DatabaseRoles = {\n  MODEL_DATA: 'model_data',\n  META_DATA: 'meta_data',\n  SUMS_DATA: 'sums_data',\n  SITE_DATA: 'site_data'\n};\nvar AppTypes = {\n  mats: 'mats',\n  metexpress: 'metexpress',\n  mats4met: 'mats4met'\n};\nvar InputTypes = {\n  textInput: 'textInput',\n  select: 'select',\n  selectOrderEnforced: 'selectOrderEnforced',\n  numberSpinner: 'numberSpinner',\n  dateRange: 'dateRange',\n  radioGroup: 'radioGroup',\n  checkBoxGroup: 'checkBoxGroup',\n  resetButton: 'resetButton',\n  controlButton: 'controlButton',\n  element: 'element',\n  selectMap: 'selectMap',\n  custom: 'custom',\n  unused: \"unused\",\n  forecastSingleCycle: 'forecasts single cycle',\n  forecastMultiCycle: 'forecasts multi cycle'\n};\nvar PlotTypes = {\n  timeSeries: \"TimeSeries\",\n  profile: \"Profile\",\n  dieoff: \"DieOff\",\n  threshold: \"Threshold\",\n  validtime: \"ValidTime\",\n  dailyModelCycle: \"DailyModelCycle\",\n  reliability: \"Reliability\",\n  map: \"Map\",\n  histogram: \"Histogram\",\n  contour: \"Contour\",\n  contourDiff: \"ContourDiff\",\n  scatter2d: \"Scatter2d\"\n};\nvar ForecastTypes = {\n  dieoff: \"dieoff\",\n  utcCycle: \"utc cycle\",\n  singleCycle: \"single cycle\"\n};\nvar PlotFormats = {\n  none: \"none\",\n  matching: \"matching\",\n  pairwise: \"pairwise\",\n  absolute: \"absolute\"\n};\nvar PlotActions = {\n  matched: \"matched\",\n  unmatched: \"unmatched\"\n};\nvar BestFits = {\n  none: 'none',\n  linear: 'linear',\n  linearThroughOrigin: 'linearThroughOrigin',\n  exponential: 'exponential',\n  logarithmic: 'logarithmic',\n  power: 'power'\n};\nvar MatchFormats = {\n  none: \"none\",\n  time: \"time\",\n  level: \"level\",\n  site: \"site\"\n};\nvar PlotAxisFilters = {\n  none: \"none\",\n  level: \"level\",\n  site: \"site\"\n};\nvar PlotView = {\n  graph: \"graph\",\n  textSeries: \"text\"\n};\nvar ReservedWords = {\n  Zero: \"Zero\",\n  zero: \"zero\",\n  ideal0: \"ideal0\",\n  ideal1: \"ideal1\",\n  ideal2: \"ideal2\",\n  ideal3: \"ideal3\",\n  ideal4: \"ideal4\",\n  ideal5: \"ideal5\",\n  ideal6: \"ideal6\",\n  ideal7: \"ideal7\",\n  ideal8: \"ideal8\",\n  ideal9: \"ideal9\",\n  perfectReliability: \"Perfect Reliability\",\n  noSkill: \"No Skill\",\n  blueCurveText: \"blueCurveText\",\n  blackCurveText: \"blackCurveText\",\n  redCurveText: \"redCurveText\"\n};\nvar Messages = {\n  NO_DATA_FOUND: \"INFO:0 data records found\"\n}; //hide non-timeseries selectors at startup\n\nvar selectorsToHide = ['dieoff-type', 'utc-cycle-start', 'histogram-bin-controls', 'histogram-yaxis-controls', 'bin-number', 'bin-pivot', 'bin-start', 'bin-stride', 'bin-bounds', 'x-axis-parameter', 'y-axis-parameter'];\n/*\nClass for holding metaData records. These are stored in an array. An app can have multiple metadata databases and each database has a pool for connections.\nThese pools are global (although for future reference the access might be from this collection.). They are refenced in this script via the pool name.\nThis class enforces the types of the poolName (in case someone accidentally tries to store the whole pool object), and the database name and a list\nof table names. The internal list can be appended. The getRecords returns the internal list.\n */\n\nvar MetaDataDBRecord =\n/*#__PURE__*/\nfunction () {\n  function MetaDataDBRecord(poolName, dbName, tables) {\n    if (!(0, _typeof2.default)(poolName) === \"string\") {\n      throw new Error(\"MetaDataDBRecord.constructor : poolName is not a string\");\n    }\n\n    if (!(0, _typeof2.default)(dbName) === \"string\") {\n      throw new Error(\"MetaDataDBRecord.constructor : dbName is not a string\");\n    }\n\n    if (!tables instanceof Array) {\n      throw new Error(\"MetaDataDBRecord.constructor : tables is not an array\");\n    }\n\n    this._records = [];\n    var record = {\n      'pool': poolName,\n      'name': dbName,\n      'tables': tables\n    };\n\n    this._records.push(record);\n  }\n\n  var _proto = MetaDataDBRecord.prototype;\n\n  _proto.addRecord = function () {\n    function addRecord(poolName, dbName, tables) {\n      if (!(0, _typeof2.default)(poolName) === \"string\") {\n        throw new Error(\"MetaDataDBRecord.constructor : poolName is not a string\");\n      }\n\n      if (!(0, _typeof2.default)(dbName) === \"string\") {\n        throw new Error(\"MetaDataDBRecord.constructor : dbName is not a string\");\n      }\n\n      if (!tables instanceof Array) {\n        throw new Error(\"MetaDataDBRecord.constructor : tables is not an array\");\n      }\n\n      var record = {\n        'pool': poolName,\n        'name': dbName,\n        'tables': tables\n      };\n\n      this._records.push(record);\n    }\n\n    return addRecord;\n  }();\n\n  _proto.getRecords = function () {\n    function getRecords() {\n      return this._records;\n    }\n\n    return getRecords;\n  }();\n\n  return MetaDataDBRecord;\n}();\n\nmodule.exportDefault(matsTypes = {\n  InputTypes: InputTypes,\n  PlotTypes: PlotTypes,\n  PlotFormats: PlotFormats,\n  PlotActions: PlotActions,\n  BestFits: BestFits,\n  MatchFormats: MatchFormats,\n  PlotAxisFilters: PlotAxisFilters,\n  PlotView: PlotView,\n  Messages: Messages,\n  ForecastTypes: ForecastTypes,\n  ReservedWords: ReservedWords,\n  selectorsToHide: selectorsToHide,\n  MetaDataDBRecord: MetaDataDBRecord,\n  AppTypes: AppTypes,\n  DatabaseRoles: DatabaseRoles\n});","map":{"version":3,"sources":["packages/randyp:mats-common/imports/startup/both/mats-types.js"],"names":["DatabaseRoles","MODEL_DATA","META_DATA","SUMS_DATA","SITE_DATA","AppTypes","mats","metexpress","mats4met","InputTypes","textInput","select","selectOrderEnforced","numberSpinner","dateRange","radioGroup","checkBoxGroup","resetButton","controlButton","element","selectMap","custom","unused","forecastSingleCycle","forecastMultiCycle","PlotTypes","timeSeries","profile","dieoff","threshold","validtime","dailyModelCycle","reliability","map","histogram","contour","contourDiff","scatter2d","ForecastTypes","utcCycle","singleCycle","PlotFormats","none","matching","pairwise","absolute","PlotActions","matched","unmatched","BestFits","linear","linearThroughOrigin","exponential","logarithmic","power","MatchFormats","time","level","site","PlotAxisFilters","PlotView","graph","textSeries","ReservedWords","Zero","zero","ideal0","ideal1","ideal2","ideal3","ideal4","ideal5","ideal6","ideal7","ideal8","ideal9","perfectReliability","noSkill","blueCurveText","blackCurveText","redCurveText","Messages","NO_DATA_FOUND","selectorsToHide","MetaDataDBRecord","poolName","dbName","tables","Error","Array","_records","record","push","addRecord","getRecords","module","exportDefault","matsTypes"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2019 Colorado State University and Regents of the University of Colorado. All rights reserved.\n */\n\n/**\n * Created by pierce on 8/31/16.\n */\nvar DatabaseRoles = {\n    MODEL_DATA: 'model_data',\n    META_DATA: 'meta_data',\n    SUMS_DATA: 'sums_data',\n    SITE_DATA: 'site_data'\n};\n\nvar AppTypes = {\n    mats: 'mats',\n    metexpress: 'metexpress',\n    mats4met: 'mats4met'\n};\n\nvar InputTypes = {\n    textInput: 'textInput',\n    select: 'select',\n    selectOrderEnforced: 'selectOrderEnforced',\n    numberSpinner: 'numberSpinner',\n    dateRange: 'dateRange',\n    radioGroup: 'radioGroup',\n    checkBoxGroup: 'checkBoxGroup',\n    resetButton: 'resetButton',\n    controlButton: 'controlButton',\n    element: 'element',\n    selectMap: 'selectMap',\n    custom: 'custom',\n    unused: \"unused\",\n    forecastSingleCycle: 'forecasts single cycle',\n    forecastMultiCycle: 'forecasts multi cycle'\n};\n\nvar PlotTypes = {\n    timeSeries: \"TimeSeries\",\n    profile: \"Profile\",\n    dieoff: \"DieOff\",\n    threshold: \"Threshold\",\n    validtime: \"ValidTime\",\n    dailyModelCycle: \"DailyModelCycle\",\n    reliability: \"Reliability\",\n    map: \"Map\",\n    histogram: \"Histogram\",\n    contour: \"Contour\",\n    contourDiff: \"ContourDiff\",\n    scatter2d: \"Scatter2d\"\n};\n\nvar ForecastTypes = {\n    dieoff: \"dieoff\",\n    utcCycle: \"utc cycle\",\n    singleCycle: \"single cycle\"\n};\n\nvar PlotFormats = {\n    none: \"none\",\n    matching: \"matching\",\n    pairwise: \"pairwise\",\n    absolute: \"absolute\"\n};\n\nvar PlotActions = {\n    matched: \"matched\",\n    unmatched: \"unmatched\"\n};\n\nvar BestFits = {\n    none: 'none',\n    linear: 'linear',\n    linearThroughOrigin: 'linearThroughOrigin',\n    exponential: 'exponential',\n    logarithmic: 'logarithmic',\n    power: 'power'\n};\n\nvar MatchFormats = {\n    none: \"none\",\n    time: \"time\",\n    level: \"level\",\n    site: \"site\"\n};\n\nvar PlotAxisFilters = {\n    none: \"none\",\n    level: \"level\",\n    site: \"site\"\n};\n\nvar PlotView = {\n    graph: \"graph\",\n    textSeries: \"text\",\n};\n\nvar ReservedWords = {\n    Zero: \"Zero\",\n    zero: \"zero\",\n    ideal0: \"ideal0\",\n    ideal1: \"ideal1\",\n    ideal2: \"ideal2\",\n    ideal3: \"ideal3\",\n    ideal4: \"ideal4\",\n    ideal5: \"ideal5\",\n    ideal6: \"ideal6\",\n    ideal7: \"ideal7\",\n    ideal8: \"ideal8\",\n    ideal9: \"ideal9\",\n    perfectReliability: \"Perfect Reliability\",\n    noSkill: \"No Skill\",\n    blueCurveText: \"blueCurveText\",\n    blackCurveText: \"blackCurveText\",\n    redCurveText: \"redCurveText\"\n};\n\nvar Messages = {\n    NO_DATA_FOUND: \"INFO:0 data records found\"\n};\n\n//hide non-timeseries selectors at startup\nvar selectorsToHide = ['dieoff-type', 'utc-cycle-start', 'histogram-bin-controls', 'histogram-yaxis-controls', 'bin-number', 'bin-pivot', 'bin-start', 'bin-stride', 'bin-bounds', 'x-axis-parameter', 'y-axis-parameter'];\n\n/*\nClass for holding metaData records. These are stored in an array. An app can have multiple metadata databases and each database has a pool for connections.\nThese pools are global (although for future reference the access might be from this collection.). They are refenced in this script via the pool name.\nThis class enforces the types of the poolName (in case someone accidentally tries to store the whole pool object), and the database name and a list\nof table names. The internal list can be appended. The getRecords returns the internal list.\n */\nclass MetaDataDBRecord {\n    constructor(poolName, dbName, tables) {\n        if (!typeof poolName === \"string\") {\n            throw new Error(\"MetaDataDBRecord.constructor : poolName is not a string\");\n        }\n        if (!typeof dbName === \"string\") {\n            throw new Error(\"MetaDataDBRecord.constructor : dbName is not a string\");\n        }\n        if (!tables instanceof Array) {\n            throw new Error(\"MetaDataDBRecord.constructor : tables is not an array\");\n        }\n        this._records = [];\n        var record = {'pool': poolName, 'name': dbName, 'tables': tables};\n        this._records.push(record);\n    }\n\n    addRecord(poolName, dbName, tables) {\n        if (!typeof poolName === \"string\") {\n            throw new Error(\"MetaDataDBRecord.constructor : poolName is not a string\");\n        }\n        if (!typeof dbName === \"string\") {\n            throw new Error(\"MetaDataDBRecord.constructor : dbName is not a string\");\n        }\n        if (!tables instanceof Array) {\n            throw new Error(\"MetaDataDBRecord.constructor : tables is not an array\");\n        }\n        var record = {'pool': poolName, 'name': dbName, 'tables': tables};\n        this._records.push(record);\n    }\n\n    getRecords() {\n        return this._records;\n    }\n}\n\nexport default matsTypes = {\n    InputTypes: InputTypes,\n    PlotTypes: PlotTypes,\n    PlotFormats: PlotFormats,\n    PlotActions: PlotActions,\n    BestFits: BestFits,\n    MatchFormats: MatchFormats,\n    PlotAxisFilters: PlotAxisFilters,\n    PlotView: PlotView,\n    Messages: Messages,\n    ForecastTypes: ForecastTypes,\n    ReservedWords: ReservedWords,\n    selectorsToHide: selectorsToHide,\n    MetaDataDBRecord: MetaDataDBRecord,\n    AppTypes: AppTypes,\n    DatabaseRoles: DatabaseRoles\n}\n\n"]},"sourceType":"script","hash":"757254f2aa53401b7bab7cd8d43477f8a44da463"}
