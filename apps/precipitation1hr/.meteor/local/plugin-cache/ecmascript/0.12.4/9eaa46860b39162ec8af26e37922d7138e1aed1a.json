{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/mongo/polling_observe_driver.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/mongo/polling_observe_driver.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/mongo/polling_observe_driver.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/mongo/polling_observe_driver.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/mongo/polling_observe_driver.js"}},"code":"var POLLING_THROTTLE_MS = +process.env.METEOR_POLLING_THROTTLE_MS || 50;\nvar POLLING_INTERVAL_MS = +process.env.METEOR_POLLING_INTERVAL_MS || 10 * 1000;\n\nPollingObserveDriver = function (options) {\n  var self = this;\n  self._cursorDescription = options.cursorDescription;\n  self._mongoHandle = options.mongoHandle;\n  self._ordered = options.ordered;\n  self._multiplexer = options.multiplexer;\n  self._stopCallbacks = [];\n  self._stopped = false;\n  self._synchronousCursor = self._mongoHandle._createSynchronousCursor(self._cursorDescription); // previous results snapshot.  on each poll cycle, diffs against\n  // results drives the callbacks.\n\n  self._results = null; // The number of _pollMongo calls that have been added to self._taskQueue but\n  // have not started running. Used to make sure we never schedule more than one\n  // _pollMongo (other than possibly the one that is currently running). It's\n  // also used by _suspendPolling to pretend there's a poll scheduled. Usually,\n  // it's either 0 (for \"no polls scheduled other than maybe one currently\n  // running\") or 1 (for \"a poll scheduled that isn't running yet\"), but it can\n  // also be 2 if incremented by _suspendPolling.\n\n  self._pollsScheduledButNotStarted = 0;\n  self._pendingWrites = []; // people to notify when polling completes\n  // Make sure to create a separately throttled function for each\n  // PollingObserveDriver object.\n\n  self._ensurePollIsScheduled = _.throttle(self._unthrottledEnsurePollIsScheduled, self._cursorDescription.options.pollingThrottleMs || POLLING_THROTTLE_MS\n  /* ms */\n  ); // XXX figure out if we still need a queue\n\n  self._taskQueue = new Meteor._SynchronousQueue();\n  var listenersHandle = listenAll(self._cursorDescription, function (notification) {\n    // When someone does a transaction that might affect us, schedule a poll\n    // of the database. If that transaction happens inside of a write fence,\n    // block the fence until we've polled and notified observers.\n    var fence = DDPServer._CurrentWriteFence.get();\n\n    if (fence) self._pendingWrites.push(fence.beginWrite()); // Ensure a poll is scheduled... but if we already know that one is,\n    // don't hit the throttled _ensurePollIsScheduled function (which might\n    // lead to us calling it unnecessarily in <pollingThrottleMs> ms).\n\n    if (self._pollsScheduledButNotStarted === 0) self._ensurePollIsScheduled();\n  });\n\n  self._stopCallbacks.push(function () {\n    listenersHandle.stop();\n  }); // every once and a while, poll even if we don't think we're dirty, for\n  // eventual consistency with database writes from outside the Meteor\n  // universe.\n  //\n  // For testing, there's an undocumented callback argument to observeChanges\n  // which disables time-based polling and gets called at the beginning of each\n  // poll.\n\n\n  if (options._testOnlyPollCallback) {\n    self._testOnlyPollCallback = options._testOnlyPollCallback;\n  } else {\n    var pollingInterval = self._cursorDescription.options.pollingIntervalMs || self._cursorDescription.options._pollingInterval || // COMPAT with 1.2\n    POLLING_INTERVAL_MS;\n    var intervalHandle = Meteor.setInterval(_.bind(self._ensurePollIsScheduled, self), pollingInterval);\n\n    self._stopCallbacks.push(function () {\n      Meteor.clearInterval(intervalHandle);\n    });\n  } // Make sure we actually poll soon!\n\n\n  self._unthrottledEnsurePollIsScheduled();\n\n  Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"mongo-livedata\", \"observe-drivers-polling\", 1);\n};\n\n_.extend(PollingObserveDriver.prototype, {\n  // This is always called through _.throttle (except once at startup).\n  _unthrottledEnsurePollIsScheduled: function () {\n    var self = this;\n    if (self._pollsScheduledButNotStarted > 0) return;\n    ++self._pollsScheduledButNotStarted;\n\n    self._taskQueue.queueTask(function () {\n      self._pollMongo();\n    });\n  },\n  // test-only interface for controlling polling.\n  //\n  // _suspendPolling blocks until any currently running and scheduled polls are\n  // done, and prevents any further polls from being scheduled. (new\n  // ObserveHandles can be added and receive their initial added callbacks,\n  // though.)\n  //\n  // _resumePolling immediately polls, and allows further polls to occur.\n  _suspendPolling: function () {\n    var self = this; // Pretend that there's another poll scheduled (which will prevent\n    // _ensurePollIsScheduled from queueing any more polls).\n\n    ++self._pollsScheduledButNotStarted; // Now block until all currently running or scheduled polls are done.\n\n    self._taskQueue.runTask(function () {}); // Confirm that there is only one \"poll\" (the fake one we're pretending to\n    // have) scheduled.\n\n\n    if (self._pollsScheduledButNotStarted !== 1) throw new Error(\"_pollsScheduledButNotStarted is \" + self._pollsScheduledButNotStarted);\n  },\n  _resumePolling: function () {\n    var self = this; // We should be in the same state as in the end of _suspendPolling.\n\n    if (self._pollsScheduledButNotStarted !== 1) throw new Error(\"_pollsScheduledButNotStarted is \" + self._pollsScheduledButNotStarted); // Run a poll synchronously (which will counteract the\n    // ++_pollsScheduledButNotStarted from _suspendPolling).\n\n    self._taskQueue.runTask(function () {\n      self._pollMongo();\n    });\n  },\n  _pollMongo: function () {\n    var self = this;\n    --self._pollsScheduledButNotStarted;\n    if (self._stopped) return;\n    var first = false;\n    var newResults;\n    var oldResults = self._results;\n\n    if (!oldResults) {\n      first = true; // XXX maybe use OrderedDict instead?\n\n      oldResults = self._ordered ? [] : new LocalCollection._IdMap();\n    }\n\n    self._testOnlyPollCallback && self._testOnlyPollCallback(); // Save the list of pending writes which this round will commit.\n\n    var writesForCycle = self._pendingWrites;\n    self._pendingWrites = []; // Get the new query results. (This yields.)\n\n    try {\n      newResults = self._synchronousCursor.getRawObjects(self._ordered);\n    } catch (e) {\n      if (first && typeof e.code === 'number') {\n        // This is an error document sent to us by mongod, not a connection\n        // error generated by the client. And we've never seen this query work\n        // successfully. Probably it's a bad selector or something, so we should\n        // NOT retry. Instead, we should halt the observe (which ends up calling\n        // `stop` on us).\n        self._multiplexer.queryError(new Error(\"Exception while polling query \" + JSON.stringify(self._cursorDescription) + \": \" + e.message));\n\n        return;\n      } // getRawObjects can throw if we're having trouble talking to the\n      // database.  That's fine --- we will repoll later anyway. But we should\n      // make sure not to lose track of this cycle's writes.\n      // (It also can throw if there's just something invalid about this query;\n      // unfortunately the ObserveDriver API doesn't provide a good way to\n      // \"cancel\" the observe from the inside in this case.\n\n\n      Array.prototype.push.apply(self._pendingWrites, writesForCycle);\n\n      Meteor._debug(\"Exception while polling query \" + JSON.stringify(self._cursorDescription), e);\n\n      return;\n    } // Run diffs.\n\n\n    if (!self._stopped) {\n      LocalCollection._diffQueryChanges(self._ordered, oldResults, newResults, self._multiplexer);\n    } // Signals the multiplexer to allow all observeChanges calls that share this\n    // multiplexer to return. (This happens asynchronously, via the\n    // multiplexer's queue.)\n\n\n    if (first) self._multiplexer.ready(); // Replace self._results atomically.  (This assignment is what makes `first`\n    // stay through on the next cycle, so we've waited until after we've\n    // committed to ready-ing the multiplexer.)\n\n    self._results = newResults; // Once the ObserveMultiplexer has processed everything we've done in this\n    // round, mark all the writes which existed before this call as\n    // commmitted. (If new writes have shown up in the meantime, there'll\n    // already be another _pollMongo task scheduled.)\n\n    self._multiplexer.onFlush(function () {\n      _.each(writesForCycle, function (w) {\n        w.committed();\n      });\n    });\n  },\n  stop: function () {\n    var self = this;\n    self._stopped = true;\n\n    _.each(self._stopCallbacks, function (c) {\n      c();\n    }); // Release any write fences that are waiting on us.\n\n\n    _.each(self._pendingWrites, function (w) {\n      w.committed();\n    });\n\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"mongo-livedata\", \"observe-drivers-polling\", -1);\n  }\n});","map":{"version":3,"sources":["packages/mongo/polling_observe_driver.js"],"names":["POLLING_THROTTLE_MS","process","env","METEOR_POLLING_THROTTLE_MS","POLLING_INTERVAL_MS","METEOR_POLLING_INTERVAL_MS","PollingObserveDriver","options","self","_cursorDescription","cursorDescription","_mongoHandle","mongoHandle","_ordered","ordered","_multiplexer","multiplexer","_stopCallbacks","_stopped","_synchronousCursor","_createSynchronousCursor","_results","_pollsScheduledButNotStarted","_pendingWrites","_ensurePollIsScheduled","_","throttle","_unthrottledEnsurePollIsScheduled","pollingThrottleMs","_taskQueue","Meteor","_SynchronousQueue","listenersHandle","listenAll","notification","fence","DDPServer","_CurrentWriteFence","get","push","beginWrite","stop","_testOnlyPollCallback","pollingInterval","pollingIntervalMs","_pollingInterval","intervalHandle","setInterval","bind","clearInterval","Package","Facts","incrementServerFact","extend","prototype","queueTask","_pollMongo","_suspendPolling","runTask","Error","_resumePolling","first","newResults","oldResults","LocalCollection","_IdMap","writesForCycle","getRawObjects","e","code","queryError","JSON","stringify","message","Array","apply","_debug","_diffQueryChanges","ready","onFlush","each","w","committed","c"],"mappings":"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","sourcesContent":["var POLLING_THROTTLE_MS = +process.env.METEOR_POLLING_THROTTLE_MS || 50;\nvar POLLING_INTERVAL_MS = +process.env.METEOR_POLLING_INTERVAL_MS || 10 * 1000;\n\nPollingObserveDriver = function (options) {\n  var self = this;\n\n  self._cursorDescription = options.cursorDescription;\n  self._mongoHandle = options.mongoHandle;\n  self._ordered = options.ordered;\n  self._multiplexer = options.multiplexer;\n  self._stopCallbacks = [];\n  self._stopped = false;\n\n  self._synchronousCursor = self._mongoHandle._createSynchronousCursor(\n    self._cursorDescription);\n\n  // previous results snapshot.  on each poll cycle, diffs against\n  // results drives the callbacks.\n  self._results = null;\n\n  // The number of _pollMongo calls that have been added to self._taskQueue but\n  // have not started running. Used to make sure we never schedule more than one\n  // _pollMongo (other than possibly the one that is currently running). It's\n  // also used by _suspendPolling to pretend there's a poll scheduled. Usually,\n  // it's either 0 (for \"no polls scheduled other than maybe one currently\n  // running\") or 1 (for \"a poll scheduled that isn't running yet\"), but it can\n  // also be 2 if incremented by _suspendPolling.\n  self._pollsScheduledButNotStarted = 0;\n  self._pendingWrites = []; // people to notify when polling completes\n\n  // Make sure to create a separately throttled function for each\n  // PollingObserveDriver object.\n  self._ensurePollIsScheduled = _.throttle(\n    self._unthrottledEnsurePollIsScheduled,\n    self._cursorDescription.options.pollingThrottleMs || POLLING_THROTTLE_MS /* ms */);\n\n  // XXX figure out if we still need a queue\n  self._taskQueue = new Meteor._SynchronousQueue();\n\n  var listenersHandle = listenAll(\n    self._cursorDescription, function (notification) {\n      // When someone does a transaction that might affect us, schedule a poll\n      // of the database. If that transaction happens inside of a write fence,\n      // block the fence until we've polled and notified observers.\n      var fence = DDPServer._CurrentWriteFence.get();\n      if (fence)\n        self._pendingWrites.push(fence.beginWrite());\n      // Ensure a poll is scheduled... but if we already know that one is,\n      // don't hit the throttled _ensurePollIsScheduled function (which might\n      // lead to us calling it unnecessarily in <pollingThrottleMs> ms).\n      if (self._pollsScheduledButNotStarted === 0)\n        self._ensurePollIsScheduled();\n    }\n  );\n  self._stopCallbacks.push(function () { listenersHandle.stop(); });\n\n  // every once and a while, poll even if we don't think we're dirty, for\n  // eventual consistency with database writes from outside the Meteor\n  // universe.\n  //\n  // For testing, there's an undocumented callback argument to observeChanges\n  // which disables time-based polling and gets called at the beginning of each\n  // poll.\n  if (options._testOnlyPollCallback) {\n    self._testOnlyPollCallback = options._testOnlyPollCallback;\n  } else {\n    var pollingInterval =\n          self._cursorDescription.options.pollingIntervalMs ||\n          self._cursorDescription.options._pollingInterval || // COMPAT with 1.2\n          POLLING_INTERVAL_MS;\n    var intervalHandle = Meteor.setInterval(\n      _.bind(self._ensurePollIsScheduled, self), pollingInterval);\n    self._stopCallbacks.push(function () {\n      Meteor.clearInterval(intervalHandle);\n    });\n  }\n\n  // Make sure we actually poll soon!\n  self._unthrottledEnsurePollIsScheduled();\n\n  Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n    \"mongo-livedata\", \"observe-drivers-polling\", 1);\n};\n\n_.extend(PollingObserveDriver.prototype, {\n  // This is always called through _.throttle (except once at startup).\n  _unthrottledEnsurePollIsScheduled: function () {\n    var self = this;\n    if (self._pollsScheduledButNotStarted > 0)\n      return;\n    ++self._pollsScheduledButNotStarted;\n    self._taskQueue.queueTask(function () {\n      self._pollMongo();\n    });\n  },\n\n  // test-only interface for controlling polling.\n  //\n  // _suspendPolling blocks until any currently running and scheduled polls are\n  // done, and prevents any further polls from being scheduled. (new\n  // ObserveHandles can be added and receive their initial added callbacks,\n  // though.)\n  //\n  // _resumePolling immediately polls, and allows further polls to occur.\n  _suspendPolling: function() {\n    var self = this;\n    // Pretend that there's another poll scheduled (which will prevent\n    // _ensurePollIsScheduled from queueing any more polls).\n    ++self._pollsScheduledButNotStarted;\n    // Now block until all currently running or scheduled polls are done.\n    self._taskQueue.runTask(function() {});\n\n    // Confirm that there is only one \"poll\" (the fake one we're pretending to\n    // have) scheduled.\n    if (self._pollsScheduledButNotStarted !== 1)\n      throw new Error(\"_pollsScheduledButNotStarted is \" +\n                      self._pollsScheduledButNotStarted);\n  },\n  _resumePolling: function() {\n    var self = this;\n    // We should be in the same state as in the end of _suspendPolling.\n    if (self._pollsScheduledButNotStarted !== 1)\n      throw new Error(\"_pollsScheduledButNotStarted is \" +\n                      self._pollsScheduledButNotStarted);\n    // Run a poll synchronously (which will counteract the\n    // ++_pollsScheduledButNotStarted from _suspendPolling).\n    self._taskQueue.runTask(function () {\n      self._pollMongo();\n    });\n  },\n\n  _pollMongo: function () {\n    var self = this;\n    --self._pollsScheduledButNotStarted;\n\n    if (self._stopped)\n      return;\n\n    var first = false;\n    var newResults;\n    var oldResults = self._results;\n    if (!oldResults) {\n      first = true;\n      // XXX maybe use OrderedDict instead?\n      oldResults = self._ordered ? [] : new LocalCollection._IdMap;\n    }\n\n    self._testOnlyPollCallback && self._testOnlyPollCallback();\n\n    // Save the list of pending writes which this round will commit.\n    var writesForCycle = self._pendingWrites;\n    self._pendingWrites = [];\n\n    // Get the new query results. (This yields.)\n    try {\n      newResults = self._synchronousCursor.getRawObjects(self._ordered);\n    } catch (e) {\n      if (first && typeof(e.code) === 'number') {\n        // This is an error document sent to us by mongod, not a connection\n        // error generated by the client. And we've never seen this query work\n        // successfully. Probably it's a bad selector or something, so we should\n        // NOT retry. Instead, we should halt the observe (which ends up calling\n        // `stop` on us).\n        self._multiplexer.queryError(\n          new Error(\n            \"Exception while polling query \" +\n              JSON.stringify(self._cursorDescription) + \": \" + e.message));\n        return;\n      }\n\n      // getRawObjects can throw if we're having trouble talking to the\n      // database.  That's fine --- we will repoll later anyway. But we should\n      // make sure not to lose track of this cycle's writes.\n      // (It also can throw if there's just something invalid about this query;\n      // unfortunately the ObserveDriver API doesn't provide a good way to\n      // \"cancel\" the observe from the inside in this case.\n      Array.prototype.push.apply(self._pendingWrites, writesForCycle);\n      Meteor._debug(\"Exception while polling query \" +\n                    JSON.stringify(self._cursorDescription), e);\n      return;\n    }\n\n    // Run diffs.\n    if (!self._stopped) {\n      LocalCollection._diffQueryChanges(\n        self._ordered, oldResults, newResults, self._multiplexer);\n    }\n\n    // Signals the multiplexer to allow all observeChanges calls that share this\n    // multiplexer to return. (This happens asynchronously, via the\n    // multiplexer's queue.)\n    if (first)\n      self._multiplexer.ready();\n\n    // Replace self._results atomically.  (This assignment is what makes `first`\n    // stay through on the next cycle, so we've waited until after we've\n    // committed to ready-ing the multiplexer.)\n    self._results = newResults;\n\n    // Once the ObserveMultiplexer has processed everything we've done in this\n    // round, mark all the writes which existed before this call as\n    // commmitted. (If new writes have shown up in the meantime, there'll\n    // already be another _pollMongo task scheduled.)\n    self._multiplexer.onFlush(function () {\n      _.each(writesForCycle, function (w) {\n        w.committed();\n      });\n    });\n  },\n\n  stop: function () {\n    var self = this;\n    self._stopped = true;\n    _.each(self._stopCallbacks, function (c) { c(); });\n    // Release any write fences that are waiting on us.\n    _.each(self._pendingWrites, function (w) {\n      w.committed();\n    });\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-drivers-polling\", -1);\n  }\n});\n"]},"sourceType":"script","hash":"9eaa46860b39162ec8af26e37922d7138e1aed1a"}
