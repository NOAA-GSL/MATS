{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/imports/startup/client/curve_util.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/randyp:mats-common/imports/startup/client/curve_util.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/imports/startup/client/curve_util.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/imports/startup/client/curve_util.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/randyp:mats-common/imports/startup/client/curve_util.js"}},"code":"let matsTypes;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsTypes(v) {\n    matsTypes = v;\n  }\n\n}, 0);\nlet matsCollections;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsCollections(v) {\n    matsCollections = v;\n  }\n\n}, 1);\nlet matsPlotUtils;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsPlotUtils(v) {\n    matsPlotUtils = v;\n  }\n\n}, 2);\nlet matsParamUtils;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsParamUtils(v) {\n    matsParamUtils = v;\n  }\n\n}, 3);\nlet Info;\nmodule.link(\"meteor/randyp:mats-common\", {\n  Info(v) {\n    Info = v;\n  }\n\n}, 4);\nlet matsMethods;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsMethods(v) {\n    matsMethods = v;\n  }\n\n}, 5);\n\n/*\n global dataset variable - container for graph dataset.\n This (plotResult) is very important. It isn't \"var\" because it needs to be a meteor global scope.\n The page is rendered whe the graph page comes up, but the data from the data processing callback\n in plotList.js or curveList.js may not have set the global variable\n PlotResult.\n */\n//var plotResultData = null; -- this was the global variable for the text output data, but now it is set elsewhere\nvar graphResult = null; // this is the global variable for the data on the graph\n\nvar plot;\n\nconst sizeof = function (_1) {\n  var _2 = [_1];\n  var _3 = 0;\n\n  for (var _4 = 0; _4 < _2.length; _4++) {\n    switch (typeof _2[_4]) {\n      case \"boolean\":\n        _3 += 4;\n        break;\n\n      case \"number\":\n        _3 += 8;\n        break;\n\n      case \"string\":\n        _3 += 2 * _2[_4].length;\n        break;\n\n      case \"object\":\n        if (Object.prototype.toString.call(_2[_4]) != \"[object Array]\") {\n          for (var _5 in _2[_4]) {\n            _3 += 2 * _5.length;\n          }\n        }\n\n        for (var _5 in _2[_4]) {\n          var _6 = false;\n\n          for (var _7 = 0; _7 < _2.length; _7++) {\n            if (_2[_7] === _2[_4][_5]) {\n              _6 = true;\n              break;\n            }\n          }\n\n          if (!_6) {\n            _2.push(_2[_4][_5]);\n          }\n        }\n\n    }\n  }\n\n  return _3;\n}; // Retrieves the globally stored plotResultData for the text output and other things.\n// Re-sets the plotResultData if the requested page range has changed, or if it has not been previously set.\n\n\nconst getPlotResultData = function () {\n  var pageIndex = Session.get(\"pageIndex\");\n  var newPageIndex = Session.get(\"newPageIndex\");\n\n  if (plotResultData === undefined || plotResultData === null || Session.get('textRefreshNeeded') === true) {\n    setPlotResultData();\n  }\n\n  return plotResultData;\n}; // Sets the global plotResultData variable for the text output to the requested range from the Results data stored in mongo, via a MatsMethod.\n\n\nconst setPlotResultData = function () {\n  var pageIndex = Session.get(\"pageIndex\");\n  var newPageIndex = Session.get(\"newPageIndex\");\n\n  if (Session.get('textRefreshNeeded') === true) {\n    showSpinner();\n    matsMethods.getPlotResult.call({\n      resultKey: Session.get(\"plotResultKey\"),\n      pageIndex: pageIndex,\n      newPageIndex: newPageIndex\n    }, function (error, result) {\n      if (error !== undefined) {\n        setError(new Error(\"matsMethods.getPlotResult failed : error: \" + error));\n        Session.set('textRefreshNeeded', false);\n      }\n\n      if (result == undefined) {\n        plotResultData = undefined;\n        Session.set('textRefreshNeeded', false);\n        hideSpinner();\n        return;\n      }\n\n      plotResultData = result;\n      Session.set(\"pageIndex\", result.dsiRealPageIndex);\n      Session.set(\"pageTextDirection\", result.dsiTextDirection);\n      Session.set('textLoaded', new Date());\n      console.log(\"size of plotResultData is \", sizeof(plotResultData));\n      Session.set('textRefreshNeeded', false);\n      hideSpinner();\n    });\n  }\n}; // resets the global plotResultData variable for the text output to null\n\n\nconst resetPlotResultData = function () {\n  plotResultData = null;\n  Session.set('textLoaded', new Date());\n}; // gets the global graphResult variable, which is the data object for the (possibly downsampled) data on the graph\n\n\nconst getGraphResult = function () {\n  if (graphResult === undefined || graphResult === null) {\n    return [];\n  }\n\n  return graphResult;\n}; // sets the global graphResult variable to the (possibly downsampled) data object returned from MatsMethods, in order to make the graph\n\n\nconst setGraphResult = function (result) {\n  graphResult = result;\n  Session.set('graphDataLoaded', new Date());\n  console.log(\"size of graphResultData is\", sizeof(graphResult));\n}; // resets the global graphResult variable to null\n\n\nconst resetGraphResult = function () {\n  graphResult = null;\n  Session.set('graphDataLoaded', new Date());\n};\n/*\n Curve utilities - used to determine curve labels and colors etc.\n */\n\n\nconst getUsedLabels = function () {\n  if (Session.get('UsedLabels') === undefined) {\n    return [];\n  }\n\n  return Session.get('UsedLabels');\n};\n\nconst getNextCurveLabel = function () {\n  if (Session.get('NextCurveLabel') === undefined) {\n    setNextCurveLabel();\n  }\n\n  return Session.get('NextCurveLabel');\n}; // determine the next curve Label and set it in the session\n// private, not exported\n\n\nconst setNextCurveLabel = function () {\n  const usedLabels = Session.get('UsedLabels');\n  const settings = matsCollections.Settings.findOne({}, {\n    fields: {\n      LabelPrefix: 1\n    }\n  });\n\n  if (settings === undefined) {\n    return false;\n  }\n\n  const labelPrefix = settings.LabelPrefix; // find all the labels that start with our prefix (some could be custom)\n\n  const prefixLabels = _.filter(usedLabels, function (l) {\n    return l && l.lastIndexOf(labelPrefix, 0) === 0 && l.match(new RegExp(labelPrefix, 'g')).length == 1;\n  });\n\n  const lastUsedLabel = _.last(prefixLabels);\n\n  var lastLabelNumber = -1;\n\n  if (lastUsedLabel !== undefined) {\n    const minusPrefix = lastUsedLabel.replace(labelPrefix, '');\n    const tryNum = parseInt(minusPrefix, 10);\n\n    if (!isNaN(tryNum)) {\n      lastLabelNumber = tryNum;\n    }\n  }\n\n  var newLabelNumber = lastLabelNumber + 1;\n  var nextCurveLabel = labelPrefix + newLabelNumber; // the label might be one from a removed curve so the next ones might be used\n\n  while (_.indexOf(usedLabels, nextCurveLabel) != -1) {\n    newLabelNumber++;\n    nextCurveLabel = labelPrefix + newLabelNumber;\n  }\n\n  Session.set('NextCurveLabel', nextCurveLabel);\n}; // determine the next curve color and set it in the session\n// private - not exported\n\n\nconst setNextCurveColor = function () {\n  var usedColors = Session.get('UsedColors');\n  var colors = matsCollections.ColorScheme.findOne({}, {\n    fields: {\n      colors: 1\n    }\n  }).colors;\n  var lastUsedIndex = -1;\n\n  if (usedColors !== undefined) {\n    lastUsedIndex = _.indexOf(colors, _.last(usedColors));\n  }\n\n  var nextCurveColor;\n\n  if (lastUsedIndex !== undefined && lastUsedIndex != -1) {\n    if (lastUsedIndex < colors.length - 1) {\n      var newIndex = lastUsedIndex + 1;\n      nextCurveColor = colors[newIndex]; // the color might be one from a removed curve so the next ones might be used\n\n      while (_.indexOf(usedColors, nextCurveColor) != -1) {\n        newIndex++;\n        nextCurveColor = colors[newIndex];\n      }\n    } else {\n      // out of defaults\n      var rint = Math.round(0xffffff * Math.random());\n      nextCurveColor = 'rgb(' + (rint >> 16) + ',' + (rint >> 8 & 255) + ',' + (rint & 255) + ')';\n    }\n  } else {\n    nextCurveColor = colors[0];\n  }\n\n  Session.set('NextCurveColor', nextCurveColor);\n}; // get the next curve color from the session\n// private - not exported\n\n\nconst getNextCurveColor = function () {\n  if (Session.get('NextCurveColor') === undefined) {\n    setNextCurveColor();\n  }\n\n  return Session.get('NextCurveColor');\n}; // clear a used label and set the nextCurveLabel to the one just cleared\n\n\nconst clearUsedLabel = function (label) {\n  var usedLabels = Session.get('UsedLabels');\n\n  var newUsedLabels = _.reject(usedLabels, function (l) {\n    return l == label;\n  });\n\n  Session.set('UsedLabels', newUsedLabels);\n  Session.set('NextCurveLabel', label);\n}; // clear a used color and set the nextCurveColor to the one just cleared\n\n\nconst clearUsedColor = function (color) {\n  var usedColors = Session.get('UsedColors');\n\n  var newUsedColors = _.reject(usedColors, function (c) {\n    return c == color;\n  });\n\n  Session.set('UsedColors', newUsedColors);\n  Session.set('NextCurveColor', color);\n}; // clear all the used colors and labels and set the nextCurve values\n// to the first in the scheme and the first of the labelPrefix.\n// This is used by the removeAll\n\n\nconst clearAllUsed = function () {\n  Session.set('UsedColors', undefined);\n  var colors = matsCollections.ColorScheme.findOne({}, {\n    fields: {\n      colors: 1\n    }\n  }).colors;\n  Session.set('NextCurveColor', colors[0]);\n  Session.set('UsedLabels', undefined);\n  var labelPrefix = matsCollections.Settings.findOne({}, {\n    fields: {\n      LabelPrefix: 1\n    }\n  }).LabelPrefix;\n  Session.set('NextCurveLabel', labelPrefix + 0);\n  Session.set('Curves', []);\n}; // use curves in session to determine which defaults are already used\n// and to set the usedColors in the session\n// this is used on restore settings to set up the usedColors\n// private - not exported\n//setUsedDefaults = function() {\n\n\nconst setUsedColors = function () {\n  var curves = Session.get('Curves');\n  var usedColors = [];\n\n  for (var i = 0; i < curves.length; i++) {\n    var color = curves[i].color;\n    usedColors.push(color);\n  }\n\n  Session.set('UsedColors', usedColors);\n  setNextCurveColor();\n}; // private - not exported\n\n\nconst setUsedLabels = function () {\n  var curves = Session.get('Curves');\n  var usedLabels = [];\n\n  for (var i = 0; i < curves.length; i++) {\n    var label = curves[i].label;\n    usedLabels.push(label);\n  }\n\n  Session.set('UsedLabels', usedLabels);\n  setNextCurveLabel();\n};\n\nconst setUsedColorsAndLabels = function () {\n  setUsedColors();\n  setUsedLabels();\n};\n\nconst resetScatterApply = function () {\n  if (matsPlotUtils.getPlotType() == matsTypes.PlotTypes.scatter2d) {\n    Session.set('axisCurveIcon', 'fa-asterisk');\n    Session.set('xaxisCurveText', 'XAXIS NOT YET APPLIED');\n    Session.set('yaxisCurveText', 'YAXIS NOT YET APPLIED');\n    Session.set('xaxisCurveColor', 'red');\n    Session.set('yaxisCurveColor', 'red');\n\n    if (document.getElementById('Fit-Type-radioGroup-none') !== null) {\n      document.getElementById('Fit-Type-radioGroup-none').checked = true;\n    }\n  }\n}; // add the difference curves\n// private - not exported\n\n\nconst addDiffs = function () {\n  var curves = Session.get('Curves');\n  var newCurves = Session.get('Curves'); // diffs is checked -- have to add diff curves\n\n  var curvesLength = curves.length;\n\n  if (curvesLength <= 1) {\n    setInfo(\"You cannot difference less than two curves!\");\n    return false;\n  }\n\n  switch (matsPlotUtils.getPlotFormat()) {\n    case matsTypes.PlotFormats.matching:\n      var baseIndex = 0; // This will probably not default to curve 0 in the future\n\n      for (var ci = 1; ci < curves.length; ci++) {\n        var newCurve = $.extend(true, {}, curves[ci]);\n        newCurve.label = curves[ci].label + \"-\" + curves[0].label;\n        newCurve.color = getNextCurveColor();\n        newCurve.diffFrom = [ci, baseIndex]; // do not create extra diff if it already exists\n\n        if (_.findWhere(curves, {\n          label: newCurve.label\n        }) === undefined) {\n          newCurves.push(newCurve);\n          Session.set('Curves', newCurves);\n          setUsedColorsAndLabels();\n        }\n      }\n\n      break;\n\n    case matsTypes.PlotFormats.pairwise:\n      var baseIndex = 0; // This will probably not default to curve 0 in the future\n\n      for (var ci = 1; ci < curves.length; ci++) {\n        if (ci % 2 != 0) {\n          // only diff on odd curves against previous curve\n          var base_index = ci - 1;\n          var newCurve = $.extend(true, {}, curves[ci]);\n          newCurve.label = curves[ci].label + \"-\" + curves[base_index].label;\n          newCurve.color = getNextCurveColor();\n          newCurve.diffFrom = [ci, baseIndex]; // do not create extra diff if it already exists\n\n          if (_.findWhere(curves, {\n            label: newCurve.label\n          }) === undefined) {\n            newCurves.push(newCurve);\n            Session.set('Curves', newCurves);\n            setUsedColorsAndLabels();\n          }\n        }\n      }\n\n      break;\n\n    case matsTypes.PlotFormats.absolute:\n      var baseIndex = 0; // This will probably not default to curve 0 in the future\n\n      for (var ci = 1; ci < curves.length; ci++) {\n        var newCurve = $.extend(true, {}, curves[ci]);\n        newCurve.label = curves[ci].label + \"-\" + curves[0].label;\n        newCurve.color = getNextCurveColor();\n        newCurve.diffFrom = [ci, baseIndex]; // do not create extra diff if it already exists\n\n        if (_.findWhere(curves, {\n          label: newCurve.label\n        }) === undefined) {\n          newCurves.push(newCurve);\n          Session.set('Curves', newCurves);\n          setUsedColorsAndLabels();\n        }\n      }\n\n      break;\n  }\n}; // remove difference curves\n// private - not exported\n\n\nconst removeDiffs = function () {\n  var curves = Session.get('Curves');\n\n  var newCurves = _.reject(curves, function (curve) {\n    return curve.diffFrom != null;\n  });\n\n  Session.set('Curves', newCurves);\n  setUsedColorsAndLabels();\n}; // resolve the difference curves\n// (used after adding or removing a curve while the show diffs box is checked)\n\n\nconst checkDiffs = function () {\n  var curves = Session.get('Curves');\n\n  if (matsPlotUtils.getPlotType() == matsTypes.PlotTypes.scatter2d) {\n    // scatter plots have no concept of difference curves.\n    return;\n  }\n\n  var plotFormat = matsPlotUtils.getPlotFormat();\n\n  if (curves.length > 1) {\n    if (plotFormat !== matsTypes.PlotFormats.none) {\n      removeDiffs();\n      addDiffs();\n    } else {\n      removeDiffs();\n    }\n  }\n}; // method to display the appropriate selectors for a timeseries curve\n\n\nconst showTimeseriesFace = function () {\n  // move dates selector to plot parameters - one date range for all curves\n  if (document.getElementById('plot-type-' + matsTypes.PlotTypes.timeSeries).checked === true) {\n    var faceOptions = {\n      'curve-dates': 'none',\n      'dates': 'block',\n      'region': 'block',\n      'statistic': 'block',\n      'threshold': 'block',\n      'pres-level': 'block',\n      'forecast-length': 'block',\n      'dieoff-type': 'none',\n      'average': 'block',\n      'valid-time': 'block',\n      'utc-cycle-start': 'none',\n      'histogram-bin-controls': 'none',\n      'histogram-yaxis-controls': 'none',\n      'bin-number': 'none',\n      'bin-bounds': 'none',\n      'truth': 'block',\n      'sites': 'none',\n      'sitesMap': 'none',\n      'x-axis-parameter': 'none',\n      'y-axis-parameter': 'none'\n    };\n    const faceSelectors = Object.keys(faceOptions);\n    var elem;\n\n    for (var fidx = 0; fidx < faceSelectors.length; fidx++) {\n      elem = document.getElementById(faceSelectors[fidx] + '-item');\n\n      if (elem && elem.style) {\n        elem.style.display = faceOptions[faceSelectors[fidx]];\n      }\n    }\n\n    elem = document.getElementById(matsTypes.PlotTypes.scatter2d);\n\n    if (elem && elem.style) {\n      elem.style.display = \"none\";\n    }\n\n    Session.set('plotType', matsTypes.PlotTypes.timeSeries); // matsParamUtils.setAllParamsToDefault();\n\n    Session.set('lastUpdate', Date.now());\n  }\n}; // method to display the appropriate selectors for a profile curve\n\n\nconst showProfileFace = function () {\n  // move dates selector to curve parameters - one date range for each curve\n  if (document.getElementById('plot-type-' + matsTypes.PlotTypes.profile).checked === true) {\n    var faceOptions = {\n      'curve-dates': 'block',\n      'dates': 'none',\n      'region': 'block',\n      'statistic': 'block',\n      'threshold': 'block',\n      'pres-level': 'none',\n      'forecast-length': 'block',\n      'dieoff-type': 'none',\n      'average': 'none',\n      'valid-time': 'block',\n      'utc-cycle-start': 'none',\n      'histogram-bin-controls': 'none',\n      'histogram-yaxis-controls': 'none',\n      'bin-number': 'none',\n      'bin-bounds': 'none',\n      'truth': 'block',\n      'sites': 'none',\n      'sitesMap': 'none',\n      'x-axis-parameter': 'none',\n      'y-axis-parameter': 'none'\n    };\n    const faceSelectors = Object.keys(faceOptions);\n    var elem;\n\n    for (var fidx = 0; fidx < faceSelectors.length; fidx++) {\n      elem = document.getElementById(faceSelectors[fidx] + '-item');\n\n      if (elem && elem.style) {\n        elem.style.display = faceOptions[faceSelectors[fidx]];\n      }\n    }\n\n    elem = document.getElementById(matsTypes.PlotTypes.scatter2d);\n\n    if (elem && elem.style) {\n      elem.style.display = \"none\";\n    }\n\n    Session.set('plotType', matsTypes.PlotTypes.profile); // matsParamUtils.setAllParamsToDefault();\n\n    Session.set('lastUpdate', Date.now());\n  }\n}; // method to display the appropriate selectors for a dieoff curve\n\n\nconst showDieOffFace = function () {\n  // move dates selector to curve parameters - one date range for each curve\n  if (document.getElementById('plot-type-' + matsTypes.PlotTypes.dieoff).checked === true) {\n    var faceOptions = {\n      'curve-dates': 'block',\n      'dates': 'none',\n      'region': 'block',\n      'statistic': 'block',\n      'threshold': 'block',\n      'pres-level': 'block',\n      'forecast-length': 'none',\n      'dieoff-type': 'block',\n      'average': 'none',\n      'valid-time': 'block',\n      'utc-cycle-start': 'none',\n      'histogram-bin-controls': 'none',\n      'histogram-yaxis-controls': 'none',\n      'bin-number': 'none',\n      'bin-bounds': 'none',\n      'truth': 'block',\n      'sites': 'none',\n      'sitesMap': 'none',\n      'x-axis-parameter': 'none',\n      'y-axis-parameter': 'none'\n    };\n    const faceSelectors = Object.keys(faceOptions);\n    var elem;\n\n    for (var fidx = 0; fidx < faceSelectors.length; fidx++) {\n      elem = document.getElementById(faceSelectors[fidx] + '-item');\n\n      if (elem && elem.style) {\n        elem.style.display = faceOptions[faceSelectors[fidx]];\n      }\n    } // reset the value for dieoff-type, so that the checkHideOther routine will work\n\n\n    const param = matsParamUtils.getParameterForName('dieoff-type');\n    matsParamUtils.setValueTextForParamName(param.name, param.default);\n    elem = document.getElementById(matsTypes.PlotTypes.scatter2d);\n\n    if (elem && elem.style) {\n      elem.style.display = \"none\";\n    }\n\n    Session.set('plotType', matsTypes.PlotTypes.dieoff); // matsParamUtils.setAllParamsToDefault();\n\n    Session.set('lastUpdate', Date.now());\n  }\n}; // method to display the appropriate selectors for a threshold curve\n\n\nconst showThresholdFace = function () {\n  // move dates selector to curve parameters - one date range for each curve\n  if (document.getElementById('plot-type-' + matsTypes.PlotTypes.threshold).checked === true) {\n    var faceOptions = {\n      'curve-dates': 'block',\n      'dates': 'none',\n      'region': 'block',\n      'statistic': 'block',\n      'threshold': 'none',\n      'pres-level': 'block',\n      'forecast-length': 'block',\n      'dieoff-type': 'none',\n      'average': 'none',\n      'valid-time': 'block',\n      'utc-cycle-start': 'none',\n      'histogram-bin-controls': 'none',\n      'histogram-yaxis-controls': 'none',\n      'bin-number': 'none',\n      'bin-bounds': 'none',\n      'truth': 'block',\n      'sites': 'none',\n      'sitesMap': 'none',\n      'x-axis-parameter': 'none',\n      'y-axis-parameter': 'none'\n    };\n    const faceSelectors = Object.keys(faceOptions);\n    var elem;\n\n    for (var fidx = 0; fidx < faceSelectors.length; fidx++) {\n      elem = document.getElementById(faceSelectors[fidx] + '-item');\n\n      if (elem && elem.style) {\n        elem.style.display = faceOptions[faceSelectors[fidx]];\n      }\n    }\n\n    elem = document.getElementById(matsTypes.PlotTypes.scatter2d);\n\n    if (elem && elem.style) {\n      elem.style.display = \"none\";\n    }\n\n    Session.set('plotType', matsTypes.PlotTypes.threshold); // matsParamUtils.setAllParamsToDefault();\n\n    Session.set('lastUpdate', Date.now());\n  }\n}; // method to display the appropriate selectors for a valid time curve\n\n\nconst showValidTimeFace = function () {\n  // move dates selector to curve parameters - one date range for each curve\n  if (document.getElementById('plot-type-' + matsTypes.PlotTypes.validtime).checked === true) {\n    var faceOptions = {\n      'curve-dates': 'block',\n      'dates': 'none',\n      'region': 'block',\n      'statistic': 'block',\n      'threshold': 'block',\n      'pres-level': 'block',\n      'forecast-length': 'block',\n      'dieoff-type': 'none',\n      'average': 'none',\n      'valid-time': 'none',\n      'utc-cycle-start': 'none',\n      'histogram-bin-controls': 'none',\n      'histogram-yaxis-controls': 'none',\n      'bin-number': 'none',\n      'bin-bounds': 'none',\n      'truth': 'block',\n      'sites': 'none',\n      'sitesMap': 'none',\n      'x-axis-parameter': 'none',\n      'y-axis-parameter': 'none'\n    };\n    const faceSelectors = Object.keys(faceOptions);\n    var elem;\n\n    for (var fidx = 0; fidx < faceSelectors.length; fidx++) {\n      elem = document.getElementById(faceSelectors[fidx] + '-item');\n\n      if (elem && elem.style) {\n        elem.style.display = faceOptions[faceSelectors[fidx]];\n      }\n    }\n\n    elem = document.getElementById(matsTypes.PlotTypes.scatter2d);\n\n    if (elem && elem.style) {\n      elem.style.display = \"none\";\n    }\n\n    Session.set('plotType', matsTypes.PlotTypes.validtime); // matsParamUtils.setAllParamsToDefault();\n\n    Session.set('lastUpdate', Date.now());\n  }\n}; // method to display the appropriate selectors for a daily model cycle curve\n\n\nconst showDailyModelCycleFace = function () {\n  // move dates selector to plot parameters - one date range for all curves\n  if (document.getElementById('plot-type-' + matsTypes.PlotTypes.dailyModelCycle).checked === true) {\n    var faceOptions = {\n      'curve-dates': 'none',\n      'dates': 'block',\n      'region': 'block',\n      'statistic': 'block',\n      'threshold': 'block',\n      'pres-level': 'block',\n      'forecast-length': 'none',\n      'dieoff-type': 'none',\n      'average': 'none',\n      'valid-time': 'none',\n      'utc-cycle-start': 'block',\n      'histogram-bin-controls': 'none',\n      'histogram-yaxis-controls': 'none',\n      'bin-number': 'none',\n      'bin-bounds': 'none',\n      'truth': 'block',\n      'sites': 'none',\n      'sitesMap': 'none',\n      'x-axis-parameter': 'none',\n      'y-axis-parameter': 'none'\n    };\n    const faceSelectors = Object.keys(faceOptions);\n    var elem;\n\n    for (var fidx = 0; fidx < faceSelectors.length; fidx++) {\n      elem = document.getElementById(faceSelectors[fidx] + '-item');\n\n      if (elem && elem.style) {\n        elem.style.display = faceOptions[faceSelectors[fidx]];\n      }\n    }\n\n    elem = document.getElementById(matsTypes.PlotTypes.scatter2d);\n\n    if (elem && elem.style) {\n      elem.style.display = \"none\";\n    }\n\n    Session.set('plotType', matsTypes.PlotTypes.dailyModelCycle); // matsParamUtils.setAllParamsToDefault();\n\n    Session.set('lastUpdate', Date.now());\n  }\n}; // method to display the appropriate selectors for a reliability curve\n\n\nconst showReliabilityFace = function () {\n  // move dates selector to curve parameters - one date range for each curve\n  if (document.getElementById('plot-type-' + matsTypes.PlotTypes.reliability).checked === true) {\n    var faceOptions = {\n      'curve-dates': 'none',\n      'dates': 'block',\n      'region': 'block',\n      'statistic': 'block',\n      'threshold': 'block',\n      'pres-level': 'block',\n      'forecast-length': 'block',\n      'dieoff-type': 'none',\n      'average': 'block',\n      'valid-time': 'block',\n      'utc-cycle-start': 'none',\n      'histogram-bin-controls': 'none',\n      'histogram-yaxis-controls': 'none',\n      'bin-number': 'none',\n      'bin-bounds': 'none',\n      'truth': 'none',\n      'sites': 'none',\n      'sitesMap': 'none',\n      'x-axis-parameter': 'none',\n      'y-axis-parameter': 'none'\n    };\n    const faceSelectors = Object.keys(faceOptions);\n    var elem;\n\n    for (var fidx = 0; fidx < faceSelectors.length; fidx++) {\n      elem = document.getElementById(faceSelectors[fidx] + '-item');\n\n      if (elem && elem.style) {\n        elem.style.display = faceOptions[faceSelectors[fidx]];\n      }\n    }\n\n    elem = document.getElementById(matsTypes.PlotTypes.scatter2d);\n\n    if (elem && elem.style) {\n      elem.style.display = \"none\";\n    }\n\n    Session.set('plotType', matsTypes.PlotTypes.reliability); // matsParamUtils.setAllParamsToDefault();\n\n    Session.set('lastUpdate', Date.now());\n  }\n}; // method to display the appropriate selectors for a map\n\n\nconst showMapFace = function () {\n  // move dates selector to plot parameters - one date range for all curves\n  if (document.getElementById('plot-type-' + matsTypes.PlotTypes.map).checked === true) {\n    var faceOptions;\n    faceOptions = {\n      'curve-dates': 'none',\n      'dates': 'block',\n      'region': 'none',\n      'statistic': 'none',\n      'threshold': 'none',\n      'pres-level': 'block',\n      'forecast-length': 'block',\n      'dieoff-type': 'none',\n      'average': 'none',\n      'valid-time': 'block',\n      'utc-cycle-start': 'none',\n      'histogram-bin-controls': 'none',\n      'histogram-yaxis-controls': 'none',\n      'bin-number': 'none',\n      'bin-bounds': 'none',\n      'truth': 'none',\n      'sites': 'block',\n      'sitesMap': 'block',\n      'x-axis-parameter': 'none',\n      'y-axis-parameter': 'none'\n    };\n    const faceSelectors = Object.keys(faceOptions);\n    var elem;\n\n    for (var fidx = 0; fidx < faceSelectors.length; fidx++) {\n      elem = document.getElementById(faceSelectors[fidx] + '-item');\n\n      if (elem && elem.style) {\n        elem.style.display = faceOptions[faceSelectors[fidx]];\n      }\n    }\n\n    elem = document.getElementById(matsTypes.PlotTypes.scatter2d);\n\n    if (elem && elem.style) {\n      elem.style.display = \"none\";\n    }\n\n    Session.set('plotType', matsTypes.PlotTypes.map); // matsParamUtils.setAllParamsToDefault();\n\n    Session.set('lastUpdate', Date.now());\n  }\n}; // method to display the appropriate selectors for a histogram\n\n\nconst showHistogramFace = function () {\n  // move dates selector to curve parameters - one date range for each curve\n  if (document.getElementById('plot-type-' + matsTypes.PlotTypes.histogram).checked === true) {\n    var faceOptions = {\n      'curve-dates': 'block',\n      'dates': 'none',\n      'region': 'block',\n      'statistic': 'block',\n      'threshold': 'block',\n      'pres-level': 'block',\n      'forecast-length': 'block',\n      'dieoff-type': 'none',\n      'average': 'none',\n      'valid-time': 'block',\n      'utc-cycle-start': 'none',\n      'histogram-bin-controls': 'block',\n      'histogram-yaxis-controls': 'block',\n      'bin-number': 'none',\n      'bin-bounds': 'none',\n      'truth': 'block',\n      'sites': 'none',\n      'sitesMap': 'none',\n      'x-axis-parameter': 'none',\n      'y-axis-parameter': 'none'\n    };\n    const faceSelectors = Object.keys(faceOptions);\n    var elem;\n\n    for (var fidx = 0; fidx < faceSelectors.length; fidx++) {\n      elem = document.getElementById(faceSelectors[fidx] + '-item');\n\n      if (elem && elem.style) {\n        elem.style.display = faceOptions[faceSelectors[fidx]];\n      }\n    }\n\n    elem = document.getElementById(matsTypes.PlotTypes.scatter2d);\n\n    if (elem && elem.style) {\n      elem.style.display = \"none\";\n    }\n\n    Session.set('plotType', matsTypes.PlotTypes.histogram); // matsParamUtils.setAllParamsToDefault();\n\n    Session.set('lastUpdate', Date.now());\n  }\n}; // method to display the appropriate selectors for a contour plot\n\n\nconst showContourFace = function () {\n  // move dates selector to plot parameters - one date range for all curves\n  const isContour = document.getElementById('plot-type-' + matsTypes.PlotTypes.contour) !== null && document.getElementById('plot-type-' + matsTypes.PlotTypes.contour).checked === true;\n  const isContourDiff = document.getElementById('plot-type-' + matsTypes.PlotTypes.contourDiff) !== null && document.getElementById('plot-type-' + matsTypes.PlotTypes.contourDiff).checked === true;\n\n  if (isContour || isContourDiff) {\n    var faceOptions = {\n      'curve-dates': 'none',\n      'dates': 'block',\n      'region': 'block',\n      'statistic': 'block',\n      'threshold': 'block',\n      'pres-level': 'block',\n      'forecast-length': 'block',\n      'dieoff-type': 'none',\n      'average': 'none',\n      'valid-time': 'block',\n      'utc-cycle-start': 'none',\n      'histogram-bin-controls': 'none',\n      'histogram-yaxis-controls': 'none',\n      'bin-number': 'none',\n      'bin-bounds': 'none',\n      'truth': 'block',\n      'sites': 'none',\n      'sitesMap': 'none',\n      'x-axis-parameter': 'block',\n      'y-axis-parameter': 'block'\n    };\n    const faceSelectors = Object.keys(faceOptions);\n    var elem;\n\n    for (var fidx = 0; fidx < faceSelectors.length; fidx++) {\n      elem = document.getElementById(faceSelectors[fidx] + '-item');\n\n      if (elem && elem.style) {\n        elem.style.display = faceOptions[faceSelectors[fidx]];\n      }\n    } // //need to be consistent with the x and y axis 'hideOtherFor' settings\n    // const xAxisVal = matsParamUtils.getValueForParamName('x-axis-parameter');\n    // const yAxisVal = matsParamUtils.getValueForParamName('y-axis-parameter');\n    // if (xAxisVal === 'Fcst lead time' || yAxisVal === 'Fcst lead time') {\n    //     elem = document.getElementById('forecast-length-item');\n    //     if (elem && elem.style) {\n    //         elem.style.display = 'none';\n    //     }\n    // }\n    // if (xAxisVal === 'Valid UTC hour' || yAxisVal === 'Valid UTC hour') {\n    //     elem = document.getElementById('valid-time-item');\n    //     if (elem && elem.style) {\n    //         elem.style.display = 'none';\n    //     }\n    // }\n    // if (xAxisVal === 'Pressure level' || yAxisVal === 'Pressure level') {\n    //     elem = document.getElementById('pres-level-item');\n    //     if (elem && elem.style) {\n    //         elem.style.display = 'none';\n    //     }\n    // }\n\n\n    elem = document.getElementById(matsTypes.PlotTypes.scatter2d);\n\n    if (elem && elem.style) {\n      elem.style.display = \"none\";\n    }\n\n    if (isContour) {\n      Session.set('plotType', matsTypes.PlotTypes.contour);\n    } else {\n      Session.set('plotType', matsTypes.PlotTypes.contourDiff);\n    } // matsParamUtils.setAllParamsToDefault();\n\n\n    Session.set('lastUpdate', Date.now());\n  }\n}; // method to display the appropriate selectors for a scatter plot\n\n\nconst showScatterFace = function () {\n  if (document.getElementById('plot-type-' + matsTypes.PlotTypes.scatter2d).checked === true) {\n    var faceOptions = {\n      'curve-dates': 'none',\n      'dates': 'block',\n      'region': 'block',\n      'statistic': 'block',\n      'threshold': 'block',\n      'pres-level': 'block',\n      'forecast-length': 'block',\n      'dieoff-type': 'none',\n      'average': 'none',\n      'valid-time': 'block',\n      'utc-cycle-start': 'none',\n      'histogram-bin-controls': 'none',\n      'histogram-yaxis-controls': 'none',\n      'bin-number': 'none',\n      'bin-bounds': 'none',\n      'truth': 'block',\n      'sites': 'none',\n      'sitesMap': 'none',\n      'x-axis-parameter': 'none',\n      'y-axis-parameter': 'none'\n    };\n    const faceSelectors = Object.keys(faceOptions);\n    var elem;\n\n    for (var fidx = 0; fidx < faceSelectors.length; fidx++) {\n      elem = document.getElementById(faceSelectors[fidx] + '-item');\n\n      if (elem && elem.style) {\n        elem.style.display = faceOptions[faceSelectors[fidx]];\n      }\n    }\n\n    elem = document.getElementById(matsTypes.PlotTypes.scatter2d);\n\n    if (elem && elem.style) {\n      elem.style.display = \"block\";\n    }\n\n    Session.set('plotType', matsTypes.PlotTypes.scatter2d);\n    Session.set('lastUpdate', Date.now()); // force curveParams to re-render\n    // matsParamUtils.setAllParamsToDefault();\n\n    Session.set('lastUpdate', Date.now());\n  }\n}; // this is no longer used, but it was once employed by the text output routines to calculate the stats for the entire curve\n\n\nconst get_err = function (sVals, sSecs) {\n  /* THIS IS DIFFERENT FROM THE ONE IN DATA_UTILS,\n     This one does not throw away outliers and it captures minVal and maxVal\n     refer to perl error_library.pl sub  get_stats\n      to see the perl implementation of these statics calculations.\n      These should match exactly those, except that they are processed in reverse order.\n   */\n  var subVals = [];\n  var subSecs = [];\n  var sVals = sVals;\n  var sSecs = sSecs;\n  var n = sVals.length;\n  var n_good = 0;\n  var sum_d = 0;\n  var sum2_d = 0;\n  var error = \"\";\n  var i;\n\n  for (i = 0; i < n; i++) {\n    if (sVals[i] !== null) {\n      n_good = n_good + 1;\n      sum_d = sum_d + sVals[i];\n      sum2_d = sum2_d + sVals[i] * sVals[i];\n      subVals.push(sVals[i]);\n      subSecs.push(sSecs[i]);\n    }\n  }\n\n  var d_mean = sum_d / n_good;\n  var sd2 = sum2_d / n_good - d_mean * d_mean;\n  var sd = sd2 > 0 ? Math.sqrt(sd2) : sd2;\n  var sd_limit = 3 * sd; //console.log(\"see error_library.pl l208 These are processed in reverse order to the perl code -  \\nmean is \" + d_mean + \" sd_limit is +/- \" + sd_limit + \" n_good is \" + n_good + \" sum_d is\" + sum_d + \" sum2_d is \" + sum2_d);\n  // find minimum delta_time, if any value missing, set null\n\n  var last_secs = Number.MIN_VALUE;\n  var minDelta = Number.MAX_VALUE;\n  var minSecs = Number.MAX_VALUE;\n  var max_secs = Number.MIN_VALUE;\n  var minVal = Number.MAX_VALUE;\n  var maxVal = Number.MIN_VALUE;\n\n  for (i = 0; i < subSecs.length; i++) {\n    var secs = subSecs[i];\n    var delta = Math.abs(secs - last_secs);\n\n    if (delta < minDelta) {\n      minDelta = delta;\n    }\n\n    if (secs < minSecs) {\n      minSecs = secs;\n    }\n\n    if (secs > max_secs) {\n      max_secs = secs;\n    }\n\n    last_secs = secs;\n  }\n\n  var data_wg = [];\n  var n_gaps = 0;\n  n_good = 0;\n  var sum = 0;\n  var sum2 = 0;\n  var loopTime = minSecs;\n\n  if (minDelta < 0) {\n    error = \"Invalid time interval - minDelta: \" + minDelta;\n  } // remove data more than $sd_limit from mean\n\n\n  for (i = 0; i < subVals.length; i++) {\n    minVal = minVal < subVals[i] ? minVal : subVals[i];\n    maxVal = maxVal > subVals[i] ? maxVal : subVals[i];\n    n_good++;\n  } //console.log(\"new mean after throwing away outliers is \" + sd + \" n_good is \" + n_good + \" sum is \" + sum  + \" sum2 is \" + sum2 + \" d_mean is \" + d_mean);\n  // look for gaps.... per Bill, we only need one gap per series of gaps...\n\n\n  var lastSecond = Number.MIN_VALUE;\n\n  for (i = 0; i < subSecs.length; i++) {\n    var sec = subSecs[i];\n\n    if (lastSecond >= 0) {\n      if (sec - lastSecond > minDelta) {\n        // insert a gap\n        data_wg.push(null);\n        n_gaps++;\n      }\n    }\n\n    lastSecond = sec;\n    data_wg.push(subVals[i]);\n  } //console.log (\"n_gaps: \" + n_gaps +  \" time gaps in subseries\");\n  //from http://www.itl.nist.gov/div898/handbook/eda/section3/eda35c.htm\n\n\n  var r = [];\n\n  for (var lag = 0; lag <= 1; lag++) {\n    r[lag] = 0;\n    var n_in_lag = 0;\n\n    for (var t = 0; t < n + n_gaps - lag; t++) {\n      if (data_wg[t] != null && data_wg[t + lag] != null) {\n        r[lag] += +(data_wg[t] - d_mean) * (data_wg[t + lag] - d_mean);\n        n_in_lag++;\n      }\n    }\n\n    if (n_in_lag > 0 && sd > 0) {\n      r[lag] /= n_in_lag * sd * sd;\n    } else {\n      r[lag] = null;\n    } //console.log('r for lag ' + lag + \" is \" + r[lag] + \" n_in_lag is \" + n_in_lag + \" n_good is \" + n_good);\n\n  } // Betsy Weatherhead's correction, based on lag 1\n\n\n  if (r[1] >= 1) {\n    r[1] = .99999;\n  }\n\n  const betsy = Math.sqrt((n_good - 1) * (1 - r[1]));\n  var stde_betsy;\n\n  if (betsy != 0) {\n    stde_betsy = sd / betsy;\n  } else {\n    stde_betsy = null;\n  }\n\n  const stats = {\n    d_mean: d_mean,\n    stde_betsy: stde_betsy,\n    sd: sd,\n    n_good: n_good,\n    lag1: r[1],\n    min: minSecs,\n    max: max_secs,\n    minVal: minVal,\n    maxVal: maxVal,\n    sum: sum_d\n  }; //console.log(\"stats are \" + JSON.stringify(stats));\n  // stde_betsy is standard error with auto correlation\n  //console.log(\"---------\\n\\n\");\n\n  return stats;\n};\n\nconst showSpinner = function () {\n  if (document.getElementById(\"spinner\")) {\n    document.getElementById(\"spinner\").style.display = \"block\";\n  }\n};\n\nconst hideSpinner = function () {\n  if (document.getElementById(\"spinner\")) {\n    document.getElementById(\"spinner\").style.display = \"none\";\n  }\n};\n\nmodule.exportDefault(matsCurveUtils = {\n  resetScatterApply: resetScatterApply,\n  getUsedLabels: getUsedLabels,\n  getNextCurveLabel: getNextCurveLabel,\n  getNextCurveColor: getNextCurveColor,\n  clearAllUsed: clearAllUsed,\n  clearUsedLabel: clearUsedLabel,\n  clearUsedColor: clearUsedColor,\n  setUsedLabels: setUsedLabels,\n  setUsedColorsAndLabels: setUsedColorsAndLabels,\n  addDiffs: addDiffs,\n  removeDiffs: removeDiffs,\n  checkDiffs: checkDiffs,\n  showScatterFace: showScatterFace,\n  showTimeseriesFace: showTimeseriesFace,\n  showProfileFace: showProfileFace,\n  showDieOffFace: showDieOffFace,\n  showThresholdFace: showThresholdFace,\n  showValidTimeFace: showValidTimeFace,\n  showDailyModelCycleFace: showDailyModelCycleFace,\n  showReliabilityFace: showReliabilityFace,\n  showMapFace: showMapFace,\n  showHistogramFace: showHistogramFace,\n  showContourFace: showContourFace,\n  get_err: get_err,\n  getPlotResultData: getPlotResultData,\n  //setPlotResultData: setPlotResultData,\n  resetPlotResultData: resetPlotResultData,\n  getGraphResult: getGraphResult,\n  setGraphResult: setGraphResult,\n  resetGraphResult: resetGraphResult,\n  showSpinner: showSpinner,\n  hideSpinner: hideSpinner\n});","map":{"version":3,"sources":["packages/randyp:mats-common/imports/startup/client/curve_util.js"],"names":["matsTypes","module","link","v","matsCollections","matsPlotUtils","matsParamUtils","Info","matsMethods","graphResult","plot","sizeof","_1","_2","_3","_4","length","Object","prototype","toString","call","_5","_6","_7","push","getPlotResultData","pageIndex","Session","get","newPageIndex","plotResultData","undefined","setPlotResultData","showSpinner","getPlotResult","resultKey","error","result","setError","Error","set","hideSpinner","dsiRealPageIndex","dsiTextDirection","Date","console","log","resetPlotResultData","getGraphResult","setGraphResult","resetGraphResult","getUsedLabels","getNextCurveLabel","setNextCurveLabel","usedLabels","settings","Settings","findOne","fields","LabelPrefix","labelPrefix","prefixLabels","_","filter","l","lastIndexOf","match","RegExp","lastUsedLabel","last","lastLabelNumber","minusPrefix","replace","tryNum","parseInt","isNaN","newLabelNumber","nextCurveLabel","indexOf","setNextCurveColor","usedColors","colors","ColorScheme","lastUsedIndex","nextCurveColor","newIndex","rint","Math","round","random","getNextCurveColor","clearUsedLabel","label","newUsedLabels","reject","clearUsedColor","color","newUsedColors","c","clearAllUsed","setUsedColors","curves","i","setUsedLabels","setUsedColorsAndLabels","resetScatterApply","getPlotType","PlotTypes","scatter2d","document","getElementById","checked","addDiffs","newCurves","curvesLength","setInfo","getPlotFormat","PlotFormats","matching","baseIndex","ci","newCurve","$","extend","diffFrom","findWhere","pairwise","base_index","absolute","removeDiffs","curve","checkDiffs","plotFormat","none","showTimeseriesFace","timeSeries","faceOptions","faceSelectors","keys","elem","fidx","style","display","now","showProfileFace","profile","showDieOffFace","dieoff","param","getParameterForName","setValueTextForParamName","name","default","showThresholdFace","threshold","showValidTimeFace","validtime","showDailyModelCycleFace","dailyModelCycle","showReliabilityFace","reliability","showMapFace","map","showHistogramFace","histogram","showContourFace","isContour","contour","isContourDiff","contourDiff","showScatterFace","get_err","sVals","sSecs","subVals","subSecs","n","n_good","sum_d","sum2_d","d_mean","sd2","sd","sqrt","sd_limit","last_secs","Number","MIN_VALUE","minDelta","MAX_VALUE","minSecs","max_secs","minVal","maxVal","secs","delta","abs","data_wg","n_gaps","sum","sum2","loopTime","lastSecond","sec","r","lag","n_in_lag","t","betsy","stde_betsy","stats","lag1","min","max","exportDefault","matsCurveUtils"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2019 Colorado State University and Regents of the University of Colorado. All rights reserved.\n */\n\nimport {matsTypes} from 'meteor/randyp:mats-common';\nimport {matsCollections} from 'meteor/randyp:mats-common';\nimport {matsPlotUtils} from 'meteor/randyp:mats-common';\nimport {matsParamUtils} from 'meteor/randyp:mats-common';\nimport {Info} from 'meteor/randyp:mats-common';\nimport {matsMethods} from 'meteor/randyp:mats-common';\n\n\n/*\n global dataset variable - container for graph dataset.\n This (plotResult) is very important. It isn't \"var\" because it needs to be a meteor global scope.\n The page is rendered whe the graph page comes up, but the data from the data processing callback\n in plotList.js or curveList.js may not have set the global variable\n PlotResult.\n */\n\n//var plotResultData = null; -- this was the global variable for the text output data, but now it is set elsewhere\nvar graphResult = null;     // this is the global variable for the data on the graph\nvar plot;\n\nconst sizeof = function (_1) {\n    var _2 = [_1];\n    var _3 = 0;\n    for (var _4 = 0; _4 < _2.length; _4++) {\n        switch (typeof _2[_4]) {\n            case \"boolean\":\n                _3 += 4;\n                break;\n            case \"number\":\n                _3 += 8;\n                break;\n            case \"string\":\n                _3 += 2 * _2[_4].length;\n                break;\n            case \"object\":\n                if (Object.prototype.toString.call(_2[_4]) != \"[object Array]\") {\n                    for (var _5 in _2[_4]) {\n                        _3 += 2 * _5.length;\n                    }\n                }\n                for (var _5 in _2[_4]) {\n                    var _6 = false;\n                    for (var _7 = 0; _7 < _2.length; _7++) {\n                        if (_2[_7] === _2[_4][_5]) {\n                            _6 = true;\n                            break;\n                        }\n                    }\n                    if (!_6) {\n                        _2.push(_2[_4][_5]);\n                    }\n                }\n        }\n    }\n    return _3;\n};\n\n// Retrieves the globally stored plotResultData for the text output and other things.\n// Re-sets the plotResultData if the requested page range has changed, or if it has not been previously set.\nconst getPlotResultData = function () {\n    var pageIndex = Session.get(\"pageIndex\");\n    var newPageIndex = Session.get(\"newPageIndex\");\n    if (plotResultData === undefined || plotResultData === null || Session.get('textRefreshNeeded') === true) {\n        setPlotResultData();\n    }\n    return plotResultData;\n};\n\n// Sets the global plotResultData variable for the text output to the requested range from the Results data stored in mongo, via a MatsMethod.\nconst setPlotResultData = function () {\n    var pageIndex = Session.get(\"pageIndex\");\n    var newPageIndex = Session.get(\"newPageIndex\");\n\n    if (Session.get('textRefreshNeeded') === true) {\n        showSpinner();\n        matsMethods.getPlotResult.call({\n            resultKey: Session.get(\"plotResultKey\"),\n            pageIndex: pageIndex,\n            newPageIndex: newPageIndex\n        }, function (error, result) {\n            if (error !== undefined) {\n                setError(new Error(\"matsMethods.getPlotResult failed : error: \" + error));\n                Session.set('textRefreshNeeded', false);\n            }\n            if (result == undefined) {\n                plotResultData = undefined;\n                Session.set('textRefreshNeeded', false);\n                hideSpinner();\n                return;\n            }\n            plotResultData = result;\n            Session.set(\"pageIndex\", result.dsiRealPageIndex);\n            Session.set(\"pageTextDirection\", result.dsiTextDirection);\n            Session.set('textLoaded', new Date());\n            console.log(\"size of plotResultData is \", sizeof(plotResultData));\n            Session.set('textRefreshNeeded', false);\n            hideSpinner();\n        });\n    }\n};\n\n// resets the global plotResultData variable for the text output to null\nconst resetPlotResultData = function () {\n    plotResultData = null;\n    Session.set('textLoaded', new Date());\n};\n\n// gets the global graphResult variable, which is the data object for the (possibly downsampled) data on the graph\nconst getGraphResult = function () {\n    if (graphResult === undefined || graphResult === null) {\n        return [];\n    }\n    return graphResult;\n};\n\n// sets the global graphResult variable to the (possibly downsampled) data object returned from MatsMethods, in order to make the graph\nconst setGraphResult = function (result) {\n    graphResult = result;\n    Session.set('graphDataLoaded', new Date());\n    console.log(\"size of graphResultData is\", sizeof(graphResult));\n};\n\n// resets the global graphResult variable to null\nconst resetGraphResult = function () {\n    graphResult = null;\n    Session.set('graphDataLoaded', new Date());\n};\n\n/*\n Curve utilities - used to determine curve labels and colors etc.\n */\nconst getUsedLabels = function () {\n    if (Session.get('UsedLabels') === undefined) {\n        return [];\n    }\n    return Session.get('UsedLabels');\n};\n\nconst getNextCurveLabel = function () {\n    if (Session.get('NextCurveLabel') === undefined) {\n        setNextCurveLabel();\n    }\n    return Session.get('NextCurveLabel');\n};\n\n// determine the next curve Label and set it in the session\n// private, not exported\nconst setNextCurveLabel = function () {\n    const usedLabels = Session.get('UsedLabels');\n    const settings = matsCollections.Settings.findOne({}, {fields: {LabelPrefix: 1}});\n    if (settings === undefined) {\n        return false;\n    }\n    const labelPrefix = settings.LabelPrefix;\n    // find all the labels that start with our prefix (some could be custom)\n    const prefixLabels = _.filter(usedLabels, function (l) {\n        return (l && (l.lastIndexOf(labelPrefix, 0) === 0) && (l.match(new RegExp(labelPrefix, 'g')).length) == 1);\n    });\n    const lastUsedLabel = _.last(prefixLabels);\n    var lastLabelNumber = -1;\n\n    if (lastUsedLabel !== undefined) {\n        const minusPrefix = lastUsedLabel.replace(labelPrefix, '');\n        const tryNum = parseInt(minusPrefix, 10);\n        if (!isNaN(tryNum)) {\n            lastLabelNumber = tryNum;\n        }\n    }\n    var newLabelNumber = lastLabelNumber + 1;\n    var nextCurveLabel = labelPrefix + newLabelNumber;\n    // the label might be one from a removed curve so the next ones might be used\n    while (_.indexOf(usedLabels, nextCurveLabel) != -1) {\n        newLabelNumber++;\n        nextCurveLabel = labelPrefix + newLabelNumber;\n    }\n    Session.set('NextCurveLabel', nextCurveLabel);\n};\n\n// determine the next curve color and set it in the session\n// private - not exported\nconst setNextCurveColor = function () {\n    var usedColors = Session.get('UsedColors');\n    var colors = matsCollections.ColorScheme.findOne({}, {fields: {colors: 1}}).colors;\n    var lastUsedIndex = -1;\n    if (usedColors !== undefined) {\n        lastUsedIndex = _.indexOf(colors, _.last(usedColors));\n    }\n    var nextCurveColor;\n    if (lastUsedIndex !== undefined && lastUsedIndex != -1) {\n        if (lastUsedIndex < colors.length - 1) {\n            var newIndex = lastUsedIndex + 1;\n            nextCurveColor = colors[newIndex];\n            // the color might be one from a removed curve so the next ones might be used\n            while (_.indexOf(usedColors, nextCurveColor) != -1) {\n                newIndex++;\n                nextCurveColor = colors[newIndex];\n            }\n        } else {\n            // out of defaults\n            var rint = Math.round(0xffffff * Math.random());\n            nextCurveColor = 'rgb(' + (rint >> 16) + ',' + (rint >> 8 & 255) + ',' + (rint & 255) + ')';\n        }\n    } else {\n        nextCurveColor = colors[0];\n    }\n    Session.set('NextCurveColor', nextCurveColor);\n};\n\n// get the next curve color from the session\n// private - not exported\nconst getNextCurveColor = function () {\n    if (Session.get('NextCurveColor') === undefined) {\n        setNextCurveColor();\n    }\n    return Session.get('NextCurveColor');\n};\n\n// clear a used label and set the nextCurveLabel to the one just cleared\nconst clearUsedLabel = function (label) {\n    var usedLabels = Session.get('UsedLabels');\n    var newUsedLabels = _.reject(usedLabels, function (l) {\n        return l == label;\n    });\n    Session.set('UsedLabels', newUsedLabels);\n    Session.set('NextCurveLabel', label);\n};\n\n// clear a used color and set the nextCurveColor to the one just cleared\nconst clearUsedColor = function (color) {\n    var usedColors = Session.get('UsedColors');\n    var newUsedColors = _.reject(usedColors, function (c) {\n        return c == color;\n    });\n    Session.set('UsedColors', newUsedColors);\n    Session.set('NextCurveColor', color);\n};\n\n// clear all the used colors and labels and set the nextCurve values\n// to the first in the scheme and the first of the labelPrefix.\n// This is used by the removeAll\nconst clearAllUsed = function () {\n    Session.set('UsedColors', undefined);\n    var colors = matsCollections.ColorScheme.findOne({}, {fields: {colors: 1}}).colors;\n    Session.set('NextCurveColor', colors[0]);\n    Session.set('UsedLabels', undefined);\n    var labelPrefix = matsCollections.Settings.findOne({}, {fields: {LabelPrefix: 1}}).LabelPrefix;\n    Session.set('NextCurveLabel', labelPrefix + 0);\n    Session.set('Curves', []);\n};\n\n// use curves in session to determine which defaults are already used\n// and to set the usedColors in the session\n// this is used on restore settings to set up the usedColors\n// private - not exported\n//setUsedDefaults = function() {\nconst setUsedColors = function () {\n    var curves = Session.get('Curves');\n    var usedColors = [];\n    for (var i = 0; i < curves.length; i++) {\n        var color = curves[i].color;\n        usedColors.push(color);\n    }\n    Session.set('UsedColors', usedColors);\n    setNextCurveColor();\n};\n\n// private - not exported\nconst setUsedLabels = function () {\n    var curves = Session.get('Curves');\n    var usedLabels = [];\n    for (var i = 0; i < curves.length; i++) {\n        var label = curves[i].label;\n        usedLabels.push(label);\n    }\n    Session.set('UsedLabels', usedLabels);\n    setNextCurveLabel();\n};\n\nconst setUsedColorsAndLabels = function () {\n    setUsedColors();\n    setUsedLabels();\n};\n\nconst resetScatterApply = function () {\n    if (matsPlotUtils.getPlotType() == matsTypes.PlotTypes.scatter2d) {\n        Session.set('axisCurveIcon', 'fa-asterisk');\n        Session.set('xaxisCurveText', 'XAXIS NOT YET APPLIED');\n        Session.set('yaxisCurveText', 'YAXIS NOT YET APPLIED');\n        Session.set('xaxisCurveColor', 'red');\n        Session.set('yaxisCurveColor', 'red');\n        if (document.getElementById('Fit-Type-radioGroup-none') !== null) {\n            document.getElementById('Fit-Type-radioGroup-none').checked = true;\n        }\n    }\n};\n\n// add the difference curves\n// private - not exported\nconst addDiffs = function () {\n    var curves = Session.get('Curves');\n    var newCurves = Session.get('Curves');\n    // diffs is checked -- have to add diff curves\n    var curvesLength = curves.length;\n    if (curvesLength <= 1) {\n        setInfo(\"You cannot difference less than two curves!\");\n        return false;\n    }\n\n    switch (matsPlotUtils.getPlotFormat()) {\n        case matsTypes.PlotFormats.matching:\n            var baseIndex = 0; // This will probably not default to curve 0 in the future\n            for (var ci = 1; ci < curves.length; ci++) {\n                var newCurve = $.extend(true, {}, curves[ci]);\n                newCurve.label = curves[ci].label + \"-\" + curves[0].label;\n                newCurve.color = getNextCurveColor();\n                newCurve.diffFrom = [ci, baseIndex];\n                // do not create extra diff if it already exists\n                if (_.findWhere(curves, {label: newCurve.label}) === undefined) {\n                    newCurves.push(newCurve);\n                    Session.set('Curves', newCurves);\n                    setUsedColorsAndLabels();\n                }\n            }\n            break;\n        case matsTypes.PlotFormats.pairwise:\n            var baseIndex = 0; // This will probably not default to curve 0 in the future\n            for (var ci = 1; ci < curves.length; ci++) {\n                if (ci % 2 != 0) {  // only diff on odd curves against previous curve\n                    var base_index = ci - 1;\n\n                    var newCurve = $.extend(true, {}, curves[ci]);\n                    newCurve.label = curves[ci].label + \"-\" + curves[base_index].label;\n                    newCurve.color = getNextCurveColor();\n                    newCurve.diffFrom = [ci, baseIndex];\n                    // do not create extra diff if it already exists\n                    if (_.findWhere(curves, {label: newCurve.label}) === undefined) {\n                        newCurves.push(newCurve);\n                        Session.set('Curves', newCurves);\n                        setUsedColorsAndLabels();\n                    }\n                }\n            }\n            break;\n        case matsTypes.PlotFormats.absolute:\n            var baseIndex = 0; // This will probably not default to curve 0 in the future\n            for (var ci = 1; ci < curves.length; ci++) {\n                var newCurve = $.extend(true, {}, curves[ci]);\n                newCurve.label = curves[ci].label + \"-\" + curves[0].label;\n                newCurve.color = getNextCurveColor();\n                newCurve.diffFrom = [ci, baseIndex];\n                // do not create extra diff if it already exists\n                if (_.findWhere(curves, {label: newCurve.label}) === undefined) {\n                    newCurves.push(newCurve);\n                    Session.set('Curves', newCurves);\n                    setUsedColorsAndLabels();\n                }\n            }\n            break;\n    }\n};\n\n\n// remove difference curves\n// private - not exported\nconst removeDiffs = function () {\n    var curves = Session.get('Curves');\n    var newCurves = _.reject(curves, function (curve) {\n        return curve.diffFrom != null\n    });\n    Session.set('Curves', newCurves);\n    setUsedColorsAndLabels();\n};\n\n// resolve the difference curves\n// (used after adding or removing a curve while the show diffs box is checked)\nconst checkDiffs = function () {\n    var curves = Session.get('Curves');\n    if (matsPlotUtils.getPlotType() == matsTypes.PlotTypes.scatter2d) {\n        // scatter plots have no concept of difference curves.\n        return;\n    }\n    var plotFormat = matsPlotUtils.getPlotFormat();\n    if (curves.length > 1) {\n        if (plotFormat !== matsTypes.PlotFormats.none) {\n            removeDiffs();\n            addDiffs();\n        } else {\n            removeDiffs();\n        }\n    }\n};\n\n// method to display the appropriate selectors for a timeseries curve\nconst showTimeseriesFace = function () {\n    // move dates selector to plot parameters - one date range for all curves\n    if (document.getElementById('plot-type-' + matsTypes.PlotTypes.timeSeries).checked === true) {\n        var faceOptions = {\n            'curve-dates': 'none',\n            'dates': 'block',\n            'region': 'block',\n            'statistic': 'block',\n            'threshold': 'block',\n            'pres-level': 'block',\n            'forecast-length': 'block',\n            'dieoff-type': 'none',\n            'average': 'block',\n            'valid-time': 'block',\n            'utc-cycle-start': 'none',\n            'histogram-bin-controls': 'none',\n            'histogram-yaxis-controls': 'none',\n            'bin-number': 'none',\n            'bin-bounds': 'none',\n            'truth': 'block',\n            'sites' : 'none',\n            'sitesMap' : 'none',\n            'x-axis-parameter': 'none',\n            'y-axis-parameter': 'none'\n        };\n        const faceSelectors = Object.keys(faceOptions);\n        var elem;\n        for (var fidx = 0; fidx < faceSelectors.length; fidx++) {\n            elem = document.getElementById(faceSelectors[fidx] + '-item');\n            if (elem && elem.style) {\n                elem.style.display = faceOptions[faceSelectors[fidx]];\n            }\n        }\n        elem = document.getElementById(matsTypes.PlotTypes.scatter2d);\n        if (elem && elem.style) {\n            elem.style.display = \"none\";\n        }\n        Session.set('plotType', matsTypes.PlotTypes.timeSeries);\n        // matsParamUtils.setAllParamsToDefault();\n        Session.set('lastUpdate', Date.now());\n    }\n};\n\n// method to display the appropriate selectors for a profile curve\nconst showProfileFace = function () {\n    // move dates selector to curve parameters - one date range for each curve\n    if (document.getElementById('plot-type-' + matsTypes.PlotTypes.profile).checked === true) {\n        var faceOptions = {\n            'curve-dates': 'block',\n            'dates': 'none',\n            'region': 'block',\n            'statistic': 'block',\n            'threshold': 'block',\n            'pres-level': 'none',\n            'forecast-length': 'block',\n            'dieoff-type': 'none',\n            'average': 'none',\n            'valid-time': 'block',\n            'utc-cycle-start': 'none',\n            'histogram-bin-controls': 'none',\n            'histogram-yaxis-controls': 'none',\n            'bin-number': 'none',\n            'bin-bounds': 'none',\n            'truth': 'block',\n            'sites' : 'none',\n            'sitesMap' : 'none',\n            'x-axis-parameter': 'none',\n            'y-axis-parameter': 'none'\n        };\n        const faceSelectors = Object.keys(faceOptions);\n        var elem;\n        for (var fidx = 0; fidx < faceSelectors.length; fidx++) {\n            elem = document.getElementById(faceSelectors[fidx] + '-item');\n            if (elem && elem.style) {\n                elem.style.display = faceOptions[faceSelectors[fidx]];\n            }\n        }\n        elem = document.getElementById(matsTypes.PlotTypes.scatter2d);\n        if (elem && elem.style) {\n            elem.style.display = \"none\";\n        }\n        Session.set('plotType', matsTypes.PlotTypes.profile);\n        // matsParamUtils.setAllParamsToDefault();\n        Session.set('lastUpdate', Date.now());\n    }\n};\n\n// method to display the appropriate selectors for a dieoff curve\nconst showDieOffFace = function () {\n    // move dates selector to curve parameters - one date range for each curve\n    if (document.getElementById('plot-type-' + matsTypes.PlotTypes.dieoff).checked === true) {\n        var faceOptions = {\n            'curve-dates': 'block',\n            'dates': 'none',\n            'region': 'block',\n            'statistic': 'block',\n            'threshold': 'block',\n            'pres-level': 'block',\n            'forecast-length': 'none',\n            'dieoff-type': 'block',\n            'average': 'none',\n            'valid-time': 'block',\n            'utc-cycle-start': 'none',\n            'histogram-bin-controls': 'none',\n            'histogram-yaxis-controls': 'none',\n            'bin-number': 'none',\n            'bin-bounds': 'none',\n            'truth': 'block',\n            'sites' : 'none',\n            'sitesMap' : 'none',\n            'x-axis-parameter': 'none',\n            'y-axis-parameter': 'none'\n        };\n        const faceSelectors = Object.keys(faceOptions);\n        var elem;\n        for (var fidx = 0; fidx < faceSelectors.length; fidx++) {\n            elem = document.getElementById(faceSelectors[fidx] + '-item');\n            if (elem && elem.style) {\n                elem.style.display = faceOptions[faceSelectors[fidx]];\n            }\n        }\n        // reset the value for dieoff-type, so that the checkHideOther routine will work\n        const param = matsParamUtils.getParameterForName('dieoff-type');\n        matsParamUtils.setValueTextForParamName(param.name, param.default);\n\n        elem = document.getElementById(matsTypes.PlotTypes.scatter2d);\n        if (elem && elem.style) {\n            elem.style.display = \"none\";\n        }\n        Session.set('plotType', matsTypes.PlotTypes.dieoff);\n        // matsParamUtils.setAllParamsToDefault();\n        Session.set('lastUpdate', Date.now());\n    }\n};\n\n// method to display the appropriate selectors for a threshold curve\nconst showThresholdFace = function () {\n    // move dates selector to curve parameters - one date range for each curve\n    if (document.getElementById('plot-type-' + matsTypes.PlotTypes.threshold).checked === true) {\n        var faceOptions = {\n            'curve-dates': 'block',\n            'dates': 'none',\n            'region': 'block',\n            'statistic': 'block',\n            'threshold': 'none',\n            'pres-level': 'block',\n            'forecast-length': 'block',\n            'dieoff-type': 'none',\n            'average': 'none',\n            'valid-time': 'block',\n            'utc-cycle-start': 'none',\n            'histogram-bin-controls': 'none',\n            'histogram-yaxis-controls': 'none',\n            'bin-number': 'none',\n            'bin-bounds': 'none',\n            'truth': 'block',\n            'sites' : 'none',\n            'sitesMap' : 'none',\n            'x-axis-parameter': 'none',\n            'y-axis-parameter': 'none'\n        };\n        const faceSelectors = Object.keys(faceOptions);\n        var elem;\n        for (var fidx = 0; fidx < faceSelectors.length; fidx++) {\n            elem = document.getElementById(faceSelectors[fidx] + '-item');\n            if (elem && elem.style) {\n                elem.style.display = faceOptions[faceSelectors[fidx]];\n            }\n        }\n        elem = document.getElementById(matsTypes.PlotTypes.scatter2d);\n        if (elem && elem.style) {\n            elem.style.display = \"none\";\n        }\n        Session.set('plotType', matsTypes.PlotTypes.threshold);\n        // matsParamUtils.setAllParamsToDefault();\n        Session.set('lastUpdate', Date.now());\n    }\n};\n\n// method to display the appropriate selectors for a valid time curve\nconst showValidTimeFace = function () {\n    // move dates selector to curve parameters - one date range for each curve\n    if (document.getElementById('plot-type-' + matsTypes.PlotTypes.validtime).checked === true) {\n        var faceOptions = {\n            'curve-dates': 'block',\n            'dates': 'none',\n            'region': 'block',\n            'statistic': 'block',\n            'threshold': 'block',\n            'pres-level': 'block',\n            'forecast-length': 'block',\n            'dieoff-type': 'none',\n            'average': 'none',\n            'valid-time': 'none',\n            'utc-cycle-start': 'none',\n            'histogram-bin-controls': 'none',\n            'histogram-yaxis-controls': 'none',\n            'bin-number': 'none',\n            'bin-bounds': 'none',\n            'truth': 'block',\n            'sites' : 'none',\n            'sitesMap' : 'none',\n            'x-axis-parameter': 'none',\n            'y-axis-parameter': 'none'\n        };\n        const faceSelectors = Object.keys(faceOptions);\n        var elem;\n        for (var fidx = 0; fidx < faceSelectors.length; fidx++) {\n            elem = document.getElementById(faceSelectors[fidx] + '-item');\n            if (elem && elem.style) {\n                elem.style.display = faceOptions[faceSelectors[fidx]];\n            }\n        }\n        elem = document.getElementById(matsTypes.PlotTypes.scatter2d);\n        if (elem && elem.style) {\n            elem.style.display = \"none\";\n        }\n        Session.set('plotType', matsTypes.PlotTypes.validtime);\n        // matsParamUtils.setAllParamsToDefault();\n        Session.set('lastUpdate', Date.now());\n    }\n};\n\n// method to display the appropriate selectors for a daily model cycle curve\nconst showDailyModelCycleFace = function () {\n    // move dates selector to plot parameters - one date range for all curves\n    if (document.getElementById('plot-type-' + matsTypes.PlotTypes.dailyModelCycle).checked === true) {\n        var faceOptions = {\n            'curve-dates': 'none',\n            'dates': 'block',\n            'region': 'block',\n            'statistic': 'block',\n            'threshold': 'block',\n            'pres-level': 'block',\n            'forecast-length': 'none',\n            'dieoff-type': 'none',\n            'average': 'none',\n            'valid-time': 'none',\n            'utc-cycle-start': 'block',\n            'histogram-bin-controls': 'none',\n            'histogram-yaxis-controls': 'none',\n            'bin-number': 'none',\n            'bin-bounds': 'none',\n            'truth': 'block',\n            'sites' : 'none',\n            'sitesMap' : 'none',\n            'x-axis-parameter': 'none',\n            'y-axis-parameter': 'none'\n        };\n        const faceSelectors = Object.keys(faceOptions);\n        var elem;\n        for (var fidx = 0; fidx < faceSelectors.length; fidx++) {\n            elem = document.getElementById(faceSelectors[fidx] + '-item');\n            if (elem && elem.style) {\n                elem.style.display = faceOptions[faceSelectors[fidx]];\n            }\n        }\n        elem = document.getElementById(matsTypes.PlotTypes.scatter2d);\n        if (elem && elem.style) {\n            elem.style.display = \"none\";\n        }\n        Session.set('plotType', matsTypes.PlotTypes.dailyModelCycle);\n        // matsParamUtils.setAllParamsToDefault();\n        Session.set('lastUpdate', Date.now());\n    }\n};\n\n// method to display the appropriate selectors for a reliability curve\nconst showReliabilityFace = function () {\n    // move dates selector to curve parameters - one date range for each curve\n    if (document.getElementById('plot-type-' + matsTypes.PlotTypes.reliability).checked === true) {\n        var faceOptions = {\n            'curve-dates': 'none',\n            'dates': 'block',\n            'region': 'block',\n            'statistic': 'block',\n            'threshold': 'block',\n            'pres-level': 'block',\n            'forecast-length': 'block',\n            'dieoff-type': 'none',\n            'average': 'block',\n            'valid-time': 'block',\n            'utc-cycle-start': 'none',\n            'histogram-bin-controls': 'none',\n            'histogram-yaxis-controls': 'none',\n            'bin-number': 'none',\n            'bin-bounds': 'none',\n            'truth': 'none',\n            'sites' : 'none',\n            'sitesMap' : 'none',\n            'x-axis-parameter': 'none',\n            'y-axis-parameter': 'none'\n        };\n        const faceSelectors = Object.keys(faceOptions);\n        var elem;\n        for (var fidx = 0; fidx < faceSelectors.length; fidx++) {\n            elem = document.getElementById(faceSelectors[fidx] + '-item');\n            if (elem && elem.style) {\n                elem.style.display = faceOptions[faceSelectors[fidx]];\n            }\n        }\n        elem = document.getElementById(matsTypes.PlotTypes.scatter2d);\n        if (elem && elem.style) {\n            elem.style.display = \"none\";\n        }\n        Session.set('plotType', matsTypes.PlotTypes.reliability);\n        // matsParamUtils.setAllParamsToDefault();\n        Session.set('lastUpdate', Date.now());\n    }\n};\n\n// method to display the appropriate selectors for a map\nconst showMapFace = function () {\n    // move dates selector to plot parameters - one date range for all curves\n    if (document.getElementById('plot-type-' + matsTypes.PlotTypes.map).checked === true) {\n        var faceOptions;\n        faceOptions = {\n            'curve-dates': 'none',\n            'dates': 'block',\n            'region': 'none',\n            'statistic': 'none',\n            'threshold': 'none',\n            'pres-level': 'block',\n            'forecast-length': 'block',\n            'dieoff-type': 'none',\n            'average': 'none',\n            'valid-time': 'block',\n            'utc-cycle-start': 'none',\n            'histogram-bin-controls': 'none',\n            'histogram-yaxis-controls': 'none',\n            'bin-number': 'none',\n            'bin-bounds': 'none',\n            'truth': 'none',\n            'sites': 'block',\n            'sitesMap': 'block',\n            'x-axis-parameter': 'none',\n            'y-axis-parameter': 'none'\n        };\n        const faceSelectors = Object.keys(faceOptions);\n        var elem;\n        for (var fidx = 0; fidx < faceSelectors.length; fidx++) {\n            elem = document.getElementById(faceSelectors[fidx] + '-item');\n            if (elem && elem.style) {\n                elem.style.display = faceOptions[faceSelectors[fidx]];\n            }\n        }\n        elem = document.getElementById(matsTypes.PlotTypes.scatter2d);\n        if (elem && elem.style) {\n            elem.style.display = \"none\";\n        }\n        Session.set('plotType', matsTypes.PlotTypes.map);\n        // matsParamUtils.setAllParamsToDefault();\n        Session.set('lastUpdate', Date.now());\n    }\n};\n\n// method to display the appropriate selectors for a histogram\nconst showHistogramFace = function () {\n    // move dates selector to curve parameters - one date range for each curve\n    if (document.getElementById('plot-type-' + matsTypes.PlotTypes.histogram).checked === true) {\n        var faceOptions = {\n            'curve-dates': 'block',\n            'dates': 'none',\n            'region': 'block',\n            'statistic': 'block',\n            'threshold': 'block',\n            'pres-level': 'block',\n            'forecast-length': 'block',\n            'dieoff-type': 'none',\n            'average': 'none',\n            'valid-time': 'block',\n            'utc-cycle-start': 'none',\n            'histogram-bin-controls': 'block',\n            'histogram-yaxis-controls': 'block',\n            'bin-number': 'none',\n            'bin-bounds': 'none',\n            'truth': 'block',\n            'sites' : 'none',\n            'sitesMap' : 'none',\n            'x-axis-parameter': 'none',\n            'y-axis-parameter': 'none'\n        };\n        const faceSelectors = Object.keys(faceOptions);\n        var elem;\n        for (var fidx = 0; fidx < faceSelectors.length; fidx++) {\n            elem = document.getElementById(faceSelectors[fidx] + '-item');\n            if (elem && elem.style) {\n                elem.style.display = faceOptions[faceSelectors[fidx]];\n            }\n        }\n        elem = document.getElementById(matsTypes.PlotTypes.scatter2d);\n        if (elem && elem.style) {\n            elem.style.display = \"none\";\n        }\n        Session.set('plotType', matsTypes.PlotTypes.histogram);\n        // matsParamUtils.setAllParamsToDefault();\n        Session.set('lastUpdate', Date.now());\n    }\n};\n\n// method to display the appropriate selectors for a contour plot\nconst showContourFace = function () {\n    // move dates selector to plot parameters - one date range for all curves\n    const isContour = document.getElementById('plot-type-' + matsTypes.PlotTypes.contour) !== null && document.getElementById('plot-type-' + matsTypes.PlotTypes.contour).checked === true;\n    const isContourDiff = document.getElementById('plot-type-' + matsTypes.PlotTypes.contourDiff) !== null && document.getElementById('plot-type-' + matsTypes.PlotTypes.contourDiff).checked === true;\n    if (isContour || isContourDiff) {\n        var faceOptions = {\n            'curve-dates': 'none',\n            'dates': 'block',\n            'region': 'block',\n            'statistic': 'block',\n            'threshold': 'block',\n            'pres-level': 'block',\n            'forecast-length': 'block',\n            'dieoff-type': 'none',\n            'average': 'none',\n            'valid-time': 'block',\n            'utc-cycle-start': 'none',\n            'histogram-bin-controls': 'none',\n            'histogram-yaxis-controls': 'none',\n            'bin-number': 'none',\n            'bin-bounds': 'none',\n            'truth': 'block',\n            'sites' : 'none',\n            'sitesMap' : 'none',\n            'x-axis-parameter': 'block',\n            'y-axis-parameter': 'block'\n        };\n        const faceSelectors = Object.keys(faceOptions);\n        var elem;\n        for (var fidx = 0; fidx < faceSelectors.length; fidx++) {\n            elem = document.getElementById(faceSelectors[fidx] + '-item');\n            if (elem && elem.style) {\n                elem.style.display = faceOptions[faceSelectors[fidx]];\n            }\n        }\n        // //need to be consistent with the x and y axis 'hideOtherFor' settings\n        // const xAxisVal = matsParamUtils.getValueForParamName('x-axis-parameter');\n        // const yAxisVal = matsParamUtils.getValueForParamName('y-axis-parameter');\n        // if (xAxisVal === 'Fcst lead time' || yAxisVal === 'Fcst lead time') {\n        //     elem = document.getElementById('forecast-length-item');\n        //     if (elem && elem.style) {\n        //         elem.style.display = 'none';\n        //     }\n        // }\n        // if (xAxisVal === 'Valid UTC hour' || yAxisVal === 'Valid UTC hour') {\n        //     elem = document.getElementById('valid-time-item');\n        //     if (elem && elem.style) {\n        //         elem.style.display = 'none';\n        //     }\n        // }\n        // if (xAxisVal === 'Pressure level' || yAxisVal === 'Pressure level') {\n        //     elem = document.getElementById('pres-level-item');\n        //     if (elem && elem.style) {\n        //         elem.style.display = 'none';\n        //     }\n        // }\n        elem = document.getElementById(matsTypes.PlotTypes.scatter2d);\n        if (elem && elem.style) {\n            elem.style.display = \"none\";\n        }\n        if (isContour) {\n            Session.set('plotType', matsTypes.PlotTypes.contour);\n        } else {\n            Session.set('plotType', matsTypes.PlotTypes.contourDiff);\n        }\n        // matsParamUtils.setAllParamsToDefault();\n        Session.set('lastUpdate', Date.now());\n    }\n};\n\n// method to display the appropriate selectors for a scatter plot\nconst showScatterFace = function () {\n    if (document.getElementById('plot-type-' + matsTypes.PlotTypes.scatter2d).checked === true) {\n        var faceOptions = {\n            'curve-dates': 'none',\n            'dates': 'block',\n            'region': 'block',\n            'statistic': 'block',\n            'threshold': 'block',\n            'pres-level': 'block',\n            'forecast-length': 'block',\n            'dieoff-type': 'none',\n            'average': 'none',\n            'valid-time': 'block',\n            'utc-cycle-start': 'none',\n            'histogram-bin-controls': 'none',\n            'histogram-yaxis-controls': 'none',\n            'bin-number': 'none',\n            'bin-bounds': 'none',\n            'truth': 'block',\n            'sites' : 'none',\n            'sitesMap' : 'none',\n            'x-axis-parameter': 'none',\n            'y-axis-parameter': 'none'\n        };\n        const faceSelectors = Object.keys(faceOptions);\n        var elem;\n        for (var fidx = 0; fidx < faceSelectors.length; fidx++) {\n            elem = document.getElementById(faceSelectors[fidx] + '-item');\n            if (elem && elem.style) {\n                elem.style.display = faceOptions[faceSelectors[fidx]];\n            }\n        }\n        elem = document.getElementById(matsTypes.PlotTypes.scatter2d);\n        if (elem && elem.style) {\n            elem.style.display = \"block\";\n        }\n        Session.set('plotType', matsTypes.PlotTypes.scatter2d);\n        Session.set('lastUpdate', Date.now());   // force curveParams to re-render\n        // matsParamUtils.setAllParamsToDefault();\n        Session.set('lastUpdate', Date.now());\n    }\n};\n\n// this is no longer used, but it was once employed by the text output routines to calculate the stats for the entire curve\nconst get_err = function (sVals, sSecs) {\n    /* THIS IS DIFFERENT FROM THE ONE IN DATA_UTILS,\n       This one does not throw away outliers and it captures minVal and maxVal\n       refer to perl error_library.pl sub  get_stats\n        to see the perl implementation of these statics calculations.\n        These should match exactly those, except that they are processed in reverse order.\n     */\n    var subVals = [];\n    var subSecs = [];\n    var sVals = sVals;\n    var sSecs = sSecs;\n    var n = sVals.length;\n    var n_good = 0;\n    var sum_d = 0;\n    var sum2_d = 0;\n    var error = \"\";\n    var i;\n    for (i = 0; i < n; i++) {\n        if (sVals[i] !== null) {\n            n_good = n_good + 1;\n            sum_d = sum_d + sVals[i];\n            sum2_d = sum2_d + sVals[i] * sVals[i];\n            subVals.push(sVals[i]);\n            subSecs.push(sSecs[i]);\n        }\n    }\n    var d_mean = sum_d / n_good;\n    var sd2 = sum2_d / n_good - d_mean * d_mean;\n    var sd = sd2 > 0 ? Math.sqrt(sd2) : sd2;\n    var sd_limit = 3 * sd;\n    //console.log(\"see error_library.pl l208 These are processed in reverse order to the perl code -  \\nmean is \" + d_mean + \" sd_limit is +/- \" + sd_limit + \" n_good is \" + n_good + \" sum_d is\" + sum_d + \" sum2_d is \" + sum2_d);\n    // find minimum delta_time, if any value missing, set null\n    var last_secs = Number.MIN_VALUE;\n    var minDelta = Number.MAX_VALUE;\n    var minSecs = Number.MAX_VALUE;\n    var max_secs = Number.MIN_VALUE;\n    var minVal = Number.MAX_VALUE;\n    var maxVal = Number.MIN_VALUE;\n    for (i = 0; i < subSecs.length; i++) {\n        var secs = (subSecs[i]);\n        var delta = Math.abs(secs - last_secs);\n        if (delta < minDelta) {\n            minDelta = delta;\n        }\n        if (secs < minSecs) {\n            minSecs = secs;\n        }\n        if (secs > max_secs) {\n            max_secs = secs;\n        }\n        last_secs = secs;\n    }\n\n    var data_wg = [];\n    var n_gaps = 0;\n    n_good = 0;\n    var sum = 0;\n    var sum2 = 0;\n    var loopTime = minSecs;\n    if (minDelta < 0) {\n        error = (\"Invalid time interval - minDelta: \" + minDelta);\n    }\n    // remove data more than $sd_limit from mean\n    for (i = 0; i < subVals.length; i++) {\n        minVal = minVal < subVals[i] ? minVal : subVals[i];\n        maxVal = maxVal > subVals[i] ? maxVal : subVals[i];\n        n_good++;\n    }\n    //console.log(\"new mean after throwing away outliers is \" + sd + \" n_good is \" + n_good + \" sum is \" + sum  + \" sum2 is \" + sum2 + \" d_mean is \" + d_mean);\n    // look for gaps.... per Bill, we only need one gap per series of gaps...\n    var lastSecond = Number.MIN_VALUE;\n\n    for (i = 0; i < subSecs.length; i++) {\n        var sec = subSecs[i];\n        if (lastSecond >= 0) {\n            if (sec - lastSecond > minDelta) {\n                // insert a gap\n                data_wg.push(null);\n                n_gaps++;\n            }\n        }\n        lastSecond = sec;\n        data_wg.push(subVals[i]);\n    }\n    //console.log (\"n_gaps: \" + n_gaps +  \" time gaps in subseries\");\n\n    //from http://www.itl.nist.gov/div898/handbook/eda/section3/eda35c.htm\n    var r = [];\n    for (var lag = 0; lag <= 1; lag++) {\n        r[lag] = 0;\n        var n_in_lag = 0;\n        for (var t = 0; t < ((n + n_gaps) - lag); t++) {\n            if (data_wg[t] != null && data_wg[t + lag] != null) {\n                r[lag] += +(data_wg[t] - d_mean) * (data_wg[t + lag] - d_mean);\n                n_in_lag++;\n            }\n        }\n        if (n_in_lag > 0 && sd > 0) {\n            r[lag] /= (n_in_lag * sd * sd);\n        } else {\n            r[lag] = null;\n        }\n        //console.log('r for lag ' + lag + \" is \" + r[lag] + \" n_in_lag is \" + n_in_lag + \" n_good is \" + n_good);\n    }\n    // Betsy Weatherhead's correction, based on lag 1\n    if (r[1] >= 1) {\n        r[1] = .99999;\n    }\n    const betsy = Math.sqrt((n_good - 1) * (1 - r[1]));\n    var stde_betsy;\n    if (betsy != 0) {\n        stde_betsy = sd / betsy;\n    } else {\n        stde_betsy = null;\n    }\n    const stats = {\n        d_mean: d_mean,\n        stde_betsy: stde_betsy,\n        sd: sd,\n        n_good: n_good,\n        lag1: r[1],\n        min: minSecs,\n        max: max_secs,\n        minVal: minVal,\n        maxVal: maxVal,\n        sum: sum_d\n    };\n    //console.log(\"stats are \" + JSON.stringify(stats));\n    // stde_betsy is standard error with auto correlation\n    //console.log(\"---------\\n\\n\");\n    return stats;\n};\n\nconst showSpinner = function () {\n    if (document.getElementById(\"spinner\")) {\n        document.getElementById(\"spinner\").style.display = \"block\";\n    }\n};\nconst hideSpinner = function () {\n    if (document.getElementById(\"spinner\")) {\n        document.getElementById(\"spinner\").style.display = \"none\";\n    }\n};\n\nexport default matsCurveUtils = {\n    resetScatterApply: resetScatterApply,\n    getUsedLabels: getUsedLabels,\n    getNextCurveLabel: getNextCurveLabel,\n    getNextCurveColor: getNextCurveColor,\n    clearAllUsed: clearAllUsed,\n    clearUsedLabel: clearUsedLabel,\n    clearUsedColor: clearUsedColor,\n    setUsedLabels: setUsedLabels,\n    setUsedColorsAndLabels: setUsedColorsAndLabels,\n    addDiffs: addDiffs,\n    removeDiffs: removeDiffs,\n    checkDiffs: checkDiffs,\n    showScatterFace: showScatterFace,\n    showTimeseriesFace: showTimeseriesFace,\n    showProfileFace: showProfileFace,\n    showDieOffFace: showDieOffFace,\n    showThresholdFace: showThresholdFace,\n    showValidTimeFace: showValidTimeFace,\n    showDailyModelCycleFace: showDailyModelCycleFace,\n    showReliabilityFace: showReliabilityFace,\n    showMapFace: showMapFace,\n    showHistogramFace: showHistogramFace,\n    showContourFace: showContourFace,\n    get_err: get_err,\n    getPlotResultData: getPlotResultData,\n    //setPlotResultData: setPlotResultData,\n    resetPlotResultData: resetPlotResultData,\n    getGraphResult: getGraphResult,\n    setGraphResult: setGraphResult,\n    resetGraphResult: resetGraphResult,\n    showSpinner: showSpinner,\n    hideSpinner: hideSpinner,\n};\n\n            "]},"sourceType":"script","hash":"3c2363e7c8c33a3ad086e745e4214abba63b5a23"}
