{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/imports/startup/server/data_curve_ops_util.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/randyp:mats-common/imports/startup/server/data_curve_ops_util.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/imports/startup/server/data_curve_ops_util.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/imports/startup/server/data_curve_ops_util.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/randyp:mats-common/imports/startup/server/data_curve_ops_util.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\n/*\n * Copyright (c) 2019 Colorado State University and Regents of the University of Colorado. All rights reserved.\n */\n// adds a horizontal black line along a specific y value\nvar getHorizontalValueLine = function (xmax, xmin, yValue, cLabel) {\n  var valueLine = {\n    \"label\": cLabel,\n    \"curveId\": cLabel,\n    \"annotation\": \"\",\n    \"name\": \"y = \" + yValue.toString(),\n    \"mode\": \"lines\",\n    \"x\": [xmin, xmax],\n    \"x_epoch\": [xmin, xmax],\n    \"y\": [yValue, yValue],\n    \"error_x\": [null, null],\n    \"error_y\": [null, null],\n    \"subVals\": [],\n    \"subSecs\": [],\n    \"subLevs\": [],\n    \"stats\": [{\n      \"d_mean\": 0,\n      \"sd\": 0,\n      \"n_good\": 0,\n      \"lag1\": 0,\n      \"stde\": 0\n    }, {\n      \"d_mean\": 0,\n      \"sd\": 0,\n      \"n_good\": 0,\n      \"lag1\": 0,\n      \"stde\": 0\n    }],\n    \"tooltip\": [\"y = \" + yValue.toString(), \"y = \" + yValue.toString()],\n    \"xmin\": xmin,\n    \"xmax\": xmax,\n    \"ymin\": yValue,\n    \"ymax\": yValue,\n    \"line\": {\n      \"color\": \"rgb(0,0,0)\"\n    }\n  };\n  return valueLine;\n}; // adds a vertical black line along a specific x value\n\n\nvar getVerticalValueLine = function (ymax, ymin, xValue, cLabel) {\n  var valueLine = {\n    \"label\": cLabel,\n    \"curveId\": cLabel,\n    \"annotation\": \"\",\n    \"name\": \"x = \" + xValue.toString(),\n    \"mode\": \"lines\",\n    \"x\": [xValue, xValue],\n    \"y\": [ymin, ymax],\n    \"error_x\": [null, null],\n    \"error_y\": [null, null],\n    \"subVals\": [],\n    \"subSecs\": [],\n    \"subLevs\": [],\n    \"stats\": [{\n      \"d_mean\": 0,\n      \"sd\": 0,\n      \"n_good\": 0,\n      \"lag1\": 0,\n      \"stde\": 0\n    }, {\n      \"d_mean\": 0,\n      \"sd\": 0,\n      \"n_good\": 0,\n      \"lag1\": 0,\n      \"stde\": 0\n    }],\n    \"tooltip\": [\"x = \" + xValue.toString(), \"x = \" + xValue.toString()],\n    \"xmin\": xValue,\n    \"xmax\": xValue,\n    \"ymin\": ymin,\n    \"ymax\": ymax,\n    \"line\": {\n      \"color\": \"rgb(0,0,0)\"\n    }\n  };\n  return valueLine;\n}; // adds a linear line\n\n\nvar getLinearValueLine = function (xmax, xmin, ymax, ymin, cLabel) {\n  var valueLine = {\n    \"label\": cLabel,\n    \"curveId\": cLabel,\n    \"annotation\": \"\",\n    \"name\": cLabel,\n    \"mode\": \"lines\",\n    \"x\": [xmin, xmax],\n    \"x_epoch\": [xmin, xmax],\n    \"y\": [ymin, ymax],\n    \"error_x\": [null, null],\n    \"error_y\": [null, null],\n    \"subVals\": [],\n    \"subSecs\": [],\n    \"subLevs\": [],\n    \"stats\": [{\n      \"d_mean\": 0,\n      \"sd\": 0,\n      \"n_good\": 0,\n      \"lag1\": 0,\n      \"stde\": 0\n    }, {\n      \"d_mean\": 0,\n      \"sd\": 0,\n      \"n_good\": 0,\n      \"lag1\": 0,\n      \"stde\": 0\n    }],\n    \"tooltip\": \"\",\n    \"xmin\": xmin,\n    \"xmax\": xmax,\n    \"ymin\": ymin,\n    \"ymax\": ymax,\n    \"line\": {\n      \"color\": \"rgb(0,0,0)\"\n    }\n  };\n  return valueLine;\n}; // provides curve options for all plot types with an independent x axis and a dependent y axis\n\n\nvar generateSeriesCurveOptions = function (curve, curveIndex, axisMap, dataSeries) {\n  var label = curve['label'];\n  var annotation = curve['annotation']; // adjust axes for later setting of the plot options\n\n  var ymin = curve['ymin'];\n  var ymax = curve['ymax'];\n  var xmin = curve['xmin'];\n  var xmax = curve['xmax'];\n  var axisKey = curve['axisKey'];\n\n  if (axisKey in axisMap) {\n    axisMap[axisKey].axisLabel = axisKey;\n    axisMap[axisKey].ymin = ymin < axisMap[axisKey].ymin ? ymin : axisMap[axisKey].ymin;\n    axisMap[axisKey].ymax = ymax > axisMap[axisKey].ymax ? ymax : axisMap[axisKey].ymax;\n    axisMap[axisKey].xmin = xmin < axisMap[axisKey].xmin ? xmin : axisMap[axisKey].xmin;\n    axisMap[axisKey].xmax = xmax > axisMap[axisKey].xmax ? xmax : axisMap[axisKey].xmax;\n  } else {\n    axisMap[axisKey] = {\n      index: Object.keys(axisMap).length + 1,\n      xmin: xmin,\n      xmax: xmax,\n      ymin: ymin,\n      ymax: ymax,\n      axisLabel: axisKey\n    };\n  }\n\n  var axisNumber = Object.keys(axisMap).indexOf(axisKey);\n  var error_y_temp = {\n    error_y: {\n      array: dataSeries.error_y,\n      thickness: 1,\n      // set the thickness of the error bars\n      color: curve['color'],\n      visible: false // changed later if matching\n      // width: 0\n\n    }\n  };\n  var curveOptions = (0, _objectSpread2.default)({}, {\n    label: label,\n    curveId: label,\n    name: label,\n    xaxis: \"x1\",\n    yaxis: \"y\" + (axisNumber + 1),\n    annotation: annotation,\n    annotateColor: curve['color'],\n    mode: \"lines+markers\",\n    marker: {\n      symbol: \"circle\",\n      color: curve['color'],\n      size: 8\n    },\n    line: {\n      dash: 'solid',\n      color: curve['color'],\n      width: 2\n    },\n    visible: true\n  }, dataSeries);\n  delete curveOptions.error_y;\n  curveOptions['error_y'] = error_y_temp.error_y;\n  return curveOptions;\n}; // provides curve options for all plot types with an independent y axis and a dependent x axis\n\n\nvar generateProfileCurveOptions = function (curve, curveIndex, axisMap, dataProfile) {\n  var label = curve['label'];\n  var annotation = curve['annotation']; // adjust axes for later setting of the plot options\n\n  var ymin = curve['ymin'];\n  var ymax = curve['ymax'];\n  var xmin = curve['xmin'];\n  var xmax = curve['xmax'];\n  var axisKey = curve['axisKey'];\n\n  if (axisKey in axisMap) {\n    axisMap[axisKey].axisLabel = axisKey;\n    axisMap[axisKey].ymin = ymin < axisMap[axisKey].ymin ? ymin : axisMap[axisKey].ymin;\n    axisMap[axisKey].ymax = ymax > axisMap[axisKey].ymax ? ymax : axisMap[axisKey].ymax;\n    axisMap[axisKey].xmin = xmin < axisMap[axisKey].xmin ? xmin : axisMap[axisKey].xmin;\n    axisMap[axisKey].xmax = xmax > axisMap[axisKey].xmax ? xmax : axisMap[axisKey].xmax;\n  } else {\n    axisMap[axisKey] = {\n      index: Object.keys(axisMap).length + 1,\n      xmin: xmin,\n      xmax: xmax,\n      ymin: ymin,\n      ymax: ymax,\n      axisLabel: axisKey\n    };\n  }\n\n  var axisNumber = Object.keys(axisMap).indexOf(axisKey);\n  var error_x_temp = {\n    error_x: {\n      array: dataProfile.error_x,\n      thickness: 1,\n      // set the thickness of the error bars\n      color: curve['color'],\n      visible: false // changed later if matching\n      // width: 0\n\n    }\n  };\n  var curveOptions = (0, _objectSpread2.default)({}, {\n    label: label,\n    curveId: label,\n    name: label,\n    xaxis: \"x\" + (axisNumber + 1),\n    yaxis: \"y1\",\n    annotation: annotation,\n    annotateColor: curve['color'],\n    mode: \"lines+markers\",\n    marker: {\n      symbol: \"circle\",\n      color: curve['color'],\n      size: 8\n    },\n    line: {\n      dash: 'solid',\n      color: curve['color'],\n      width: 2\n    },\n    visible: true\n  }, dataProfile);\n  delete curveOptions.error_x;\n  curveOptions['error_x'] = error_x_temp.error_x;\n  return curveOptions;\n}; // provides curve options for reliability diagrams\n\n\nvar generateReliabilityCurveOptions = function (curve, curveIndex, axisMap, dataSeries) {\n  var label = curve['label'];\n  var annotation = curve['annotation']; // adjust axes for later setting of the plot options\n\n  var ymin = curve['ymin'];\n  var ymax = curve['ymax'];\n  var xmin = curve['xmin'];\n  var xmax = curve['xmax'];\n  var axisKey = curve['axisKey'];\n\n  if (axisKey in axisMap) {\n    axisMap[axisKey].axisLabel = axisKey;\n    axisMap[axisKey].ymin = ymin < axisMap[axisKey].ymin ? ymin : axisMap[axisKey].ymin;\n    axisMap[axisKey].ymax = ymax > axisMap[axisKey].ymax ? ymax : axisMap[axisKey].ymax;\n    axisMap[axisKey].xmin = xmin < axisMap[axisKey].xmin ? xmin : axisMap[axisKey].xmin;\n    axisMap[axisKey].xmax = xmax > axisMap[axisKey].xmax ? xmax : axisMap[axisKey].xmax;\n  } else {\n    axisMap[axisKey] = {\n      index: Object.keys(axisMap).length + 1,\n      xmin: xmin,\n      xmax: xmax,\n      ymin: ymin,\n      ymax: ymax,\n      axisLabel: axisKey\n    };\n  }\n\n  var axisNumber = Object.keys(axisMap).indexOf(axisKey);\n  var error_y_temp = {\n    error_y: {\n      array: dataSeries.error_y,\n      thickness: 1,\n      // set the thickness of the error bars\n      color: curve['color'],\n      visible: false // changed later if matching\n      // width: 0\n\n    }\n  };\n  var curveOptions = (0, _objectSpread2.default)({}, {\n    label: label,\n    curveId: label,\n    name: label,\n    xaxis: \"x1\",\n    yaxis: \"y\" + (axisNumber + 1),\n    annotation: annotation,\n    annotateColor: curve['color'],\n    mode: \"lines+markers\",\n    marker: {\n      symbol: \"circle\",\n      color: curve['color'],\n      size: 8\n    },\n    line: {\n      dash: 'solid',\n      color: curve['color'],\n      width: 2\n    },\n    visible: true\n  }, dataSeries);\n  delete curveOptions.error_y;\n  curveOptions['error_y'] = error_y_temp.error_y;\n  return curveOptions;\n}; // provides curve options for all plot types with an independent x axis and a dependent y axis\n\n\nvar generateBarChartCurveOptions = function (curve, curveIndex, axisMap, dataBars) {\n  var label = curve['label'];\n  var annotation = curve['annotation']; // adjust axes for later setting of the plot options\n\n  var ymin = curve['ymin'];\n  var ymax = curve['ymax'];\n  var xmin = curve['xmin'];\n  var xmax = curve['xmax'];\n  var axisKey = curve['axisKey'];\n\n  if (axisKey in axisMap) {\n    axisMap[axisKey].axisLabel = axisKey;\n    axisMap[axisKey].ymin = ymin < axisMap[axisKey].ymin ? ymin : axisMap[axisKey].ymin;\n    axisMap[axisKey].ymax = ymax > axisMap[axisKey].ymax ? ymax : axisMap[axisKey].ymax;\n    axisMap[axisKey].xmin = xmin < axisMap[axisKey].xmin ? xmin : axisMap[axisKey].xmin;\n    axisMap[axisKey].xmax = xmax > axisMap[axisKey].xmax ? xmax : axisMap[axisKey].xmax;\n  } else {\n    axisMap[axisKey] = {\n      index: Object.keys(axisMap).length + 1,\n      xmin: xmin,\n      xmax: xmax,\n      ymin: ymin,\n      ymax: ymax,\n      axisLabel: axisKey\n    };\n  }\n\n  var curveOptions = (0, _objectSpread2.default)({}, {\n    label: label,\n    curveId: label,\n    name: label,\n    annotation: annotation,\n    annotateColor: curve['color'],\n    marker: {\n      color: curve['color'],\n      line: {\n        color: \"rgb(0,0,0)\"\n      }\n    },\n    type: 'bar',\n    visible: true\n  }, dataBars);\n  return curveOptions;\n};\n\nvar generateMapCurveOptions = function (curve, dataSeries) {\n  var markerSizes = dataSeries.queryVal.map(function (val) {\n    return Math.ceil(Math.abs(val * 4)) + 2;\n  });\n  var label = curve['label'];\n  var curveOptions = (0, _objectSpread2.default)({}, {\n    label: label,\n    curveId: label,\n    name: label,\n    type: 'scattermapbox',\n    mode: 'markers',\n    marker: {\n      color: dataSeries.color,\n      size: markerSizes,\n      opacity: 0\n    }\n  }, dataSeries);\n  delete curveOptions.color;\n  return curveOptions;\n};\n\nvar generateMapColorTextOptions = function (label, dataSeries) {\n  var curveOptions = (0, _objectSpread2.default)({}, {\n    label: label,\n    type: 'scattermapbox',\n    mode: 'markers+text',\n    marker: {\n      opacity: 0\n    },\n    textfont: {\n      family: 'sans serif',\n      // size: 18,\n      color: dataSeries.color\n    },\n    hoverinfo: 'skip',\n    visible: true\n  }, dataSeries);\n  delete curveOptions.color;\n  return curveOptions;\n};\n\nvar generateContourCurveOptions = function (curve, axisMap, dataset) {\n  var label = curve['label'];\n  var annotation = curve['annotation'];\n  var unitKey = curve['unitKey'];\n  var curveOptions = (0, _objectSpread2.default)({}, {\n    label: label,\n    curveId: label,\n    name: label,\n    annotation: annotation,\n    annotateColor: curve['color'],\n    xAxisKey: curve['xAxisKey'],\n    yAxisKey: curve['yAxisKey'],\n    marker: {\n      color: curve['color']\n    },\n    type: 'contour',\n    autocontour: false,\n    ncontours: 15,\n    // apparently plotly regards this as a \"less than or equal to\" field\n    contours: {\n      // these are only used if autocontour is set to false and ncontour is disregarded\n      start: dataset.zmin + (dataset.zmax - dataset.zmin) / 16,\n      end: dataset.zmax - (dataset.zmax - dataset.zmin) / 16,\n      size: (dataset.zmax - dataset.zmin) / 16,\n      showlabels: false\n    },\n    colorscale: 'RdBu',\n    reversescale: false,\n    colorbar: {\n      title: unitKey,\n      titleside: 'right',\n      titlefont: {\n        size: 20,\n        family: 'Arial, sans-serif'\n      }\n    },\n    // connectgaps: true,   // this option will interpolate to fill in nulls\n    visible: true\n  }, dataset);\n  return curveOptions;\n};\n\nmodule.exportDefault(matsDataCurveOpsUtils = {\n  getHorizontalValueLine: getHorizontalValueLine,\n  getVerticalValueLine: getVerticalValueLine,\n  getLinearValueLine: getLinearValueLine,\n  generateSeriesCurveOptions: generateSeriesCurveOptions,\n  generateReliabilityCurveOptions: generateReliabilityCurveOptions,\n  generateProfileCurveOptions: generateProfileCurveOptions,\n  generateBarChartCurveOptions: generateBarChartCurveOptions,\n  generateMapCurveOptions: generateMapCurveOptions,\n  generateMapColorTextOptions: generateMapColorTextOptions,\n  generateContourCurveOptions: generateContourCurveOptions\n});","map":{"version":3,"sources":["packages/randyp:mats-common/imports/startup/server/data_curve_ops_util.js"],"names":["getHorizontalValueLine","xmax","xmin","yValue","cLabel","valueLine","toString","getVerticalValueLine","ymax","ymin","xValue","getLinearValueLine","generateSeriesCurveOptions","curve","curveIndex","axisMap","dataSeries","label","annotation","axisKey","axisLabel","index","Object","keys","length","axisNumber","indexOf","error_y_temp","error_y","array","thickness","color","visible","curveOptions","curveId","name","xaxis","yaxis","annotateColor","mode","marker","symbol","size","line","dash","width","generateProfileCurveOptions","dataProfile","error_x_temp","error_x","generateReliabilityCurveOptions","generateBarChartCurveOptions","dataBars","type","generateMapCurveOptions","markerSizes","queryVal","map","val","Math","ceil","abs","opacity","generateMapColorTextOptions","textfont","family","hoverinfo","generateContourCurveOptions","dataset","unitKey","xAxisKey","yAxisKey","autocontour","ncontours","contours","start","zmin","zmax","end","showlabels","colorscale","reversescale","colorbar","title","titleside","titlefont","module","exportDefault","matsDataCurveOpsUtils"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2019 Colorado State University and Regents of the University of Colorado. All rights reserved.\n */\n\n// adds a horizontal black line along a specific y value\nconst getHorizontalValueLine = function (xmax, xmin, yValue, cLabel) {\n\n    const valueLine = {\n        \"label\": cLabel,\n        \"curveId\": cLabel,\n        \"annotation\": \"\",\n        \"name\": \"y = \" + yValue.toString(),\n        \"mode\": \"lines\",\n        \"x\": [xmin, xmax],\n        \"x_epoch\": [xmin, xmax],\n        \"y\": [yValue, yValue],\n        \"error_x\": [null, null],\n        \"error_y\": [null, null],\n        \"subVals\": [],\n        \"subSecs\": [],\n        \"subLevs\": [],\n        \"stats\": [{\"d_mean\": 0, \"sd\": 0, \"n_good\": 0, \"lag1\": 0, \"stde\": 0}, {\n            \"d_mean\": 0,\n            \"sd\": 0,\n            \"n_good\": 0,\n            \"lag1\": 0,\n            \"stde\": 0\n        }],\n        \"tooltip\": [\"y = \" + yValue.toString(), \"y = \" + yValue.toString()],\n        \"xmin\": xmin,\n        \"xmax\": xmax,\n        \"ymin\": yValue,\n        \"ymax\": yValue,\n        \"line\": {\n            \"color\": \"rgb(0,0,0)\",\n        }\n    };\n\n    return valueLine\n};\n\n// adds a vertical black line along a specific x value\nconst getVerticalValueLine = function (ymax, ymin, xValue, cLabel) {\n\n    const valueLine = {\n        \"label\": cLabel,\n        \"curveId\": cLabel,\n        \"annotation\": \"\",\n        \"name\": \"x = \" + xValue.toString(),\n        \"mode\": \"lines\",\n        \"x\": [xValue, xValue],\n        \"y\": [ymin, ymax],\n        \"error_x\": [null, null],\n        \"error_y\": [null, null],\n        \"subVals\": [],\n        \"subSecs\": [],\n        \"subLevs\": [],\n        \"stats\": [{\"d_mean\": 0, \"sd\": 0, \"n_good\": 0, \"lag1\": 0, \"stde\": 0}, {\n            \"d_mean\": 0,\n            \"sd\": 0,\n            \"n_good\": 0,\n            \"lag1\": 0,\n            \"stde\": 0\n        }],\n        \"tooltip\": [\"x = \" + xValue.toString(), \"x = \" + xValue.toString()],\n        \"xmin\": xValue,\n        \"xmax\": xValue,\n        \"ymin\": ymin,\n        \"ymax\": ymax,\n        \"line\": {\n            \"color\": \"rgb(0,0,0)\",\n        }\n    };\n\n    return valueLine\n};\n\n// adds a linear line\nconst getLinearValueLine = function (xmax, xmin, ymax, ymin, cLabel) {\n\n    const valueLine = {\n        \"label\": cLabel,\n        \"curveId\": cLabel,\n        \"annotation\": \"\",\n        \"name\": cLabel,\n        \"mode\": \"lines\",\n        \"x\": [xmin, xmax],\n        \"x_epoch\": [xmin, xmax],\n        \"y\": [ymin, ymax],\n        \"error_x\": [null, null],\n        \"error_y\": [null, null],\n        \"subVals\": [],\n        \"subSecs\": [],\n        \"subLevs\": [],\n        \"stats\": [{\"d_mean\": 0, \"sd\": 0, \"n_good\": 0, \"lag1\": 0, \"stde\": 0}, {\n            \"d_mean\": 0,\n            \"sd\": 0,\n            \"n_good\": 0,\n            \"lag1\": 0,\n            \"stde\": 0\n        }],\n        \"tooltip\": \"\",\n        \"xmin\": xmin,\n        \"xmax\": xmax,\n        \"ymin\": ymin,\n        \"ymax\": ymax,\n        \"line\": {\n            \"color\": \"rgb(0,0,0)\",\n        }\n    };\n\n    return valueLine\n};\n\n// provides curve options for all plot types with an independent x axis and a dependent y axis\nconst generateSeriesCurveOptions = function (curve, curveIndex, axisMap, dataSeries) {\n\n    const label = curve['label'];\n    const annotation = curve['annotation'];\n\n    // adjust axes for later setting of the plot options\n    const ymin = curve['ymin'];\n    const ymax = curve['ymax'];\n    const xmin = curve['xmin'];\n    const xmax = curve['xmax'];\n    const axisKey = curve['axisKey'];\n    if (axisKey in axisMap) {\n        axisMap[axisKey].axisLabel = axisKey;\n        axisMap[axisKey].ymin = ymin < axisMap[axisKey].ymin ? ymin : axisMap[axisKey].ymin;\n        axisMap[axisKey].ymax = ymax > axisMap[axisKey].ymax ? ymax : axisMap[axisKey].ymax;\n        axisMap[axisKey].xmin = xmin < axisMap[axisKey].xmin ? xmin : axisMap[axisKey].xmin;\n        axisMap[axisKey].xmax = xmax > axisMap[axisKey].xmax ? xmax : axisMap[axisKey].xmax;\n    } else {\n        axisMap[axisKey] = {\n            index: Object.keys(axisMap).length + 1,\n            xmin: xmin,\n            xmax: xmax,\n            ymin: ymin,\n            ymax: ymax,\n            axisLabel: axisKey\n        };\n    }\n\n    const axisNumber = Object.keys(axisMap).indexOf(axisKey);\n\n    var error_y_temp = {\n        error_y: {\n            array: dataSeries.error_y,\n            thickness: 1,     // set the thickness of the error bars\n            color: curve['color'],\n            visible: false, // changed later if matching\n            // width: 0\n        }\n    };\n    var curveOptions = {\n        ...{\n            label: label,\n            curveId: label,\n            name: label,\n            xaxis: \"x1\",\n            yaxis: \"y\" + (axisNumber + 1),\n            annotation: annotation,\n            annotateColor: curve['color'],\n            mode: \"lines+markers\",\n            marker: {\n                symbol: \"circle\",\n                color: curve['color'],\n                size: 8\n            },\n            line: {\n                dash: 'solid',\n                color: curve['color'],\n                width: 2\n            },\n            visible: true\n        }, ...dataSeries\n    };\n\n    delete curveOptions.error_y;\n\n    curveOptions['error_y'] = error_y_temp.error_y;\n\n    return curveOptions;\n};\n\n// provides curve options for all plot types with an independent y axis and a dependent x axis\nconst generateProfileCurveOptions = function (curve, curveIndex, axisMap, dataProfile) {\n\n    const label = curve['label'];\n    const annotation = curve['annotation'];\n\n    // adjust axes for later setting of the plot options\n    const ymin = curve['ymin'];\n    const ymax = curve['ymax'];\n    const xmin = curve['xmin'];\n    const xmax = curve['xmax'];\n    const axisKey = curve['axisKey'];\n    if (axisKey in axisMap) {\n        axisMap[axisKey].axisLabel = axisKey;\n        axisMap[axisKey].ymin = ymin < axisMap[axisKey].ymin ? ymin : axisMap[axisKey].ymin;\n        axisMap[axisKey].ymax = ymax > axisMap[axisKey].ymax ? ymax : axisMap[axisKey].ymax;\n        axisMap[axisKey].xmin = xmin < axisMap[axisKey].xmin ? xmin : axisMap[axisKey].xmin;\n        axisMap[axisKey].xmax = xmax > axisMap[axisKey].xmax ? xmax : axisMap[axisKey].xmax;\n    } else {\n        axisMap[axisKey] = {\n            index: Object.keys(axisMap).length + 1,\n            xmin: xmin,\n            xmax: xmax,\n            ymin: ymin,\n            ymax: ymax,\n            axisLabel: axisKey\n        };\n    }\n\n    const axisNumber = Object.keys(axisMap).indexOf(axisKey);\n\n    var error_x_temp = {\n        error_x: {\n            array: dataProfile.error_x,\n            thickness: 1,     // set the thickness of the error bars\n            color: curve['color'],\n            visible: false, // changed later if matching\n            // width: 0\n        }\n    };\n    var curveOptions = {\n        ...{\n            label: label,\n            curveId: label,\n            name: label,\n            xaxis: \"x\" + (axisNumber + 1),\n            yaxis: \"y1\",\n            annotation: annotation,\n            annotateColor: curve['color'],\n            mode: \"lines+markers\",\n            marker: {\n                symbol: \"circle\",\n                color: curve['color'],\n                size: 8\n            },\n            line: {\n                dash: 'solid',\n                color: curve['color'],\n                width: 2\n            },\n            visible: true\n        }, ...dataProfile\n    };\n\n    delete curveOptions.error_x;\n\n    curveOptions['error_x'] = error_x_temp.error_x;\n\n    return curveOptions;\n};\n\n// provides curve options for reliability diagrams\nconst generateReliabilityCurveOptions = function (curve, curveIndex, axisMap, dataSeries) {\n\n    const label = curve['label'];\n    const annotation = curve['annotation'];\n\n    // adjust axes for later setting of the plot options\n    const ymin = curve['ymin'];\n    const ymax = curve['ymax'];\n    const xmin = curve['xmin'];\n    const xmax = curve['xmax'];\n    const axisKey = curve['axisKey'];\n    if (axisKey in axisMap) {\n        axisMap[axisKey].axisLabel = axisKey;\n        axisMap[axisKey].ymin = ymin < axisMap[axisKey].ymin ? ymin : axisMap[axisKey].ymin;\n        axisMap[axisKey].ymax = ymax > axisMap[axisKey].ymax ? ymax : axisMap[axisKey].ymax;\n        axisMap[axisKey].xmin = xmin < axisMap[axisKey].xmin ? xmin : axisMap[axisKey].xmin;\n        axisMap[axisKey].xmax = xmax > axisMap[axisKey].xmax ? xmax : axisMap[axisKey].xmax;\n    } else {\n        axisMap[axisKey] = {\n            index: Object.keys(axisMap).length + 1,\n            xmin: xmin,\n            xmax: xmax,\n            ymin: ymin,\n            ymax: ymax,\n            axisLabel: axisKey\n        };\n    }\n\n    const axisNumber = Object.keys(axisMap).indexOf(axisKey);\n\n    var error_y_temp = {\n        error_y: {\n            array: dataSeries.error_y,\n            thickness: 1,     // set the thickness of the error bars\n            color: curve['color'],\n            visible: false, // changed later if matching\n            // width: 0\n        }\n    };\n    var curveOptions = {\n        ...{\n            label: label,\n            curveId: label,\n            name: label,\n            xaxis: \"x1\",\n            yaxis: \"y\" + (axisNumber + 1),\n            annotation: annotation,\n            annotateColor: curve['color'],\n            mode: \"lines+markers\",\n            marker: {\n                symbol: \"circle\",\n                color: curve['color'],\n                size: 8\n            },\n            line: {\n                dash: 'solid',\n                color: curve['color'],\n                width: 2\n            },\n            visible: true\n        }, ...dataSeries\n    };\n\n    delete curveOptions.error_y;\n\n    curveOptions['error_y'] = error_y_temp.error_y;\n\n    return curveOptions;\n};\n\n// provides curve options for all plot types with an independent x axis and a dependent y axis\nconst generateBarChartCurveOptions = function (curve, curveIndex, axisMap, dataBars) {\n\n    const label = curve['label'];\n    const annotation = curve['annotation'];\n\n    // adjust axes for later setting of the plot options\n    const ymin = curve['ymin'];\n    const ymax = curve['ymax'];\n    const xmin = curve['xmin'];\n    const xmax = curve['xmax'];\n    const axisKey = curve['axisKey'];\n    if (axisKey in axisMap) {\n        axisMap[axisKey].axisLabel = axisKey;\n        axisMap[axisKey].ymin = ymin < axisMap[axisKey].ymin ? ymin : axisMap[axisKey].ymin;\n        axisMap[axisKey].ymax = ymax > axisMap[axisKey].ymax ? ymax : axisMap[axisKey].ymax;\n        axisMap[axisKey].xmin = xmin < axisMap[axisKey].xmin ? xmin : axisMap[axisKey].xmin;\n        axisMap[axisKey].xmax = xmax > axisMap[axisKey].xmax ? xmax : axisMap[axisKey].xmax;\n    } else {\n        axisMap[axisKey] = {\n            index: Object.keys(axisMap).length + 1,\n            xmin: xmin,\n            xmax: xmax,\n            ymin: ymin,\n            ymax: ymax,\n            axisLabel: axisKey\n        };\n    }\n\n    const curveOptions = {\n        ...{\n            label: label,\n            curveId: label,\n            name: label,\n            annotation: annotation,\n            annotateColor: curve['color'],\n            marker: {\n                color: curve['color'],\n                line: {\n                    color: \"rgb(0,0,0)\"\n                }\n            },\n            type: 'bar',\n            visible: true\n        }, ...dataBars\n    };\n\n    return curveOptions;\n};\n\nconst generateMapCurveOptions = function (curve, dataSeries) {\n\n    const markerSizes = dataSeries.queryVal.map(function (val) {\n        return Math.ceil(Math.abs(val * 4)) + 2;\n    });\n\n    const label = curve['label'];\n\n    const curveOptions = {\n        ...{\n            label: label,\n            curveId: label,\n            name: label,\n            type: 'scattermapbox',\n            mode: 'markers',\n            marker: {\n                color: dataSeries.color,\n                size: markerSizes,\n                opacity: 0\n            },\n        }, ...dataSeries\n    };\n\n    delete curveOptions.color;\n\n    return curveOptions;\n};\n\nconst generateMapColorTextOptions = function (label, dataSeries) {\n\n    const curveOptions = {\n        ...{\n            label: label,\n            type: 'scattermapbox',\n            mode: 'markers+text',\n            marker: {\n                opacity: 0\n            },\n            textfont: {\n                family: 'sans serif',\n                // size: 18,\n                color: dataSeries.color\n            },\n            hoverinfo: 'skip',\n            visible: true\n        }, ...dataSeries\n    };\n\n    delete curveOptions.color;\n\n    return curveOptions;\n};\n\nconst generateContourCurveOptions = function (curve, axisMap, dataset) {\n\n    const label = curve['label'];\n    const annotation = curve['annotation'];\n    const unitKey = curve['unitKey'];\n\n    const curveOptions = {\n        ...{\n            label: label,\n            curveId: label,\n            name: label,\n            annotation: annotation,\n            annotateColor: curve['color'],\n            xAxisKey: curve['xAxisKey'],\n            yAxisKey: curve['yAxisKey'],\n            marker: {\n                color: curve['color'],\n            },\n            type: 'contour',\n            autocontour: false,\n            ncontours: 15,   // apparently plotly regards this as a \"less than or equal to\" field\n            contours: {\n                // these are only used if autocontour is set to false and ncontour is disregarded\n                start: dataset.zmin + (dataset.zmax - dataset.zmin) / 16,\n                end: dataset.zmax - (dataset.zmax - dataset.zmin) / 16,\n                size:  (dataset.zmax - dataset.zmin) / 16,\n                showlabels: false\n            },\n            colorscale: 'RdBu',\n            reversescale: false,\n            colorbar:{\n                title: unitKey,\n                titleside: 'right',\n                titlefont: {\n                    size: 20,\n                    family: 'Arial, sans-serif'\n                }\n            },\n            // connectgaps: true,   // this option will interpolate to fill in nulls\n            visible: true\n        }, ...dataset\n    };\n\n    return curveOptions;\n};\n\nexport default matsDataCurveOpsUtils = {\n\n    getHorizontalValueLine: getHorizontalValueLine,\n    getVerticalValueLine: getVerticalValueLine,\n    getLinearValueLine: getLinearValueLine,\n\n    generateSeriesCurveOptions: generateSeriesCurveOptions,\n    generateReliabilityCurveOptions: generateReliabilityCurveOptions,\n    generateProfileCurveOptions: generateProfileCurveOptions,\n    generateBarChartCurveOptions: generateBarChartCurveOptions,\n    generateMapCurveOptions: generateMapCurveOptions,\n    generateMapColorTextOptions: generateMapColorTextOptions,\n    generateContourCurveOptions: generateContourCurveOptions\n\n}"]},"sourceType":"script","hash":"b373c29303185830d9f92625bf2464daff01cadd"}
