{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/imports/startup/api/matsMethods.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/randyp:mats-common/imports/startup/api/matsMethods.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/imports/startup/api/matsMethods.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/imports/startup/api/matsMethods.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/randyp:mats-common/imports/startup/api/matsMethods.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet ValidatedMethod;\nmodule.link(\"meteor/mdg:validated-method\", {\n  ValidatedMethod(v) {\n    ValidatedMethod = v;\n  }\n\n}, 1);\nlet SimpleSchema;\nmodule.link(\"meteor/aldeed:simple-schema\", {\n  SimpleSchema(v) {\n    SimpleSchema = v;\n  }\n\n}, 2);\nlet matsCache, matsCollections, matsDataQueryUtils, matsDataUtils, matsTypes;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsCache(v) {\n    matsCache = v;\n  },\n\n  matsCollections(v) {\n    matsCollections = v;\n  },\n\n  matsDataQueryUtils(v) {\n    matsDataQueryUtils = v;\n  },\n\n  matsDataUtils(v) {\n    matsDataUtils = v;\n  },\n\n  matsTypes(v) {\n    matsTypes = v;\n  }\n\n}, 3);\nlet mysql;\nmodule.link(\"meteor/pcel:mysql\", {\n  mysql(v) {\n    mysql = v;\n  }\n\n}, 4);\nlet url;\nmodule.link(\"url\", {\n  url(v) {\n    url = v;\n  }\n\n}, 5);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 6);\n// PRIVATE\n// local collection used to keep the table update times for refresh - won't ever be synchronized or persisted.\nconst metaDataTableUpdates = new Mongo.Collection(null);\nconst LayoutStoreCollection = new Mongo.Collection(\"LayoutStoreCollection\"); // initialize collection used for pop-out window functionality\n\nconst DownSampleResults = new Mongo.Collection(\"DownSampleResults\");\nvar MV_DIRS = {}; // Define routes for server\n\nif (Meteor.isServer) {\n  if (Meteor.settings.private !== undefined && Meteor.settings.private !== null) {\n    const _MV_OUT = Meteor.settings.private.MV_OUTPUT;\n    const _MV_HOME = Meteor.settings.private.MV_HOME;\n\n    const _MV_LOGDIR = _MV_OUT + \"/xml/\";\n\n    const _MV_ERRDIR = _MV_OUT + \"/xml/\";\n\n    const _MV_DATADIR = _MV_OUT + \"/data/\";\n\n    const _MV_SQLDIR = _MV_OUT + \"/xml/\"; // sql output goes with the xml output\n\n\n    const _MV_XMLDIR = _MV_OUT + \"/xml/\";\n\n    const _MV_SCRIPTSDIR = _MV_OUT + \"/scripts/\";\n\n    const _MV_PLOTSSDIR = _MV_OUT + \"/plots/\";\n\n    process.env.JAVA_HOME = Meteor.settings.private.JAVA_HOME;\n    process.env.MV_HOME = Meteor.settings.private.MV_HOME;\n    MV_DIRS = {\n      LOGDIR: _MV_LOGDIR,\n      ERRDIR: _MV_ERRDIR,\n      DATADIR: _MV_DATADIR,\n      SQLDIR: _MV_SQLDIR,\n      XMLDIR: _MV_XMLDIR,\n      SCRIPTSDIR: _MV_SCRIPTSDIR,\n      PLOTSDIR: _MV_PLOTSSDIR,\n      HOME: _MV_HOME\n    };\n  } // add indexes to result and axes collections\n\n\n  DownSampleResults.rawCollection().createIndex({\n    \"createdAt\": 1\n  }, {\n    expireAfterSeconds: 3600 * 8\n  }); // 8 hour expiration\n\n  LayoutStoreCollection.rawCollection().createIndex({\n    \"createdAt\": 1\n  }, {\n    expireAfterSeconds: 900\n  }); // 15 min expiration\n  // define some server side routes\n\n  Picker.route('/_getCSV/:key', function (params, req, res, next) {\n    Picker.middleware(_getCSV(params, req, res, next));\n  });\n  Picker.route('/CSV/:f/:key/:m/:a', function (params, req, res, next) {\n    Picker.middleware(_getCSV(params, req, res, next));\n  });\n  Picker.route('/:app/CSV/:f/:key/:m/:a', function (params, req, res, next) {\n    Picker.middleware(_getCSV(params, req, res, next));\n  });\n  Picker.route('/gsd/mats/:app/CSV/:f/:key/:m/:a', function (params, req, res, next) {\n    Picker.middleware(_getCSV(params, req, res, next));\n  });\n  Picker.route('/_getJSON/:key', function (params, req, res, next) {\n    Picker.middleware(_getJSON(params, req, res, next));\n  });\n  Picker.route('/JSON/:f/:key/:m/:a', function (params, req, res, next) {\n    Picker.middleware(_getJSON(params, req, res, next));\n  });\n  Picker.route('/:app/JSON/:f/:key/:m/:a', function (params, req, res, next) {\n    Picker.middleware(_getJSON(params, req, res, next));\n  });\n  Picker.route('/gsd/mats/:app/JSON/:f/:key/:m/:a', function (params, req, res, next) {\n    Picker.middleware(_getJSON(params, req, res, next));\n  });\n  Picker.route('/_clearCache', function (params, req, res, next) {\n    Picker.middleware(_clearCache(params, req, res, next));\n  });\n  Picker.route('/:app/_clearCache', function (params, req, res, next) {\n    Picker.middleware(_clearCache(params, req, res, next));\n  });\n  Picker.route('/gsd/mats/:app/_clearCache', function (params, req, res, next) {\n    Picker.middleware(_clearCache(params, req, res, next));\n  });\n  Picker.route('/refreshMetadata', function (params, req, res, next) {\n    Picker.middleware(_refreshMetadataMWltData(params, req, res, next));\n  });\n  Picker.route('/:app/refreshMetadata', function (params, req, res, next) {\n    Picker.middleware(_refreshMetadataMWltData(params, req, res, next));\n  });\n  Picker.route('/gsd/mats/:app/refreshMetadata', function (params, req, res, next) {\n    Picker.middleware(_refreshMetadataMWltData(params, req, res, next));\n  }); // create picker routes for metviewer middleware static files\n\n  Picker.route('/:app/mvdata/:key', function (params, req, res, next) {\n    Picker.middleware(_mvGetData(params, req, res, next));\n  });\n  Picker.route('/gsd/mats/:app/mvdata/:key', function (params, req, res, next) {\n    Picker.middleware(_mvGetData(params, req, res, next));\n  });\n  Picker.route('/:app/mvpoints1/:key', function (params, req, res, next) {\n    Picker.middleware(_mvGetPoints1(params, req, res, next));\n  });\n  Picker.route('/gsd/mats/:app/mvpoints1/:key', function (params, req, res, next) {\n    Picker.middleware(_mvGetPoints1(params, req, res, next));\n  });\n  Picker.route('/:app/mvpoints2/:key', function (params, req, res, next) {\n    Picker.middleware(_mvGetPoints2(params, req, res, next));\n  });\n  Picker.route('/gsd/mats/:app/mvpoints2/:key', function (params, req, res, next) {\n    Picker.middleware(_mvGetPoints2(params, req, res, next));\n  });\n  Picker.route('/:app/mvxml/:key', function (params, req, res, next) {\n    Picker.middleware(_mvGetXml(params, req, res, next));\n  });\n  Picker.route('/gsd/mats/:app/mvxml/:key', function (params, req, res, next) {\n    Picker.middleware(_mvGetXml(params, req, res, next));\n  });\n  Picker.route('/:app/mvplot/:key', function (params, req, res, next) {\n    Picker.middleware(_mvGetPlot(params, req, res, next));\n  });\n  Picker.route('/gsd/mats/:app/mvplot/:key', function (params, req, res, next) {\n    Picker.middleware(_mvGetPlot(params, req, res, next));\n  });\n  Picker.route('/:app/mvscript/:key', function (params, req, res, next) {\n    Picker.middleware(_mvGetScript(params, req, res, next));\n  });\n  Picker.route('/gsd/mats/:app/mvscript/:key', function (params, req, res, next) {\n    Picker.middleware(_mvGetScript(params, req, res, next));\n  });\n  Picker.route('/:app/mvsql/:key', function (params, req, res, next) {\n    Picker.middleware(_mvGetSql(params, req, res, next));\n  });\n  Picker.route('/gsd/mats/:app/mvsql/:key', function (params, req, res, next) {\n    Picker.middleware(_mvGetSql(params, req, res, next));\n  });\n  Picker.route('/:app/mvlog/:key', function (params, req, res, next) {\n    Picker.middleware(_mvGetLog(params, req, res, next));\n  });\n  Picker.route('/gsd/mats/:app/mvlog/:key', function (params, req, res, next) {\n    Picker.middleware(_mvGetLog(params, req, res, next));\n  });\n  Picker.route('/:app/mverr/:key', function (params, req, res, next) {\n    Picker.middleware(_mvGetErr(params, req, res, next));\n  });\n  Picker.route('/gsd/mats/:app/mverr/:key', function (params, req, res, next) {\n    Picker.middleware(_mvGetErr(params, req, res, next));\n  });\n} // private - used to see if the main page needs to update its selectors\n\n\nconst _checkMetaDataRefresh = function () {\n  // This routine compares the current last modified time of the tables used for curveParameter metadata\n  // with the last update time to determine if an update is necessary. We really only do this for Curveparams\n\n  /*\n      metaDataTableUpdates:\n      {\n          name: dataBaseName,\n          tables: [tableName1, tableName2 ..],\n          lastRefreshed : timestamp\n      }\n   */\n  var refresh = false;\n  const tableUpdates = metaDataTableUpdates.find({}).fetch();\n\n  for (var tui = 0; tui < tableUpdates.length; tui++) {\n    var id = tableUpdates[tui]._id;\n    var poolName = tableUpdates[tui].pool;\n    var dbName = tableUpdates[tui].name;\n    var tableNames = tableUpdates[tui].tables;\n    var lastRefreshed = tableUpdates[tui]['lastRefreshed'];\n    var updatedEpoch = Number.MAX_VALUE;\n\n    for (var ti = 0; ti < tableNames.length; ti++) {\n      var tName = tableNames[ti];\n      var rows = matsDataQueryUtils.simplePoolQueryWrapSynchronous(global[poolName], \"SELECT UNIX_TIMESTAMP(UPDATE_TIME)\" + \"    FROM   information_schema.tables\" + \"    WHERE  TABLE_SCHEMA = '\" + dbName + \"'\" + \"    AND TABLE_NAME = '\" + tName + \"'\");\n\n      for (var i = 0; i < rows.length; i++) {\n        try {\n          updatedEpoch = rows[i]['UNIX_TIMESTAMP(UPDATE_TIME)'];\n          break;\n        } catch (e) {\n          throw new Error(\"_checkMetaDataRefresh - cannot find last update time for database: \" + dbName + \" and table: \" + tName + \" ERROR:\" + e.message);\n        }\n\n        if (updatedEpoch === Number.MAX_VALUE) {\n          throw new Error(\"_checkMetaDataRefresh - cannot find last update time for database: \" + dbName + \" and table: \" + tName);\n        }\n      }\n\n      const lastRefreshedEpoch = moment(lastRefreshed).valueOf() / 1000;\n\n      if (lastRefreshedEpoch < updatedEpoch) {\n        refresh = true;\n        console.log(\"Refreshing the metadata in the app selectors because table \" + dbName + \".\" + tName + \" was updated at \" + moment.utc(updatedEpoch * 1000).format(\"YYYY-MM-DD HH:mm:ss\") + \" while the metadata was last refreshed at \" + moment.utc(lastRefreshedEpoch * 1000).format(\"YYYY-MM-DD HH:mm:ss\"));\n        break;\n      }\n    }\n\n    if (refresh === true) {\n      // refresh the app metadata\n      // app specific routines\n      //const asrKeys = Object.keys(appSpecificResetRoutines);\n      const asrKeys = appSpecificResetRoutines;\n\n      for (var ai = 0; ai < asrKeys.length; ai++) {\n        global.appSpecificResetRoutines[ai]();\n      } // remember that we updated ALL the metadata tables just now\n\n\n      metaDataTableUpdates.update({\n        _id: id\n      }, {\n        $set: {\n          lastRefreshed: moment().format()\n        }\n      });\n    }\n  }\n\n  return true;\n}; // private middleware for clearing the cache\n\n\nconst _clearCache = function (params, req, res, next) {\n  if (Meteor.isServer) {\n    matsCache.clear();\n    res.end();\n  }\n}; // private middleware for _getCSV route\n\n\nconst _getCSV = function (params, req, res, next) {\n  if (Meteor.isServer) {\n    var stringify = require('csv-stringify');\n\n    var csv = \"\";\n\n    try {\n      var result = _getFlattenedResultData(params.key, 0, -1000);\n\n      var statArray = Object.values(result.stats);\n      var dataArray = Object.values(result.data);\n      var statResultArray = [];\n      var dataResultArray = [];\n\n      for (var si = 0; si < statArray.length; si++) {\n        statResultArray.push(Object.keys(statArray[si])); // push the stat header for this curve(keys)\n\n        statResultArray.push(statArray[si]['n'] === 0 ? [statArray[si].label] : Object.values(statArray[si])); // push the stats for this curve\n      }\n\n      for (var di = 0; di < dataArray.length; di++) {\n        var dataSubArray = Object.values(dataArray[di]);\n        var dataHeader = dataSubArray[0] === undefined ? statArray[di].label : Object.keys(dataSubArray[0]); //dataHeader[0] = 'label';\n\n        dataHeader[0] = dataSubArray[0] === undefined ? \"NO DATA\" : Object.keys(dataSubArray[0]).filter(key => key.indexOf('Curve') != -1)[0];\n        dataResultArray.push(dataHeader); // push this curve data header (keys)\n\n        if (dataSubArray[0] === undefined) {\n          continue;\n        }\n\n        for (var dsi = 0; dsi < dataSubArray.length; dsi++) {\n          // push this curves data\n          dataResultArray.push(Object.values(dataSubArray[dsi]));\n        }\n      }\n\n      var fileName = \"matsplot-\" + moment.utc().format('YYYYMMDD-HH.mm.ss') + \".csv\";\n      res.setHeader('Content-disposition', 'attachment; filename=' + fileName);\n      res.setHeader('Content-Type', 'attachment.ContentType');\n      stringify(statResultArray, {\n        header: true\n      }, function (err, output) {\n        if (err) {\n          console.log(\"error in _getCSV:\", err);\n          res.write(\"error,\" + err.toLocaleString());\n          res.end();\n          return;\n        }\n\n        res.write(output);\n        stringify(dataResultArray, {\n          header: true\n        }, function (err, output) {\n          if (err) {\n            console.log(\"error in _getCSV:\", err);\n            res.write(\"error,\" + err.toLocaleString());\n            res.end();\n            return;\n          }\n\n          res.write(output);\n          res.end();\n        });\n        delete result;\n        delete statResultArray;\n        delete dataResultArray;\n      });\n    } catch (e) {\n      console.log('error retrieving data: ', e);\n      csv = \"error,\" + e.toLocaleString();\n      res.setHeader('Content-disposition', 'attachment; filename=matsplot.csv');\n      res.setHeader('Content-Type', 'attachment.ContentType');\n      res.end(csv);\n    }\n  }\n}; // private middleware for _getJSON route\n\n\nconst _getJSON = function (params, req, res, next) {\n  if (Meteor.isServer) {\n    var flatJSON = \"\";\n\n    try {\n      var result = _getPagenatedData(params.key, 0, -1000);\n\n      flatJSON = JSON.stringify(result);\n    } catch (e) {\n      console.log('error retrieving data: ', e);\n      flatJSON = JSON.stringify({\n        error: e\n      });\n      delete flatJSON.dsiRealPageIndex;\n      delete flatJSON.dsiTextDirection;\n    }\n\n    res.setHeader('Content-Type', 'application/json');\n    res.write(flatJSON);\n    res.end();\n    delete flatJSON;\n    delete result;\n  }\n}; // private method for getting pagenated results and flattening them in order to be appropriate for text display.\n\n\nconst _getFlattenedResultData = function (rk, p, np) {\n  if (Meteor.isServer) {\n    var resp;\n\n    try {\n      var r = rk;\n      var p = p;\n      var np = np; // get the pagenated data\n\n      var result = _getPagenatedData(r, p, np); // find the type\n\n\n      var plotTypes = result.basis.plotParams.plotTypes;\n\n      var plotType = _.invert(plotTypes)[true]; // extract data\n\n\n      var data = result.data;\n      var dsiRealPageIndex = result.dsiRealPageIndex;\n      var dsiTextDirection = result.dsiTextDirection;\n\n      switch (plotType) {\n        case matsTypes.PlotTypes.timeSeries:\n        case matsTypes.PlotTypes.dailyModelCycle:\n          var returnData = {};\n          returnData.stats = {}; // map of maps\n\n          returnData.data = {}; // map of arrays of maps\n\n          /*\n          returnData is\n          {\n              stats: {\n                          curve0: {label:someLabel, mean:someMean,sd:someSd....}\n                          curve1: {label:someLabel, mean:someMean,sd:someSd....}\n                          ...\n                      }\n              data: {\n                          curve0: [\n                                      {time:someTime, stat: someStat, sd: someSd,....},\n                                      {time:someTime, stat: someStat, sd: someSd,....},\n                                      ....\n                                  ],\n                          curve1: [\n                                      {time:someTime, stat: someStat, sd: someSd,....},\n                                      {time:someTime, stat: someStat, sd: someSd,....},\n                                      ....\n                                  ],\n                                  ...\n                    }\n          }\n           */\n\n          for (var ci = 0; ci < data.length; ci++) {\n            // for each curve\n            // if the curve label is a reserved word do not process the curve (its a zero or max curve)\n            var reservedWords = Object.values(matsTypes.ReservedWords);\n\n            if (reservedWords.indexOf(data[ci].label) >= 0) {\n              continue; // don't process the zero or max curves\n            }\n\n            var stats = {};\n            stats['label'] = data[ci].label;\n            stats['mean'] = data[ci].glob_stats.d_mean;\n            stats['standard deviation'] = data[ci].glob_stats.sd;\n            stats['n'] = data[ci].glob_stats.n_good;\n            stats['standard error'] = data[ci].glob_stats.stde_betsy;\n            stats['lag1'] = data[ci].glob_stats.lag1;\n            stats['minimum'] = data[ci].glob_stats.minVal;\n            stats['maximum'] = data[ci].glob_stats.maxVal;\n            returnData.stats[data[ci].label] = stats;\n            var curveData = []; // map of maps\n\n            for (var cdi = 0; cdi < data[ci].x.length; cdi++) {\n              //for each datapoint\n              var curveDataElement = {};\n              curveDataElement[data[ci].label + ' time'] = data[ci].x[cdi];\n              curveDataElement['raw stat from query'] = data[ci].stats[cdi].raw_stat;\n              curveDataElement['plotted stat'] = data[ci].y[cdi];\n              curveDataElement['std dev'] = data[ci].stats[cdi].sd;\n              curveDataElement['std error'] = data[ci].stats[cdi].stde_betsy;\n              curveDataElement['lag1'] = data[ci].stats[cdi].lag1;\n              curveDataElement['n'] = data[ci].stats[cdi].n_good;\n              curveData.push(curveDataElement);\n            }\n\n            returnData.data[data[ci].label] = curveData;\n          }\n\n          break;\n\n        case matsTypes.PlotTypes.profile:\n          var returnData = {};\n          returnData.stats = {}; // map of maps\n\n          returnData.data = {}; // map of arrays of map\n\n          for (var ci = 0; ci < data.length; ci++) {\n            // for each curve\n            var reservedWords = Object.values(matsTypes.ReservedWords);\n\n            if (reservedWords.indexOf(data[ci].label) >= 0) {\n              continue; // don't process the zero or max curves\n            }\n\n            var stats = {};\n            stats['label'] = data[ci].label;\n            stats['mean'] = data[ci].glob_stats.d_mean;\n            stats['standard deviation'] = data[ci].glob_stats.sd;\n            stats['n'] = data[ci].glob_stats.n_good;\n            stats['standard error'] = data[ci].glob_stats.stde_betsy;\n            stats['lag1'] = data[ci].glob_stats.lag1;\n            stats['minimum'] = data[ci].glob_stats.minVal;\n            stats['maximum'] = data[ci].glob_stats.maxVal;\n            returnData.stats[data[ci].label] = stats;\n            var cdata = data[ci].data;\n            var curveData = []; // array of maps\n\n            for (var cdi = 0; cdi < data[ci].x.length; cdi++) {\n              // for each datapoint\n              var curveDataElement = {};\n              curveDataElement[data[ci].label + ' level'] = data[ci].y[cdi];\n              curveDataElement['raw stat from query'] = data[ci].stats[cdi].raw_stat;\n              curveDataElement['plotted stat'] = data[ci].x[cdi];\n              curveDataElement['std dev'] = data[ci].stats[cdi].sd;\n              curveDataElement['std error'] = data[ci].stats[cdi].stde_betsy;\n              curveDataElement['lag1'] = data[ci].stats[cdi].lag1;\n              curveDataElement['n'] = data[ci].stats[cdi].n_good;\n              curveData.push(curveDataElement);\n            }\n\n            returnData.data[data[ci].label] = curveData;\n          }\n\n          break;\n\n        case matsTypes.PlotTypes.dieoff:\n        case matsTypes.PlotTypes.threshold:\n        case matsTypes.PlotTypes.validtime:\n          var labelSuffix;\n\n          switch (plotType) {\n            case matsTypes.PlotTypes.dieoff:\n              labelSuffix = \" forecast lead time\";\n              break;\n\n            case matsTypes.PlotTypes.validtime:\n              labelSuffix = \" hour of day\";\n              break;\n\n            case matsTypes.PlotTypes.threshold:\n              labelSuffix = \" threshold (in)\";\n              break;\n          }\n\n          var returnData = {};\n          returnData.stats = {}; // map of maps\n\n          returnData.data = {}; // map of arrays of maps\n\n          for (var ci = 0; ci < data.length; ci++) {\n            // for each curve\n            var reservedWords = Object.values(matsTypes.ReservedWords);\n\n            if (reservedWords.indexOf(data[ci].label) >= 0) {\n              continue; // don't process the zero or max curves\n            }\n\n            var stats = {};\n            stats['label'] = data[ci].label;\n            stats['mean'] = data[ci].glob_stats.d_mean;\n            stats['standard deviation'] = data[ci].glob_stats.sd;\n            stats['n'] = data[ci].glob_stats.n_good;\n            stats['minimum'] = data[ci].glob_stats.minVal;\n            stats['maximum'] = data[ci].glob_stats.maxVal;\n            returnData.stats[data[ci].label] = stats;\n            var curveData = []; // map of maps\n\n            for (var cdi = 0; cdi < data[ci].x.length; cdi++) {\n              // for each datapoint\n              var curveDataElement = {};\n              curveDataElement[data[ci].label + labelSuffix] = data[ci].x[cdi];\n              curveDataElement['raw stat from query'] = data[ci].stats[cdi].raw_stat;\n              curveDataElement['plotted stat'] = data[ci].y[cdi];\n              curveDataElement['std dev'] = data[ci].stats[cdi].sd;\n              curveDataElement['n'] = data[ci].stats[cdi].n_good;\n              curveData.push(curveDataElement);\n            }\n\n            returnData.data[data[ci].label] = curveData;\n          }\n\n          break;\n\n        case matsTypes.PlotTypes.reliability:\n          var returnData = {};\n          returnData.stats = {}; // map of maps\n\n          returnData.data = {}; // map of arrays of map\n\n          for (var ci = 0; ci < data.length; ci++) {\n            // for each curve\n            var reservedWords = Object.values(matsTypes.ReservedWords);\n\n            if (reservedWords.indexOf(data[ci].label) >= 0) {\n              continue; // don't process the zero or max curves\n            }\n\n            var stats = {};\n            stats['label'] = data[ci].label;\n            stats['sample climo'] = data[ci].glob_stats.sample_climo;\n            returnData.stats[data[ci].label] = stats;\n            var cdata = data[ci].data;\n            var curveData = []; // array of maps\n\n            for (var cdi = 0; cdi < data[ci].y.length; cdi++) {\n              // for each datapoint\n              var curveDataElement = {};\n              curveDataElement[data[ci].label + ' probability bin'] = data[ci].stats[cdi].prob_bin;\n              curveDataElement['hit rate'] = data[ci].stats[cdi].hit_rate;\n              curveDataElement['oy'] = data[ci].stats[cdi].obs_y;\n              curveDataElement['on'] = data[ci].stats[cdi].obs_n;\n              curveData.push(curveDataElement);\n            }\n\n            returnData.data[data[ci].label] = curveData;\n          }\n\n          break;\n\n        case matsTypes.PlotTypes.map:\n          var returnData = {};\n          returnData.stats = {}; // map of maps\n\n          returnData.data = {}; // map of arrays of maps\n\n          var stats = {};\n          stats['label'] = data[0].label;\n          stats['total number of obs'] = data[0].stats.reduce(function (prev, curr) {\n            return prev + curr.N_times;\n          }, 0);\n          stats['mean difference'] = matsDataUtils.average(data[0].queryVal);\n          stats['standard deviation'] = matsDataUtils.stdev(data[0].queryVal);\n          stats['minimum time'] = data[0].stats.reduce(function (prev, curr) {\n            return prev < curr.min_time ? prev : curr.min_time;\n          });\n          stats['minimum time'] = moment.utc(stats['minimum time'] * 1000).format('YYYY-MM-DD HH:mm');\n          stats['maximum time'] = data[0].stats.reduce(function (prev, curr) {\n            return prev > curr.max_time ? prev : curr.max_time;\n          });\n          stats['maximum time'] = moment.utc(stats['maximum time'] * 1000).format('YYYY-MM-DD HH:mm');\n          returnData.stats[data[0].label] = stats;\n          var curveData = []; // map of maps\n\n          for (var si = 0; si < data[0].siteName.length; si++) {\n            var curveDataElement = {};\n            curveDataElement['Site Name'] = data[0].siteName[si];\n            curveDataElement['Number of Times'] = data[0].stats[si].N_times;\n            curveDataElement['Start Date'] = moment.utc(data[0].stats[si].min_time * 1000).format('YYYY-MM-DD HH:mm');\n            curveDataElement['End Date'] = moment.utc(data[0].stats[si].max_time * 1000).format('YYYY-MM-DD HH:mm');\n            curveDataElement['Average Difference'] = data[0].queryVal[si];\n            curveData.push(curveDataElement);\n          }\n\n          returnData.data[data[0].label] = curveData;\n          break;\n\n        case matsTypes.PlotTypes.histogram:\n          var returnData = {};\n          returnData.stats = {}; // map of maps\n\n          returnData.data = {}; // map of arrays of maps\n\n          for (var ci = 0; ci < data.length; ci++) {\n            // for each curve\n            var reservedWords = Object.values(matsTypes.ReservedWords);\n\n            if (reservedWords.indexOf(data[ci].label) >= 0) {\n              continue; // don't process the zero or max curves\n            }\n\n            var stats = {};\n            stats['label'] = data[ci].label;\n            stats['mean'] = data[ci].glob_stats.glob_mean;\n            stats['standard deviation'] = data[ci].glob_stats.glob_sd;\n            stats['n'] = data[ci].glob_stats.glob_n;\n            stats['minimum'] = data[ci].glob_stats.glob_min;\n            stats['maximum'] = data[ci].glob_stats.glob_max;\n            returnData.stats[data[ci].label] = stats;\n            var curveData = []; // map of maps\n\n            for (var cdi = 0; cdi < data[ci].x.length; cdi++) {\n              // for each datapoint\n              var curveDataElement = {};\n              curveDataElement[data[ci].label + ' bin range'] = data[ci].bin_stats[cdi]['binLabel'];\n              curveDataElement['n'] = data[ci].bin_stats[cdi].bin_n;\n              curveDataElement['bin rel freq'] = data[ci].bin_stats[cdi].bin_rf;\n              curveDataElement['bin lower bound'] = data[ci].bin_stats[cdi].binLowBound;\n              curveDataElement['bin upper bound'] = data[ci].bin_stats[cdi].binUpBound;\n              curveDataElement['bin mean'] = data[ci].bin_stats[cdi].bin_mean;\n              curveDataElement['bin std dev'] = data[ci].bin_stats[cdi].bin_sd;\n              curveData.push(curveDataElement);\n            }\n\n            returnData.data[data[ci].label] = curveData;\n          }\n\n          break;\n\n        case matsTypes.PlotTypes.contour:\n        case matsTypes.PlotTypes.contourDiff:\n          var returnData = {};\n          returnData.stats = {}; // map of maps\n\n          returnData.data = {}; // map of arrays of maps\n\n          var stats = {};\n          stats['label'] = data[0].label;\n          stats['total number of points'] = data[0].glob_stats.n;\n          stats['mean stat'] = data[0].glob_stats.mean;\n          stats['minimum time'] = data[0].glob_stats.minDate;\n          stats['minimum time'] = moment.utc(stats['minimum time'] * 1000).format('YYYY-MM-DD HH:mm');\n          stats['maximum time'] = data[0].glob_stats.maxDate;\n          stats['maximum time'] = moment.utc(stats['maximum time'] * 1000).format('YYYY-MM-DD HH:mm');\n          returnData.stats[data[0].label] = stats;\n          var curveData = []; // map of maps\n\n          for (var si = 0; si < data[0].xTextOutput.length; si++) {\n            var curveDataElement = {};\n            curveDataElement['xVal'] = data[0].xTextOutput[si];\n            curveDataElement['yVal'] = data[0].yTextOutput[si];\n            curveDataElement['stat'] = data[0].zTextOutput[si];\n            curveDataElement['N'] = data[0].nTextOutput[si];\n            curveDataElement['Start Date'] = moment.utc(data[0].minDateTextOutput[si] * 1000).format('YYYY-MM-DD HH:mm');\n            curveDataElement['End Date'] = moment.utc(data[0].maxDateTextOutput[si] * 1000).format('YYYY-MM-DD HH:mm');\n            curveData.push(curveDataElement);\n          }\n\n          returnData.data[data[0].label] = curveData;\n          break;\n\n        case matsTypes.PlotTypes.scatter2d:\n          var returnData = {}; // returns a map of arrays of maps\n\n          /*\n          returnData = {\n                          curve0: [\n                                      {\n                                      xval: number,\n                                      yval: number,\n                                      bestfit: number || none\n                                      },\n                                      {\n                                      xval: number,\n                                      yval: number,\n                                      bestfit: number || none\n                                      },\n                                     .....\n                                  ],\n                           curve1: [\n                                      {\n                                      xval: number,\n                                      yval: number,\n                                      bestfit: number || none\n                                      },\n                                      {\n                                      xval: number,\n                                      yval: number,\n                                      bestfit: number || none\n                                      },\n                                     .....\n                                  ],\n                                  ....\n                      }\n           */\n\n          var firstBestFitIndex = -1;\n          var bestFitIndexes = {};\n\n          for (var ci = 0; ci < data.length; ci++) {\n            if (ci == firstBestFitIndex) {\n              break; // best fit curves are at the end so do not do further processing\n            }\n\n            var curveData = data[ci]; // look for a best fit curve - only have to look at curves with higher index than this one\n\n            var bestFitIndex = -1;\n\n            for (var cbi = ci + 1; cbi < data.length; cbi++) {\n              if (data[cbi].label.indexOf(curveData.label) !== -1 && data[cbi].label.indexOf(\"-best fit\") != -1) {\n                bestFitIndexes[ci] = cbi;\n\n                if (firstBestFitIndex == -1) {\n                  firstBestFitIndex = cbi;\n                }\n\n                break;\n              }\n            }\n\n            var curveTextData = [];\n\n            for (var cdi = 0; cdi < curveData.data.length; cdi++) {\n              var element = {};\n              element['xAxis'] = curveData.data[cdi][0];\n              element['yAxis'] = curveData.data[cdi][1];\n\n              if (bestFitIndexes[ci] === undefined) {\n                element['best fit'] = \"none;\";\n              } else {\n                element['best fit'] = data[bestFitIndexes[ci]].data[cdi][1];\n              }\n\n              curveTextData.push(element);\n            }\n\n            returnData[curveData.label] = curveTextData;\n          }\n\n          break;\n\n        default:\n          return undefined;\n      }\n\n      returnData.dsiRealPageIndex = dsiRealPageIndex;\n      returnData.dsiTextDirection = dsiTextDirection;\n      return returnData;\n    } catch (error) {\n      throw new Meteor.Error(\"Error in _getFlattenedResultData function: \" + error.message);\n    }\n  }\n}; // private method for getting pagenated data\n// a newPageIndex of -1000 means get all the data (used for export)\n// a newPageIndex of -2000 means get just the last page\n\n\nconst _getPagenatedData = function (rky, p, np) {\n  if (Meteor.isServer) {\n    var key = rky;\n    var myPageIndex = p;\n    var newPageIndex = np;\n    var ret;\n    var rawReturn;\n\n    try {\n      var result = matsCache.getResult(key);\n      rawReturn = result === undefined ? undefined : result.result; // getResult structure is {key:something, result:resultObject}\n    } catch (e) {\n      console.log(\"_getPagenatedData: Error - \", e);\n      return undefined;\n    }\n\n    ret = rawReturn === undefined ? undefined : JSON.parse(JSON.stringify(rawReturn));\n    var start;\n    var end;\n    var direction = 1;\n\n    if (newPageIndex === -1000) {\n      // all the data\n      start = 0;\n      end = Number.MAX_VALUE;\n    } else if (newPageIndex === -2000) {\n      // just the last page\n      start = -2000;\n      direction = -1;\n    } else if (myPageIndex <= newPageIndex) {\n      // proceed forward\n      start = (newPageIndex - 1) * 100;\n      end = newPageIndex * 100;\n    } else {\n      // move back\n      direction = -1;\n      start = newPageIndex * 100;\n      end = (newPageIndex + 1) * 100;\n    }\n\n    var dsiStart;\n    var dsiEnd;\n\n    for (var csi = 0; csi < ret.data.length; csi++) {\n      if (ret.data[csi].x == null || ret.data[csi].x.length <= 100) {\n        continue; // don't bother pagenating datasets less than or equal to a page - ret is rawReturn\n      }\n\n      dsiStart = start;\n      dsiEnd = end;\n\n      if (dsiStart > ret.data[csi].x.length || dsiStart === -2000) {\n        // show the last page if we either requested it specifically or are trying to navigate past it\n        dsiStart = Math.floor(rawReturn.data[csi].x.length / 100) * 100;\n        dsiEnd = rawReturn.data[csi].x.length;\n\n        if (dsiEnd === dsiStart) {\n          // make sure the last page isn't empty--if rawReturn.data[csi].data.length/100 produces a whole number,\n          // dsiStart and dsiEnd would be the same. This makes sure that the last full page is indeed the last page, without a phantom empty page afterwards\n          dsiStart = dsiEnd - 100;\n        }\n      }\n\n      if (dsiStart < 0) {\n        // show the first page if we are trying to navigate before it\n        dsiStart = 0;\n        dsiEnd = 100;\n      }\n\n      if (dsiEnd < dsiStart) {\n        // make sure that the end is after the start\n        dsiEnd = dsiStart + 100;\n      }\n\n      if (dsiEnd > ret.data[csi].x.length) {\n        // make sure we don't request past the end -- if results are one page, this should convert the\n        // start and end from 0 and 100 to 0 and whatever the end is.\n        dsiEnd = ret.data[csi].x.length;\n      }\n\n      ret.data[csi].x = rawReturn.data[csi].x.slice(dsiStart, dsiEnd);\n      ret.data[csi].y = rawReturn.data[csi].y.slice(dsiStart, dsiEnd);\n      ret.data[csi].stats = rawReturn.data[csi].stats.slice(dsiStart, dsiEnd);\n      ret.data[csi].glob_stats = rawReturn.data[csi].glob_stats;\n    }\n\n    delete rawReturn;\n\n    if (direction === 1) {\n      ret.dsiRealPageIndex = Math.floor(dsiEnd / 100);\n    } else {\n      ret.dsiRealPageIndex = Math.floor(dsiStart / 100);\n    }\n\n    ret.dsiTextDirection = direction;\n    return ret;\n  }\n}; //private middleware for getting metviewer data file\n\n\nconst _mvGetData = function (params, req, res, next) {\n  const fse = require(\"fs-extra\");\n\n  const filePath = MV_DIRS.DATADIR;\n  const baseName = params.key + \".data\";\n  const fileName = filePath + '/' + baseName;\n\n  try {\n    fse.readFile(fileName, function (err, data) {\n      res.setHeader('Content-Type', 'text/plain');\n\n      if (err) {\n        console.log(err);\n      } // Fail if the file can't be read.\n\n\n      res.end(data); // Send the file data to the browser.\n    });\n  } catch (error) {\n    res.setHeader('Content-Type', 'text/plain');\n    res.write(\"Error Error getting data file :\" + baseName);\n    res.end();\n  }\n}; //private middleware for getting metviewer points1 file\n\n\nconst _mvGetPoints1 = function (params, req, res, next) {\n  const fse = require(\"fs-extra\");\n\n  const filePath = MV_DIRS.DATADIR;\n  const baseName = params.key + \".points1\";\n  const fileName = filePath + '/' + baseName;\n\n  try {\n    fse.readFile(fileName, function (err, data) {\n      res.setHeader('Content-Type', 'text/plain');\n\n      if (err) {\n        console.log(err);\n      } // Fail if the file can't be read.\n\n\n      res.end(data); // Send the file data to the browser.\n    });\n  } catch (error) {\n    res.setHeader('Content-Type', 'text/plain');\n    res.write(\"Error Error getting data file :\" + baseName);\n    res.end();\n  }\n}; //private middleware for getting metviewer points1 file\n\n\nconst _mvGetPoints2 = function (params, req, res, next) {\n  const fse = require(\"fs-extra\");\n\n  const filePath = MV_DIRS.DATADIR;\n  const baseName = params.key + \".points2\";\n  const fileName = filePath + '/' + baseName;\n\n  try {\n    fse.readFile(fileName, function (err, data) {\n      res.setHeader('Content-Type', 'text/plain');\n\n      if (err) {\n        console.log(err);\n      } // Fail if the file can't be read.\n\n\n      res.end(data); // Send the file data to the browser.\n    });\n  } catch (error) {\n    res.setHeader('Content-Type', 'text/plain');\n    res.write(\"Error Error getting data file :\" + baseName);\n    res.end();\n  }\n}; //private middleware for getting metviewer xml file\n\n\nconst _mvGetXml = function (params, req, res, next) {\n  const fse = require(\"fs-extra\");\n\n  const filePath = MV_DIRS.XMLDIR;\n  const baseName = params.key + \".xml\";\n  const fileName = filePath + '/' + baseName;\n\n  try {\n    fse.readFile(fileName, function (err, data) {\n      res.setHeader('Content-Type', 'text/plain');\n\n      if (err) {\n        console.log(err);\n      } // Fail if the file can't be read.\n\n\n      res.end(data); // Send the file data to the browser.\n    });\n  } catch (error) {\n    res.setHeader('Content-Type', 'text/plain');\n    res.write(\"Error Error getting xml file :\" + baseName);\n    res.end();\n  }\n}; //private middleware for getting metviewer plot file\n\n\nconst _mvGetPlot = function (params, req, res, next) {\n  const fse = require(\"fs-extra\");\n\n  const filePath = MV_DIRS.PLOTSDIR;\n  const baseName = params.key + \".png\";\n  const fileName = filePath + '/' + baseName;\n\n  try {\n    fse.readFile(fileName, function (err, data) {\n      res.setHeader('Content-Type', 'image/png');\n\n      if (err) {\n        console.log(err);\n      } // Fail if the file can't be read.\n\n\n      res.end(data); // Send the file data to the browser.\n    });\n  } catch (error) {\n    res.setHeader('Content-Type', 'application/txt');\n    res.write(\"Error Error getting plot file :\" + baseName);\n    res.end();\n  }\n}; //private middleware for getting metviewer script file\n\n\nconst _mvGetScript = function (params, req, res, next) {\n  const fse = require(\"fs-extra\");\n\n  const filePath = MV_DIRS.SCRIPTSDIR;\n  const baseName = params.key + \".R\";\n  const fileName = filePath + '/' + baseName;\n\n  try {\n    fse.readFile(fileName, function (err, data) {\n      res.setHeader('Content-Type', 'text/plain');\n\n      if (err) {\n        console.log(err);\n      } // Fail if the file can't be read.\n\n\n      res.end(data); // Send the file data to the browser.\n    });\n  } catch (error) {\n    res.setHeader('Content-Type', 'text/plain');\n    res.write(\"Error Error getting script file :\" + baseName);\n    res.end();\n  }\n}; //private middleware for getting metviewer sql file\n\n\nconst _mvGetSql = function (params, req, res, next) {\n  const fse = require(\"fs-extra\");\n\n  const filePath = MV_DIRS.SQLDIR;\n  const baseName = params.key + \".sql\";\n  const fileName = filePath + '/' + baseName;\n\n  try {\n    fse.readFile(fileName, function (err, data) {\n      res.setHeader('Content-Type', 'text/sql');\n\n      if (err) {\n        console.log(err);\n      } // Fail if the file can't be read.\n\n\n      res.end(data); // Send the file data to the browser.\n    });\n  } catch (error) {\n    res.setHeader('Content-Type', 'text/plain');\n    res.write(\"Error Error getting sql file :\" + baseName);\n    res.end();\n  }\n}; //private middleware for getting metviewer log file\n\n\nconst _mvGetLog = function (params, req, res, next) {\n  const fse = require(\"fs-extra\");\n\n  const filePath = MV_DIRS.LOGDIR;\n  const baseName = params.key + \".log\";\n  const fileName = filePath + '/' + baseName;\n\n  try {\n    fse.readFile(fileName, function (err, data) {\n      res.setHeader('Content-Type', 'text/plain');\n\n      if (err) {\n        console.log(err);\n      } // Fail if the file can't be read.\n\n\n      res.end(data); // Send the file data to the browser.\n    });\n  } catch (error) {\n    res.setHeader('Content-Type', 'text/plain');\n    res.write(\"Error Error getting log file :\" + baseName);\n    res.end();\n  }\n}; //private middleware for getting metviewer err file\n\n\nconst _mvGetErr = function (params, req, res, next) {\n  const fse = require(\"fs-extra\");\n\n  const filePath = MV_DIRS.ERRDIR;\n  const baseName = params.key + \".err\";\n  const fileName = filePath + '/' + baseName;\n\n  try {\n    fse.readFile(fileName, function (err, data) {\n      res.setHeader('Content-Type', 'text/plain');\n\n      if (err) {\n        res.setHeader('Content-Type', 'text/plain');\n        res.write(\"Error Error getting err file :\" + baseName);\n        res.end();\n      } else {\n        res.end(data); // Send the file data to the browser.\n      }\n    });\n  } catch (error) {\n    res.setHeader('Content-Type', 'text/plain');\n    res.write(\"Error Error getting plot file :\" + baseName);\n    res.end();\n  }\n}; // private define a middleware for clearing the cache\n\n\nconst _refreshMetadataMWltData = function (params, req, res, next) {\n  if (Meteor.isServer) {\n    _checkMetaDataRefresh();\n\n    res.end();\n  }\n}; // private save the result from the query into mongo and downsample if that result's size is greater than 1Mb\n\n\nconst _saveResultData = function (result) {\n  if (Meteor.isServer) {\n    var sizeof = require('object-sizeof');\n\n    var hash = require('object-hash');\n\n    var key = hash(result.basis.plotParams);\n    var threshold = 1000000;\n    var ret = {};\n\n    try {\n      var dSize = sizeof(result.data); //console.log(\"result.basis.data size is \", dSize);\n      // TimeSeries and DailyModelCycle are the only plot types that require downSampling\n\n      if (dSize > threshold && (result.basis.plotParams.plotTypes.TimeSeries || result.basis.plotParams.plotTypes.DailyModelCycle)) {\n        // greater than threshold need to downsample\n        // downsample and save it in DownSampleResult\n        console.log(\"DownSampling\");\n\n        var downsampler = require(\"downsample-lttb\");\n\n        var totalPoints = 0;\n\n        for (var di = 0; di < result.data.length; di++) {\n          totalPoints += result.data[di].x_epoch.length;\n        }\n\n        var allowedNumberOfPoints = threshold / dSize * totalPoints;\n        var downSampleResult = result === undefined ? undefined : JSON.parse(JSON.stringify(result));\n\n        for (var ci = 0; ci < result.data.length; ci++) {\n          var dsData = {};\n          var xyDataset = result.data[ci].x_epoch.map(function (d, index) {\n            return [result.data[ci].x_epoch[index], result.data[ci].y[index]];\n          });\n          var ratioTotalPoints = xyDataset.length / totalPoints;\n          var myAllowedPoints = Math.round(ratioTotalPoints * allowedNumberOfPoints); // downsample the array\n\n          var downsampledSeries;\n\n          if (myAllowedPoints < xyDataset.length && xyDataset.length > 2) {\n            downsampledSeries = downsampler.processData(xyDataset, myAllowedPoints); // replace the y attributes (tooltips etc.) with the y attributes from the nearest x\n\n            var originalIndex = 0; // skip through the original dataset capturing each downSampled data point\n\n            var arrayKeys = [];\n            var nonArrayKeys = [];\n            var keys = Object.keys(result.data[ci]);\n\n            for (var ki = 0; ki < keys.length; ki++) {\n              if (keys[ki] !== 'x_epoch') {\n                if (Array.isArray(result.data[ci][keys[ki]])) {\n                  arrayKeys.push(keys[ki]);\n                  dsData[keys[ki]] = [];\n                } else {\n                  nonArrayKeys.push(keys[ki]);\n                }\n              }\n            } // We only ever downsample series plots - never profiles and series plots only ever have error_y arrays.\n            // This is a little hacky but what is happening is we putting error_y.array on the arrayKeys list so that it gets its\n            // downsampled equivalent values.\n\n\n            for (ki = 0; ki < nonArrayKeys.length; ki++) {\n              dsData[nonArrayKeys[ki]] = result.data[ci][nonArrayKeys[ki]];\n            } // remove the original error_y array data.\n\n\n            dsData['error_y'].array = [];\n\n            for (var dsi = 0; dsi < downsampledSeries.length; dsi++) {\n              while (originalIndex < result.data[ci].x_epoch.length && result.data[ci].x_epoch[originalIndex] < downsampledSeries[dsi][0]) {\n                originalIndex++;\n              } // capture the stuff related to this downSampled data point (downSampled data points are always a subset of original data points)\n\n\n              for (ki = 0; ki < arrayKeys.length; ki++) {\n                dsData[arrayKeys[ki]][dsi] = result.data[ci][arrayKeys[ki]][originalIndex];\n              }\n\n              dsData['error_y']['array'][dsi] = result.data[ci]['error_y']['array'][originalIndex];\n            } // add downsampled annotation to curve options\n\n\n            downSampleResult[ci] = dsData;\n            downSampleResult[ci].annotation += \"   **DOWNSAMPLED**\";\n          } else {\n            downSampleResult[ci] = result.data[ci];\n          }\n\n          downSampleResult.data[ci] = downSampleResult[ci];\n        }\n\n        DownSampleResults.rawCollection().insert({\n          \"createdAt\": new Date(),\n          key: key,\n          result: downSampleResult\n        }); // createdAt ensures expiration set in mats-collections\n\n        ret = {\n          key: key,\n          result: downSampleResult\n        };\n      } else {\n        ret = {\n          key: key,\n          result: result\n        };\n      } // save original dataset in the matsCache\n\n\n      if (result.basis.plotParams.plotTypes.TimeSeries || result.basis.plotParams.plotTypes.DailyModelCycle) {\n        for (var ci = 0; ci < result.data.length; ci++) {\n          delete result.data[ci]['x_epoch']; // we only needed this as an index for downsampling\n        }\n      }\n\n      matsCache.storeResult(key, {\n        key: key,\n        result: result\n      }); // lifespan is handled by lowDb (internally) in matscache\n    } catch (error) {\n      if (error.toLocaleString().indexOf(\"larger than the maximum size\") != -1) {\n        throw new Meteor.Error(+\": Requesting too much data... try averaging\");\n      }\n    }\n\n    return ret;\n  }\n}; // PUBLIC METHODS\n//administration tools\n\n\nconst addSentAddress = new ValidatedMethod({\n  name: 'matsMethods.addSentAddress',\n  validate: new SimpleSchema({\n    toAddress: {\n      type: String\n    }\n  }).validator(),\n\n  run(toAddress) {\n    if (!Meteor.userId()) {\n      throw new Meteor.Error(401, \"not-logged-in\");\n    }\n\n    matsCollections.SentAddresses.upsert({\n      address: toAddress\n    }, {\n      address: toAddress,\n      userId: Meteor.userId()\n    });\n    return false;\n  }\n\n}); //  administation tool\n\nconst applyAuthorization = new ValidatedMethod({\n  name: 'matsMethods.applyAuthorization',\n  validate: new SimpleSchema({\n    settings: {\n      type: Object,\n      blackbox: true\n    }\n  }).validator(),\n\n  run(settings) {\n    if (Meteor.isServer) {\n      var roles;\n      var roleName;\n      var authorization;\n      var userRoleName = settings.userRoleName;\n      var userRoleDescription = settings.userRoleDescription;\n      var authorizationRole = settings.authorizationRole;\n      var newUserEmail = settings.newUserEmail;\n      var existingUserEmail = settings.existingUserEmail;\n\n      if (authorizationRole) {\n        // existing role - the role roleName - no need to verify as the selection list came from the database\n        roleName = authorizationRole;\n      } else if (userRoleName && userRoleDescription) {\n        // possible new role - see if it happens to already exist\n        var role = matsCollections.Roles.findOne({\n          name: userRoleName\n        });\n\n        if (role === undefined) {\n          // need to add new role using description\n          matsCollections.Roles.upsert({\n            name: userRoleName\n          }, {\n            $set: {\n              description: userRoleDescription\n            }\n          });\n          roleName = userRoleName;\n        } else {\n          // see if the description matches...\n          roleName = role.name;\n          var description = role.description;\n\n          if (description != userRoleDescription) {\n            // have to update the description\n            matsCollections.Roles.upsert({\n              name: userRoleName\n            }, {\n              $set: {\n                description: userRoleDescription\n              }\n            });\n          }\n        }\n      } // now we have a role roleName - now we need an email\n\n\n      if (existingUserEmail) {\n        // existing user -  no need to verify as the selection list came from the database\n        // see if it already has the role\n        authorization = matsCollections.Authorization.findOne({\n          email: existingUserEmail\n        });\n        roles = authorization.roles;\n\n        if (roles.indexOf(roleName) == -1) {\n          // have to add the role\n          if (roleName) {\n            roles.push(roleName);\n          }\n\n          matsCollections.Authorization.upsert({\n            email: existingUserEmail\n          }, {\n            $set: {\n              roles: roles\n            }\n          });\n        }\n      } else if (newUserEmail) {\n        // possible new authorization - see if it happens to exist\n        authorization = matsCollections.Authorization.findOne({\n          email: newUserEmail\n        });\n\n        if (authorization !== undefined) {\n          // authorization exists - add role to roles if necessary\n          roles = authorization.roles;\n\n          if (roles.indexOf(roleName) == -1) {\n            // have to add the role\n            if (roleName) {\n              roles.push(roleName);\n            }\n\n            matsCollections.Authorization.upsert({\n              email: existingUserEmail\n            }, {\n              $set: {\n                roles: roles\n              }\n            });\n          }\n        } else {\n          // need a new authorization\n          roles = [];\n\n          if (roleName) {\n            roles.push(roleName);\n          }\n\n          if (newUserEmail) {\n            matsCollections.Authorization.upsert({\n              email: newUserEmail\n            }, {\n              $set: {\n                roles: roles\n              }\n            });\n          }\n        }\n      }\n\n      return false;\n    }\n  }\n\n}); // database controls\n\nconst applyDatabaseSettings = new ValidatedMethod({\n  name: 'matsMethods.applyDatabaseSettings',\n  validate: new SimpleSchema({\n    settings: {\n      type: Object,\n      blackbox: true\n    }\n  }).validator(),\n\n  run(settings) {\n    if (Meteor.isServer) {\n      if (settings.name) {\n        matsCollections.Databases.upsert({\n          name: settings.name\n        }, {\n          $set: {\n            name: settings.name,\n            role: settings.role,\n            status: settings.status,\n            host: settings.host,\n            database: settings.database,\n            user: settings.user,\n            password: settings.password\n          }\n        });\n      }\n\n      return false;\n    }\n  }\n\n}); //administration tools\n\nconst deleteSettings = new ValidatedMethod({\n  name: 'matsMethods.deleteSettings',\n  validate: new SimpleSchema({\n    name: {\n      type: String\n    }\n  }).validator(),\n\n  run(params) {\n    if (!Meteor.userId()) {\n      throw new Meteor.Error(\"not-logged-in\");\n    }\n\n    if (Meteor.isServer) {\n      matsCollections.CurveSettings.remove({\n        name: params.name\n      });\n    }\n  }\n\n}); //administration tools\n\nconst emailImage = new ValidatedMethod({\n  name: 'matsMethods.emailImage',\n  validate: new SimpleSchema({\n    imageStr: {\n      type: String\n    },\n    toAddress: {\n      type: String\n    },\n    subject: {\n      type: String\n    }\n  }).validator(),\n\n  run(params) {\n    var imageStr = params.imageStr;\n    var toAddress = params.toAddress;\n    var subject = params.subject;\n\n    if (!Meteor.userId()) {\n      throw new Meteor.Error(401, \"not-logged-in\");\n    }\n\n    var fromAddress = Meteor.user().services.google.email; // these come from google - see\n    // http://masashi-k.blogspot.fr/2013/06/sending-mail-with-gmail-using-xoauth2.html\n    //http://stackoverflow.com/questions/24098461/nodemailer-gmail-what-exactly-is-a-refresh-token-and-how-do-i-get-one/24123550\n    // the gmail account for the credentials is mats.mail.daemon@gmail.com - pwd mats2015!\n    //var clientId = \"339389735380-382sf11aicmgdgn7e72p4end5gnm9sad.apps.googleusercontent.com\";\n    //var clientSecret = \"7CfNN-tRl5QAL595JTW2TkRl\";\n    //var refresh_token = \"1/PDql7FR01N2gmq5NiTfnrT-OlCYC3U67KJYYDNPeGnA\";\n\n    var credentials = matsCollections.Credentials.findOne({\n      name: \"oauth_google\"\n    }, {\n      clientId: 1,\n      clientSecret: 1,\n      refresh_token: 1\n    });\n    var clientId = credentials.clientId;\n    var clientSecret = credentials.clientSecret;\n    var refresh_token = credentials.refresh_token;\n    var smtpTransporter;\n\n    try {\n      smtpTransporter = Nodemailer.createTransport(\"SMTP\", {\n        service: \"Gmail\",\n        auth: {\n          XOAuth2: {\n            user: \"mats.gsd@noaa.gov\",\n            clientId: clientId,\n            clientSecret: clientSecret,\n            refreshToken: refresh_token\n          }\n        }\n      });\n    } catch (e) {\n      throw new Meteor.Error(401, \"Transport error \" + e.message());\n    }\n\n    try {\n      var mailOptions = {\n        sender: fromAddress,\n        replyTo: fromAddress,\n        from: fromAddress,\n        to: toAddress,\n        subject: subject,\n        attachments: [{\n          filename: \"graph.png\",\n          contents: new Buffer(imageStr.split(\"base64,\")[1], \"base64\")\n        }]\n      };\n      smtpTransporter.sendMail(mailOptions, function (error, response) {\n        if (error) {\n          console.log(\"smtpTransporter error \" + error + \" from:\" + fromAddress + \" to:\" + toAddress);\n        } else {\n          console.log(response + \" from:\" + fromAddress + \" to:\" + toAddress);\n        }\n\n        smtpTransporter.close();\n      });\n    } catch (e) {\n      throw new Meteor.Error(401, \"Send error \" + e.message());\n    }\n\n    return false;\n  }\n\n}); // administation tool\n\nconst getAuthorizations = new ValidatedMethod({\n  name: 'matsMethods.getAuthorizations',\n  validate: new SimpleSchema({}).validator(),\n\n  run() {\n    var roles = [];\n\n    if (Meteor.isServer) {\n      var userEmail = Meteor.user().services.google.email.toLowerCase();\n      roles = matsCollections.Authorization.findOne({\n        email: userEmail\n      }).roles;\n    }\n\n    return roles;\n  }\n\n}); // administration tool\n\nconst getDataFunctionFileList = new ValidatedMethod({\n  name: 'matsMethods.getDataFunctionFileList',\n  validate: new SimpleSchema({}).validator(),\n\n  run() {\n    if (Meteor.isServer) {}\n  }\n\n}); // retrieves the saved query results (or downsampled results)\n\nconst getGraphData = new ValidatedMethod({\n  name: 'matsMethods.getGraphData',\n  validate: new SimpleSchema({\n    plotParams: {\n      type: Object,\n      blackbox: true\n    },\n    plotType: {\n      type: String\n    },\n    expireKey: {\n      type: Boolean\n    }\n  }).validator(),\n\n  run(params) {\n    if (Meteor.isServer) {\n      var plotGraphFunction = matsCollections.PlotGraphFunctions.findOne({\n        plotType: params.plotType\n      });\n      var dataFunction = plotGraphFunction.dataFunction;\n      var ret;\n\n      try {\n        var hash = require('object-hash');\n\n        var key = hash(params.plotParams);\n\n        if (process.env.NODE_ENV === \"development\" || params.expireKey) {\n          matsCache.expireKey(key);\n        }\n\n        var results = matsCache.getResult(key);\n\n        if (results === undefined) {\n          // results aren't in the cache - need to process data routine\n          const Future = require('fibers/future');\n\n          var future = new Future();\n          global[dataFunction](params.plotParams, function (results) {\n            ret = _saveResultData(results);\n            future[\"return\"](ret);\n          });\n          return future.wait();\n        } else {\n          // results were already in the matsCache (same params and not yet expired)\n          // are results in the downsampled collection?\n          var dsResults = DownSampleResults.findOne({\n            key: key\n          }, {}, {\n            disableOplog: true\n          });\n\n          if (dsResults !== undefined) {\n            // results are in the mongo cache downsampled collection - returned the downsampled graph data\n            ret = dsResults; // update the expire time in the downsampled collection - this requires a new Date\n\n            DownSampleResults.rawCollection().update({\n              key: key\n            }, {\n              $set: {\n                \"createdAt\": new Date()\n              }\n            });\n          } else {\n            ret = results; // {key:someKey, result:resultObject}\n            // refresh expire time. The only way to perform a refresh on matsCache is to re-save the result.\n\n            matsCache.storeResult(results.key, results);\n          }\n\n          var sizeof = require('object-sizeof');\n\n          console.log(\"result.data size is \", sizeof(results));\n          return ret;\n        }\n      } catch (dataFunctionError) {\n        if (dataFunctionError.toLocaleString().indexOf(\"INFO:\") !== -1) {\n          throw new Meteor.Error(dataFunctionError.message);\n        } else {\n          throw new Meteor.Error(\"Error in getGraphData function:\" + dataFunction + \" : \" + dataFunctionError.message);\n        }\n      }\n\n      return undefined; // probably won't get here\n    }\n  }\n\n}); // retrieves the saved query results (or downsampled results) for a specific key\n\nconst getGraphDataByKey = new ValidatedMethod({\n  name: 'matsMethods.getGraphDataByKey',\n  validate: new SimpleSchema({\n    resultKey: {\n      type: String\n    }\n  }).validator(),\n\n  run(params) {\n    if (Meteor.isServer) {\n      var ret;\n      var key = params.resultKey;\n\n      try {\n        var dsResults = DownSampleResults.findOne({\n          key: key\n        }, {}, {\n          disableOplog: true\n        });\n\n        if (dsResults !== undefined) {\n          ret = dsResults;\n        } else {\n          ret = matsCache.getResult(key); // {key:someKey, result:resultObject}\n        }\n\n        var sizeof = require('object-sizeof');\n\n        console.log(\"getGraphDataByKey results size is \", sizeof(dsResults));\n        return ret;\n      } catch (error) {\n        throw new Meteor.Error(\"Error in getGraphDataByKey function:\" + key + \" : \" + error.message);\n      }\n\n      return undefined;\n    }\n  }\n\n}); // administration tool\n\nconst getGraphFunctionFileList = new ValidatedMethod({\n  name: 'matsMethods.getGraphFunctionFileList',\n  validate: new SimpleSchema({}).validator(),\n\n  run() {\n    if (Meteor.isServer) {}\n  }\n\n});\nconst getLayout = new ValidatedMethod({\n  name: 'matsMethods.getLayout',\n  validate: new SimpleSchema({\n    resultKey: {\n      type: String\n    }\n  }).validator(),\n\n  run(params) {\n    if (Meteor.isServer) {\n      var ret;\n      var key = params.resultKey;\n\n      try {\n        ret = LayoutStoreCollection.rawCollection().findOne({\n          key: key\n        });\n        return ret;\n      } catch (error) {\n        throw new Meteor.Error(\"Error in getLayout function:\" + key + \" : \" + error.message);\n      }\n\n      return undefined;\n    }\n  }\n\n}); // retrieves the saved artifacts (file urls) that were generated by nvBatch for a specific key\n\nconst getMvArtifactsByKey = new ValidatedMethod({\n  name: 'matsMethods.getMvArtifactsByKey',\n  validate: new SimpleSchema({\n    key: {\n      type: String\n    }\n  }).validator(),\n\n  run(params) {\n    if (Meteor.isServer) {\n      var ret;\n      var key = params.key;\n\n      try {\n        ret = matsCache.getResult(key); // {key:someKey, result:resultObject}\n\n        return ret;\n      } catch (error) {\n        throw new Meteor.Error(\"Error in getMvArtifactsByKey function:\" + key + \" : \" + error.message);\n      }\n\n      return undefined;\n    }\n  }\n\n});\n/*\ngetPlotResult is used by the graph/text_*_output templates which are used to display textual results.\nBecause the data isn't being rendered graphically this data is always full size, i.e. NOT downsampled.\nThat is why it only finds it in the Result file cache, never the DownSampleResult collection.\n\nBecause the dataset can be so large ... e.g. megabytes the data retrieval is pagenated. The index is\napplied to the underlying datasets.The data gets stripped down and flattened to only contain the data neccesary for text presentation.\nA new page index of -1000 means get all the data i.e. no pagenation.\n */\n\nconst getPlotResult = new ValidatedMethod({\n  name: 'matsMethods.getPlotResult',\n  validate: new SimpleSchema({\n    resultKey: {\n      type: String\n    },\n    pageIndex: {\n      type: Number\n    },\n    newPageIndex: {\n      type: Number\n    }\n  }).validator(),\n\n  run(params) {\n    if (Meteor.isServer) {\n      var rKey = params.resultKey;\n      var pi = params.pageIndex;\n      var npi = params.newPageIndex;\n      var ret = {};\n\n      try {\n        ret = _getFlattenedResultData(rKey, pi, npi);\n      } catch (e) {\n        console.log(e);\n      }\n\n      return ret;\n    }\n  }\n\n});\nconst getReleaseNotes = new ValidatedMethod({\n  name: 'matsMethods.getReleaseNotes',\n  validate: new SimpleSchema({}).validator(),\n\n  run() {\n    //     return Assets.getText('public/MATSReleaseNotes.html');\n    // }\n    if (Meteor.isServer) {\n      var future = require('fibers/future');\n\n      var fse = require('fs-extra');\n\n      var dFuture = new future();\n      var fData;\n      console.log(process.env.PWD);\n      var file;\n\n      if (process.env.NODE_ENV === \"development\") {\n        file = process.env.PWD + \"/../../meteor_packages/mats-common/public/MATSReleaseNotes.html\";\n      } else {\n        file = process.env.PWD + \"/programs/server/assets/packages/randyp_mats-common/public/MATSReleaseNotes.html\";\n      }\n\n      try {\n        fse.readFile(file, 'utf8', function (err, data) {\n          if (err) {\n            fData = err.message;\n            dFuture[\"return\"]();\n          } else {\n            fData = data;\n            dFuture[\"return\"]();\n          }\n        });\n      } catch (e) {\n        fData = e.message;\n        dFuture[\"return\"]();\n      }\n\n      dFuture.wait();\n      return fData;\n    }\n  }\n\n}); // administration tool\n\nconst getUserAddress = new ValidatedMethod({\n  name: 'matsMethods.getUserAddress',\n  validate: new SimpleSchema({}).validator(),\n\n  run() {\n    if (Meteor.isServer) {\n      return Meteor.user().services.google.email.toLowerCase();\n    }\n  }\n\n}); // app utility\n\nconst insertColor = new ValidatedMethod({\n  name: 'matsMethods.insertColor',\n  validate: new SimpleSchema({\n    newColor: {\n      type: String\n    },\n    insertAfterIndex: {\n      type: Number\n    }\n  }).validator(),\n\n  run(params) {\n    if (params.newColor == \"rgb(255,255,255)\") {\n      return false;\n    }\n\n    var colorScheme = matsCollections.ColorScheme.findOne({});\n    colorScheme.colors.splice(params.insertAfterIndex, 0, newColor);\n    matsCollections.update({}, colorScheme);\n    return false;\n  }\n\n}); // checks to see if the mv artifacts are cached (based on plotspec hash) if not execs an mvbatch and caches the results\n\nconst mvBatch = new ValidatedMethod({\n  name: 'matsMethods.mvBatch',\n  validate: new SimpleSchema({\n    plotParams: {\n      type: Object,\n      blackbox: true\n    },\n    plotType: {\n      type: String\n    }\n  }).validator(),\n\n  run(params) {\n    if (Meteor.isServer) {\n      var mvbatch = MV_DIRS.HOME + \"/bin/mv_batch.sh\";\n      var plotGraphFunction = matsCollections.PlotGraphFunctions.findOne({\n        plotType: params.plotType\n      });\n      var plotSpecFunction = plotGraphFunction.plotSpecFunction;\n      var ret;\n      const appName = matsCollections.appName.findOne({}).app;\n\n      const fse = require('fs-extra'); // generate the key from the params\n\n\n      const hash = require('object-hash');\n\n      const key = hash(params.plotParams); // generate the server router (Picker) urls according to the hash key.\n\n      var artifacts = {};\n\n      if (process.env.NODE_ENV === \"development\") {\n        artifacts = {\n          png: appName + \"/mvplot/\" + key,\n          xml: appName + \"/mvxml/\" + key,\n          sql: appName + \"/mvsql/\" + key,\n          log: appName + \"/mvlog/\" + key,\n          err: appName + \"/mverr/\" + key,\n          R: appName + \"/mvscript/\" + key,\n          data: appName + \"/mvdata/\" + key,\n          points1: appName + \"/mvpoints1/\" + key,\n          points2: appName + \"/mvpoints2/\" + key\n        };\n      } else {\n        // in production the appName is already at the end of the location.href\n        // - which is used to form a url for retrieving the artifact\n        artifacts = {\n          png: \"/mvplot/\" + key,\n          xml: \"/mvxml/\" + key,\n          sql: \"/mvsql/\" + key,\n          log: \"/mvlog/\" + key,\n          err: \"/mverr/\" + key,\n          R: \"/mvscript/\" + key,\n          data: \"/mvdata/\" + key,\n          points1: \"/mvpoints1/\" + key,\n          points2: \"/mvpoints2/\" + key\n        };\n      } // generate the real file paths (these are not exposed to clients)\n\n\n      const plotSpecFilePath = MV_DIRS.XMLDIR + key + \".xml\";\n      const pngFilePath = MV_DIRS.PLOTSDIR + key + \".png\";\n      const sqlFilePath = MV_DIRS.SQLDIR + key + \".sql\";\n      const logFilePath = MV_DIRS.LOGDIR + key + \".log\";\n      const errFilePath = MV_DIRS.ERRDIR + key + \".err\";\n      const scriptFilePath = MV_DIRS.SCRIPTSDIR + key + \".R\";\n      const dataFilePath = MV_DIRS.DATADIR + key + \".data\";\n      const points1Path = MV_DIRS.DATADIR + key + \".points1\";\n      const points2Path = MV_DIRS.DATADIR + key + \".points2\"; // NOTE: the plotParams should include an mvPlot:true parameter.\n      // This should have been set in the caller. This makes the mv plotSpec cache entry unique from a MATS plot\n\n      if (params.plotParams.mvPlot !== true) {\n        throw new Meteor.Error(\"Error in mvBatch: Not an mv plot request: no plotParams.mvPlot:true\");\n      }\n\n      if (process.env.NODE_ENV === \"development\" || params.expireKey) {\n        matsCache.expireKey(key); // in development just blow away the files too\n\n        try {\n          fse.unlinkSync(plotSpecFilePath);\n        } catch (ignore) {}\n\n        try {\n          fse.unlinkSync(pngFilePath);\n        } catch (ignore) {}\n\n        try {\n          fse.unlinkSync(sqlFilePath);\n        } catch (ignore) {}\n\n        try {\n          fse.unlinkSync(logFilePath);\n        } catch (ignore) {}\n\n        try {\n          fse.unlinkSync(errFilePath);\n        } catch (ignore) {}\n\n        try {\n          fse.unlinkSync(scriptFilePath);\n        } catch (ignore) {}\n\n        try {\n          fse.unlinkSync(dataFilePath);\n        } catch (ignore) {}\n\n        try {\n          fse.unlinkSync(points1Path);\n        } catch (ignore) {}\n\n        try {\n          fse.unlinkSync(points2Path);\n        } catch (ignore) {}\n      } // try to get the key from the cache\n\n\n      var artifactPaths = matsCache.getResult(key);\n      var filesExist = false;\n\n      if (artifactPaths != null) {\n        // artifact paths were already cached\n        // do the files exist?\n        // check for file existence\n        var xmlSpecExists = fse.existsSync(plotSpecFilePath);\n        var plotExists = fse.existsSync(pngFilePath);\n        var scriptExists = fse.existsSync(scriptFilePath);\n        var dataExists = fse.existsSync(dataFilePath);\n        var sqlExists = fse.existsSync(sqlFilePath);\n        var logExists = fse.existsSync(logFilePath);\n        filesExist = xmlSpecExists && plotExists && scriptExists && dataExists && sqlExists && logExists;\n      } // either the artifacts were cached but the files don't exist or the artifacts were not cached\n\n\n      if (artifactPaths == null || filesExist === false) {\n        // artifactPaths are not in the cache - or the files are not there - need to process plotSpecFunction routine\n        // translate the plotparams to a plotSpec and use the key in the plotSpec reference\n        global[plotSpecFunction](params.plotParams, key, function (err, plotSpec) {\n          // callback\n          if (err) {\n            console.log(err, \"plotspecFunction:\", plotSpecFunction);\n            throw new Meteor.Error(err + \"plotspecFunction: \" + plotSpecFunction);\n          } else {\n            // no error and we have a plot spec\n            // see if the artifacts exist as files. They might have been run before and are still hanging around.\n            // NOTE: the MV_OUTPUT aren't cached at all (i.e. no expiration) -\n            // therefore the expiration of the MATS cache plotSpec and the actual artifacts is sloppy.\n            // check for file existence\n            var xmlSpecExists = fse.existsSync(plotSpecFilePath);\n            var plotExists = fse.existsSync(pngFilePath);\n            var scriptExists = fse.existsSync(scriptFilePath);\n            var dataExists = fse.existsSync(dataFilePath);\n            var sqlExists = fse.existsSync(sqlFilePath);\n            var logExists = fse.existsSync(logFilePath);\n            var filesExist = xmlSpecExists && plotExists && scriptExists && dataExists && sqlExists && logExists;\n\n            if (!filesExist) {\n              const mvBatchCmd = MV_DIRS.HOME + \"/bin/mv_batch.sh \" + ' ' + plotSpecFilePath;\n\n              const cp = require('child_process'); // save the plotSpec\n\n\n              fse.outputFileSync(plotSpecFilePath, plotSpec); // exec mv batch with this plotSpec - this should be synchronous\n\n              cp.execSync(mvBatchCmd, (error, stdout, stderr) => {\n                if (stderr) {\n                  fse.outputFileSync(errFilePath, stderr, function (err) {\n                    if (err) {\n                      console.log(\"Error:couldn't write error file\" + err); //null\n                    }\n                  });\n                } else {\n                  fse.outputFileSync(errFilePath, \"no stderr for key: \" + key, function (err) {\n                    if (err) {\n                      console.log(\"Error:couldn't write error file\" + err); //null\n                    }\n                  });\n                }\n\n                if (stdout) {\n                  if (stdout.match(/ERROR/)) {\n                    fse.outputFileSync(errFilePath, stdout, function (err) {\n                      if (err) {\n                        console.log(\"Error:couldn't write log/err file\" + err);\n                      }\n                    });\n                  }\n\n                  fse.outputFileSync(logFilePath, stdout, function (err) {\n                    if (err) {\n                      console.log(\"Error:couldn't write log file\" + err);\n                    }\n                  });\n                  var sqlout = stdout.match(/[\\s\\S]*#*(SELECT[\\s\\S]*)Database/) == null ? null : stdout.match(/[\\s\\S]*#*(SELECT[\\s\\S]*)Database/)[1];\n\n                  if (sqlout == null) {\n                    fse.outputFileSync(sqlFilePath, \"no sql statement found in output for key: \" + key, function (err) {\n                      if (err) {\n                        console.log(\"Error:couldn't write sql file\" + err);\n                      }\n                    });\n                  } else {\n                    fse.outputFileSync(sqlFilePath, sqlout, function (err) {\n                      if (err) {\n                        console.log(\"Error:couldn't write sql file\" + err);\n                      }\n                    });\n                  }\n                } else {\n                  fse.outputFileSync(logFilePath, \"No stdout captured for: \" + key, function (err) {\n                    if (err) {\n                      console.log(\"Error:couldn't write log file\" + err);\n                    }\n                  });\n                } // no error - check for the files and cache the spec and filePaths\n\n\n                var xmlSpecExists = fse.existsSync(plotSpecFilePath);\n                var plotExists = fse.existsSync(pngFilePath);\n                var scriptExists = fse.existsSync(scriptFilePath);\n                var dataExists = fse.existsSync(dataFilePath);\n                var sqlExists = fse.existsSync(sqlFilePath);\n                var logExists = fse.existsSync(logFilePath);\n                var filesExist = xmlSpecExists && plotExists && scriptExists && dataExists && sqlExists && logExists;\n\n                if (!filesExist) {\n                  console.error('exec error: expected files do not exist');\n                }\n\n                matsCache.storeResult(key, artifacts);\n                /*\n                    The mvbatch should have saved the plot artifacts according to the following plotSpec elements\n                        <data_file>key.data</data_file>\n                        <plot_file>key.png</plot_file>\n                        <r_file>key.R</r_file>\n                    where key is the same as the key for the matsCache\n                    The stored artifacts shoulkd be like ...\n                        MV_OUTPUT/plots/key.png\n                        MV_OUTPUT/xml/key.xml\n                        MV_OUTPUT/xml/key.sql\n                        MV_OUTPUT/xml/key.log\n                        MV_OUTPUT/scripts/key.R\n                        MV_OUTPUT/data/key.data\n                        MV_OUTPUT/data/key.sum_stat.info\n                        MV_OUTPUT/data/key.data.sum_stat\n                         MV_OUTPUT/xml/key.xml is the plotSpec\n                */\n\n                return {\n                  'key': key,\n                  'artifacts': artifacts\n                };\n              }); //ret = {key:key, result:{artifacts:artifacts}}\n              // return the key and the artifacts\n            } // plotspec did not exist\n            else {\n                // the files actually already existed but we needed the plotspec\n                // so just refresh the cache and return the key right away\n                matsCache.storeResult(key, artifacts);\n                return {\n                  'key': key,\n                  'artifacts': artifacts\n                };\n              }\n          }\n        });\n      } // either artifactPaths == null || filesExist === false\n      else {\n          // artifacts existed and plotspec existed - refresh the cache\n          matsCache.storeResult(key, artifacts);\n          return {\n            'key': key,\n            'artifacts': artifacts\n          };\n        }\n\n      return {\n        'key': key,\n        'artifacts': artifacts\n      };\n    } // if Meteor is Server\n\n  } // run\n\n\n}); // administration tool\n\nconst readFunctionFile = new ValidatedMethod({\n  name: 'matsMethods.readFunctionFile',\n  validate: new SimpleSchema({}).validator(),\n\n  run() {\n    if (Meteor.isServer) {\n      var future = require('fibers/future');\n\n      var fse = require('fs-extra');\n\n      var path = \"\";\n      var fData;\n\n      if (type == \"data\") {\n        path = \"/web/static/dataFunctions/\" + file;\n        console.log('exporting data file: ' + path);\n      } else if (type == \"graph\") {\n        path = \"/web/static/displayFunctions/\" + file;\n        console.log('exporting graph file: ' + path);\n      } else {\n        return \"error - wrong type\";\n      }\n\n      fse.readFile(path, function (err, data) {\n        if (err) throw err;\n        fData = data.toString();\n        future[\"return\"](fData);\n      });\n      return future.wait();\n    }\n  }\n\n}); // refreshes the metadata for the app that's running\n\nconst refreshMetaData = new ValidatedMethod({\n  name: 'matsMethods.refreshMetaData',\n  validate: new SimpleSchema({}).validator(),\n\n  run() {\n    if (Meteor.isServer) {\n      try {\n        //console.log(\"Asked to refresh metadata\");\n        _checkMetaDataRefresh();\n      } catch (e) {\n        console.log(e);\n        throw new Meteor.Error(\"Server error: \", e.message);\n      }\n    }\n\n    return metaDataTableUpdates.find({}).fetch();\n  }\n\n}); // administation tool\n\nconst removeAuthorization = new ValidatedMethod({\n  name: 'matsMethods.removeAuthorization',\n  validate: new SimpleSchema({\n    settings: {\n      type: Object,\n      blackbox: true\n    }\n  }).validator(),\n\n  run(settings) {\n    if (Meteor.isServer) {\n      var email;\n      var roleName;\n      var userRoleName = settings.userRoleName;\n      var authorizationRole = settings.authorizationRole;\n      var newUserEmail = settings.newUserEmail;\n      var existingUserEmail = settings.existingUserEmail;\n\n      if (authorizationRole) {\n        // existing role - the role roleName - no need to verify as the selection list came from the database\n        roleName = authorizationRole;\n      } else if (userRoleName) {\n        roleName = userRoleName;\n      }\n\n      if (existingUserEmail) {\n        email = existingUserEmail;\n      } else {\n        email = newUserEmail;\n      } // if user and role remove the role from the user\n\n\n      if (email && roleName) {\n        matsCollections.Authorization.update({\n          email: email\n        }, {\n          $pull: {\n            roles: roleName\n          }\n        });\n      } // if user and no role remove the user\n\n\n      if (email && !roleName) {\n        matsCollections.Authorization.remove({\n          email: email\n        });\n      } // if role and no user remove role and remove role from all users\n\n\n      if (roleName && !email) {\n        // remove the role\n        matsCollections.Roles.remove({\n          name: roleName\n        }); // remove the roleName role from all the authorizations\n\n        matsCollections.Authorization.update({\n          roles: roleName\n        }, {\n          $pull: {\n            roles: roleName\n          }\n        }, {\n          multi: true\n        });\n      }\n\n      return false;\n    }\n  }\n\n}); // app utility\n\nconst removeColor = new ValidatedMethod({\n  name: 'matsMethods.removeColor',\n  validate: new SimpleSchema({\n    removeColor: {\n      type: String\n    }\n  }).validator(),\n\n  run(removeColor) {\n    var colorScheme = matsCollections.ColorScheme.findOne({});\n    var removeIndex = colorScheme.colors.indexOf(removeColor);\n    colorScheme.colors.splice(removeIndex, 1);\n    matsCollections.ColorScheme.update({}, colorScheme);\n    return false;\n  }\n\n}); // database controls\n\nconst removeDatabase = new ValidatedMethod({\n  name: 'matsMethods.removeDatabase',\n  validate: new SimpleSchema({\n    dbName: {\n      type: String\n    }\n  }).validator(),\n\n  run(dbName) {\n    if (Meteor.isServer) {\n      matsCollections.Databases.remove({\n        name: dbName\n      });\n    }\n  }\n\n}); // makes sure all of the parameters display appropriate selections in relation to one another\n\nconst resetApp = function (appRef) {\n  var fse = require('fs-extra');\n\n  const metaDataTableRecords = appRef.appMdr;\n  const type = appRef.appType;\n  const appName = appRef.app;\n  var dep_env = process.env.NODE_ENV; // set some defaults for python processing - these can be overridden\n\n  if (Meteor.settings.private != null && Meteor.settings.private.PYTHON_PATH == null) {\n    Meteor.settings.private.PYTHON_PATH = \"/usr/bin/python\";\n  }\n\n  if (Meteor.settings.private != null && Meteor.settings.private.process != null && Meteor.settings.private.process.RUN_ENV != null) {\n    switch (Meteor.settings.private.process.RUN_ENV) {\n      case \"development\":\n      case \"integration\":\n      case \"production\":\n        dep_env = Meteor.settings.private.process.RUN_ENV;\n        break;\n\n      default:\n        dep_env = process.env.NODE_ENV;\n        break;\n    }\n  }\n\n  var deployment;\n  var deploymentText = Assets.getText('public/deployment/deployment.json');\n\n  if (deploymentText == null) {// equivilent to deploymentText === null || deploymentText === undefined\n  }\n\n  deployment = JSON.parse(deploymentText);\n  var app = {};\n\n  for (var ai = 0; ai < deployment.length; ai++) {\n    var dep = deployment[ai];\n\n    if (dep.deployment_environment == dep_env) {\n      app = dep.apps.filter(function (app) {\n        return app.app === appName;\n      })[0];\n    }\n  }\n\n  const appVersion = app ? app.version : \"unknown\";\n  const appTitle = app ? app.title : \"unknown\";\n  const buildDate = app ? app.buildDate : \"unknown\";\n  const appType = type ? type : matsTypes.AppTypes.mats;\n  matsCollections.appName.upsert({\n    app: appName\n  }, {\n    $set: {\n      app: appName\n    }\n  }); // remember that we updated the metadata tables just now - create metaDataTableUpdates\n\n  /*\n      metaDataTableUpdates:\n      {\n          name: dataBaseName,\n          tables: [tableName1, tableName2 ..],\n          lastRefreshed : timestamp\n      }\n   */\n  // only create metadata tables if the resetApp was called with a real metaDataTables object\n\n  if (metaDataTableRecords instanceof matsTypes.MetaDataDBRecord) {\n    var metaDataTables = metaDataTableRecords.getRecords();\n\n    for (var mdti = 0; mdti < metaDataTables.length; mdti++) {\n      const metaDataRef = metaDataTables[mdti];\n      metaDataRef.lastRefreshed = moment().format();\n\n      if (metaDataTableUpdates.find({\n        name: metaDataRef.name\n      }).count() == 0) {\n        metaDataTableUpdates.update({\n          name: metaDataRef.name\n        }, metaDataRef, {\n          upsert: true\n        });\n      }\n    }\n  } else {\n    throw new Meteor.Error(\"Server error: \", \"resetApp: bad pool-database entry\");\n  }\n\n  matsCollections.Roles.remove({});\n  matsDataUtils.doRoles();\n  matsCollections.Authorization.remove({});\n  matsDataUtils.doAuthorization();\n  matsCollections.Credentials.remove({});\n  matsDataUtils.doCredentials();\n  matsCollections.PlotGraphFunctions.remove({});\n  matsCollections.ColorScheme.remove({});\n  matsDataUtils.doColorScheme();\n  matsCollections.Settings.remove({});\n  matsDataUtils.doSettings(appTitle, appVersion, buildDate, appType);\n  matsCollections.CurveParams.remove({});\n  matsCollections.PlotParams.remove({});\n  matsCollections.CurveTextPatterns.remove({}); // app specific routines\n  //const asrKeys = Object.keys(appSpecificResetRoutines);\n\n  const asrKeys = appSpecificResetRoutines;\n\n  for (var ai = 0; ai < asrKeys.length; ai++) {\n    global.appSpecificResetRoutines[ai]();\n  }\n\n  matsCache.clear();\n}; // administration tool\n\n\nconst restoreFromFile = new ValidatedMethod({\n  name: 'matsMethods.restoreFromFile',\n  validate: new SimpleSchema({\n    type: {\n      type: String\n    },\n    name: {\n      type: String\n    },\n    data: {\n      type: Object,\n      blackbox: true\n    }\n  }).validator(),\n\n  run(params) {\n    if (Meteor.isServer) {\n      console.log(\"restoring \" + params.type + \" file \" + params.name);\n      var path = \"\";\n\n      if (params.type == \"data\") {\n        path = \"/web/static/dataFunctions/\" + params.name;\n      } else if (params.ype == \"graph\") {\n        path = \"/web/static/displayFunctions/\" + params.name;\n      } else {\n        return \"error - wrong tyoe\";\n      }\n\n      console.log('importing ' + params.type + ' file: ' + path);\n\n      var fse = require('fs-extra');\n\n      fse.writeFile(path, params.data.toString(), function (err) {\n        if (err) {\n          return err.toLocaleString();\n        }\n\n        console.log('imported ' + params.type + ' file: ' + path);\n      });\n    }\n  }\n\n}); // administration tool\n\nconst restoreFromParameterFile = new ValidatedMethod({\n  name: 'matsMethods.restoreFromParameterFile',\n  validate: new SimpleSchema({\n    name: {\n      type: String\n    },\n    data: {\n      type: Object,\n      blackbox: true\n    }\n  }).validator(),\n\n  run(params) {\n    var data = params.data;\n\n    if (Meteor.isServer) {\n      var d = [];\n\n      if (data.CurveParams) {\n        matsCollections.CurveParams.remove({});\n        d = _.map(data.CurveParams, function (o) {\n          return _.omit(o, '_id');\n        });\n        d.forEach(function (o) {\n          matsCollections.CurveParams.insert(o);\n        });\n      }\n\n      if (data.PlotParams) {\n        matsCollections.PlotParams.remove({});\n        d = _.map(data.PlotParams, function (o) {\n          return _.omit(o, '_id');\n        });\n        d.forEach(function (o) {\n          matsCollections.PlotParams.insert(o);\n        });\n      }\n\n      if (data.PlotGraphFunctions) {\n        matsCollections.PlotGraphFunctions.remove({});\n        d = _.map(data.PlotGraphFunctions, function (o) {\n          return _.omit(o, '_id');\n        });\n        d.forEach(function (o) {\n          matsCollections.PlotGraphFunctions.insert(o);\n        });\n      }\n\n      if (data.Settings) {\n        matsCollections.Settings.remove({});\n        d = _.map(data.Settings, function (o) {\n          return _.omit(o, '_id');\n        });\n        d.forEach(function (o) {\n          matsCollections.Settings.insert(o);\n        });\n      }\n\n      if (data.ColorScheme) {\n        matsCollections.ColorScheme.remove({});\n        d = _.map(data.ColorScheme, function (o) {\n          return _.omit(o, '_id');\n        });\n        d.forEach(function (o) {\n          matsCollections.ColorScheme.insert(o);\n        });\n      }\n\n      if (data.Authorization) {\n        matsCollections.Authorization.remove({});\n        d = _.map(data.Authorization, function (o) {\n          return _.omit(o, '_id');\n        });\n        d.forEach(function (o) {\n          matsCollections.Authorization.insert(o);\n        });\n      }\n\n      if (data.Roles) {\n        matsCollections.Roles.remove({});\n        d = _.map(data.Roles, function (o) {\n          return _.omit(o, '_id');\n        });\n        d.forEach(function (o) {\n          matsCollections.Roles.insert(o);\n        });\n      }\n\n      if (data.Databases) {\n        matsCollections.Databases.remove({});\n        d = _.map(data.Databases, function (o) {\n          return _.omit(o, '_id');\n        });\n        d.forEach(function (o) {\n          matsCollections.Databases.insert(o);\n        });\n      }\n\n      if (data.Credentials) {\n        matsCollections.Credentials.remove({});\n        d = _.map(data.Credentials, function (o) {\n          return _.omit(o, '_id');\n        });\n        d.forEach(function (o) {\n          matsCollections.Credentials.insert(o);\n        });\n      }\n    }\n  }\n\n});\nconst saveLayout = new ValidatedMethod({\n  name: 'matsMethods.saveLayout',\n  validate: new SimpleSchema({\n    resultKey: {\n      type: String\n    },\n    layout: {\n      type: Object,\n      blackbox: true\n    },\n    curveOpsUpdate: {\n      type: Object,\n      blackbox: true\n    }\n  }).validator(),\n\n  run(params) {\n    if (Meteor.isServer) {\n      var key = params.resultKey;\n      var layout = params.layout;\n      var curveOpsUpdate = params.curveOpsUpdate;\n\n      try {\n        LayoutStoreCollection.upsert({\n          key: key\n        }, {\n          $set: {\n            \"createdAt\": new Date(),\n            layout: layout,\n            curveOpsUpdate: curveOpsUpdate\n          }\n        });\n      } catch (error) {\n        throw new Meteor.Error(\"Error in saveLayout function:\" + key + \" : \" + error.message);\n      }\n    }\n  }\n\n}); //administration tools\n\nconst saveSettings = new ValidatedMethod({\n  name: 'matsMethods.saveSettings',\n  validate: new SimpleSchema({\n    saveAs: {\n      type: String\n    },\n    p: {\n      type: Object,\n      blackbox: true\n    },\n    permission: {\n      type: String\n    }\n  }).validator(),\n\n  run(params) {\n    var user = \"anonymous\";\n    matsCollections.CurveSettings.upsert({\n      name: params.saveAs\n    }, {\n      created: moment().format(\"MM/DD/YYYY HH:mm:ss\"),\n      name: params.saveAs,\n      data: params.p,\n      owner: Meteor.userId() == null ? \"anonymous\" : Meteor.userId(),\n      permission: params.permission,\n      savedAt: new Date(),\n      savedBy: Meteor.user() == null ? \"anonymous\" : user\n    });\n  }\n\n}); // administation tool\n\nconst setCredentials = new ValidatedMethod({\n  name: 'matsMethods.setCredentials',\n  validate: new SimpleSchema({\n    settings: {\n      type: Object,\n      blackbox: true\n    }\n  }).validator(),\n\n  run(settings) {\n    if (Meteor.isServer) {\n      var name = settings.name;\n      var clientId = settings.clientId;\n      var clientSecret = settings.clientSecret;\n      var clientRefreshToken = settings.clientRefreshToken;\n      matsCollections.Credentials.update({}, {\n        $set: {\n          name: name,\n          clientId: clientId,\n          clientSecret: clientSecret,\n          refresh_token: clientRefreshToken\n        }\n      });\n      return false;\n    }\n  }\n\n});\nconst setSettings = new ValidatedMethod({\n  name: 'matsMethods.setSettings',\n  validate: new SimpleSchema({\n    settings: {\n      type: Object,\n      blackbox: true\n    }\n  }).validator(),\n\n  run(params) {\n    if (Meteor.isServer) {\n      var settings = params.settings;\n      var labelPrefix = settings.labelPrefix;\n      var title = settings.title;\n      var lineWidth = settings.lineWidth;\n      var nullFillString = settings.nullFillString;\n      var resetFromCode = settings.resetFromCode;\n      matsCollections.Settings.update({}, {\n        $set: {\n          LabelPrefix: labelPrefix,\n          Title: title,\n          LineWidth: lineWidth,\n          NullFillString: nullFillString,\n          resetFromCode: resetFromCode\n        }\n      });\n    }\n\n    return false;\n  }\n\n});\n/* test methods */\n\nconst testGetMetaDataTableUpdates = new ValidatedMethod({\n  name: 'matsMethods.testGetMetaDataTableUpdates',\n  validate: new SimpleSchema({}).validator(),\n\n  run() {\n    return metaDataTableUpdates.find({}).fetch();\n  }\n\n});\nconst testGetTables = new ValidatedMethod({\n  name: 'matsMethods.testGetTables',\n  validate: new SimpleSchema({\n    host: {\n      type: String\n    },\n    user: {\n      type: String\n    },\n    password: {\n      type: String\n    },\n    database: {\n      type: String\n    }\n  }).validator(),\n\n  run(params) {\n    if (Meteor.isServer) {\n      const Future = require('fibers/future');\n\n      const queryWrap = Future.wrap(function (callback) {\n        const connection = mysql.createConnection({\n          host: params.host,\n          user: params.user,\n          password: params.password,\n          database: params.database\n        });\n        connection.query(\"show tables;\", function (err, result) {\n          const tables = result.map(function (a) {\n            return a.Tables_in_ruc_ua_sums2;\n          });\n          return callback(err, tables);\n        });\n        connection.end(function (err) {\n          if (err) {\n            console.log(\"testGetTables cannot end connection\");\n          }\n        });\n      });\n      return queryWrap().wait();\n    }\n  }\n\n});\nconst testSetMetaDataTableUpdatesLastRefreshedBack = new ValidatedMethod({\n  name: 'matsMethods.testSetMetaDataTableUpdatesLastRefreshedBack',\n  validate: new SimpleSchema({}).validator(),\n\n  run() {\n    var mtu = metaDataTableUpdates.find({}).fetch();\n    var id = mtu[0]._id;\n    metaDataTableUpdates.update({\n      _id: id\n    }, {\n      $set: {\n        lastRefreshed: 0\n      }\n    });\n    return metaDataTableUpdates.find({}).fetch();\n  }\n\n});\nmodule.exportDefault(matsMethods = {\n  addSentAddress: addSentAddress,\n  applyAuthorization: applyAuthorization,\n  applyDatabaseSettings: applyDatabaseSettings,\n  deleteSettings: deleteSettings,\n  emailImage: emailImage,\n  getAuthorizations: getAuthorizations,\n  getDataFunctionFileList: getDataFunctionFileList,\n  getGraphData: getGraphData,\n  getGraphDataByKey: getGraphDataByKey,\n  getGraphFunctionFileList: getGraphFunctionFileList,\n  getLayout: getLayout,\n  getMvArtifactsByKey: getMvArtifactsByKey,\n  getPlotResult: getPlotResult,\n  getReleaseNotes: getReleaseNotes,\n  getUserAddress: getUserAddress,\n  insertColor: insertColor,\n  mvBatch: mvBatch,\n  readFunctionFile: readFunctionFile,\n  refreshMetaData: refreshMetaData,\n  removeAuthorization: removeAuthorization,\n  removeColor: removeColor,\n  removeDatabase: removeDatabase,\n  resetApp: resetApp,\n  restoreFromFile: restoreFromFile,\n  restoreFromParameterFile: restoreFromParameterFile,\n  saveLayout: saveLayout,\n  saveSettings: saveSettings,\n  setCredentials: setCredentials,\n  setSettings: setSettings,\n  testGetMetaDataTableUpdates: testGetMetaDataTableUpdates,\n  testGetTables: testGetTables,\n  testSetMetaDataTableUpdatesLastRefreshedBack: testSetMetaDataTableUpdatesLastRefreshedBack,\n  MV_DIRS: MV_DIRS\n});","map":{"version":3,"sources":["packages/randyp:mats-common/imports/startup/api/matsMethods.js"],"names":["Meteor","module","link","v","ValidatedMethod","SimpleSchema","matsCache","matsCollections","matsDataQueryUtils","matsDataUtils","matsTypes","mysql","url","Mongo","metaDataTableUpdates","Collection","LayoutStoreCollection","DownSampleResults","MV_DIRS","isServer","settings","private","undefined","_MV_OUT","MV_OUTPUT","_MV_HOME","MV_HOME","_MV_LOGDIR","_MV_ERRDIR","_MV_DATADIR","_MV_SQLDIR","_MV_XMLDIR","_MV_SCRIPTSDIR","_MV_PLOTSSDIR","process","env","JAVA_HOME","LOGDIR","ERRDIR","DATADIR","SQLDIR","XMLDIR","SCRIPTSDIR","PLOTSDIR","HOME","rawCollection","createIndex","expireAfterSeconds","Picker","route","params","req","res","next","middleware","_getCSV","_getJSON","_clearCache","_refreshMetadataMWltData","_mvGetData","_mvGetPoints1","_mvGetPoints2","_mvGetXml","_mvGetPlot","_mvGetScript","_mvGetSql","_mvGetLog","_mvGetErr","_checkMetaDataRefresh","refresh","tableUpdates","find","fetch","tui","length","id","_id","poolName","pool","dbName","name","tableNames","tables","lastRefreshed","updatedEpoch","Number","MAX_VALUE","ti","tName","rows","simplePoolQueryWrapSynchronous","global","i","e","Error","message","lastRefreshedEpoch","moment","valueOf","console","log","utc","format","asrKeys","appSpecificResetRoutines","ai","update","$set","clear","end","stringify","require","csv","result","_getFlattenedResultData","key","statArray","Object","values","stats","dataArray","data","statResultArray","dataResultArray","si","push","keys","label","di","dataSubArray","dataHeader","filter","indexOf","dsi","fileName","setHeader","header","err","output","write","toLocaleString","flatJSON","_getPagenatedData","JSON","error","dsiRealPageIndex","dsiTextDirection","rk","p","np","resp","r","plotTypes","basis","plotParams","plotType","_","invert","PlotTypes","timeSeries","dailyModelCycle","returnData","ci","reservedWords","ReservedWords","glob_stats","d_mean","sd","n_good","stde_betsy","lag1","minVal","maxVal","curveData","cdi","x","curveDataElement","raw_stat","y","profile","cdata","dieoff","threshold","validtime","labelSuffix","reliability","sample_climo","prob_bin","hit_rate","obs_y","obs_n","map","reduce","prev","curr","N_times","average","queryVal","stdev","min_time","max_time","siteName","histogram","glob_mean","glob_sd","glob_n","glob_min","glob_max","bin_stats","bin_n","bin_rf","binLowBound","binUpBound","bin_mean","bin_sd","contour","contourDiff","n","mean","minDate","maxDate","xTextOutput","yTextOutput","zTextOutput","nTextOutput","minDateTextOutput","maxDateTextOutput","scatter2d","firstBestFitIndex","bestFitIndexes","bestFitIndex","cbi","curveTextData","element","rky","myPageIndex","newPageIndex","ret","rawReturn","getResult","parse","start","direction","dsiStart","dsiEnd","csi","Math","floor","slice","fse","filePath","baseName","readFile","_saveResultData","sizeof","hash","dSize","TimeSeries","DailyModelCycle","downsampler","totalPoints","x_epoch","allowedNumberOfPoints","downSampleResult","dsData","xyDataset","d","index","ratioTotalPoints","myAllowedPoints","round","downsampledSeries","processData","originalIndex","arrayKeys","nonArrayKeys","ki","Array","isArray","array","annotation","insert","Date","storeResult","addSentAddress","validate","toAddress","type","String","validator","run","userId","SentAddresses","upsert","address","applyAuthorization","blackbox","roles","roleName","authorization","userRoleName","userRoleDescription","authorizationRole","newUserEmail","existingUserEmail","role","Roles","findOne","description","Authorization","email","applyDatabaseSettings","Databases","status","host","database","user","password","deleteSettings","CurveSettings","remove","emailImage","imageStr","subject","fromAddress","services","google","credentials","Credentials","clientId","clientSecret","refresh_token","smtpTransporter","Nodemailer","createTransport","service","auth","XOAuth2","refreshToken","mailOptions","sender","replyTo","from","to","attachments","filename","contents","Buffer","split","sendMail","response","close","getAuthorizations","userEmail","toLowerCase","getDataFunctionFileList","getGraphData","expireKey","Boolean","plotGraphFunction","PlotGraphFunctions","dataFunction","NODE_ENV","results","Future","future","wait","dsResults","disableOplog","dataFunctionError","getGraphDataByKey","resultKey","getGraphFunctionFileList","getLayout","getMvArtifactsByKey","getPlotResult","pageIndex","rKey","pi","npi","getReleaseNotes","dFuture","fData","PWD","file","getUserAddress","insertColor","newColor","insertAfterIndex","colorScheme","ColorScheme","colors","splice","mvBatch","mvbatch","plotSpecFunction","appName","app","artifacts","png","xml","sql","R","points1","points2","plotSpecFilePath","pngFilePath","sqlFilePath","logFilePath","errFilePath","scriptFilePath","dataFilePath","points1Path","points2Path","mvPlot","unlinkSync","ignore","artifactPaths","filesExist","xmlSpecExists","existsSync","plotExists","scriptExists","dataExists","sqlExists","logExists","plotSpec","mvBatchCmd","cp","outputFileSync","execSync","stdout","stderr","match","sqlout","readFunctionFile","path","toString","refreshMetaData","removeAuthorization","$pull","multi","removeColor","removeIndex","removeDatabase","resetApp","appRef","metaDataTableRecords","appMdr","appType","dep_env","PYTHON_PATH","RUN_ENV","deployment","deploymentText","Assets","getText","dep","deployment_environment","apps","appVersion","version","appTitle","title","buildDate","AppTypes","mats","MetaDataDBRecord","metaDataTables","getRecords","mdti","metaDataRef","count","doRoles","doAuthorization","doCredentials","doColorScheme","Settings","doSettings","CurveParams","PlotParams","CurveTextPatterns","restoreFromFile","ype","writeFile","restoreFromParameterFile","o","omit","forEach","saveLayout","layout","curveOpsUpdate","saveSettings","saveAs","permission","created","owner","savedAt","savedBy","setCredentials","clientRefreshToken","setSettings","labelPrefix","lineWidth","nullFillString","resetFromCode","LabelPrefix","Title","LineWidth","NullFillString","testGetMetaDataTableUpdates","testGetTables","queryWrap","wrap","callback","connection","createConnection","query","a","Tables_in_ruc_ua_sums2","testSetMetaDataTableUpdatesLastRefreshedBack","mtu","exportDefault","matsMethods"],"mappings":"AAAA,IAAIA,MAAJ;AAAWC,MAAM,CAACC,IAAP,CAAY,eAAZ,EAA4B;AAACF,EAAAA,MAAM,CAACG,CAAD,EAAG;AAACH,IAAAA,MAAM,GAACG,CAAP;AAAS;;AAApB,CAA5B,EAAkD,CAAlD;AAAqD,IAAIC,eAAJ;AAAoBH,MAAM,CAACC,IAAP,CAAY,6BAAZ,EAA0C;AAACE,EAAAA,eAAe,CAACD,CAAD,EAAG;AAACC,IAAAA,eAAe,GAACD,CAAhB;AAAkB;;AAAtC,CAA1C,EAAkF,CAAlF;AAAqF,IAAIE,YAAJ;AAAiBJ,MAAM,CAACC,IAAP,CAAY,6BAAZ,EAA0C;AAACG,EAAAA,YAAY,CAACF,CAAD,EAAG;AAACE,IAAAA,YAAY,GAACF,CAAb;AAAe;;AAAhC,CAA1C,EAA4E,CAA5E;AAA+E,IAAIG,SAAJ,EAAcC,eAAd,EAA8BC,kBAA9B,EAAiDC,aAAjD,EAA+DC,SAA/D;AAAyET,MAAM,CAACC,IAAP,CAAY,2BAAZ,EAAwC;AAACI,EAAAA,SAAS,CAACH,CAAD,EAAG;AAACG,IAAAA,SAAS,GAACH,CAAV;AAAY,GAA1B;;AAA2BI,EAAAA,eAAe,CAACJ,CAAD,EAAG;AAACI,IAAAA,eAAe,GAACJ,CAAhB;AAAkB,GAAhE;;AAAiEK,EAAAA,kBAAkB,CAACL,CAAD,EAAG;AAACK,IAAAA,kBAAkB,GAACL,CAAnB;AAAqB,GAA5G;;AAA6GM,EAAAA,aAAa,CAACN,CAAD,EAAG;AAACM,IAAAA,aAAa,GAACN,CAAd;AAAgB,GAA9I;;AAA+IO,EAAAA,SAAS,CAACP,CAAD,EAAG;AAACO,IAAAA,SAAS,GAACP,CAAV;AAAY;;AAAxK,CAAxC,EAAkN,CAAlN;AAAqN,IAAIQ,KAAJ;AAAUV,MAAM,CAACC,IAAP,CAAY,mBAAZ,EAAgC;AAACS,EAAAA,KAAK,CAACR,CAAD,EAAG;AAACQ,IAAAA,KAAK,GAACR,CAAN;AAAQ;;AAAlB,CAAhC,EAAoD,CAApD;AAAuD,IAAIS,GAAJ;AAAQX,MAAM,CAACC,IAAP,CAAY,KAAZ,EAAkB;AAACU,EAAAA,GAAG,CAACT,CAAD,EAAG;AAACS,IAAAA,GAAG,GAACT,CAAJ;AAAM;;AAAd,CAAlB,EAAkC,CAAlC;AAAqC,IAAIU,KAAJ;AAAUZ,MAAM,CAACC,IAAP,CAAY,cAAZ,EAA2B;AAACW,EAAAA,KAAK,CAACV,CAAD,EAAG;AAACU,IAAAA,KAAK,GAACV,CAAN;AAAQ;;AAAlB,CAA3B,EAA+C,CAA/C;AAY/pB;AAEA;AACA,MAAMW,oBAAoB,GAAG,IAAID,KAAK,CAACE,UAAV,CAAqB,IAArB,CAA7B;AACA,MAAMC,qBAAqB,GAAG,IAAIH,KAAK,CAACE,UAAV,CAAqB,uBAArB,CAA9B,C,CAA6E;;AAC7E,MAAME,iBAAiB,GAAG,IAAIJ,KAAK,CAACE,UAAV,CAAqB,mBAArB,CAA1B;AAEA,IAAIG,OAAO,GAAG,EAAd,C,CACA;;AACA,IAAIlB,MAAM,CAACmB,QAAX,EAAqB;AACjB,MAAInB,MAAM,CAACoB,QAAP,CAAgBC,OAAhB,KAA4BC,SAA5B,IAAyCtB,MAAM,CAACoB,QAAP,CAAgBC,OAAhB,KAA4B,IAAzE,EAA+E;AAC3E,UAAME,OAAO,GAAGvB,MAAM,CAACoB,QAAP,CAAgBC,OAAhB,CAAwBG,SAAxC;AACA,UAAMC,QAAQ,GAAGzB,MAAM,CAACoB,QAAP,CAAgBC,OAAhB,CAAwBK,OAAzC;;AACA,UAAMC,UAAU,GAAGJ,OAAO,GAAG,OAA7B;;AACA,UAAMK,UAAU,GAAGL,OAAO,GAAG,OAA7B;;AACA,UAAMM,WAAW,GAAGN,OAAO,GAAG,QAA9B;;AACA,UAAMO,UAAU,GAAGP,OAAO,GAAG,OAA7B,CAN2E,CAMpC;;;AACvC,UAAMQ,UAAU,GAAGR,OAAO,GAAG,OAA7B;;AACA,UAAMS,cAAc,GAAGT,OAAO,GAAG,WAAjC;;AACA,UAAMU,aAAa,GAAGV,OAAO,GAAG,SAAhC;;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ,GAAwBpC,MAAM,CAACoB,QAAP,CAAgBC,OAAhB,CAAwBe,SAAhD;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYT,OAAZ,GAAsB1B,MAAM,CAACoB,QAAP,CAAgBC,OAAhB,CAAwBK,OAA9C;AAEAR,IAAAA,OAAO,GAAG;AACNmB,MAAAA,MAAM,EAAEV,UADF;AAENW,MAAAA,MAAM,EAAEV,UAFF;AAGNW,MAAAA,OAAO,EAAEV,WAHH;AAINW,MAAAA,MAAM,EAAEV,UAJF;AAKNW,MAAAA,MAAM,EAAEV,UALF;AAMNW,MAAAA,UAAU,EAAEV,cANN;AAONW,MAAAA,QAAQ,EAAEV,aAPJ;AAQNW,MAAAA,IAAI,EAAEnB;AARA,KAAV;AAUH,GAxBgB,CA0BjB;;;AACAR,EAAAA,iBAAiB,CAAC4B,aAAlB,GAAkCC,WAAlC,CAA8C;AAAC,iBAAa;AAAd,GAA9C,EAAgE;AAACC,IAAAA,kBAAkB,EAAE,OAAO;AAA5B,GAAhE,EA3BiB,CA2BgF;;AACjG/B,EAAAA,qBAAqB,CAAC6B,aAAtB,GAAsCC,WAAtC,CAAkD;AAAC,iBAAa;AAAd,GAAlD,EAAoE;AAACC,IAAAA,kBAAkB,EAAE;AAArB,GAApE,EA5BiB,CA4B+E;AAEhG;;AACAC,EAAAA,MAAM,CAACC,KAAP,CAAa,eAAb,EAA8B,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAC5DL,IAAAA,MAAM,CAACM,UAAP,CAAkBC,OAAO,CAACL,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAAzB;AACH,GAFD;AAIAL,EAAAA,MAAM,CAACC,KAAP,CAAa,oBAAb,EAAmC,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AACjEL,IAAAA,MAAM,CAACM,UAAP,CAAkBC,OAAO,CAACL,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAAzB;AACH,GAFD;AAIAL,EAAAA,MAAM,CAACC,KAAP,CAAa,yBAAb,EAAwC,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AACtEL,IAAAA,MAAM,CAACM,UAAP,CAAkBC,OAAO,CAACL,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAAzB;AACH,GAFD;AAIAL,EAAAA,MAAM,CAACC,KAAP,CAAa,kCAAb,EAAiD,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAC/EL,IAAAA,MAAM,CAACM,UAAP,CAAkBC,OAAO,CAACL,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAAzB;AACH,GAFD;AAIAL,EAAAA,MAAM,CAACC,KAAP,CAAa,gBAAb,EAA+B,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAC7DL,IAAAA,MAAM,CAACM,UAAP,CAAkBE,QAAQ,CAACN,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA1B;AACH,GAFD;AAIAL,EAAAA,MAAM,CAACC,KAAP,CAAa,qBAAb,EAAoC,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAClEL,IAAAA,MAAM,CAACM,UAAP,CAAkBE,QAAQ,CAACN,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA1B;AACH,GAFD;AAIAL,EAAAA,MAAM,CAACC,KAAP,CAAa,0BAAb,EAAyC,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AACvEL,IAAAA,MAAM,CAACM,UAAP,CAAkBE,QAAQ,CAACN,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA1B;AACH,GAFD;AAIAL,EAAAA,MAAM,CAACC,KAAP,CAAa,mCAAb,EAAkD,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAChFL,IAAAA,MAAM,CAACM,UAAP,CAAkBE,QAAQ,CAACN,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA1B;AACH,GAFD;AAIAL,EAAAA,MAAM,CAACC,KAAP,CAAa,cAAb,EAA6B,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAC3DL,IAAAA,MAAM,CAACM,UAAP,CAAkBG,WAAW,CAACP,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA7B;AACH,GAFD;AAIAL,EAAAA,MAAM,CAACC,KAAP,CAAa,mBAAb,EAAkC,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAChEL,IAAAA,MAAM,CAACM,UAAP,CAAkBG,WAAW,CAACP,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA7B;AACH,GAFD;AAIAL,EAAAA,MAAM,CAACC,KAAP,CAAa,4BAAb,EAA2C,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AACzEL,IAAAA,MAAM,CAACM,UAAP,CAAkBG,WAAW,CAACP,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA7B;AACH,GAFD;AAIAL,EAAAA,MAAM,CAACC,KAAP,CAAa,kBAAb,EAAiC,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAC/DL,IAAAA,MAAM,CAACM,UAAP,CAAkBI,wBAAwB,CAACR,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA1C;AACH,GAFD;AAIAL,EAAAA,MAAM,CAACC,KAAP,CAAa,uBAAb,EAAsC,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AACpEL,IAAAA,MAAM,CAACM,UAAP,CAAkBI,wBAAwB,CAACR,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA1C;AACH,GAFD;AAIAL,EAAAA,MAAM,CAACC,KAAP,CAAa,gCAAb,EAA+C,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAC7EL,IAAAA,MAAM,CAACM,UAAP,CAAkBI,wBAAwB,CAACR,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA1C;AACH,GAFD,EAnFiB,CAuFrB;;AACIL,EAAAA,MAAM,CAACC,KAAP,CAAa,mBAAb,EAAkC,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAChEL,IAAAA,MAAM,CAACM,UAAP,CAAkBK,UAAU,CAACT,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA5B;AACH,GAFD;AAGAL,EAAAA,MAAM,CAACC,KAAP,CAAa,4BAAb,EAA2C,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AACzEL,IAAAA,MAAM,CAACM,UAAP,CAAkBK,UAAU,CAACT,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA5B;AACH,GAFD;AAIAL,EAAAA,MAAM,CAACC,KAAP,CAAa,sBAAb,EAAqC,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AACnEL,IAAAA,MAAM,CAACM,UAAP,CAAkBM,aAAa,CAACV,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA/B;AACH,GAFD;AAGAL,EAAAA,MAAM,CAACC,KAAP,CAAa,+BAAb,EAA8C,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAC5EL,IAAAA,MAAM,CAACM,UAAP,CAAkBM,aAAa,CAACV,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA/B;AACH,GAFD;AAIAL,EAAAA,MAAM,CAACC,KAAP,CAAa,sBAAb,EAAqC,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AACnEL,IAAAA,MAAM,CAACM,UAAP,CAAkBO,aAAa,CAACX,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA/B;AACH,GAFD;AAGAL,EAAAA,MAAM,CAACC,KAAP,CAAa,+BAAb,EAA8C,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAC5EL,IAAAA,MAAM,CAACM,UAAP,CAAkBO,aAAa,CAACX,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA/B;AACH,GAFD;AAIAL,EAAAA,MAAM,CAACC,KAAP,CAAa,kBAAb,EAAiC,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAC/DL,IAAAA,MAAM,CAACM,UAAP,CAAkBQ,SAAS,CAACZ,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA3B;AACH,GAFD;AAGAL,EAAAA,MAAM,CAACC,KAAP,CAAa,2BAAb,EAA0C,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AACxEL,IAAAA,MAAM,CAACM,UAAP,CAAkBQ,SAAS,CAACZ,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA3B;AACH,GAFD;AAIAL,EAAAA,MAAM,CAACC,KAAP,CAAa,mBAAb,EAAkC,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAChEL,IAAAA,MAAM,CAACM,UAAP,CAAkBS,UAAU,CAACb,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA5B;AACH,GAFD;AAGAL,EAAAA,MAAM,CAACC,KAAP,CAAa,4BAAb,EAA2C,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AACzEL,IAAAA,MAAM,CAACM,UAAP,CAAkBS,UAAU,CAACb,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA5B;AACH,GAFD;AAIAL,EAAAA,MAAM,CAACC,KAAP,CAAa,qBAAb,EAAoC,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAClEL,IAAAA,MAAM,CAACM,UAAP,CAAkBU,YAAY,CAACd,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA9B;AACH,GAFD;AAGAL,EAAAA,MAAM,CAACC,KAAP,CAAa,8BAAb,EAA6C,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAC3EL,IAAAA,MAAM,CAACM,UAAP,CAAkBU,YAAY,CAACd,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA9B;AACH,GAFD;AAIAL,EAAAA,MAAM,CAACC,KAAP,CAAa,kBAAb,EAAiC,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAC/DL,IAAAA,MAAM,CAACM,UAAP,CAAkBW,SAAS,CAACf,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA3B;AACH,GAFD;AAGAL,EAAAA,MAAM,CAACC,KAAP,CAAa,2BAAb,EAA0C,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AACxEL,IAAAA,MAAM,CAACM,UAAP,CAAkBW,SAAS,CAACf,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA3B;AACH,GAFD;AAIAL,EAAAA,MAAM,CAACC,KAAP,CAAa,kBAAb,EAAiC,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAC/DL,IAAAA,MAAM,CAACM,UAAP,CAAkBY,SAAS,CAAChB,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA3B;AACH,GAFD;AAGAL,EAAAA,MAAM,CAACC,KAAP,CAAa,2BAAb,EAA0C,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AACxEL,IAAAA,MAAM,CAACM,UAAP,CAAkBY,SAAS,CAAChB,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA3B;AACH,GAFD;AAIAL,EAAAA,MAAM,CAACC,KAAP,CAAa,kBAAb,EAAiC,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAC/DL,IAAAA,MAAM,CAACM,UAAP,CAAkBa,SAAS,CAACjB,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA3B;AACH,GAFD;AAGAL,EAAAA,MAAM,CAACC,KAAP,CAAa,2BAAb,EAA0C,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AACxEL,IAAAA,MAAM,CAACM,UAAP,CAAkBa,SAAS,CAACjB,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,CAA3B;AACH,GAFD;AAGH,C,CAED;;;AACA,MAAMe,qBAAqB,GAAG,YAAY;AACtC;AACA;;AACA;;;;;;;;AAQA,MAAIC,OAAO,GAAG,KAAd;AACA,QAAMC,YAAY,GAAGxD,oBAAoB,CAACyD,IAArB,CAA0B,EAA1B,EAA8BC,KAA9B,EAArB;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGH,YAAY,CAACI,MAArC,EAA6CD,GAAG,EAAhD,EAAoD;AAChD,QAAIE,EAAE,GAAGL,YAAY,CAACG,GAAD,CAAZ,CAAkBG,GAA3B;AACA,QAAIC,QAAQ,GAAGP,YAAY,CAACG,GAAD,CAAZ,CAAkBK,IAAjC;AACA,QAAIC,MAAM,GAAGT,YAAY,CAACG,GAAD,CAAZ,CAAkBO,IAA/B;AACA,QAAIC,UAAU,GAAGX,YAAY,CAACG,GAAD,CAAZ,CAAkBS,MAAnC;AACA,QAAIC,aAAa,GAAGb,YAAY,CAACG,GAAD,CAAZ,CAAkB,eAAlB,CAApB;AACA,QAAIW,YAAY,GAAGC,MAAM,CAACC,SAA1B;;AACA,SAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGN,UAAU,CAACP,MAAjC,EAAyCa,EAAE,EAA3C,EAA+C;AAC3C,UAAIC,KAAK,GAAGP,UAAU,CAACM,EAAD,CAAtB;AACA,UAAIE,IAAI,GAAGjF,kBAAkB,CAACkF,8BAAnB,CAAkDC,MAAM,CAACd,QAAD,CAAxD,EAAoE,uCAC3E,sCAD2E,GAE3E,6BAF2E,GAE3CE,MAF2C,GAElC,GAFkC,GAG3E,wBAH2E,GAGhDS,KAHgD,GAGxC,GAH5B,CAAX;;AAIA,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACf,MAAzB,EAAiCkB,CAAC,EAAlC,EAAsC;AAClC,YAAI;AACAR,UAAAA,YAAY,GAAGK,IAAI,CAACG,CAAD,CAAJ,CAAQ,6BAAR,CAAf;AACA;AACH,SAHD,CAGE,OAAOC,CAAP,EAAU;AACR,gBAAM,IAAIC,KAAJ,CAAU,wEAAwEf,MAAxE,GAAiF,cAAjF,GAAkGS,KAAlG,GAA0G,SAA1G,GAAsHK,CAAC,CAACE,OAAlI,CAAN;AACH;;AACD,YAAIX,YAAY,KAAKC,MAAM,CAACC,SAA5B,EAAuC;AACnC,gBAAM,IAAIQ,KAAJ,CAAU,wEAAwEf,MAAxE,GAAiF,cAAjF,GAAkGS,KAA5G,CAAN;AACH;AACJ;;AACD,YAAMQ,kBAAkB,GAAGC,MAAM,CAACd,aAAD,CAAN,CAAsBe,OAAtB,KAAkC,IAA7D;;AACA,UAAIF,kBAAkB,GAAGZ,YAAzB,EAAuC;AACnCf,QAAAA,OAAO,GAAG,IAAV;AACA8B,QAAAA,OAAO,CAACC,GAAR,CAAY,gEAAgErB,MAAhE,GAAyE,GAAzE,GAA+ES,KAA/E,GAAuF,kBAAvF,GAA4GS,MAAM,CAACI,GAAP,CAAWjB,YAAY,GAAG,IAA1B,EAAgCkB,MAAhC,CAAuC,qBAAvC,CAA5G,GAA4K,4CAA5K,GAA2NL,MAAM,CAACI,GAAP,CAAWL,kBAAkB,GAAG,IAAhC,EAAsCM,MAAtC,CAA6C,qBAA7C,CAAvO;AACA;AACH;AACJ;;AACD,QAAIjC,OAAO,KAAK,IAAhB,EAAsB;AAClB;AACA;AACA;AACA,YAAMkC,OAAO,GAAGC,wBAAhB;;AACA,WAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGF,OAAO,CAAC7B,MAA9B,EAAsC+B,EAAE,EAAxC,EAA4C;AACxCd,QAAAA,MAAM,CAACa,wBAAP,CAAgCC,EAAhC;AACH,OAPiB,CAQlB;;;AACA3F,MAAAA,oBAAoB,CAAC4F,MAArB,CAA4B;AAAC9B,QAAAA,GAAG,EAAED;AAAN,OAA5B,EAAuC;AAACgC,QAAAA,IAAI,EAAE;AAACxB,UAAAA,aAAa,EAAEc,MAAM,GAAGK,MAAT;AAAhB;AAAP,OAAvC;AACH;AACJ;;AACD,SAAO,IAAP;AACH,CAzDD,C,CA2DA;;;AACA,MAAM7C,WAAW,GAAG,UAAUP,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAClD,MAAIrD,MAAM,CAACmB,QAAX,EAAqB;AACjBb,IAAAA,SAAS,CAACsG,KAAV;AACAxD,IAAAA,GAAG,CAACyD,GAAJ;AACH;AACJ,CALD,C,CAOA;;;AACA,MAAMtD,OAAO,GAAG,UAAUL,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAC9C,MAAIrD,MAAM,CAACmB,QAAX,EAAqB;AACjB,QAAI2F,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAvB;;AACA,QAAIC,GAAG,GAAG,EAAV;;AACA,QAAI;AACA,UAAIC,MAAM,GAAGC,uBAAuB,CAAChE,MAAM,CAACiE,GAAR,EAAa,CAAb,EAAgB,CAAC,IAAjB,CAApC;;AACA,UAAIC,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAcL,MAAM,CAACM,KAArB,CAAhB;AACA,UAAIC,SAAS,GAAGH,MAAM,CAACC,MAAP,CAAcL,MAAM,CAACQ,IAArB,CAAhB;AACA,UAAIC,eAAe,GAAG,EAAtB;AACA,UAAIC,eAAe,GAAG,EAAtB;;AACA,WAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGR,SAAS,CAAC1C,MAAhC,EAAwCkD,EAAE,EAA1C,EAA8C;AAC1CF,QAAAA,eAAe,CAACG,IAAhB,CAAqBR,MAAM,CAACS,IAAP,CAAYV,SAAS,CAACQ,EAAD,CAArB,CAArB,EAD0C,CACQ;;AAClDF,QAAAA,eAAe,CAACG,IAAhB,CAAqBT,SAAS,CAACQ,EAAD,CAAT,CAAc,GAAd,MAAuB,CAAvB,GAA2B,CAACR,SAAS,CAACQ,EAAD,CAAT,CAAcG,KAAf,CAA3B,GAAmDV,MAAM,CAACC,MAAP,CAAcF,SAAS,CAACQ,EAAD,CAAvB,CAAxE,EAF0C,CAE6D;AAC1G;;AAED,WAAK,IAAII,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGR,SAAS,CAAC9C,MAAhC,EAAwCsD,EAAE,EAA1C,EAA8C;AAC1C,YAAIC,YAAY,GAAGZ,MAAM,CAACC,MAAP,CAAcE,SAAS,CAACQ,EAAD,CAAvB,CAAnB;AACA,YAAIE,UAAU,GAAGD,YAAY,CAAC,CAAD,CAAZ,KAAoB3G,SAApB,GAAgC8F,SAAS,CAACY,EAAD,CAAT,CAAcD,KAA9C,GAAsDV,MAAM,CAACS,IAAP,CAAYG,YAAY,CAAC,CAAD,CAAxB,CAAvE,CAF0C,CAG1C;;AACAC,QAAAA,UAAU,CAAC,CAAD,CAAV,GAAgBD,YAAY,CAAC,CAAD,CAAZ,KAAoB3G,SAApB,GAAgC,SAAhC,GAA4C+F,MAAM,CAACS,IAAP,CAAYG,YAAY,CAAC,CAAD,CAAxB,EAA6BE,MAA7B,CAAoChB,GAAG,IAAIA,GAAG,CAACiB,OAAJ,CAAY,OAAZ,KAAwB,CAAC,CAApE,EAAuE,CAAvE,CAA5D;AACAT,QAAAA,eAAe,CAACE,IAAhB,CAAqBK,UAArB,EAL0C,CAKR;;AAClC,YAAID,YAAY,CAAC,CAAD,CAAZ,KAAoB3G,SAAxB,EAAmC;AAC/B;AACH;;AACD,aAAK,IAAI+G,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGJ,YAAY,CAACvD,MAArC,EAA6C2D,GAAG,EAAhD,EAAoD;AAAG;AACnDV,UAAAA,eAAe,CAACE,IAAhB,CAAqBR,MAAM,CAACC,MAAP,CAAcW,YAAY,CAACI,GAAD,CAA1B,CAArB;AACH;AACJ;;AACD,UAAIC,QAAQ,GAAG,cAAcrC,MAAM,CAACI,GAAP,GAAaC,MAAb,CAAoB,mBAApB,CAAd,GAAyD,MAAxE;AACAlD,MAAAA,GAAG,CAACmF,SAAJ,CAAc,qBAAd,EAAqC,0BAA0BD,QAA/D;AACAlF,MAAAA,GAAG,CAACmF,SAAJ,CAAc,cAAd,EAA8B,wBAA9B;AACAzB,MAAAA,SAAS,CAACY,eAAD,EAAkB;AAACc,QAAAA,MAAM,EAAE;AAAT,OAAlB,EAAkC,UAAUC,GAAV,EAAeC,MAAf,EAAuB;AAC9D,YAAID,GAAJ,EAAS;AACLtC,UAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCqC,GAAjC;AACArF,UAAAA,GAAG,CAACuF,KAAJ,CAAU,WAAWF,GAAG,CAACG,cAAJ,EAArB;AACAxF,UAAAA,GAAG,CAACyD,GAAJ;AACA;AACH;;AACDzD,QAAAA,GAAG,CAACuF,KAAJ,CAAUD,MAAV;AACA5B,QAAAA,SAAS,CAACa,eAAD,EAAkB;AAACa,UAAAA,MAAM,EAAE;AAAT,SAAlB,EAAkC,UAAUC,GAAV,EAAeC,MAAf,EAAuB;AAC9D,cAAID,GAAJ,EAAS;AACLtC,YAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCqC,GAAjC;AACArF,YAAAA,GAAG,CAACuF,KAAJ,CAAU,WAAWF,GAAG,CAACG,cAAJ,EAArB;AACAxF,YAAAA,GAAG,CAACyD,GAAJ;AACA;AACH;;AACDzD,UAAAA,GAAG,CAACuF,KAAJ,CAAUD,MAAV;AACAtF,UAAAA,GAAG,CAACyD,GAAJ;AACH,SATQ,CAAT;AAUA,eAAOI,MAAP;AACA,eAAOS,eAAP;AACA,eAAOC,eAAP;AACH,OArBQ,CAAT;AAsBH,KAjDD,CAiDE,OAAO9B,CAAP,EAAU;AACRM,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCP,CAAvC;AACAmB,MAAAA,GAAG,GAAG,WAAWnB,CAAC,CAAC+C,cAAF,EAAjB;AACAxF,MAAAA,GAAG,CAACmF,SAAJ,CAAc,qBAAd,EAAqC,mCAArC;AACAnF,MAAAA,GAAG,CAACmF,SAAJ,CAAc,cAAd,EAA8B,wBAA9B;AACAnF,MAAAA,GAAG,CAACyD,GAAJ,CAAQG,GAAR;AACH;AACJ;AACJ,CA7DD,C,CA+DA;;;AACA,MAAMxD,QAAQ,GAAG,UAAUN,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAC/C,MAAIrD,MAAM,CAACmB,QAAX,EAAqB;AACjB,QAAI0H,QAAQ,GAAG,EAAf;;AACA,QAAI;AACA,UAAI5B,MAAM,GAAG6B,iBAAiB,CAAC5F,MAAM,CAACiE,GAAR,EAAa,CAAb,EAAgB,CAAC,IAAjB,CAA9B;;AACA0B,MAAAA,QAAQ,GAAGE,IAAI,CAACjC,SAAL,CAAeG,MAAf,CAAX;AACH,KAHD,CAGE,OAAOpB,CAAP,EAAU;AACRM,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCP,CAAvC;AACAgD,MAAAA,QAAQ,GAAGE,IAAI,CAACjC,SAAL,CAAe;AAACkC,QAAAA,KAAK,EAAEnD;AAAR,OAAf,CAAX;AACA,aAAOgD,QAAQ,CAACI,gBAAhB;AACA,aAAOJ,QAAQ,CAACK,gBAAhB;AACH;;AACD9F,IAAAA,GAAG,CAACmF,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACAnF,IAAAA,GAAG,CAACuF,KAAJ,CAAUE,QAAV;AACAzF,IAAAA,GAAG,CAACyD,GAAJ;AACA,WAAOgC,QAAP;AACA,WAAO5B,MAAP;AACH;AACJ,CAlBD,C,CAoBA;;;AACA,MAAMC,uBAAuB,GAAG,UAAUiC,EAAV,EAAcC,CAAd,EAAiBC,EAAjB,EAAqB;AACjD,MAAIrJ,MAAM,CAACmB,QAAX,EAAqB;AACjB,QAAImI,IAAJ;;AACA,QAAI;AACA,UAAIC,CAAC,GAAGJ,EAAR;AACA,UAAIC,CAAC,GAAGA,CAAR;AACA,UAAIC,EAAE,GAAGA,EAAT,CAHA,CAIA;;AACA,UAAIpC,MAAM,GAAG6B,iBAAiB,CAACS,CAAD,EAAIH,CAAJ,EAAOC,EAAP,CAA9B,CALA,CAMA;;;AACA,UAAIG,SAAS,GAAGvC,MAAM,CAACwC,KAAP,CAAaC,UAAb,CAAwBF,SAAxC;;AACA,UAAIG,QAAQ,GAAIC,CAAC,CAACC,MAAF,CAASL,SAAT,CAAD,CAAsB,IAAtB,CAAf,CARA,CASA;;;AACA,UAAI/B,IAAI,GAAGR,MAAM,CAACQ,IAAlB;AACA,UAAIwB,gBAAgB,GAAGhC,MAAM,CAACgC,gBAA9B;AACA,UAAIC,gBAAgB,GAAGjC,MAAM,CAACiC,gBAA9B;;AACA,cAAQS,QAAR;AACI,aAAKjJ,SAAS,CAACoJ,SAAV,CAAoBC,UAAzB;AACA,aAAKrJ,SAAS,CAACoJ,SAAV,CAAoBE,eAAzB;AACI,cAAIC,UAAU,GAAG,EAAjB;AACAA,UAAAA,UAAU,CAAC1C,KAAX,GAAmB,EAAnB,CAFJ,CAE6B;;AACzB0C,UAAAA,UAAU,CAACxC,IAAX,GAAkB,EAAlB,CAHJ,CAG2B;;AACvB;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,eAAK,IAAIyC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGzC,IAAI,CAAC/C,MAA3B,EAAmCwF,EAAE,EAArC,EAAyC;AAAE;AACvC;AACA,gBAAIC,aAAa,GAAG9C,MAAM,CAACC,MAAP,CAAc5G,SAAS,CAAC0J,aAAxB,CAApB;;AACA,gBAAID,aAAa,CAAC/B,OAAd,CAAsBX,IAAI,CAACyC,EAAD,CAAJ,CAASnC,KAA/B,KAAyC,CAA7C,EAAgD;AAC5C,uBAD4C,CAClC;AACb;;AACD,gBAAIR,KAAK,GAAG,EAAZ;AACAA,YAAAA,KAAK,CAAC,OAAD,CAAL,GAAiBE,IAAI,CAACyC,EAAD,CAAJ,CAASnC,KAA1B;AACAR,YAAAA,KAAK,CAAC,MAAD,CAAL,GAAgBE,IAAI,CAACyC,EAAD,CAAJ,CAASG,UAAT,CAAoBC,MAApC;AACA/C,YAAAA,KAAK,CAAC,oBAAD,CAAL,GAA8BE,IAAI,CAACyC,EAAD,CAAJ,CAASG,UAAT,CAAoBE,EAAlD;AACAhD,YAAAA,KAAK,CAAC,GAAD,CAAL,GAAaE,IAAI,CAACyC,EAAD,CAAJ,CAASG,UAAT,CAAoBG,MAAjC;AACAjD,YAAAA,KAAK,CAAC,gBAAD,CAAL,GAA0BE,IAAI,CAACyC,EAAD,CAAJ,CAASG,UAAT,CAAoBI,UAA9C;AACAlD,YAAAA,KAAK,CAAC,MAAD,CAAL,GAAgBE,IAAI,CAACyC,EAAD,CAAJ,CAASG,UAAT,CAAoBK,IAApC;AACAnD,YAAAA,KAAK,CAAC,SAAD,CAAL,GAAmBE,IAAI,CAACyC,EAAD,CAAJ,CAASG,UAAT,CAAoBM,MAAvC;AACApD,YAAAA,KAAK,CAAC,SAAD,CAAL,GAAmBE,IAAI,CAACyC,EAAD,CAAJ,CAASG,UAAT,CAAoBO,MAAvC;AACAX,YAAAA,UAAU,CAAC1C,KAAX,CAAiBE,IAAI,CAACyC,EAAD,CAAJ,CAASnC,KAA1B,IAAmCR,KAAnC;AAEA,gBAAIsD,SAAS,GAAG,EAAhB,CAjBqC,CAiBhB;;AACrB,iBAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGrD,IAAI,CAACyC,EAAD,CAAJ,CAASa,CAAT,CAAWrG,MAAnC,EAA2CoG,GAAG,EAA9C,EAAkD;AAAE;AAChD,kBAAIE,gBAAgB,GAAG,EAAvB;AACAA,cAAAA,gBAAgB,CAACvD,IAAI,CAACyC,EAAD,CAAJ,CAASnC,KAAT,GAAiB,OAAlB,CAAhB,GAA6CN,IAAI,CAACyC,EAAD,CAAJ,CAASa,CAAT,CAAWD,GAAX,CAA7C;AACAE,cAAAA,gBAAgB,CAAC,qBAAD,CAAhB,GAA0CvD,IAAI,CAACyC,EAAD,CAAJ,CAAS3C,KAAT,CAAeuD,GAAf,EAAoBG,QAA9D;AACAD,cAAAA,gBAAgB,CAAC,cAAD,CAAhB,GAAmCvD,IAAI,CAACyC,EAAD,CAAJ,CAASgB,CAAT,CAAWJ,GAAX,CAAnC;AACAE,cAAAA,gBAAgB,CAAC,SAAD,CAAhB,GAA8BvD,IAAI,CAACyC,EAAD,CAAJ,CAAS3C,KAAT,CAAeuD,GAAf,EAAoBP,EAAlD;AACAS,cAAAA,gBAAgB,CAAC,WAAD,CAAhB,GAAgCvD,IAAI,CAACyC,EAAD,CAAJ,CAAS3C,KAAT,CAAeuD,GAAf,EAAoBL,UAApD;AACAO,cAAAA,gBAAgB,CAAC,MAAD,CAAhB,GAA2BvD,IAAI,CAACyC,EAAD,CAAJ,CAAS3C,KAAT,CAAeuD,GAAf,EAAoBJ,IAA/C;AACAM,cAAAA,gBAAgB,CAAC,GAAD,CAAhB,GAAwBvD,IAAI,CAACyC,EAAD,CAAJ,CAAS3C,KAAT,CAAeuD,GAAf,EAAoBN,MAA5C;AACAK,cAAAA,SAAS,CAAChD,IAAV,CAAemD,gBAAf;AACH;;AACDf,YAAAA,UAAU,CAACxC,IAAX,CAAgBA,IAAI,CAACyC,EAAD,CAAJ,CAASnC,KAAzB,IAAkC8C,SAAlC;AACH;;AACD;;AACJ,aAAKnK,SAAS,CAACoJ,SAAV,CAAoBqB,OAAzB;AACI,cAAIlB,UAAU,GAAG,EAAjB;AACAA,UAAAA,UAAU,CAAC1C,KAAX,GAAmB,EAAnB,CAFJ,CAE6B;;AACzB0C,UAAAA,UAAU,CAACxC,IAAX,GAAkB,EAAlB,CAHJ,CAG2B;;AACvB,eAAK,IAAIyC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGzC,IAAI,CAAC/C,MAA3B,EAAmCwF,EAAE,EAArC,EAAyC;AAAG;AACxC,gBAAIC,aAAa,GAAG9C,MAAM,CAACC,MAAP,CAAc5G,SAAS,CAAC0J,aAAxB,CAApB;;AACA,gBAAID,aAAa,CAAC/B,OAAd,CAAsBX,IAAI,CAACyC,EAAD,CAAJ,CAASnC,KAA/B,KAAyC,CAA7C,EAAgD;AAC5C,uBAD4C,CAClC;AACb;;AACD,gBAAIR,KAAK,GAAG,EAAZ;AACAA,YAAAA,KAAK,CAAC,OAAD,CAAL,GAAiBE,IAAI,CAACyC,EAAD,CAAJ,CAASnC,KAA1B;AACAR,YAAAA,KAAK,CAAC,MAAD,CAAL,GAAgBE,IAAI,CAACyC,EAAD,CAAJ,CAASG,UAAT,CAAoBC,MAApC;AACA/C,YAAAA,KAAK,CAAC,oBAAD,CAAL,GAA8BE,IAAI,CAACyC,EAAD,CAAJ,CAASG,UAAT,CAAoBE,EAAlD;AACAhD,YAAAA,KAAK,CAAC,GAAD,CAAL,GAAaE,IAAI,CAACyC,EAAD,CAAJ,CAASG,UAAT,CAAoBG,MAAjC;AACAjD,YAAAA,KAAK,CAAC,gBAAD,CAAL,GAA0BE,IAAI,CAACyC,EAAD,CAAJ,CAASG,UAAT,CAAoBI,UAA9C;AACAlD,YAAAA,KAAK,CAAC,MAAD,CAAL,GAAgBE,IAAI,CAACyC,EAAD,CAAJ,CAASG,UAAT,CAAoBK,IAApC;AACAnD,YAAAA,KAAK,CAAC,SAAD,CAAL,GAAmBE,IAAI,CAACyC,EAAD,CAAJ,CAASG,UAAT,CAAoBM,MAAvC;AACApD,YAAAA,KAAK,CAAC,SAAD,CAAL,GAAmBE,IAAI,CAACyC,EAAD,CAAJ,CAASG,UAAT,CAAoBO,MAAvC;AACAX,YAAAA,UAAU,CAAC1C,KAAX,CAAiBE,IAAI,CAACyC,EAAD,CAAJ,CAASnC,KAA1B,IAAmCR,KAAnC;AAEA,gBAAI6D,KAAK,GAAG3D,IAAI,CAACyC,EAAD,CAAJ,CAASzC,IAArB;AACA,gBAAIoD,SAAS,GAAG,EAAhB,CAjBqC,CAiBhB;;AACrB,iBAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGrD,IAAI,CAACyC,EAAD,CAAJ,CAASa,CAAT,CAAWrG,MAAnC,EAA2CoG,GAAG,EAA9C,EAAkD;AAAG;AACjD,kBAAIE,gBAAgB,GAAG,EAAvB;AACAA,cAAAA,gBAAgB,CAACvD,IAAI,CAACyC,EAAD,CAAJ,CAASnC,KAAT,GAAiB,QAAlB,CAAhB,GAA8CN,IAAI,CAACyC,EAAD,CAAJ,CAASgB,CAAT,CAAWJ,GAAX,CAA9C;AACAE,cAAAA,gBAAgB,CAAC,qBAAD,CAAhB,GAA0CvD,IAAI,CAACyC,EAAD,CAAJ,CAAS3C,KAAT,CAAeuD,GAAf,EAAoBG,QAA9D;AACAD,cAAAA,gBAAgB,CAAC,cAAD,CAAhB,GAAmCvD,IAAI,CAACyC,EAAD,CAAJ,CAASa,CAAT,CAAWD,GAAX,CAAnC;AACAE,cAAAA,gBAAgB,CAAC,SAAD,CAAhB,GAA8BvD,IAAI,CAACyC,EAAD,CAAJ,CAAS3C,KAAT,CAAeuD,GAAf,EAAoBP,EAAlD;AACAS,cAAAA,gBAAgB,CAAC,WAAD,CAAhB,GAAgCvD,IAAI,CAACyC,EAAD,CAAJ,CAAS3C,KAAT,CAAeuD,GAAf,EAAoBL,UAApD;AACAO,cAAAA,gBAAgB,CAAC,MAAD,CAAhB,GAA2BvD,IAAI,CAACyC,EAAD,CAAJ,CAAS3C,KAAT,CAAeuD,GAAf,EAAoBJ,IAA/C;AACAM,cAAAA,gBAAgB,CAAC,GAAD,CAAhB,GAAwBvD,IAAI,CAACyC,EAAD,CAAJ,CAAS3C,KAAT,CAAeuD,GAAf,EAAoBN,MAA5C;AACAK,cAAAA,SAAS,CAAChD,IAAV,CAAemD,gBAAf;AACH;;AACDf,YAAAA,UAAU,CAACxC,IAAX,CAAgBA,IAAI,CAACyC,EAAD,CAAJ,CAASnC,KAAzB,IAAkC8C,SAAlC;AACH;;AACD;;AACJ,aAAKnK,SAAS,CAACoJ,SAAV,CAAoBuB,MAAzB;AACA,aAAK3K,SAAS,CAACoJ,SAAV,CAAoBwB,SAAzB;AACA,aAAK5K,SAAS,CAACoJ,SAAV,CAAoByB,SAAzB;AACI,cAAIC,WAAJ;;AACA,kBAAQ7B,QAAR;AACI,iBAAKjJ,SAAS,CAACoJ,SAAV,CAAoBuB,MAAzB;AACIG,cAAAA,WAAW,GAAG,qBAAd;AACA;;AACJ,iBAAK9K,SAAS,CAACoJ,SAAV,CAAoByB,SAAzB;AACIC,cAAAA,WAAW,GAAG,cAAd;AACA;;AACJ,iBAAK9K,SAAS,CAACoJ,SAAV,CAAoBwB,SAAzB;AACIE,cAAAA,WAAW,GAAG,iBAAd;AACA;AATR;;AAWA,cAAIvB,UAAU,GAAG,EAAjB;AACAA,UAAAA,UAAU,CAAC1C,KAAX,GAAmB,EAAnB,CAdJ,CAc6B;;AACzB0C,UAAAA,UAAU,CAACxC,IAAX,GAAkB,EAAlB,CAfJ,CAe2B;;AAEvB,eAAK,IAAIyC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGzC,IAAI,CAAC/C,MAA3B,EAAmCwF,EAAE,EAArC,EAAyC;AAAG;AACxC,gBAAIC,aAAa,GAAG9C,MAAM,CAACC,MAAP,CAAc5G,SAAS,CAAC0J,aAAxB,CAApB;;AACA,gBAAID,aAAa,CAAC/B,OAAd,CAAsBX,IAAI,CAACyC,EAAD,CAAJ,CAASnC,KAA/B,KAAyC,CAA7C,EAAgD;AAC5C,uBAD4C,CAClC;AACb;;AACD,gBAAIR,KAAK,GAAG,EAAZ;AACAA,YAAAA,KAAK,CAAC,OAAD,CAAL,GAAiBE,IAAI,CAACyC,EAAD,CAAJ,CAASnC,KAA1B;AACAR,YAAAA,KAAK,CAAC,MAAD,CAAL,GAAgBE,IAAI,CAACyC,EAAD,CAAJ,CAASG,UAAT,CAAoBC,MAApC;AACA/C,YAAAA,KAAK,CAAC,oBAAD,CAAL,GAA8BE,IAAI,CAACyC,EAAD,CAAJ,CAASG,UAAT,CAAoBE,EAAlD;AACAhD,YAAAA,KAAK,CAAC,GAAD,CAAL,GAAaE,IAAI,CAACyC,EAAD,CAAJ,CAASG,UAAT,CAAoBG,MAAjC;AACAjD,YAAAA,KAAK,CAAC,SAAD,CAAL,GAAmBE,IAAI,CAACyC,EAAD,CAAJ,CAASG,UAAT,CAAoBM,MAAvC;AACApD,YAAAA,KAAK,CAAC,SAAD,CAAL,GAAmBE,IAAI,CAACyC,EAAD,CAAJ,CAASG,UAAT,CAAoBO,MAAvC;AACAX,YAAAA,UAAU,CAAC1C,KAAX,CAAiBE,IAAI,CAACyC,EAAD,CAAJ,CAASnC,KAA1B,IAAmCR,KAAnC;AAEA,gBAAIsD,SAAS,GAAG,EAAhB,CAdqC,CAchB;;AACrB,iBAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGrD,IAAI,CAACyC,EAAD,CAAJ,CAASa,CAAT,CAAWrG,MAAnC,EAA2CoG,GAAG,EAA9C,EAAkD;AAAG;AACjD,kBAAIE,gBAAgB,GAAG,EAAvB;AACAA,cAAAA,gBAAgB,CAACvD,IAAI,CAACyC,EAAD,CAAJ,CAASnC,KAAT,GAAiByD,WAAlB,CAAhB,GAAiD/D,IAAI,CAACyC,EAAD,CAAJ,CAASa,CAAT,CAAWD,GAAX,CAAjD;AACAE,cAAAA,gBAAgB,CAAC,qBAAD,CAAhB,GAA0CvD,IAAI,CAACyC,EAAD,CAAJ,CAAS3C,KAAT,CAAeuD,GAAf,EAAoBG,QAA9D;AACAD,cAAAA,gBAAgB,CAAC,cAAD,CAAhB,GAAmCvD,IAAI,CAACyC,EAAD,CAAJ,CAASgB,CAAT,CAAWJ,GAAX,CAAnC;AACAE,cAAAA,gBAAgB,CAAC,SAAD,CAAhB,GAA8BvD,IAAI,CAACyC,EAAD,CAAJ,CAAS3C,KAAT,CAAeuD,GAAf,EAAoBP,EAAlD;AACAS,cAAAA,gBAAgB,CAAC,GAAD,CAAhB,GAAwBvD,IAAI,CAACyC,EAAD,CAAJ,CAAS3C,KAAT,CAAeuD,GAAf,EAAoBN,MAA5C;AACAK,cAAAA,SAAS,CAAChD,IAAV,CAAemD,gBAAf;AACH;;AACDf,YAAAA,UAAU,CAACxC,IAAX,CAAgBA,IAAI,CAACyC,EAAD,CAAJ,CAASnC,KAAzB,IAAkC8C,SAAlC;AACH;;AACD;;AACJ,aAAKnK,SAAS,CAACoJ,SAAV,CAAoB2B,WAAzB;AACI,cAAIxB,UAAU,GAAG,EAAjB;AACAA,UAAAA,UAAU,CAAC1C,KAAX,GAAmB,EAAnB,CAFJ,CAE6B;;AACzB0C,UAAAA,UAAU,CAACxC,IAAX,GAAkB,EAAlB,CAHJ,CAG2B;;AACvB,eAAK,IAAIyC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGzC,IAAI,CAAC/C,MAA3B,EAAmCwF,EAAE,EAArC,EAAyC;AAAG;AACxC,gBAAIC,aAAa,GAAG9C,MAAM,CAACC,MAAP,CAAc5G,SAAS,CAAC0J,aAAxB,CAApB;;AACA,gBAAID,aAAa,CAAC/B,OAAd,CAAsBX,IAAI,CAACyC,EAAD,CAAJ,CAASnC,KAA/B,KAAyC,CAA7C,EAAgD;AAC5C,uBAD4C,CAClC;AACb;;AACD,gBAAIR,KAAK,GAAG,EAAZ;AACAA,YAAAA,KAAK,CAAC,OAAD,CAAL,GAAiBE,IAAI,CAACyC,EAAD,CAAJ,CAASnC,KAA1B;AACAR,YAAAA,KAAK,CAAC,cAAD,CAAL,GAAwBE,IAAI,CAACyC,EAAD,CAAJ,CAASG,UAAT,CAAoBqB,YAA5C;AACAzB,YAAAA,UAAU,CAAC1C,KAAX,CAAiBE,IAAI,CAACyC,EAAD,CAAJ,CAASnC,KAA1B,IAAmCR,KAAnC;AAEA,gBAAI6D,KAAK,GAAG3D,IAAI,CAACyC,EAAD,CAAJ,CAASzC,IAArB;AACA,gBAAIoD,SAAS,GAAG,EAAhB,CAXqC,CAWhB;;AACrB,iBAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGrD,IAAI,CAACyC,EAAD,CAAJ,CAASgB,CAAT,CAAWxG,MAAnC,EAA2CoG,GAAG,EAA9C,EAAkD;AAAG;AACjD,kBAAIE,gBAAgB,GAAG,EAAvB;AACAA,cAAAA,gBAAgB,CAACvD,IAAI,CAACyC,EAAD,CAAJ,CAASnC,KAAT,GAAiB,kBAAlB,CAAhB,GAAwDN,IAAI,CAACyC,EAAD,CAAJ,CAAS3C,KAAT,CAAeuD,GAAf,EAAoBa,QAA5E;AACAX,cAAAA,gBAAgB,CAAC,UAAD,CAAhB,GAA+BvD,IAAI,CAACyC,EAAD,CAAJ,CAAS3C,KAAT,CAAeuD,GAAf,EAAoBc,QAAnD;AACAZ,cAAAA,gBAAgB,CAAC,IAAD,CAAhB,GAAyBvD,IAAI,CAACyC,EAAD,CAAJ,CAAS3C,KAAT,CAAeuD,GAAf,EAAoBe,KAA7C;AACAb,cAAAA,gBAAgB,CAAC,IAAD,CAAhB,GAAyBvD,IAAI,CAACyC,EAAD,CAAJ,CAAS3C,KAAT,CAAeuD,GAAf,EAAoBgB,KAA7C;AACAjB,cAAAA,SAAS,CAAChD,IAAV,CAAemD,gBAAf;AACH;;AACDf,YAAAA,UAAU,CAACxC,IAAX,CAAgBA,IAAI,CAACyC,EAAD,CAAJ,CAASnC,KAAzB,IAAkC8C,SAAlC;AACH;;AACD;;AACJ,aAAKnK,SAAS,CAACoJ,SAAV,CAAoBiC,GAAzB;AACI,cAAI9B,UAAU,GAAG,EAAjB;AACAA,UAAAA,UAAU,CAAC1C,KAAX,GAAmB,EAAnB,CAFJ,CAE6B;;AACzB0C,UAAAA,UAAU,CAACxC,IAAX,GAAkB,EAAlB,CAHJ,CAG2B;;AAEvB,cAAIF,KAAK,GAAG,EAAZ;AACAA,UAAAA,KAAK,CAAC,OAAD,CAAL,GAAiBE,IAAI,CAAC,CAAD,CAAJ,CAAQM,KAAzB;AACAR,UAAAA,KAAK,CAAC,qBAAD,CAAL,GAA+BE,IAAI,CAAC,CAAD,CAAJ,CAAQF,KAAR,CAAcyE,MAAd,CAAqB,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AACtE,mBAAOD,IAAI,GAAGC,IAAI,CAACC,OAAnB;AACH,WAF8B,EAE5B,CAF4B,CAA/B;AAGA5E,UAAAA,KAAK,CAAC,iBAAD,CAAL,GAA2B9G,aAAa,CAAC2L,OAAd,CAAsB3E,IAAI,CAAC,CAAD,CAAJ,CAAQ4E,QAA9B,CAA3B;AACA9E,UAAAA,KAAK,CAAC,oBAAD,CAAL,GAA8B9G,aAAa,CAAC6L,KAAd,CAAoB7E,IAAI,CAAC,CAAD,CAAJ,CAAQ4E,QAA5B,CAA9B;AACA9E,UAAAA,KAAK,CAAC,cAAD,CAAL,GAAwBE,IAAI,CAAC,CAAD,CAAJ,CAAQF,KAAR,CAAcyE,MAAd,CAAqB,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AAC/D,mBAAQD,IAAI,GAAGC,IAAI,CAACK,QAAZ,GAAuBN,IAAvB,GAA8BC,IAAI,CAACK,QAA3C;AACH,WAFuB,CAAxB;AAGAhF,UAAAA,KAAK,CAAC,cAAD,CAAL,GAAwBtB,MAAM,CAACI,GAAP,CAAWkB,KAAK,CAAC,cAAD,CAAL,GAAwB,IAAnC,EAAyCjB,MAAzC,CAAgD,kBAAhD,CAAxB;AACAiB,UAAAA,KAAK,CAAC,cAAD,CAAL,GAAwBE,IAAI,CAAC,CAAD,CAAJ,CAAQF,KAAR,CAAcyE,MAAd,CAAqB,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AAC/D,mBAAQD,IAAI,GAAGC,IAAI,CAACM,QAAZ,GAAuBP,IAAvB,GAA8BC,IAAI,CAACM,QAA3C;AACH,WAFuB,CAAxB;AAGAjF,UAAAA,KAAK,CAAC,cAAD,CAAL,GAAwBtB,MAAM,CAACI,GAAP,CAAWkB,KAAK,CAAC,cAAD,CAAL,GAAwB,IAAnC,EAAyCjB,MAAzC,CAAgD,kBAAhD,CAAxB;AAEA2D,UAAAA,UAAU,CAAC1C,KAAX,CAAiBE,IAAI,CAAC,CAAD,CAAJ,CAAQM,KAAzB,IAAkCR,KAAlC;AAEA,cAAIsD,SAAS,GAAG,EAAhB,CAvBJ,CAuByB;;AACrB,eAAK,IAAIjD,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGH,IAAI,CAAC,CAAD,CAAJ,CAAQgF,QAAR,CAAiB/H,MAAvC,EAA+CkD,EAAE,EAAjD,EAAqD;AACjD,gBAAIoD,gBAAgB,GAAG,EAAvB;AACAA,YAAAA,gBAAgB,CAAC,WAAD,CAAhB,GAAgCvD,IAAI,CAAC,CAAD,CAAJ,CAAQgF,QAAR,CAAiB7E,EAAjB,CAAhC;AACAoD,YAAAA,gBAAgB,CAAC,iBAAD,CAAhB,GAAsCvD,IAAI,CAAC,CAAD,CAAJ,CAAQF,KAAR,CAAcK,EAAd,EAAkBuE,OAAxD;AACAnB,YAAAA,gBAAgB,CAAC,YAAD,CAAhB,GAAiC/E,MAAM,CAACI,GAAP,CAAYoB,IAAI,CAAC,CAAD,CAAJ,CAAQF,KAAR,CAAcK,EAAd,EAAkB2E,QAAnB,GAA+B,IAA1C,EAAgDjG,MAAhD,CAAuD,kBAAvD,CAAjC;AACA0E,YAAAA,gBAAgB,CAAC,UAAD,CAAhB,GAA+B/E,MAAM,CAACI,GAAP,CAAYoB,IAAI,CAAC,CAAD,CAAJ,CAAQF,KAAR,CAAcK,EAAd,EAAkB4E,QAAnB,GAA+B,IAA1C,EAAgDlG,MAAhD,CAAuD,kBAAvD,CAA/B;AACA0E,YAAAA,gBAAgB,CAAC,oBAAD,CAAhB,GAAyCvD,IAAI,CAAC,CAAD,CAAJ,CAAQ4E,QAAR,CAAiBzE,EAAjB,CAAzC;AACAiD,YAAAA,SAAS,CAAChD,IAAV,CAAemD,gBAAf;AACH;;AACDf,UAAAA,UAAU,CAACxC,IAAX,CAAgBA,IAAI,CAAC,CAAD,CAAJ,CAAQM,KAAxB,IAAiC8C,SAAjC;AACA;;AACJ,aAAKnK,SAAS,CAACoJ,SAAV,CAAoB4C,SAAzB;AACI,cAAIzC,UAAU,GAAG,EAAjB;AACAA,UAAAA,UAAU,CAAC1C,KAAX,GAAmB,EAAnB,CAFJ,CAE6B;;AACzB0C,UAAAA,UAAU,CAACxC,IAAX,GAAkB,EAAlB,CAHJ,CAG2B;;AAEvB,eAAK,IAAIyC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGzC,IAAI,CAAC/C,MAA3B,EAAmCwF,EAAE,EAArC,EAAyC;AAAE;AACvC,gBAAIC,aAAa,GAAG9C,MAAM,CAACC,MAAP,CAAc5G,SAAS,CAAC0J,aAAxB,CAApB;;AACA,gBAAID,aAAa,CAAC/B,OAAd,CAAsBX,IAAI,CAACyC,EAAD,CAAJ,CAASnC,KAA/B,KAAyC,CAA7C,EAAgD;AAC5C,uBAD4C,CAClC;AACb;;AACD,gBAAIR,KAAK,GAAG,EAAZ;AACAA,YAAAA,KAAK,CAAC,OAAD,CAAL,GAAiBE,IAAI,CAACyC,EAAD,CAAJ,CAASnC,KAA1B;AACAR,YAAAA,KAAK,CAAC,MAAD,CAAL,GAAgBE,IAAI,CAACyC,EAAD,CAAJ,CAASG,UAAT,CAAoBsC,SAApC;AACApF,YAAAA,KAAK,CAAC,oBAAD,CAAL,GAA8BE,IAAI,CAACyC,EAAD,CAAJ,CAASG,UAAT,CAAoBuC,OAAlD;AACArF,YAAAA,KAAK,CAAC,GAAD,CAAL,GAAaE,IAAI,CAACyC,EAAD,CAAJ,CAASG,UAAT,CAAoBwC,MAAjC;AACAtF,YAAAA,KAAK,CAAC,SAAD,CAAL,GAAmBE,IAAI,CAACyC,EAAD,CAAJ,CAASG,UAAT,CAAoByC,QAAvC;AACAvF,YAAAA,KAAK,CAAC,SAAD,CAAL,GAAmBE,IAAI,CAACyC,EAAD,CAAJ,CAASG,UAAT,CAAoB0C,QAAvC;AACA9C,YAAAA,UAAU,CAAC1C,KAAX,CAAiBE,IAAI,CAACyC,EAAD,CAAJ,CAASnC,KAA1B,IAAmCR,KAAnC;AAEA,gBAAIsD,SAAS,GAAG,EAAhB,CAdqC,CAchB;;AACrB,iBAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGrD,IAAI,CAACyC,EAAD,CAAJ,CAASa,CAAT,CAAWrG,MAAnC,EAA2CoG,GAAG,EAA9C,EAAkD;AAAI;AAClD,kBAAIE,gBAAgB,GAAG,EAAvB;AACAA,cAAAA,gBAAgB,CAACvD,IAAI,CAACyC,EAAD,CAAJ,CAASnC,KAAT,GAAiB,YAAlB,CAAhB,GAAkDN,IAAI,CAACyC,EAAD,CAAJ,CAAS8C,SAAT,CAAmBlC,GAAnB,EAAwB,UAAxB,CAAlD;AACAE,cAAAA,gBAAgB,CAAC,GAAD,CAAhB,GAAwBvD,IAAI,CAACyC,EAAD,CAAJ,CAAS8C,SAAT,CAAmBlC,GAAnB,EAAwBmC,KAAhD;AACAjC,cAAAA,gBAAgB,CAAC,cAAD,CAAhB,GAAmCvD,IAAI,CAACyC,EAAD,CAAJ,CAAS8C,SAAT,CAAmBlC,GAAnB,EAAwBoC,MAA3D;AACAlC,cAAAA,gBAAgB,CAAC,iBAAD,CAAhB,GAAsCvD,IAAI,CAACyC,EAAD,CAAJ,CAAS8C,SAAT,CAAmBlC,GAAnB,EAAwBqC,WAA9D;AACAnC,cAAAA,gBAAgB,CAAC,iBAAD,CAAhB,GAAsCvD,IAAI,CAACyC,EAAD,CAAJ,CAAS8C,SAAT,CAAmBlC,GAAnB,EAAwBsC,UAA9D;AACApC,cAAAA,gBAAgB,CAAC,UAAD,CAAhB,GAA+BvD,IAAI,CAACyC,EAAD,CAAJ,CAAS8C,SAAT,CAAmBlC,GAAnB,EAAwBuC,QAAvD;AACArC,cAAAA,gBAAgB,CAAC,aAAD,CAAhB,GAAkCvD,IAAI,CAACyC,EAAD,CAAJ,CAAS8C,SAAT,CAAmBlC,GAAnB,EAAwBwC,MAA1D;AACAzC,cAAAA,SAAS,CAAChD,IAAV,CAAemD,gBAAf;AACH;;AACDf,YAAAA,UAAU,CAACxC,IAAX,CAAgBA,IAAI,CAACyC,EAAD,CAAJ,CAASnC,KAAzB,IAAkC8C,SAAlC;AACH;;AACD;;AACJ,aAAKnK,SAAS,CAACoJ,SAAV,CAAoByD,OAAzB;AACA,aAAK7M,SAAS,CAACoJ,SAAV,CAAoB0D,WAAzB;AACI,cAAIvD,UAAU,GAAG,EAAjB;AACAA,UAAAA,UAAU,CAAC1C,KAAX,GAAmB,EAAnB,CAFJ,CAE6B;;AACzB0C,UAAAA,UAAU,CAACxC,IAAX,GAAkB,EAAlB,CAHJ,CAG2B;;AACvB,cAAIF,KAAK,GAAG,EAAZ;AACAA,UAAAA,KAAK,CAAC,OAAD,CAAL,GAAiBE,IAAI,CAAC,CAAD,CAAJ,CAAQM,KAAzB;AACAR,UAAAA,KAAK,CAAC,wBAAD,CAAL,GAAkCE,IAAI,CAAC,CAAD,CAAJ,CAAQ4C,UAAR,CAAmBoD,CAArD;AACAlG,UAAAA,KAAK,CAAC,WAAD,CAAL,GAAqBE,IAAI,CAAC,CAAD,CAAJ,CAAQ4C,UAAR,CAAmBqD,IAAxC;AACAnG,UAAAA,KAAK,CAAC,cAAD,CAAL,GAAwBE,IAAI,CAAC,CAAD,CAAJ,CAAQ4C,UAAR,CAAmBsD,OAA3C;AACApG,UAAAA,KAAK,CAAC,cAAD,CAAL,GAAwBtB,MAAM,CAACI,GAAP,CAAWkB,KAAK,CAAC,cAAD,CAAL,GAAwB,IAAnC,EAAyCjB,MAAzC,CAAgD,kBAAhD,CAAxB;AACAiB,UAAAA,KAAK,CAAC,cAAD,CAAL,GAAwBE,IAAI,CAAC,CAAD,CAAJ,CAAQ4C,UAAR,CAAmBuD,OAA3C;AACArG,UAAAA,KAAK,CAAC,cAAD,CAAL,GAAwBtB,MAAM,CAACI,GAAP,CAAWkB,KAAK,CAAC,cAAD,CAAL,GAAwB,IAAnC,EAAyCjB,MAAzC,CAAgD,kBAAhD,CAAxB;AAEA2D,UAAAA,UAAU,CAAC1C,KAAX,CAAiBE,IAAI,CAAC,CAAD,CAAJ,CAAQM,KAAzB,IAAkCR,KAAlC;AAEA,cAAIsD,SAAS,GAAG,EAAhB,CAfJ,CAeyB;;AACrB,eAAK,IAAIjD,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGH,IAAI,CAAC,CAAD,CAAJ,CAAQoG,WAAR,CAAoBnJ,MAA1C,EAAkDkD,EAAE,EAApD,EAAwD;AACpD,gBAAIoD,gBAAgB,GAAG,EAAvB;AACAA,YAAAA,gBAAgB,CAAC,MAAD,CAAhB,GAA2BvD,IAAI,CAAC,CAAD,CAAJ,CAAQoG,WAAR,CAAoBjG,EAApB,CAA3B;AACAoD,YAAAA,gBAAgB,CAAC,MAAD,CAAhB,GAA2BvD,IAAI,CAAC,CAAD,CAAJ,CAAQqG,WAAR,CAAoBlG,EAApB,CAA3B;AACAoD,YAAAA,gBAAgB,CAAC,MAAD,CAAhB,GAA2BvD,IAAI,CAAC,CAAD,CAAJ,CAAQsG,WAAR,CAAoBnG,EAApB,CAA3B;AACAoD,YAAAA,gBAAgB,CAAC,GAAD,CAAhB,GAAwBvD,IAAI,CAAC,CAAD,CAAJ,CAAQuG,WAAR,CAAoBpG,EAApB,CAAxB;AACAoD,YAAAA,gBAAgB,CAAC,YAAD,CAAhB,GAAiC/E,MAAM,CAACI,GAAP,CAAYoB,IAAI,CAAC,CAAD,CAAJ,CAAQwG,iBAAR,CAA0BrG,EAA1B,CAAD,GAAkC,IAA7C,EAAmDtB,MAAnD,CAA0D,kBAA1D,CAAjC;AACA0E,YAAAA,gBAAgB,CAAC,UAAD,CAAhB,GAA+B/E,MAAM,CAACI,GAAP,CAAYoB,IAAI,CAAC,CAAD,CAAJ,CAAQyG,iBAAR,CAA0BtG,EAA1B,CAAD,GAAkC,IAA7C,EAAmDtB,MAAnD,CAA0D,kBAA1D,CAA/B;AACAuE,YAAAA,SAAS,CAAChD,IAAV,CAAemD,gBAAf;AACH;;AACDf,UAAAA,UAAU,CAACxC,IAAX,CAAgBA,IAAI,CAAC,CAAD,CAAJ,CAAQM,KAAxB,IAAiC8C,SAAjC;AACA;;AACJ,aAAKnK,SAAS,CAACoJ,SAAV,CAAoBqE,SAAzB;AACI,cAAIlE,UAAU,GAAG,EAAjB,CADJ,CACyB;;AACrB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,cAAImE,iBAAiB,GAAG,CAAC,CAAzB;AACA,cAAIC,cAAc,GAAG,EAArB;;AACA,eAAK,IAAInE,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGzC,IAAI,CAAC/C,MAA3B,EAAmCwF,EAAE,EAArC,EAAyC;AACrC,gBAAIA,EAAE,IAAIkE,iBAAV,EAA6B;AACzB,oBADyB,CAClB;AACV;;AACD,gBAAIvD,SAAS,GAAGpD,IAAI,CAACyC,EAAD,CAApB,CAJqC,CAKrC;;AACA,gBAAIoE,YAAY,GAAG,CAAC,CAApB;;AACA,iBAAK,IAAIC,GAAG,GAAGrE,EAAE,GAAG,CAApB,EAAuBqE,GAAG,GAAG9G,IAAI,CAAC/C,MAAlC,EAA0C6J,GAAG,EAA7C,EAAiD;AAC7C,kBAAM9G,IAAI,CAAC8G,GAAD,CAAJ,CAAUxG,KAAX,CAAkBK,OAAlB,CAA0ByC,SAAS,CAAC9C,KAApC,MAA+C,CAAC,CAAjD,IAAyDN,IAAI,CAAC8G,GAAD,CAAJ,CAAUxG,KAAX,CAAkBK,OAAlB,CAA0B,WAA1B,KAA0C,CAAC,CAAvG,EAA2G;AACvGiG,gBAAAA,cAAc,CAACnE,EAAD,CAAd,GAAqBqE,GAArB;;AACA,oBAAIH,iBAAiB,IAAI,CAAC,CAA1B,EAA6B;AACzBA,kBAAAA,iBAAiB,GAAGG,GAApB;AACH;;AACD;AACH;AACJ;;AACD,gBAAIC,aAAa,GAAG,EAApB;;AACA,iBAAK,IAAI1D,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGD,SAAS,CAACpD,IAAV,CAAe/C,MAAvC,EAA+CoG,GAAG,EAAlD,EAAsD;AAClD,kBAAI2D,OAAO,GAAG,EAAd;AACAA,cAAAA,OAAO,CAAC,OAAD,CAAP,GAAmB5D,SAAS,CAACpD,IAAV,CAAeqD,GAAf,EAAoB,CAApB,CAAnB;AACA2D,cAAAA,OAAO,CAAC,OAAD,CAAP,GAAmB5D,SAAS,CAACpD,IAAV,CAAeqD,GAAf,EAAoB,CAApB,CAAnB;;AACA,kBAAIuD,cAAc,CAACnE,EAAD,CAAd,KAAuB5I,SAA3B,EAAsC;AAClCmN,gBAAAA,OAAO,CAAC,UAAD,CAAP,GAAsB,OAAtB;AACH,eAFD,MAEO;AACHA,gBAAAA,OAAO,CAAC,UAAD,CAAP,GAAsBhH,IAAI,CAAC4G,cAAc,CAACnE,EAAD,CAAf,CAAJ,CAAyBzC,IAAzB,CAA8BqD,GAA9B,EAAmC,CAAnC,CAAtB;AACH;;AACD0D,cAAAA,aAAa,CAAC3G,IAAd,CAAmB4G,OAAnB;AACH;;AACDxE,YAAAA,UAAU,CAACY,SAAS,CAAC9C,KAAX,CAAV,GAA8ByG,aAA9B;AACH;;AACD;;AACJ;AACI,iBAAOlN,SAAP;AA/UR;;AAiVA2I,MAAAA,UAAU,CAAChB,gBAAX,GAA8BA,gBAA9B;AACAgB,MAAAA,UAAU,CAACf,gBAAX,GAA8BA,gBAA9B;AACA,aAAOe,UAAP;AACH,KAjWD,CAiWE,OAAOjB,KAAP,EAAc;AACb,YAAM,IAAIhJ,MAAM,CAAC8F,KAAX,CAAiB,gDAAgDkD,KAAK,CAACjD,OAAvE,CAAN;AACF;AACJ;AACJ,CAxWD,C,CA0WA;AACA;AACA;;;AACA,MAAM+C,iBAAiB,GAAG,UAAU4F,GAAV,EAAetF,CAAf,EAAkBC,EAAlB,EAAsB;AAC5C,MAAIrJ,MAAM,CAACmB,QAAX,EAAqB;AACjB,QAAIgG,GAAG,GAAGuH,GAAV;AACA,QAAIC,WAAW,GAAGvF,CAAlB;AACA,QAAIwF,YAAY,GAAGvF,EAAnB;AACA,QAAIwF,GAAJ;AACA,QAAIC,SAAJ;;AAEA,QAAI;AACA,UAAI7H,MAAM,GAAG3G,SAAS,CAACyO,SAAV,CAAoB5H,GAApB,CAAb;AACA2H,MAAAA,SAAS,GAAG7H,MAAM,KAAK3F,SAAX,GAAuBA,SAAvB,GAAmC2F,MAAM,CAACA,MAAtD,CAFA,CAE8D;AACjE,KAHD,CAGE,OAAOpB,CAAP,EAAU;AACRM,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CP,CAA3C;AACA,aAAOvE,SAAP;AACH;;AACDuN,IAAAA,GAAG,GAAGC,SAAS,KAAKxN,SAAd,GAA0BA,SAA1B,GAAsCyH,IAAI,CAACiG,KAAL,CAAWjG,IAAI,CAACjC,SAAL,CAAegI,SAAf,CAAX,CAA5C;AACA,QAAIG,KAAJ;AACA,QAAIpI,GAAJ;AACA,QAAIqI,SAAS,GAAG,CAAhB;;AACA,QAAIN,YAAY,KAAK,CAAC,IAAtB,EAA4B;AACxB;AACAK,MAAAA,KAAK,GAAG,CAAR;AACApI,MAAAA,GAAG,GAAGxB,MAAM,CAACC,SAAb;AACH,KAJD,MAIO,IAAIsJ,YAAY,KAAK,CAAC,IAAtB,EAA4B;AAC/B;AACAK,MAAAA,KAAK,GAAG,CAAC,IAAT;AACAC,MAAAA,SAAS,GAAG,CAAC,CAAb;AACH,KAJM,MAIA,IAAIP,WAAW,IAAIC,YAAnB,EAAiC;AACpC;AACAK,MAAAA,KAAK,GAAG,CAACL,YAAY,GAAG,CAAhB,IAAqB,GAA7B;AACA/H,MAAAA,GAAG,GAAG+H,YAAY,GAAG,GAArB;AACH,KAJM,MAIA;AACH;AACAM,MAAAA,SAAS,GAAG,CAAC,CAAb;AACAD,MAAAA,KAAK,GAAGL,YAAY,GAAG,GAAvB;AACA/H,MAAAA,GAAG,GAAG,CAAC+H,YAAY,GAAG,CAAhB,IAAqB,GAA3B;AACH;;AAED,QAAIO,QAAJ;AACA,QAAIC,MAAJ;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGR,GAAG,CAACpH,IAAJ,CAAS/C,MAAjC,EAAyC2K,GAAG,EAA5C,EAAgD;AAC5C,UAAIR,GAAG,CAACpH,IAAJ,CAAS4H,GAAT,EAActE,CAAd,IAAmB,IAAnB,IAA2B8D,GAAG,CAACpH,IAAJ,CAAS4H,GAAT,EAActE,CAAd,CAAgBrG,MAAhB,IAA0B,GAAzD,EAA8D;AAC1D,iBAD0D,CAChD;AACb;;AACDyK,MAAAA,QAAQ,GAAGF,KAAX;AACAG,MAAAA,MAAM,GAAGvI,GAAT;;AACA,UAAIsI,QAAQ,GAAGN,GAAG,CAACpH,IAAJ,CAAS4H,GAAT,EAActE,CAAd,CAAgBrG,MAA3B,IAAqCyK,QAAQ,KAAK,CAAC,IAAvD,EAA6D;AACzD;AACAA,QAAAA,QAAQ,GAAGG,IAAI,CAACC,KAAL,CAAWT,SAAS,CAACrH,IAAV,CAAe4H,GAAf,EAAoBtE,CAApB,CAAsBrG,MAAtB,GAA+B,GAA1C,IAAiD,GAA5D;AACA0K,QAAAA,MAAM,GAAGN,SAAS,CAACrH,IAAV,CAAe4H,GAAf,EAAoBtE,CAApB,CAAsBrG,MAA/B;;AACA,YAAI0K,MAAM,KAAKD,QAAf,EAAyB;AACrB;AACA;AACAA,UAAAA,QAAQ,GAAGC,MAAM,GAAG,GAApB;AACH;AACJ;;AACD,UAAID,QAAQ,GAAG,CAAf,EAAkB;AACd;AACAA,QAAAA,QAAQ,GAAG,CAAX;AACAC,QAAAA,MAAM,GAAG,GAAT;AACH;;AACD,UAAIA,MAAM,GAAGD,QAAb,EAAuB;AACnB;AACAC,QAAAA,MAAM,GAAGD,QAAQ,GAAG,GAApB;AACH;;AACD,UAAIC,MAAM,GAAGP,GAAG,CAACpH,IAAJ,CAAS4H,GAAT,EAActE,CAAd,CAAgBrG,MAA7B,EAAqC;AACjC;AACA;AACA0K,QAAAA,MAAM,GAAGP,GAAG,CAACpH,IAAJ,CAAS4H,GAAT,EAActE,CAAd,CAAgBrG,MAAzB;AACH;;AACDmK,MAAAA,GAAG,CAACpH,IAAJ,CAAS4H,GAAT,EAActE,CAAd,GAAkB+D,SAAS,CAACrH,IAAV,CAAe4H,GAAf,EAAoBtE,CAApB,CAAsByE,KAAtB,CAA4BL,QAA5B,EAAsCC,MAAtC,CAAlB;AACAP,MAAAA,GAAG,CAACpH,IAAJ,CAAS4H,GAAT,EAAcnE,CAAd,GAAkB4D,SAAS,CAACrH,IAAV,CAAe4H,GAAf,EAAoBnE,CAApB,CAAsBsE,KAAtB,CAA4BL,QAA5B,EAAsCC,MAAtC,CAAlB;AACAP,MAAAA,GAAG,CAACpH,IAAJ,CAAS4H,GAAT,EAAc9H,KAAd,GAAsBuH,SAAS,CAACrH,IAAV,CAAe4H,GAAf,EAAoB9H,KAApB,CAA0BiI,KAA1B,CAAgCL,QAAhC,EAA0CC,MAA1C,CAAtB;AACAP,MAAAA,GAAG,CAACpH,IAAJ,CAAS4H,GAAT,EAAchF,UAAd,GAA2ByE,SAAS,CAACrH,IAAV,CAAe4H,GAAf,EAAoBhF,UAA/C;AACH;;AAED,WAAOyE,SAAP;;AACA,QAAII,SAAS,KAAK,CAAlB,EAAqB;AACjBL,MAAAA,GAAG,CAAC5F,gBAAJ,GAAuBqG,IAAI,CAACC,KAAL,CAAWH,MAAM,GAAG,GAApB,CAAvB;AACH,KAFD,MAEO;AACHP,MAAAA,GAAG,CAAC5F,gBAAJ,GAAuBqG,IAAI,CAACC,KAAL,CAAWJ,QAAQ,GAAG,GAAtB,CAAvB;AACH;;AACDN,IAAAA,GAAG,CAAC3F,gBAAJ,GAAuBgG,SAAvB;AACA,WAAOL,GAAP;AACH;AACJ,CArFD,C,CAuFA;;;AACA,MAAMlL,UAAU,GAAG,UAAST,MAAT,EAAiBC,GAAjB,EAAsBC,GAAtB,EAA2BC,IAA3B,EAAiC;AAChD,QAAMoM,GAAG,GAAG1I,OAAO,CAAC,UAAD,CAAnB;;AACA,QAAM2I,QAAQ,GAAGxO,OAAO,CAACqB,OAAzB;AACA,QAAMoN,QAAQ,GAAGzM,MAAM,CAACiE,GAAP,GAAa,OAA9B;AACA,QAAMmB,QAAQ,GAAGoH,QAAQ,GAAG,GAAX,GAAiBC,QAAlC;;AACA,MAAI;AACAF,IAAAA,GAAG,CAACG,QAAJ,CAAatH,QAAb,EAAuB,UAASG,GAAT,EAAchB,IAAd,EAAoB;AACvCrE,MAAAA,GAAG,CAACmF,SAAJ,CAAc,cAAd,EAA8B,YAA9B;;AACA,UAAIE,GAAJ,EAAS;AAACtC,QAAAA,OAAO,CAACC,GAAR,CAAYqC,GAAZ;AAAkB,OAFW,CAEV;;;AAC7BrF,MAAAA,GAAG,CAACyD,GAAJ,CAAQY,IAAR,EAHuC,CAGxB;AAClB,KAJD;AAKH,GAND,CAOA,OAAOuB,KAAP,EAAc;AACV5F,IAAAA,GAAG,CAACmF,SAAJ,CAAc,cAAd,EAA8B,YAA9B;AACAnF,IAAAA,GAAG,CAACuF,KAAJ,CAAU,oCAAoCgH,QAA9C;AACAvM,IAAAA,GAAG,CAACyD,GAAJ;AACH;AACJ,CAjBD,C,CAmBA;;;AACA,MAAMjD,aAAa,GAAG,UAASV,MAAT,EAAiBC,GAAjB,EAAsBC,GAAtB,EAA2BC,IAA3B,EAAiC;AACnD,QAAMoM,GAAG,GAAG1I,OAAO,CAAC,UAAD,CAAnB;;AACA,QAAM2I,QAAQ,GAAGxO,OAAO,CAACqB,OAAzB;AACA,QAAMoN,QAAQ,GAAGzM,MAAM,CAACiE,GAAP,GAAa,UAA9B;AACA,QAAMmB,QAAQ,GAAGoH,QAAQ,GAAG,GAAX,GAAiBC,QAAlC;;AACA,MAAI;AACAF,IAAAA,GAAG,CAACG,QAAJ,CAAatH,QAAb,EAAuB,UAASG,GAAT,EAAchB,IAAd,EAAoB;AACvCrE,MAAAA,GAAG,CAACmF,SAAJ,CAAc,cAAd,EAA8B,YAA9B;;AACA,UAAIE,GAAJ,EAAS;AAACtC,QAAAA,OAAO,CAACC,GAAR,CAAYqC,GAAZ;AAAkB,OAFW,CAEV;;;AAC7BrF,MAAAA,GAAG,CAACyD,GAAJ,CAAQY,IAAR,EAHuC,CAGxB;AAClB,KAJD;AAKH,GAND,CAOA,OAAOuB,KAAP,EAAc;AACV5F,IAAAA,GAAG,CAACmF,SAAJ,CAAc,cAAd,EAA8B,YAA9B;AACAnF,IAAAA,GAAG,CAACuF,KAAJ,CAAU,oCAAoCgH,QAA9C;AACAvM,IAAAA,GAAG,CAACyD,GAAJ;AACH;AACJ,CAjBD,C,CAoBA;;;AACA,MAAMhD,aAAa,GAAG,UAASX,MAAT,EAAiBC,GAAjB,EAAsBC,GAAtB,EAA2BC,IAA3B,EAAiC;AACnD,QAAMoM,GAAG,GAAG1I,OAAO,CAAC,UAAD,CAAnB;;AACA,QAAM2I,QAAQ,GAAGxO,OAAO,CAACqB,OAAzB;AACA,QAAMoN,QAAQ,GAAGzM,MAAM,CAACiE,GAAP,GAAa,UAA9B;AACA,QAAMmB,QAAQ,GAAGoH,QAAQ,GAAG,GAAX,GAAiBC,QAAlC;;AACA,MAAI;AACAF,IAAAA,GAAG,CAACG,QAAJ,CAAatH,QAAb,EAAuB,UAASG,GAAT,EAAchB,IAAd,EAAoB;AACvCrE,MAAAA,GAAG,CAACmF,SAAJ,CAAc,cAAd,EAA8B,YAA9B;;AACA,UAAIE,GAAJ,EAAS;AAACtC,QAAAA,OAAO,CAACC,GAAR,CAAYqC,GAAZ;AAAkB,OAFW,CAEV;;;AAC7BrF,MAAAA,GAAG,CAACyD,GAAJ,CAAQY,IAAR,EAHuC,CAGxB;AAClB,KAJD;AAKH,GAND,CAOA,OAAOuB,KAAP,EAAc;AACV5F,IAAAA,GAAG,CAACmF,SAAJ,CAAc,cAAd,EAA8B,YAA9B;AACAnF,IAAAA,GAAG,CAACuF,KAAJ,CAAU,oCAAoCgH,QAA9C;AACAvM,IAAAA,GAAG,CAACyD,GAAJ;AACH;AACJ,CAjBD,C,CAmBA;;;AACA,MAAM/C,SAAS,GAAG,UAASZ,MAAT,EAAiBC,GAAjB,EAAsBC,GAAtB,EAA2BC,IAA3B,EAAiC;AAC/C,QAAMoM,GAAG,GAAG1I,OAAO,CAAC,UAAD,CAAnB;;AACA,QAAM2I,QAAQ,GAAGxO,OAAO,CAACuB,MAAzB;AACA,QAAMkN,QAAQ,GAAGzM,MAAM,CAACiE,GAAP,GAAa,MAA9B;AACA,QAAMmB,QAAQ,GAAGoH,QAAQ,GAAG,GAAX,GAAiBC,QAAlC;;AACA,MAAI;AACAF,IAAAA,GAAG,CAACG,QAAJ,CAAatH,QAAb,EAAuB,UAASG,GAAT,EAAchB,IAAd,EAAoB;AACvCrE,MAAAA,GAAG,CAACmF,SAAJ,CAAc,cAAd,EAA8B,YAA9B;;AACA,UAAIE,GAAJ,EAAS;AAACtC,QAAAA,OAAO,CAACC,GAAR,CAAYqC,GAAZ;AAAkB,OAFW,CAEV;;;AAC7BrF,MAAAA,GAAG,CAACyD,GAAJ,CAAQY,IAAR,EAHuC,CAGxB;AAClB,KAJD;AAKH,GAND,CAOA,OAAOuB,KAAP,EAAc;AACV5F,IAAAA,GAAG,CAACmF,SAAJ,CAAc,cAAd,EAA8B,YAA9B;AACAnF,IAAAA,GAAG,CAACuF,KAAJ,CAAU,mCAAmCgH,QAA7C;AACAvM,IAAAA,GAAG,CAACyD,GAAJ;AACH;AACJ,CAjBD,C,CAkBA;;;AACA,MAAM9C,UAAU,GAAG,UAASb,MAAT,EAAiBC,GAAjB,EAAsBC,GAAtB,EAA2BC,IAA3B,EAAiC;AAChD,QAAMoM,GAAG,GAAG1I,OAAO,CAAC,UAAD,CAAnB;;AACA,QAAM2I,QAAQ,GAAGxO,OAAO,CAACyB,QAAzB;AACA,QAAMgN,QAAQ,GAAGzM,MAAM,CAACiE,GAAP,GAAa,MAA9B;AACA,QAAMmB,QAAQ,GAAGoH,QAAQ,GAAG,GAAX,GAAiBC,QAAlC;;AACA,MAAI;AACAF,IAAAA,GAAG,CAACG,QAAJ,CAAatH,QAAb,EAAuB,UAASG,GAAT,EAAchB,IAAd,EAAoB;AACvCrE,MAAAA,GAAG,CAACmF,SAAJ,CAAc,cAAd,EAA8B,WAA9B;;AACA,UAAIE,GAAJ,EAAS;AAACtC,QAAAA,OAAO,CAACC,GAAR,CAAYqC,GAAZ;AAAkB,OAFW,CAEV;;;AAC7BrF,MAAAA,GAAG,CAACyD,GAAJ,CAAQY,IAAR,EAHuC,CAGxB;AAClB,KAJD;AAKH,GAND,CAOA,OAAOuB,KAAP,EAAc;AACV5F,IAAAA,GAAG,CAACmF,SAAJ,CAAc,cAAd,EAA8B,iBAA9B;AACAnF,IAAAA,GAAG,CAACuF,KAAJ,CAAU,oCAAoCgH,QAA9C;AACAvM,IAAAA,GAAG,CAACyD,GAAJ;AACH;AACJ,CAjBD,C,CAkBA;;;AACA,MAAM7C,YAAY,GAAG,UAASd,MAAT,EAAiBC,GAAjB,EAAsBC,GAAtB,EAA2BC,IAA3B,EAAiC;AAClD,QAAMoM,GAAG,GAAG1I,OAAO,CAAC,UAAD,CAAnB;;AACA,QAAM2I,QAAQ,GAAGxO,OAAO,CAACwB,UAAzB;AACA,QAAMiN,QAAQ,GAAGzM,MAAM,CAACiE,GAAP,GAAa,IAA9B;AACA,QAAMmB,QAAQ,GAAGoH,QAAQ,GAAG,GAAX,GAAiBC,QAAlC;;AACA,MAAI;AACAF,IAAAA,GAAG,CAACG,QAAJ,CAAatH,QAAb,EAAuB,UAASG,GAAT,EAAchB,IAAd,EAAoB;AACvCrE,MAAAA,GAAG,CAACmF,SAAJ,CAAc,cAAd,EAA8B,YAA9B;;AACA,UAAIE,GAAJ,EAAS;AAACtC,QAAAA,OAAO,CAACC,GAAR,CAAYqC,GAAZ;AAAkB,OAFW,CAEV;;;AAC7BrF,MAAAA,GAAG,CAACyD,GAAJ,CAAQY,IAAR,EAHuC,CAGxB;AAClB,KAJD;AAKH,GAND,CAOA,OAAOuB,KAAP,EAAc;AACV5F,IAAAA,GAAG,CAACmF,SAAJ,CAAc,cAAd,EAA8B,YAA9B;AACAnF,IAAAA,GAAG,CAACuF,KAAJ,CAAU,sCAAsCgH,QAAhD;AACAvM,IAAAA,GAAG,CAACyD,GAAJ;AACH;AAAC,CAhBN,C,CAiBA;;;AACA,MAAM5C,SAAS,GAAG,UAASf,MAAT,EAAiBC,GAAjB,EAAsBC,GAAtB,EAA2BC,IAA3B,EAAiC;AAC/C,QAAMoM,GAAG,GAAG1I,OAAO,CAAC,UAAD,CAAnB;;AACA,QAAM2I,QAAQ,GAAGxO,OAAO,CAACsB,MAAzB;AACA,QAAMmN,QAAQ,GAAGzM,MAAM,CAACiE,GAAP,GAAa,MAA9B;AACA,QAAMmB,QAAQ,GAAGoH,QAAQ,GAAG,GAAX,GAAiBC,QAAlC;;AACA,MAAI;AACAF,IAAAA,GAAG,CAACG,QAAJ,CAAatH,QAAb,EAAuB,UAASG,GAAT,EAAchB,IAAd,EAAoB;AACvCrE,MAAAA,GAAG,CAACmF,SAAJ,CAAc,cAAd,EAA8B,UAA9B;;AACA,UAAIE,GAAJ,EAAS;AAACtC,QAAAA,OAAO,CAACC,GAAR,CAAYqC,GAAZ;AAAkB,OAFW,CAEV;;;AAC7BrF,MAAAA,GAAG,CAACyD,GAAJ,CAAQY,IAAR,EAHuC,CAGxB;AAClB,KAJD;AAKH,GAND,CAOA,OAAOuB,KAAP,EAAc;AACV5F,IAAAA,GAAG,CAACmF,SAAJ,CAAc,cAAd,EAA8B,YAA9B;AACAnF,IAAAA,GAAG,CAACuF,KAAJ,CAAU,mCAAmCgH,QAA7C;AACAvM,IAAAA,GAAG,CAACyD,GAAJ;AACH;AACJ,CAjBD,C,CAkBA;;;AACA,MAAM3C,SAAS,GAAG,UAAShB,MAAT,EAAiBC,GAAjB,EAAsBC,GAAtB,EAA2BC,IAA3B,EAAiC;AAC/C,QAAMoM,GAAG,GAAG1I,OAAO,CAAC,UAAD,CAAnB;;AACA,QAAM2I,QAAQ,GAAGxO,OAAO,CAACmB,MAAzB;AACA,QAAMsN,QAAQ,GAAGzM,MAAM,CAACiE,GAAP,GAAa,MAA9B;AACA,QAAMmB,QAAQ,GAAGoH,QAAQ,GAAG,GAAX,GAAiBC,QAAlC;;AACA,MAAI;AACAF,IAAAA,GAAG,CAACG,QAAJ,CAAatH,QAAb,EAAuB,UAASG,GAAT,EAAchB,IAAd,EAAoB;AACvCrE,MAAAA,GAAG,CAACmF,SAAJ,CAAc,cAAd,EAA8B,YAA9B;;AACA,UAAIE,GAAJ,EAAS;AAACtC,QAAAA,OAAO,CAACC,GAAR,CAAYqC,GAAZ;AAAkB,OAFW,CAEV;;;AAC7BrF,MAAAA,GAAG,CAACyD,GAAJ,CAAQY,IAAR,EAHuC,CAGxB;AAClB,KAJD;AAKH,GAND,CAOA,OAAOuB,KAAP,EAAc;AACV5F,IAAAA,GAAG,CAACmF,SAAJ,CAAc,cAAd,EAA8B,YAA9B;AACAnF,IAAAA,GAAG,CAACuF,KAAJ,CAAU,mCAAmCgH,QAA7C;AACAvM,IAAAA,GAAG,CAACyD,GAAJ;AACH;AACJ,CAjBD,C,CAkBA;;;AACA,MAAM1C,SAAS,GAAG,UAASjB,MAAT,EAAiBC,GAAjB,EAAsBC,GAAtB,EAA2BC,IAA3B,EAAiC;AAC/C,QAAMoM,GAAG,GAAG1I,OAAO,CAAC,UAAD,CAAnB;;AACA,QAAM2I,QAAQ,GAAGxO,OAAO,CAACoB,MAAzB;AACA,QAAMqN,QAAQ,GAAGzM,MAAM,CAACiE,GAAP,GAAa,MAA9B;AACA,QAAMmB,QAAQ,GAAGoH,QAAQ,GAAG,GAAX,GAAiBC,QAAlC;;AACA,MAAI;AACAF,IAAAA,GAAG,CAACG,QAAJ,CAAatH,QAAb,EAAuB,UAASG,GAAT,EAAchB,IAAd,EAAoB;AACvCrE,MAAAA,GAAG,CAACmF,SAAJ,CAAc,cAAd,EAA8B,YAA9B;;AACA,UAAIE,GAAJ,EAAS;AACLrF,QAAAA,GAAG,CAACmF,SAAJ,CAAc,cAAd,EAA8B,YAA9B;AACAnF,QAAAA,GAAG,CAACuF,KAAJ,CAAU,mCAAmCgH,QAA7C;AACAvM,QAAAA,GAAG,CAACyD,GAAJ;AACH,OAJD,MAIO;AACHzD,QAAAA,GAAG,CAACyD,GAAJ,CAAQY,IAAR,EADG,CACY;AAClB;AACJ,KATD;AAUH,GAXD,CAYA,OAAOuB,KAAP,EAAc;AACV5F,IAAAA,GAAG,CAACmF,SAAJ,CAAc,cAAd,EAA8B,YAA9B;AACAnF,IAAAA,GAAG,CAACuF,KAAJ,CAAU,oCAAoCgH,QAA9C;AACAvM,IAAAA,GAAG,CAACyD,GAAJ;AACH;AACJ,CAtBD,C,CAyBA;;;AACA,MAAMnD,wBAAwB,GAAG,UAAUR,MAAV,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAC/D,MAAIrD,MAAM,CAACmB,QAAX,EAAqB;AACjBiD,IAAAA,qBAAqB;;AACrBhB,IAAAA,GAAG,CAACyD,GAAJ;AACH;AACJ,CALD,C,CAOA;;;AACA,MAAMgJ,eAAe,GAAG,UAAU5I,MAAV,EAAkB;AACtC,MAAIjH,MAAM,CAACmB,QAAX,EAAqB;AACjB,QAAI2O,MAAM,GAAG/I,OAAO,CAAC,eAAD,CAApB;;AACA,QAAIgJ,IAAI,GAAGhJ,OAAO,CAAC,aAAD,CAAlB;;AACA,QAAII,GAAG,GAAG4I,IAAI,CAAC9I,MAAM,CAACwC,KAAP,CAAaC,UAAd,CAAd;AACA,QAAI4B,SAAS,GAAG,OAAhB;AACA,QAAIuD,GAAG,GAAG,EAAV;;AACA,QAAI;AACA,UAAImB,KAAK,GAAGF,MAAM,CAAC7I,MAAM,CAACQ,IAAR,CAAlB,CADA,CAEA;AACA;;AACA,UAAIuI,KAAK,GAAG1E,SAAR,KAAsBrE,MAAM,CAACwC,KAAP,CAAaC,UAAb,CAAwBF,SAAxB,CAAkCyG,UAAlC,IAAgDhJ,MAAM,CAACwC,KAAP,CAAaC,UAAb,CAAwBF,SAAxB,CAAkC0G,eAAxG,CAAJ,EAA8H;AAC1H;AACA;AACA/J,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;;AACA,YAAI+J,WAAW,GAAGpJ,OAAO,CAAC,iBAAD,CAAzB;;AACA,YAAIqJ,WAAW,GAAG,CAAlB;;AACA,aAAK,IAAIpI,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGf,MAAM,CAACQ,IAAP,CAAY/C,MAAlC,EAA0CsD,EAAE,EAA5C,EAAgD;AAC5CoI,UAAAA,WAAW,IAAInJ,MAAM,CAACQ,IAAP,CAAYO,EAAZ,EAAgBqI,OAAhB,CAAwB3L,MAAvC;AACH;;AACD,YAAI4L,qBAAqB,GAAIhF,SAAS,GAAG0E,KAAb,GAAsBI,WAAlD;AACA,YAAIG,gBAAgB,GAAGtJ,MAAM,KAAK3F,SAAX,GAAuBA,SAAvB,GAAmCyH,IAAI,CAACiG,KAAL,CAAWjG,IAAI,CAACjC,SAAL,CAAeG,MAAf,CAAX,CAA1D;;AACA,aAAK,IAAIiD,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGjD,MAAM,CAACQ,IAAP,CAAY/C,MAAlC,EAA0CwF,EAAE,EAA5C,EAAgD;AAC5C,cAAIsG,MAAM,GAAG,EAAb;AACA,cAAIC,SAAS,GAAGxJ,MAAM,CAACQ,IAAP,CAAYyC,EAAZ,EAAgBmG,OAAhB,CAAwBtE,GAAxB,CAA4B,UAAU2E,CAAV,EAAaC,KAAb,EAAoB;AAC5D,mBAAO,CAAC1J,MAAM,CAACQ,IAAP,CAAYyC,EAAZ,EAAgBmG,OAAhB,CAAwBM,KAAxB,CAAD,EAAiC1J,MAAM,CAACQ,IAAP,CAAYyC,EAAZ,EAAgBgB,CAAhB,CAAkByF,KAAlB,CAAjC,CAAP;AACH,WAFe,CAAhB;AAGA,cAAIC,gBAAgB,GAAGH,SAAS,CAAC/L,MAAV,GAAmB0L,WAA1C;AACA,cAAIS,eAAe,GAAGvB,IAAI,CAACwB,KAAL,CAAWF,gBAAgB,GAAGN,qBAA9B,CAAtB,CAN4C,CAO5C;;AACA,cAAIS,iBAAJ;;AACA,cAAIF,eAAe,GAAGJ,SAAS,CAAC/L,MAA5B,IAAsC+L,SAAS,CAAC/L,MAAV,GAAmB,CAA7D,EAAgE;AAC5DqM,YAAAA,iBAAiB,GAAGZ,WAAW,CAACa,WAAZ,CAAwBP,SAAxB,EAAmCI,eAAnC,CAApB,CAD4D,CAE5D;;AACA,gBAAII,aAAa,GAAG,CAApB,CAH4D,CAI5D;;AACA,gBAAIC,SAAS,GAAG,EAAhB;AACA,gBAAIC,YAAY,GAAG,EAAnB;AACA,gBAAIrJ,IAAI,GAAGT,MAAM,CAACS,IAAP,CAAYb,MAAM,CAACQ,IAAP,CAAYyC,EAAZ,CAAZ,CAAX;;AACA,iBAAK,IAAIkH,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGtJ,IAAI,CAACpD,MAA3B,EAAmC0M,EAAE,EAArC,EAAyC;AACrC,kBAAItJ,IAAI,CAACsJ,EAAD,CAAJ,KAAa,SAAjB,EAA4B;AACxB,oBAAIC,KAAK,CAACC,OAAN,CAAcrK,MAAM,CAACQ,IAAP,CAAYyC,EAAZ,EAAgBpC,IAAI,CAACsJ,EAAD,CAApB,CAAd,CAAJ,EAA8C;AAC1CF,kBAAAA,SAAS,CAACrJ,IAAV,CAAeC,IAAI,CAACsJ,EAAD,CAAnB;AACAZ,kBAAAA,MAAM,CAAC1I,IAAI,CAACsJ,EAAD,CAAL,CAAN,GAAmB,EAAnB;AACH,iBAHD,MAGO;AACHD,kBAAAA,YAAY,CAACtJ,IAAb,CAAkBC,IAAI,CAACsJ,EAAD,CAAtB;AACH;AACJ;AACJ,aAjB2D,CAkB5D;AACA;AACA;;;AACA,iBAAKA,EAAE,GAAG,CAAV,EAAaA,EAAE,GAAGD,YAAY,CAACzM,MAA/B,EAAuC0M,EAAE,EAAzC,EAA6C;AACzCZ,cAAAA,MAAM,CAACW,YAAY,CAACC,EAAD,CAAb,CAAN,GAA2BnK,MAAM,CAACQ,IAAP,CAAYyC,EAAZ,EAAgBiH,YAAY,CAACC,EAAD,CAA5B,CAA3B;AACH,aAvB2D,CAwB5D;;;AACAZ,YAAAA,MAAM,CAAC,SAAD,CAAN,CAAkBe,KAAlB,GAA0B,EAA1B;;AACA,iBAAK,IAAIlJ,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG0I,iBAAiB,CAACrM,MAA1C,EAAkD2D,GAAG,EAArD,EAAyD;AACrD,qBAAO4I,aAAa,GAAGhK,MAAM,CAACQ,IAAP,CAAYyC,EAAZ,EAAgBmG,OAAhB,CAAwB3L,MAAxC,IAAmDuC,MAAM,CAACQ,IAAP,CAAYyC,EAAZ,EAAgBmG,OAAhB,CAAwBY,aAAxB,IAAyCF,iBAAiB,CAAC1I,GAAD,CAAjB,CAAuB,CAAvB,CAAnG,EAA+H;AAC3H4I,gBAAAA,aAAa;AAChB,eAHoD,CAIrD;;;AACA,mBAAKG,EAAE,GAAG,CAAV,EAAaA,EAAE,GAAGF,SAAS,CAACxM,MAA5B,EAAoC0M,EAAE,EAAtC,EAA0C;AACtCZ,gBAAAA,MAAM,CAACU,SAAS,CAACE,EAAD,CAAV,CAAN,CAAsB/I,GAAtB,IAA6BpB,MAAM,CAACQ,IAAP,CAAYyC,EAAZ,EAAgBgH,SAAS,CAACE,EAAD,CAAzB,EAA+BH,aAA/B,CAA7B;AACH;;AACDT,cAAAA,MAAM,CAAC,SAAD,CAAN,CAAkB,OAAlB,EAA2BnI,GAA3B,IAAkCpB,MAAM,CAACQ,IAAP,CAAYyC,EAAZ,EAAgB,SAAhB,EAA2B,OAA3B,EAAoC+G,aAApC,CAAlC;AACH,aAnC2D,CAoC5D;;;AACAV,YAAAA,gBAAgB,CAACrG,EAAD,CAAhB,GAAuBsG,MAAvB;AACAD,YAAAA,gBAAgB,CAACrG,EAAD,CAAhB,CAAqBsH,UAArB,IAAmC,oBAAnC;AACH,WAvCD,MAuCO;AACHjB,YAAAA,gBAAgB,CAACrG,EAAD,CAAhB,GAAuBjD,MAAM,CAACQ,IAAP,CAAYyC,EAAZ,CAAvB;AACH;;AACDqG,UAAAA,gBAAgB,CAAC9I,IAAjB,CAAsByC,EAAtB,IAA4BqG,gBAAgB,CAACrG,EAAD,CAA5C;AACH;;AACDjJ,QAAAA,iBAAiB,CAAC4B,aAAlB,GAAkC4O,MAAlC,CAAyC;AAAC,uBAAa,IAAIC,IAAJ,EAAd;AAA0BvK,UAAAA,GAAG,EAAEA,GAA/B;AAAoCF,UAAAA,MAAM,EAAEsJ;AAA5C,SAAzC,EAhE0H,CAgElB;;AACxG1B,QAAAA,GAAG,GAAG;AAAC1H,UAAAA,GAAG,EAAEA,GAAN;AAAWF,UAAAA,MAAM,EAAEsJ;AAAnB,SAAN;AACH,OAlED,MAkEO;AACH1B,QAAAA,GAAG,GAAG;AAAC1H,UAAAA,GAAG,EAAEA,GAAN;AAAWF,UAAAA,MAAM,EAAEA;AAAnB,SAAN;AACH,OAxED,CAyEA;;;AACA,UAAIA,MAAM,CAACwC,KAAP,CAAaC,UAAb,CAAwBF,SAAxB,CAAkCyG,UAAlC,IAAgDhJ,MAAM,CAACwC,KAAP,CAAaC,UAAb,CAAwBF,SAAxB,CAAkC0G,eAAtF,EAAuG;AACnG,aAAK,IAAIhG,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGjD,MAAM,CAACQ,IAAP,CAAY/C,MAAlC,EAA0CwF,EAAE,EAA5C,EAAgD;AAC5C,iBAAQjD,MAAM,CAACQ,IAAP,CAAYyC,EAAZ,EAAgB,SAAhB,CAAR,CAD4C,CACH;AAC5C;AACJ;;AACD5J,MAAAA,SAAS,CAACqR,WAAV,CAAsBxK,GAAtB,EAA2B;AAACA,QAAAA,GAAG,EAAEA,GAAN;AAAWF,QAAAA,MAAM,EAAEA;AAAnB,OAA3B,EA/EA,CA+EwD;AAC3D,KAhFD,CAgFE,OAAO+B,KAAP,EAAc;AACZ,UAAIA,KAAK,CAACJ,cAAN,GAAuBR,OAAvB,CAA+B,8BAA/B,KAAkE,CAAC,CAAvE,EAA0E;AACtE,cAAM,IAAIpI,MAAM,CAAC8F,KAAX,CAAiB,CAAC,6CAAlB,CAAN;AACH;AACJ;;AACD,WAAO+I,GAAP;AACH;AACJ,CA9FD,C,CAgGA;AACA;;;AACA,MAAM+C,cAAc,GAAG,IAAIxR,eAAJ,CAAoB;AACvC4E,EAAAA,IAAI,EAAE,4BADiC;AAEvC6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB;AACvByR,IAAAA,SAAS,EAAE;AAACC,MAAAA,IAAI,EAAEC;AAAP;AADY,GAAjB,EAEPC,SAFO,EAF6B;;AAKvCC,EAAAA,GAAG,CAACJ,SAAD,EAAY;AACX,QAAI,CAAC9R,MAAM,CAACmS,MAAP,EAAL,EAAsB;AAClB,YAAM,IAAInS,MAAM,CAAC8F,KAAX,CAAiB,GAAjB,EAAsB,eAAtB,CAAN;AACH;;AACDvF,IAAAA,eAAe,CAAC6R,aAAhB,CAA8BC,MAA9B,CAAqC;AAACC,MAAAA,OAAO,EAAER;AAAV,KAArC,EAA2D;AAACQ,MAAAA,OAAO,EAAER,SAAV;AAAqBK,MAAAA,MAAM,EAAEnS,MAAM,CAACmS,MAAP;AAA7B,KAA3D;AACA,WAAO,KAAP;AACH;;AAXsC,CAApB,CAAvB,C,CAeA;;AACA,MAAMI,kBAAkB,GAAG,IAAInS,eAAJ,CAAoB;AAC3C4E,EAAAA,IAAI,EAAE,gCADqC;AAE3C6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB;AACvBe,IAAAA,QAAQ,EAAE;AAAC2Q,MAAAA,IAAI,EAAE1K,MAAP;AAAemL,MAAAA,QAAQ,EAAE;AAAzB;AADa,GAAjB,EAEPP,SAFO,EAFiC;;AAK3CC,EAAAA,GAAG,CAAC9Q,QAAD,EAAW;AACV,QAAIpB,MAAM,CAACmB,QAAX,EAAqB;AACjB,UAAIsR,KAAJ;AACA,UAAIC,QAAJ;AACA,UAAIC,aAAJ;AAEA,UAAIC,YAAY,GAAGxR,QAAQ,CAACwR,YAA5B;AACA,UAAIC,mBAAmB,GAAGzR,QAAQ,CAACyR,mBAAnC;AACA,UAAIC,iBAAiB,GAAG1R,QAAQ,CAAC0R,iBAAjC;AACA,UAAIC,YAAY,GAAG3R,QAAQ,CAAC2R,YAA5B;AACA,UAAIC,iBAAiB,GAAG5R,QAAQ,CAAC4R,iBAAjC;;AAEA,UAAIF,iBAAJ,EAAuB;AACnB;AACAJ,QAAAA,QAAQ,GAAGI,iBAAX;AACH,OAHD,MAGO,IAAIF,YAAY,IAAIC,mBAApB,EAAyC;AAC5C;AACA,YAAII,IAAI,GAAG1S,eAAe,CAAC2S,KAAhB,CAAsBC,OAAtB,CAA8B;AAACnO,UAAAA,IAAI,EAAE4N;AAAP,SAA9B,CAAX;;AACA,YAAIK,IAAI,KAAK3R,SAAb,EAAwB;AACpB;AACAf,UAAAA,eAAe,CAAC2S,KAAhB,CAAsBb,MAAtB,CAA6B;AAACrN,YAAAA,IAAI,EAAE4N;AAAP,WAA7B,EAAmD;AAACjM,YAAAA,IAAI,EAAE;AAACyM,cAAAA,WAAW,EAAEP;AAAd;AAAP,WAAnD;AACAH,UAAAA,QAAQ,GAAGE,YAAX;AACH,SAJD,MAIO;AACH;AACAF,UAAAA,QAAQ,GAAGO,IAAI,CAACjO,IAAhB;AACA,cAAIoO,WAAW,GAAGH,IAAI,CAACG,WAAvB;;AACA,cAAIA,WAAW,IAAIP,mBAAnB,EAAwC;AACpC;AACAtS,YAAAA,eAAe,CAAC2S,KAAhB,CAAsBb,MAAtB,CAA6B;AAACrN,cAAAA,IAAI,EAAE4N;AAAP,aAA7B,EAAmD;AAACjM,cAAAA,IAAI,EAAE;AAACyM,gBAAAA,WAAW,EAAEP;AAAd;AAAP,aAAnD;AACH;AACJ;AACJ,OA9BgB,CA+BjB;;;AACA,UAAIG,iBAAJ,EAAuB;AACnB;AACA;AACAL,QAAAA,aAAa,GAAGpS,eAAe,CAAC8S,aAAhB,CAA8BF,OAA9B,CAAsC;AAACG,UAAAA,KAAK,EAAEN;AAAR,SAAtC,CAAhB;AACAP,QAAAA,KAAK,GAAGE,aAAa,CAACF,KAAtB;;AACA,YAAIA,KAAK,CAACrK,OAAN,CAAcsK,QAAd,KAA2B,CAAC,CAAhC,EAAmC;AAC/B;AACA,cAAIA,QAAJ,EAAc;AACVD,YAAAA,KAAK,CAAC5K,IAAN,CAAW6K,QAAX;AACH;;AACDnS,UAAAA,eAAe,CAAC8S,aAAhB,CAA8BhB,MAA9B,CAAqC;AAACiB,YAAAA,KAAK,EAAEN;AAAR,WAArC,EAAiE;AAACrM,YAAAA,IAAI,EAAE;AAAC8L,cAAAA,KAAK,EAAEA;AAAR;AAAP,WAAjE;AACH;AACJ,OAZD,MAYO,IAAIM,YAAJ,EAAkB;AACrB;AACAJ,QAAAA,aAAa,GAAGpS,eAAe,CAAC8S,aAAhB,CAA8BF,OAA9B,CAAsC;AAACG,UAAAA,KAAK,EAAEP;AAAR,SAAtC,CAAhB;;AACA,YAAIJ,aAAa,KAAKrR,SAAtB,EAAiC;AAC7B;AACAmR,UAAAA,KAAK,GAAGE,aAAa,CAACF,KAAtB;;AACA,cAAIA,KAAK,CAACrK,OAAN,CAAcsK,QAAd,KAA2B,CAAC,CAAhC,EAAmC;AAC/B;AACA,gBAAIA,QAAJ,EAAc;AACVD,cAAAA,KAAK,CAAC5K,IAAN,CAAW6K,QAAX;AACH;;AACDnS,YAAAA,eAAe,CAAC8S,aAAhB,CAA8BhB,MAA9B,CAAqC;AAACiB,cAAAA,KAAK,EAAEN;AAAR,aAArC,EAAiE;AAACrM,cAAAA,IAAI,EAAE;AAAC8L,gBAAAA,KAAK,EAAEA;AAAR;AAAP,aAAjE;AACH;AACJ,SAVD,MAUO;AACH;AACAA,UAAAA,KAAK,GAAG,EAAR;;AACA,cAAIC,QAAJ,EAAc;AACVD,YAAAA,KAAK,CAAC5K,IAAN,CAAW6K,QAAX;AACH;;AACD,cAAIK,YAAJ,EAAkB;AACdxS,YAAAA,eAAe,CAAC8S,aAAhB,CAA8BhB,MAA9B,CAAqC;AAACiB,cAAAA,KAAK,EAAEP;AAAR,aAArC,EAA4D;AAACpM,cAAAA,IAAI,EAAE;AAAC8L,gBAAAA,KAAK,EAAEA;AAAR;AAAP,aAA5D;AACH;AACJ;AACJ;;AACD,aAAO,KAAP;AACH;AACJ;;AA5E0C,CAApB,CAA3B,C,CA+EA;;AACA,MAAMc,qBAAqB,GAAG,IAAInT,eAAJ,CAAoB;AAC9C4E,EAAAA,IAAI,EAAE,mCADwC;AAE9C6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB;AACvBe,IAAAA,QAAQ,EAAE;AAAC2Q,MAAAA,IAAI,EAAE1K,MAAP;AAAemL,MAAAA,QAAQ,EAAE;AAAzB;AADa,GAAjB,EAEPP,SAFO,EAFoC;;AAM9CC,EAAAA,GAAG,CAAC9Q,QAAD,EAAW;AACV,QAAIpB,MAAM,CAACmB,QAAX,EAAqB;AACjB,UAAIC,QAAQ,CAAC4D,IAAb,EAAmB;AACfzE,QAAAA,eAAe,CAACiT,SAAhB,CAA0BnB,MAA1B,CAAiC;AAACrN,UAAAA,IAAI,EAAE5D,QAAQ,CAAC4D;AAAhB,SAAjC,EAAwD;AACpD2B,UAAAA,IAAI,EAAE;AACF3B,YAAAA,IAAI,EAAE5D,QAAQ,CAAC4D,IADb;AAEFiO,YAAAA,IAAI,EAAE7R,QAAQ,CAAC6R,IAFb;AAGFQ,YAAAA,MAAM,EAAErS,QAAQ,CAACqS,MAHf;AAIFC,YAAAA,IAAI,EAAEtS,QAAQ,CAACsS,IAJb;AAKFC,YAAAA,QAAQ,EAAEvS,QAAQ,CAACuS,QALjB;AAMFC,YAAAA,IAAI,EAAExS,QAAQ,CAACwS,IANb;AAOFC,YAAAA,QAAQ,EAAEzS,QAAQ,CAACyS;AAPjB;AAD8C,SAAxD;AAWH;;AACD,aAAO,KAAP;AACH;AACJ;;AAvB6C,CAApB,CAA9B,C,CA2BA;;AACA,MAAMC,cAAc,GAAG,IAAI1T,eAAJ,CAAoB;AACvC4E,EAAAA,IAAI,EAAE,4BADiC;AAEvC6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB;AACvB2E,IAAAA,IAAI,EAAE;AACF+M,MAAAA,IAAI,EAAEC;AADJ;AADiB,GAAjB,EAIPC,SAJO,EAF6B;;AAOvCC,EAAAA,GAAG,CAAChP,MAAD,EAAS;AACR,QAAI,CAAClD,MAAM,CAACmS,MAAP,EAAL,EAAsB;AAClB,YAAM,IAAInS,MAAM,CAAC8F,KAAX,CAAiB,eAAjB,CAAN;AACH;;AACD,QAAI9F,MAAM,CAACmB,QAAX,EAAqB;AACjBZ,MAAAA,eAAe,CAACwT,aAAhB,CAA8BC,MAA9B,CAAqC;AAAChP,QAAAA,IAAI,EAAE9B,MAAM,CAAC8B;AAAd,OAArC;AACH;AACJ;;AAdsC,CAApB,CAAvB,C,CAiBA;;AACA,MAAMiP,UAAU,GAAG,IAAI7T,eAAJ,CAAoB;AACnC4E,EAAAA,IAAI,EAAE,wBAD6B;AAEnC6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB;AACvB6T,IAAAA,QAAQ,EAAE;AAACnC,MAAAA,IAAI,EAAEC;AAAP,KADa;AAEvBF,IAAAA,SAAS,EAAE;AAACC,MAAAA,IAAI,EAAEC;AAAP,KAFY;AAGvBmC,IAAAA,OAAO,EAAE;AAACpC,MAAAA,IAAI,EAAEC;AAAP;AAHc,GAAjB,EAIPC,SAJO,EAFyB;;AAOnCC,EAAAA,GAAG,CAAChP,MAAD,EAAS;AACR,QAAIgR,QAAQ,GAAGhR,MAAM,CAACgR,QAAtB;AACA,QAAIpC,SAAS,GAAG5O,MAAM,CAAC4O,SAAvB;AACA,QAAIqC,OAAO,GAAGjR,MAAM,CAACiR,OAArB;;AACA,QAAI,CAACnU,MAAM,CAACmS,MAAP,EAAL,EAAsB;AAClB,YAAM,IAAInS,MAAM,CAAC8F,KAAX,CAAiB,GAAjB,EAAsB,eAAtB,CAAN;AACH;;AACD,QAAIsO,WAAW,GAAGpU,MAAM,CAAC4T,IAAP,GAAcS,QAAd,CAAuBC,MAAvB,CAA8BhB,KAAhD,CAPQ,CAQR;AACA;AACA;AAEA;AACA;AACA;AACA;;AACA,QAAIiB,WAAW,GAAGhU,eAAe,CAACiU,WAAhB,CAA4BrB,OAA5B,CAAoC;AAACnO,MAAAA,IAAI,EAAE;AAAP,KAApC,EAA4D;AAC1EyP,MAAAA,QAAQ,EAAE,CADgE;AAE1EC,MAAAA,YAAY,EAAE,CAF4D;AAG1EC,MAAAA,aAAa,EAAE;AAH2D,KAA5D,CAAlB;AAKA,QAAIF,QAAQ,GAAGF,WAAW,CAACE,QAA3B;AACA,QAAIC,YAAY,GAAGH,WAAW,CAACG,YAA/B;AACA,QAAIC,aAAa,GAAGJ,WAAW,CAACI,aAAhC;AAEA,QAAIC,eAAJ;;AACA,QAAI;AACAA,MAAAA,eAAe,GAAGC,UAAU,CAACC,eAAX,CAA2B,MAA3B,EAAmC;AACjDC,QAAAA,OAAO,EAAE,OADwC;AAEjDC,QAAAA,IAAI,EAAE;AACFC,UAAAA,OAAO,EAAE;AACLrB,YAAAA,IAAI,EAAE,mBADD;AAELa,YAAAA,QAAQ,EAAEA,QAFL;AAGLC,YAAAA,YAAY,EAAEA,YAHT;AAILQ,YAAAA,YAAY,EAAEP;AAJT;AADP;AAF2C,OAAnC,CAAlB;AAYH,KAbD,CAaE,OAAO9O,CAAP,EAAU;AACR,YAAM,IAAI7F,MAAM,CAAC8F,KAAX,CAAiB,GAAjB,EAAsB,qBAAqBD,CAAC,CAACE,OAAF,EAA3C,CAAN;AACH;;AACD,QAAI;AACA,UAAIoP,WAAW,GAAG;AACdC,QAAAA,MAAM,EAAEhB,WADM;AAEdiB,QAAAA,OAAO,EAAEjB,WAFK;AAGdkB,QAAAA,IAAI,EAAElB,WAHQ;AAIdmB,QAAAA,EAAE,EAAEzD,SAJU;AAKdqC,QAAAA,OAAO,EAAEA,OALK;AAMdqB,QAAAA,WAAW,EAAE,CACT;AACIC,UAAAA,QAAQ,EAAE,WADd;AAEIC,UAAAA,QAAQ,EAAE,IAAIC,MAAJ,CAAWzB,QAAQ,CAAC0B,KAAT,CAAe,SAAf,EAA0B,CAA1B,CAAX,EAAyC,QAAzC;AAFd,SADS;AANC,OAAlB;AAcAhB,MAAAA,eAAe,CAACiB,QAAhB,CAAyBV,WAAzB,EAAsC,UAAUnM,KAAV,EAAiB8M,QAAjB,EAA2B;AAC7D,YAAI9M,KAAJ,EAAW;AACP7C,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2B4C,KAA3B,GAAmC,QAAnC,GAA8CoL,WAA9C,GAA4D,MAA5D,GAAqEtC,SAAjF;AACH,SAFD,MAEO;AACH3L,UAAAA,OAAO,CAACC,GAAR,CAAY0P,QAAQ,GAAG,QAAX,GAAsB1B,WAAtB,GAAoC,MAApC,GAA6CtC,SAAzD;AACH;;AACD8C,QAAAA,eAAe,CAACmB,KAAhB;AACH,OAPD;AAQH,KAvBD,CAuBE,OAAOlQ,CAAP,EAAU;AACR,YAAM,IAAI7F,MAAM,CAAC8F,KAAX,CAAiB,GAAjB,EAAsB,gBAAgBD,CAAC,CAACE,OAAF,EAAtC,CAAN;AACH;;AACD,WAAO,KAAP;AACH;;AA5EkC,CAApB,CAAnB,C,CA+EA;;AACA,MAAMiQ,iBAAiB,GAAG,IAAI5V,eAAJ,CAAoB;AAC1C4E,EAAAA,IAAI,EAAE,+BADoC;AAE1C6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB,EAAjB,EAAqB4R,SAArB,EAFgC;;AAG1CC,EAAAA,GAAG,GAAG;AACF,QAAIO,KAAK,GAAG,EAAZ;;AACA,QAAIzS,MAAM,CAACmB,QAAX,EAAqB;AACjB,UAAI8U,SAAS,GAAGjW,MAAM,CAAC4T,IAAP,GAAcS,QAAd,CAAuBC,MAAvB,CAA8BhB,KAA9B,CAAoC4C,WAApC,EAAhB;AACAzD,MAAAA,KAAK,GAAGlS,eAAe,CAAC8S,aAAhB,CAA8BF,OAA9B,CAAsC;AAACG,QAAAA,KAAK,EAAE2C;AAAR,OAAtC,EAA0DxD,KAAlE;AACH;;AACD,WAAOA,KAAP;AACH;;AAVyC,CAApB,CAA1B,C,CAaA;;AACA,MAAM0D,uBAAuB,GAAG,IAAI/V,eAAJ,CAAoB;AAChD4E,EAAAA,IAAI,EAAE,qCAD0C;AAEhD6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB,EAAjB,EAAqB4R,SAArB,EAFsC;;AAGhDC,EAAAA,GAAG,GAAG;AACF,QAAIlS,MAAM,CAACmB,QAAX,EAAqB,CACpB;AACJ;;AAN+C,CAApB,CAAhC,C,CAUA;;AACA,MAAMiV,YAAY,GAAG,IAAIhW,eAAJ,CAAoB;AACrC4E,EAAAA,IAAI,EAAE,0BAD+B;AAErC6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB;AACvBqJ,IAAAA,UAAU,EAAE;AACRqI,MAAAA,IAAI,EAAE1K,MADE;AAERmL,MAAAA,QAAQ,EAAE;AAFF,KADW;AAKvB7I,IAAAA,QAAQ,EAAE;AACNoI,MAAAA,IAAI,EAAEC;AADA,KALa;AAQvBqE,IAAAA,SAAS,EAAE;AACPtE,MAAAA,IAAI,EAAEuE;AADC;AARY,GAAjB,EAWPrE,SAXO,EAF2B;;AAcrCC,EAAAA,GAAG,CAAChP,MAAD,EAAS;AACR,QAAIlD,MAAM,CAACmB,QAAX,EAAqB;AACjB,UAAIoV,iBAAiB,GAAGhW,eAAe,CAACiW,kBAAhB,CAAmCrD,OAAnC,CAA2C;AAACxJ,QAAAA,QAAQ,EAAEzG,MAAM,CAACyG;AAAlB,OAA3C,CAAxB;AACA,UAAI8M,YAAY,GAAGF,iBAAiB,CAACE,YAArC;AACA,UAAI5H,GAAJ;;AACA,UAAI;AACA,YAAIkB,IAAI,GAAGhJ,OAAO,CAAC,aAAD,CAAlB;;AACA,YAAII,GAAG,GAAG4I,IAAI,CAAC7M,MAAM,CAACwG,UAAR,CAAd;;AACA,YAAIxH,OAAO,CAACC,GAAR,CAAYuU,QAAZ,KAAyB,aAAzB,IAA0CxT,MAAM,CAACmT,SAArD,EAAgE;AAC5D/V,UAAAA,SAAS,CAAC+V,SAAV,CAAoBlP,GAApB;AACH;;AACD,YAAIwP,OAAO,GAAGrW,SAAS,CAACyO,SAAV,CAAoB5H,GAApB,CAAd;;AACA,YAAIwP,OAAO,KAAKrV,SAAhB,EAA2B;AACvB;AACA,gBAAMsV,MAAM,GAAG7P,OAAO,CAAC,eAAD,CAAtB;;AACA,cAAI8P,MAAM,GAAG,IAAID,MAAJ,EAAb;AACAjR,UAAAA,MAAM,CAAC8Q,YAAD,CAAN,CAAqBvT,MAAM,CAACwG,UAA5B,EAAwC,UAAUiN,OAAV,EAAmB;AACvD9H,YAAAA,GAAG,GAAGgB,eAAe,CAAC8G,OAAD,CAArB;AACAE,YAAAA,MAAM,CAAC,QAAD,CAAN,CAAiBhI,GAAjB;AACH,WAHD;AAIA,iBAAOgI,MAAM,CAACC,IAAP,EAAP;AACH,SATD,MASO;AAAE;AACL;AACA,cAAIC,SAAS,GAAG9V,iBAAiB,CAACkS,OAAlB,CAA0B;AAAChM,YAAAA,GAAG,EAAEA;AAAN,WAA1B,EAAsC,EAAtC,EAA0C;AAAC6P,YAAAA,YAAY,EAAE;AAAf,WAA1C,CAAhB;;AACA,cAAID,SAAS,KAAKzV,SAAlB,EAA6B;AACzB;AACAuN,YAAAA,GAAG,GAAGkI,SAAN,CAFyB,CAGzB;;AACA9V,YAAAA,iBAAiB,CAAC4B,aAAlB,GAAkC6D,MAAlC,CAAyC;AAACS,cAAAA,GAAG,EAAEA;AAAN,aAAzC,EAAqD;AAACR,cAAAA,IAAI,EAAE;AAAC,6BAAa,IAAI+K,IAAJ;AAAd;AAAP,aAArD;AACH,WALD,MAKO;AACH7C,YAAAA,GAAG,GAAG8H,OAAN,CADG,CACa;AAChB;;AACArW,YAAAA,SAAS,CAACqR,WAAV,CAAsBgF,OAAO,CAACxP,GAA9B,EAAmCwP,OAAnC;AACH;;AACD,cAAI7G,MAAM,GAAG/I,OAAO,CAAC,eAAD,CAApB;;AACAZ,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoC0J,MAAM,CAAC6G,OAAD,CAA1C;AACA,iBAAO9H,GAAP;AACH;AACJ,OAjCD,CAiCE,OAAOoI,iBAAP,EAA0B;AACxB,YAAIA,iBAAiB,CAACrO,cAAlB,GAAmCR,OAAnC,CAA2C,OAA3C,MAAwD,CAAC,CAA7D,EAAgE;AAC5D,gBAAM,IAAIpI,MAAM,CAAC8F,KAAX,CAAiBmR,iBAAiB,CAAClR,OAAnC,CAAN;AACH,SAFD,MAEO;AACH,gBAAM,IAAI/F,MAAM,CAAC8F,KAAX,CAAiB,oCAAoC2Q,YAApC,GAAmD,KAAnD,GAA2DQ,iBAAiB,CAAClR,OAA9F,CAAN;AACH;AACJ;;AACD,aAAOzE,SAAP,CA5CiB,CA4CC;AACrB;AACJ;;AA7DoC,CAApB,CAArB,C,CAgEA;;AACA,MAAM4V,iBAAiB,GAAG,IAAI9W,eAAJ,CAAoB;AAC1C4E,EAAAA,IAAI,EAAE,+BADoC;AAE1C6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB;AACvB8W,IAAAA,SAAS,EAAE;AACPpF,MAAAA,IAAI,EAAEC;AADC;AADY,GAAjB,EAIPC,SAJO,EAFgC;;AAO1CC,EAAAA,GAAG,CAAChP,MAAD,EAAS;AACR,QAAIlD,MAAM,CAACmB,QAAX,EAAqB;AACjB,UAAI0N,GAAJ;AACA,UAAI1H,GAAG,GAAGjE,MAAM,CAACiU,SAAjB;;AACA,UAAI;AACA,YAAIJ,SAAS,GAAG9V,iBAAiB,CAACkS,OAAlB,CAA0B;AAAChM,UAAAA,GAAG,EAAEA;AAAN,SAA1B,EAAsC,EAAtC,EAA0C;AAAC6P,UAAAA,YAAY,EAAE;AAAf,SAA1C,CAAhB;;AACA,YAAID,SAAS,KAAKzV,SAAlB,EAA6B;AACzBuN,UAAAA,GAAG,GAAGkI,SAAN;AACH,SAFD,MAEO;AACHlI,UAAAA,GAAG,GAAGvO,SAAS,CAACyO,SAAV,CAAoB5H,GAApB,CAAN,CADG,CAC6B;AACnC;;AACD,YAAI2I,MAAM,GAAG/I,OAAO,CAAC,eAAD,CAApB;;AACAZ,QAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAkD0J,MAAM,CAACiH,SAAD,CAAxD;AACA,eAAOlI,GAAP;AACH,OAVD,CAUE,OAAO7F,KAAP,EAAc;AACZ,cAAM,IAAIhJ,MAAM,CAAC8F,KAAX,CAAiB,yCAAyCqB,GAAzC,GAA+C,KAA/C,GAAuD6B,KAAK,CAACjD,OAA9E,CAAN;AACH;;AACD,aAAOzE,SAAP;AACH;AACJ;;AA1ByC,CAApB,CAA1B,C,CA6BA;;AACA,MAAM8V,wBAAwB,GAAG,IAAIhX,eAAJ,CAAoB;AACjD4E,EAAAA,IAAI,EAAE,sCAD2C;AAEjD6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB,EAAjB,EAAqB4R,SAArB,EAFuC;;AAGjDC,EAAAA,GAAG,GAAG;AACF,QAAIlS,MAAM,CAACmB,QAAX,EAAqB,CACpB;AACJ;;AANgD,CAApB,CAAjC;AASA,MAAMkW,SAAS,GAAG,IAAIjX,eAAJ,CAAoB;AAClC4E,EAAAA,IAAI,EAAE,uBAD4B;AAElC6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB;AACvB8W,IAAAA,SAAS,EAAE;AACPpF,MAAAA,IAAI,EAAEC;AADC;AADY,GAAjB,EAIPC,SAJO,EAFwB;;AAOlCC,EAAAA,GAAG,CAAChP,MAAD,EAAS;AACR,QAAIlD,MAAM,CAACmB,QAAX,EAAqB;AACjB,UAAI0N,GAAJ;AACA,UAAI1H,GAAG,GAAGjE,MAAM,CAACiU,SAAjB;;AACA,UAAI;AACAtI,QAAAA,GAAG,GAAG7N,qBAAqB,CAAC6B,aAAtB,GAAsCsQ,OAAtC,CAA8C;AAAChM,UAAAA,GAAG,EAAEA;AAAN,SAA9C,CAAN;AACA,eAAO0H,GAAP;AACH,OAHD,CAGE,OAAO7F,KAAP,EAAc;AACZ,cAAM,IAAIhJ,MAAM,CAAC8F,KAAX,CAAiB,iCAAiCqB,GAAjC,GAAuC,KAAvC,GAA+C6B,KAAK,CAACjD,OAAtE,CAAN;AACH;;AACD,aAAOzE,SAAP;AACH;AACJ;;AAnBiC,CAApB,CAAlB,C,CAsBA;;AACA,MAAMgW,mBAAmB,GAAG,IAAIlX,eAAJ,CAAoB;AAC5C4E,EAAAA,IAAI,EAAE,iCADsC;AAE5C6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB;AACvB8G,IAAAA,GAAG,EAAE;AACD4K,MAAAA,IAAI,EAAEC;AADL;AADkB,GAAjB,EAIPC,SAJO,EAFkC;;AAO5CC,EAAAA,GAAG,CAAChP,MAAD,EAAS;AACR,QAAIlD,MAAM,CAACmB,QAAX,EAAqB;AACjB,UAAI0N,GAAJ;AACA,UAAI1H,GAAG,GAAGjE,MAAM,CAACiE,GAAjB;;AACA,UAAI;AACA0H,QAAAA,GAAG,GAAGvO,SAAS,CAACyO,SAAV,CAAoB5H,GAApB,CAAN,CADA,CACgC;;AAChC,eAAO0H,GAAP;AACH,OAHD,CAGE,OAAO7F,KAAP,EAAc;AACZ,cAAM,IAAIhJ,MAAM,CAAC8F,KAAX,CAAiB,2CAA2CqB,GAA3C,GAAiD,KAAjD,GAAyD6B,KAAK,CAACjD,OAAhF,CAAN;AACH;;AACD,aAAOzE,SAAP;AACH;AACJ;;AAnB2C,CAApB,CAA5B;AAsBA;;;;;;;;;;AASA,MAAMiW,aAAa,GAAG,IAAInX,eAAJ,CAAoB;AACtC4E,EAAAA,IAAI,EAAE,2BADgC;AAEtC6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB;AACvB8W,IAAAA,SAAS,EAAE;AAACpF,MAAAA,IAAI,EAAEC;AAAP,KADY;AAEvBwF,IAAAA,SAAS,EAAE;AAACzF,MAAAA,IAAI,EAAE1M;AAAP,KAFY;AAGvBuJ,IAAAA,YAAY,EAAE;AAACmD,MAAAA,IAAI,EAAE1M;AAAP;AAHS,GAAjB,EAIP4M,SAJO,EAF4B;;AAOtCC,EAAAA,GAAG,CAAChP,MAAD,EAAS;AACR,QAAIlD,MAAM,CAACmB,QAAX,EAAqB;AACjB,UAAIsW,IAAI,GAAGvU,MAAM,CAACiU,SAAlB;AACA,UAAIO,EAAE,GAAGxU,MAAM,CAACsU,SAAhB;AACA,UAAIG,GAAG,GAAGzU,MAAM,CAAC0L,YAAjB;AACA,UAAIC,GAAG,GAAG,EAAV;;AACA,UAAI;AACAA,QAAAA,GAAG,GAAG3H,uBAAuB,CAACuQ,IAAD,EAAOC,EAAP,EAAWC,GAAX,CAA7B;AACH,OAFD,CAEE,OAAO9R,CAAP,EAAU;AACRM,QAAAA,OAAO,CAACC,GAAR,CAAYP,CAAZ;AACH;;AACD,aAAOgJ,GAAP;AACH;AACJ;;AApBqC,CAApB,CAAtB;AAwBA,MAAM+I,eAAe,GAAG,IAAIxX,eAAJ,CAAoB;AACxC4E,EAAAA,IAAI,EAAE,6BADkC;AAExC6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB,EAAjB,EAAqB4R,SAArB,EAF8B;;AAGxCC,EAAAA,GAAG,GAAG;AACF;AACA;AACA,QAAIlS,MAAM,CAACmB,QAAX,EAAqB;AACjB,UAAI0V,MAAM,GAAG9P,OAAO,CAAC,eAAD,CAApB;;AACA,UAAI0I,GAAG,GAAG1I,OAAO,CAAC,UAAD,CAAjB;;AACA,UAAI8Q,OAAO,GAAG,IAAIhB,MAAJ,EAAd;AACA,UAAIiB,KAAJ;AACA3R,MAAAA,OAAO,CAACC,GAAR,CAAYlE,OAAO,CAACC,GAAR,CAAY4V,GAAxB;AACA,UAAIC,IAAJ;;AACA,UAAI9V,OAAO,CAACC,GAAR,CAAYuU,QAAZ,KAAyB,aAA7B,EAA4C;AACxCsB,QAAAA,IAAI,GAAG9V,OAAO,CAACC,GAAR,CAAY4V,GAAZ,GAAkB,iEAAzB;AACH,OAFD,MAEO;AACHC,QAAAA,IAAI,GAAG9V,OAAO,CAACC,GAAR,CAAY4V,GAAZ,GAAkB,kFAAzB;AACH;;AACD,UAAI;AACAtI,QAAAA,GAAG,CAACG,QAAJ,CAAaoI,IAAb,EAAmB,MAAnB,EAA2B,UAAUvP,GAAV,EAAehB,IAAf,EAAqB;AAC5C,cAAIgB,GAAJ,EAAS;AACLqP,YAAAA,KAAK,GAAGrP,GAAG,CAAC1C,OAAZ;AACA8R,YAAAA,OAAO,CAAC,QAAD,CAAP;AACH,WAHD,MAGO;AACHC,YAAAA,KAAK,GAAGrQ,IAAR;AACAoQ,YAAAA,OAAO,CAAC,QAAD,CAAP;AACH;AACJ,SARD;AASH,OAVD,CAUE,OAAOhS,CAAP,EAAU;AACRiS,QAAAA,KAAK,GAAGjS,CAAC,CAACE,OAAV;AACA8R,QAAAA,OAAO,CAAC,QAAD,CAAP;AACH;;AACDA,MAAAA,OAAO,CAACf,IAAR;AACA,aAAOgB,KAAP;AACH;AACJ;;AAnCuC,CAApB,CAAxB,C,CAuCA;;AACA,MAAMG,cAAc,GAAG,IAAI7X,eAAJ,CAAoB;AACvC4E,EAAAA,IAAI,EAAE,4BADiC;AAEvC6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB,EAAjB,EAAqB4R,SAArB,EAF6B;;AAGvCC,EAAAA,GAAG,GAAG;AACF,QAAIlS,MAAM,CAACmB,QAAX,EAAqB;AACjB,aAAOnB,MAAM,CAAC4T,IAAP,GAAcS,QAAd,CAAuBC,MAAvB,CAA8BhB,KAA9B,CAAoC4C,WAApC,EAAP;AACH;AACJ;;AAPsC,CAApB,CAAvB,C,CAUA;;AACA,MAAMgC,WAAW,GAAG,IAAI9X,eAAJ,CAAoB;AACpC4E,EAAAA,IAAI,EAAE,yBAD8B;AAEpC6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB;AACvB8X,IAAAA,QAAQ,EAAE;AAACpG,MAAAA,IAAI,EAAEC;AAAP,KADa;AAEvBoG,IAAAA,gBAAgB,EAAE;AAACrG,MAAAA,IAAI,EAAE1M;AAAP;AAFK,GAAjB,EAGP4M,SAHO,EAF0B;;AAMpCC,EAAAA,GAAG,CAAChP,MAAD,EAAS;AACR,QAAIA,MAAM,CAACiV,QAAP,IAAmB,kBAAvB,EAA2C;AACvC,aAAO,KAAP;AACH;;AACD,QAAIE,WAAW,GAAG9X,eAAe,CAAC+X,WAAhB,CAA4BnF,OAA5B,CAAoC,EAApC,CAAlB;AACAkF,IAAAA,WAAW,CAACE,MAAZ,CAAmBC,MAAnB,CAA0BtV,MAAM,CAACkV,gBAAjC,EAAmD,CAAnD,EAAsDD,QAAtD;AACA5X,IAAAA,eAAe,CAACmG,MAAhB,CAAuB,EAAvB,EAA2B2R,WAA3B;AACA,WAAO,KAAP;AACH;;AAdmC,CAApB,CAApB,C,CAkBA;;AACA,MAAMI,OAAO,GAAG,IAAIrY,eAAJ,CAAoB;AAChC4E,EAAAA,IAAI,EAAE,qBAD0B;AAEhC6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB;AACvBqJ,IAAAA,UAAU,EAAE;AACRqI,MAAAA,IAAI,EAAE1K,MADE;AAERmL,MAAAA,QAAQ,EAAE;AAFF,KADW;AAKvB7I,IAAAA,QAAQ,EAAE;AACNoI,MAAAA,IAAI,EAAEC;AADA;AALa,GAAjB,EAQPC,SARO,EAFsB;;AAWhCC,EAAAA,GAAG,CAAChP,MAAD,EAAS;AACR,QAAIlD,MAAM,CAACmB,QAAX,EAAqB;AACjB,UAAIuX,OAAO,GAAGxX,OAAO,CAAC0B,IAAR,GAAe,kBAA7B;AACA,UAAI2T,iBAAiB,GAAGhW,eAAe,CAACiW,kBAAhB,CAAmCrD,OAAnC,CAA2C;AAACxJ,QAAAA,QAAQ,EAAEzG,MAAM,CAACyG;AAAlB,OAA3C,CAAxB;AACA,UAAIgP,gBAAgB,GAAGpC,iBAAiB,CAACoC,gBAAzC;AACA,UAAI9J,GAAJ;AACA,YAAM+J,OAAO,GAAGrY,eAAe,CAACqY,OAAhB,CAAwBzF,OAAxB,CAAgC,EAAhC,EAAoC0F,GAApD;;AACA,YAAMpJ,GAAG,GAAG1I,OAAO,CAAC,UAAD,CAAnB,CANiB,CAOjB;;;AACA,YAAMgJ,IAAI,GAAGhJ,OAAO,CAAC,aAAD,CAApB;;AACA,YAAMI,GAAG,GAAG4I,IAAI,CAAC7M,MAAM,CAACwG,UAAR,CAAhB,CATiB,CAUjB;;AACA,UAAIoP,SAAS,GAAG,EAAhB;;AACA,UAAI5W,OAAO,CAACC,GAAR,CAAYuU,QAAZ,KAAyB,aAA7B,EAA4C;AACxCoC,QAAAA,SAAS,GAAG;AACRC,UAAAA,GAAG,EAAEH,OAAO,GAAG,UAAV,GAAuBzR,GADpB;AAER6R,UAAAA,GAAG,EAAEJ,OAAO,GAAG,SAAV,GAAsBzR,GAFnB;AAGR8R,UAAAA,GAAG,EAAEL,OAAO,GAAG,SAAV,GAAsBzR,GAHnB;AAIRf,UAAAA,GAAG,EAAEwS,OAAO,GAAG,SAAV,GAAsBzR,GAJnB;AAKRsB,UAAAA,GAAG,EAAEmQ,OAAO,GAAG,SAAV,GAAsBzR,GALnB;AAMR+R,UAAAA,CAAC,EAAEN,OAAO,GAAG,YAAV,GAAyBzR,GANpB;AAORM,UAAAA,IAAI,EAAEmR,OAAO,GAAG,UAAV,GAAuBzR,GAPrB;AAQRgS,UAAAA,OAAO,EAAEP,OAAO,GAAG,aAAV,GAA0BzR,GAR3B;AASRiS,UAAAA,OAAO,EAAER,OAAO,GAAG,aAAV,GAA0BzR;AAT3B,SAAZ;AAWH,OAZD,MAYO;AACH;AACA;AACA2R,QAAAA,SAAS,GAAG;AACRC,UAAAA,GAAG,EAAE,aAAa5R,GADV;AAER6R,UAAAA,GAAG,EAAE,YAAY7R,GAFT;AAGR8R,UAAAA,GAAG,EAAE,YAAY9R,GAHT;AAIRf,UAAAA,GAAG,EAAE,YAAYe,GAJT;AAKRsB,UAAAA,GAAG,EAAE,YAAYtB,GALT;AAMR+R,UAAAA,CAAC,EAAE,eAAe/R,GANV;AAORM,UAAAA,IAAI,EAAE,aAAaN,GAPX;AAQRgS,UAAAA,OAAO,EAAE,gBAAgBhS,GARjB;AASRiS,UAAAA,OAAO,EAAE,gBAAgBjS;AATjB,SAAZ;AAWH,OAtCgB,CAuCjB;;;AACA,YAAMkS,gBAAgB,GAAGnY,OAAO,CAACuB,MAAR,GAAiB0E,GAAjB,GAAuB,MAAhD;AACA,YAAMmS,WAAW,GAAGpY,OAAO,CAACyB,QAAR,GAAmBwE,GAAnB,GAAyB,MAA7C;AACA,YAAMoS,WAAW,GAAGrY,OAAO,CAACsB,MAAR,GAAiB2E,GAAjB,GAAuB,MAA3C;AACA,YAAMqS,WAAW,GAAGtY,OAAO,CAACmB,MAAR,GAAiB8E,GAAjB,GAAuB,MAA3C;AACA,YAAMsS,WAAW,GAAGvY,OAAO,CAACoB,MAAR,GAAiB6E,GAAjB,GAAuB,MAA3C;AACA,YAAMuS,cAAc,GAAGxY,OAAO,CAACwB,UAAR,GAAqByE,GAArB,GAA2B,IAAlD;AACA,YAAMwS,YAAY,GAAGzY,OAAO,CAACqB,OAAR,GAAkB4E,GAAlB,GAAwB,OAA7C;AACA,YAAMyS,WAAW,GAAG1Y,OAAO,CAACqB,OAAR,GAAkB4E,GAAlB,GAAwB,UAA5C;AACA,YAAM0S,WAAW,GAAG3Y,OAAO,CAACqB,OAAR,GAAkB4E,GAAlB,GAAwB,UAA5C,CAhDiB,CAiDjB;AACA;;AACA,UAAIjE,MAAM,CAACwG,UAAP,CAAkBoQ,MAAlB,KAA6B,IAAjC,EAAuC;AACnC,cAAM,IAAI9Z,MAAM,CAAC8F,KAAX,CAAiB,qEAAjB,CAAN;AACH;;AACD,UAAI5D,OAAO,CAACC,GAAR,CAAYuU,QAAZ,KAAyB,aAAzB,IAA0CxT,MAAM,CAACmT,SAArD,EAAgE;AAC5D/V,QAAAA,SAAS,CAAC+V,SAAV,CAAoBlP,GAApB,EAD4D,CAE5D;;AACA,YAAI;AACAsI,UAAAA,GAAG,CAACsK,UAAJ,CAAeV,gBAAf;AACH,SAFD,CAEE,OAAOW,MAAP,EAAc,CAAE;;AAClB,YAAI;AACAvK,UAAAA,GAAG,CAACsK,UAAJ,CAAeT,WAAf;AACH,SAFD,CAEE,OAAOU,MAAP,EAAc,CAAE;;AAClB,YAAI;AACAvK,UAAAA,GAAG,CAACsK,UAAJ,CAAeR,WAAf;AACH,SAFD,CAEE,OAAOS,MAAP,EAAc,CAAE;;AAClB,YAAI;AACAvK,UAAAA,GAAG,CAACsK,UAAJ,CAAeP,WAAf;AACH,SAFD,CAEE,OAAOQ,MAAP,EAAc,CAAE;;AAClB,YAAI;AACAvK,UAAAA,GAAG,CAACsK,UAAJ,CAAeN,WAAf;AACH,SAFD,CAEE,OAAOO,MAAP,EAAc,CAAE;;AAClB,YAAI;AACAvK,UAAAA,GAAG,CAACsK,UAAJ,CAAeL,cAAf;AACH,SAFD,CAEE,OAAOM,MAAP,EAAc,CAAE;;AAClB,YAAI;AACAvK,UAAAA,GAAG,CAACsK,UAAJ,CAAeJ,YAAf;AACH,SAFD,CAEE,OAAOK,MAAP,EAAc,CAAE;;AAClB,YAAI;AACAvK,UAAAA,GAAG,CAACsK,UAAJ,CAAeH,WAAf;AACH,SAFD,CAEE,OAAOI,MAAP,EAAc,CAAE;;AAClB,YAAI;AACAvK,UAAAA,GAAG,CAACsK,UAAJ,CAAeF,WAAf;AACH,SAFD,CAEE,OAAOG,MAAP,EAAc,CAAE;AACrB,OApFgB,CAqFjB;;;AACA,UAAIC,aAAa,GAAG3Z,SAAS,CAACyO,SAAV,CAAoB5H,GAApB,CAApB;AACA,UAAI+S,UAAU,GAAG,KAAjB;;AACA,UAAID,aAAa,IAAI,IAArB,EAA2B;AACvB;AACA;AACA;AACA,YAAIE,aAAa,GAAG1K,GAAG,CAAC2K,UAAJ,CAAef,gBAAf,CAApB;AACA,YAAIgB,UAAU,GAAG5K,GAAG,CAAC2K,UAAJ,CAAed,WAAf,CAAjB;AACA,YAAIgB,YAAY,GAAG7K,GAAG,CAAC2K,UAAJ,CAAeV,cAAf,CAAnB;AACA,YAAIa,UAAU,GAAG9K,GAAG,CAAC2K,UAAJ,CAAeT,YAAf,CAAjB;AACA,YAAIa,SAAS,GAAG/K,GAAG,CAAC2K,UAAJ,CAAeb,WAAf,CAAhB;AACA,YAAIkB,SAAS,GAAGhL,GAAG,CAAC2K,UAAJ,CAAeZ,WAAf,CAAhB;AACAU,QAAAA,UAAU,GAAGC,aAAa,IAAIE,UAAjB,IAA+BC,YAA/B,IAA+CC,UAA/C,IAA6DC,SAA7D,IAA0EC,SAAvF;AACH,OAnGgB,CAoGjB;;;AACA,UAAIR,aAAa,IAAI,IAAjB,IAAyBC,UAAU,KAAK,KAA5C,EAAmD;AAC/C;AACA;AACAvU,QAAAA,MAAM,CAACgT,gBAAD,CAAN,CAAyBzV,MAAM,CAACwG,UAAhC,EAA4CvC,GAA5C,EAAiD,UAAUsB,GAAV,EAAeiS,QAAf,EAAyB;AACtE;AACA,cAAIjS,GAAJ,EAAS;AACLtC,YAAAA,OAAO,CAACC,GAAR,CAAYqC,GAAZ,EAAiB,mBAAjB,EAAsCkQ,gBAAtC;AACA,kBAAM,IAAI3Y,MAAM,CAAC8F,KAAX,CAAiB2C,GAAG,GAAG,oBAAN,GAA6BkQ,gBAA9C,CAAN;AACH,WAHD,MAGO;AAEH;AACA;AACA;AACA;AAEA;AACA,gBAAIwB,aAAa,GAAG1K,GAAG,CAAC2K,UAAJ,CAAef,gBAAf,CAApB;AACA,gBAAIgB,UAAU,GAAG5K,GAAG,CAAC2K,UAAJ,CAAed,WAAf,CAAjB;AACA,gBAAIgB,YAAY,GAAG7K,GAAG,CAAC2K,UAAJ,CAAeV,cAAf,CAAnB;AACA,gBAAIa,UAAU,GAAG9K,GAAG,CAAC2K,UAAJ,CAAeT,YAAf,CAAjB;AACA,gBAAIa,SAAS,GAAG/K,GAAG,CAAC2K,UAAJ,CAAeb,WAAf,CAAhB;AACA,gBAAIkB,SAAS,GAAGhL,GAAG,CAAC2K,UAAJ,CAAeZ,WAAf,CAAhB;AACA,gBAAIU,UAAU,GAAGC,aAAa,IAAIE,UAAjB,IAA+BC,YAA/B,IAA+CC,UAA/C,IAA6DC,SAA7D,IAA0EC,SAA3F;;AACA,gBAAI,CAACP,UAAL,EAAiB;AACb,oBAAMS,UAAU,GAAGzZ,OAAO,CAAC0B,IAAR,GAAe,mBAAf,GAAqC,GAArC,GAA2CyW,gBAA9D;;AACA,oBAAMuB,EAAE,GAAG7T,OAAO,CAAC,eAAD,CAAlB,CAFa,CAGb;;;AACA0I,cAAAA,GAAG,CAACoL,cAAJ,CAAmBxB,gBAAnB,EAAqCqB,QAArC,EAJa,CAKb;;AACAE,cAAAA,EAAE,CAACE,QAAH,CAAYH,UAAZ,EAAwB,CAAC3R,KAAD,EAAQ+R,MAAR,EAAgBC,MAAhB,KAA2B;AAC/C,oBAAIA,MAAJ,EAAY;AACRvL,kBAAAA,GAAG,CAACoL,cAAJ,CAAmBpB,WAAnB,EAAgCuB,MAAhC,EAAwC,UAAUvS,GAAV,EAAe;AACnD,wBAAIA,GAAJ,EAAS;AACLtC,sBAAAA,OAAO,CAACC,GAAR,CAAY,oCAAoCqC,GAAhD,EADK,CACiD;AACzD;AACJ,mBAJD;AAKH,iBAND,MAMO;AACHgH,kBAAAA,GAAG,CAACoL,cAAJ,CAAmBpB,WAAnB,EAAgC,wBAAwBtS,GAAxD,EAA6D,UAAUsB,GAAV,EAAe;AACxE,wBAAIA,GAAJ,EAAS;AACLtC,sBAAAA,OAAO,CAACC,GAAR,CAAY,oCAAoCqC,GAAhD,EADK,CACiD;AACzD;AACJ,mBAJD;AAKH;;AACD,oBAAIsS,MAAJ,EAAY;AACR,sBAAIA,MAAM,CAACE,KAAP,CAAa,OAAb,CAAJ,EAA2B;AACvBxL,oBAAAA,GAAG,CAACoL,cAAJ,CAAmBpB,WAAnB,EAAgCsB,MAAhC,EAAwC,UAAUtS,GAAV,EAAe;AACnD,0BAAIA,GAAJ,EAAS;AACLtC,wBAAAA,OAAO,CAACC,GAAR,CAAY,sCAAsCqC,GAAlD;AACH;AACJ,qBAJD;AAKH;;AACDgH,kBAAAA,GAAG,CAACoL,cAAJ,CAAmBrB,WAAnB,EAAgCuB,MAAhC,EAAwC,UAAUtS,GAAV,EAAe;AACnD,wBAAIA,GAAJ,EAAS;AACLtC,sBAAAA,OAAO,CAACC,GAAR,CAAY,kCAAkCqC,GAA9C;AACH;AACJ,mBAJD;AAKA,sBAAIyS,MAAM,GAAGH,MAAM,CAACE,KAAP,CAAa,kCAAb,KAAoD,IAApD,GAA2D,IAA3D,GAAkEF,MAAM,CAACE,KAAP,CAAa,kCAAb,EAAiD,CAAjD,CAA/E;;AACA,sBAAIC,MAAM,IAAI,IAAd,EAAoB;AAChBzL,oBAAAA,GAAG,CAACoL,cAAJ,CAAmBtB,WAAnB,EAAgC,+CAA+CpS,GAA/E,EAAoF,UAAUsB,GAAV,EAAe;AAC/F,0BAAIA,GAAJ,EAAS;AACLtC,wBAAAA,OAAO,CAACC,GAAR,CAAY,kCAAkCqC,GAA9C;AACH;AACJ,qBAJD;AAKH,mBAND,MAMO;AACHgH,oBAAAA,GAAG,CAACoL,cAAJ,CAAmBtB,WAAnB,EAAgC2B,MAAhC,EAAwC,UAAUzS,GAAV,EAAe;AACnD,0BAAIA,GAAJ,EAAS;AACLtC,wBAAAA,OAAO,CAACC,GAAR,CAAY,kCAAkCqC,GAA9C;AACH;AACJ,qBAJD;AAKH;AACJ,iBA3BD,MA2BO;AACHgH,kBAAAA,GAAG,CAACoL,cAAJ,CAAmBrB,WAAnB,EAAgC,6BAA6BrS,GAA7D,EAAkE,UAAUsB,GAAV,EAAe;AAC7E,wBAAIA,GAAJ,EAAS;AACLtC,sBAAAA,OAAO,CAACC,GAAR,CAAY,kCAAkCqC,GAA9C;AACH;AACJ,mBAJD;AAKH,iBA/C8C,CAiD/C;;;AACA,oBAAI0R,aAAa,GAAG1K,GAAG,CAAC2K,UAAJ,CAAef,gBAAf,CAApB;AACA,oBAAIgB,UAAU,GAAG5K,GAAG,CAAC2K,UAAJ,CAAed,WAAf,CAAjB;AACA,oBAAIgB,YAAY,GAAG7K,GAAG,CAAC2K,UAAJ,CAAeV,cAAf,CAAnB;AACA,oBAAIa,UAAU,GAAG9K,GAAG,CAAC2K,UAAJ,CAAeT,YAAf,CAAjB;AACA,oBAAIa,SAAS,GAAG/K,GAAG,CAAC2K,UAAJ,CAAeb,WAAf,CAAhB;AACA,oBAAIkB,SAAS,GAAGhL,GAAG,CAAC2K,UAAJ,CAAeZ,WAAf,CAAhB;AACA,oBAAIU,UAAU,GAAGC,aAAa,IAAIE,UAAjB,IAA+BC,YAA/B,IAA+CC,UAA/C,IAA6DC,SAA7D,IAA0EC,SAA3F;;AACA,oBAAI,CAACP,UAAL,EAAiB;AACb/T,kBAAAA,OAAO,CAAC6C,KAAR,CAAc,yCAAd;AACH;;AACD1I,gBAAAA,SAAS,CAACqR,WAAV,CAAsBxK,GAAtB,EAA2B2R,SAA3B;AACA;;;;;;;;;;;;;;;;;;AAkBA,uBAAO;AAAC,yBAAO3R,GAAR;AAAa,+BAAY2R;AAAzB,iBAAP;AACH,eAhFD,EANa,CAsFT;AACJ;AACH,aAxFD,CAwFG;AAxFH,iBAyFK;AACD;AACA;AACAxY,gBAAAA,SAAS,CAACqR,WAAV,CAAsBxK,GAAtB,EAA2B2R,SAA3B;AACA,uBAAO;AAAC,yBAAO3R,GAAR;AAAa,+BAAY2R;AAAzB,iBAAP;AACH;AACJ;AACJ,SApHD;AAqHH,OAxHD,CAwHE;AAxHF,WAyHK;AACD;AACAxY,UAAAA,SAAS,CAACqR,WAAV,CAAsBxK,GAAtB,EAA2B2R,SAA3B;AACA,iBAAO;AAAC,mBAAO3R,GAAR;AAAa,yBAAY2R;AAAzB,WAAP;AACH;;AACD,aAAO;AAAC,eAAO3R,GAAR;AAAa,qBAAY2R;AAAzB,OAAP;AACH,KArOO,CAqON;;AACL,GAjP+B,CAiP9B;;;AAjP8B,CAApB,CAAhB,C,CAoPA;;AACA,MAAMqC,gBAAgB,GAAG,IAAI/a,eAAJ,CAAoB;AACzC4E,EAAAA,IAAI,EAAE,8BADmC;AAEzC6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB,EAAjB,EAAqB4R,SAArB,EAF+B;;AAGzCC,EAAAA,GAAG,GAAG;AACF,QAAIlS,MAAM,CAACmB,QAAX,EAAqB;AACjB,UAAI0V,MAAM,GAAG9P,OAAO,CAAC,eAAD,CAApB;;AACA,UAAI0I,GAAG,GAAG1I,OAAO,CAAC,UAAD,CAAjB;;AACA,UAAIqU,IAAI,GAAG,EAAX;AACA,UAAItD,KAAJ;;AACA,UAAI/F,IAAI,IAAI,MAAZ,EAAoB;AAChBqJ,QAAAA,IAAI,GAAG,+BAA+BpD,IAAtC;AACA7R,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0BgV,IAAtC;AACH,OAHD,MAGO,IAAIrJ,IAAI,IAAI,OAAZ,EAAqB;AACxBqJ,QAAAA,IAAI,GAAG,kCAAkCpD,IAAzC;AACA7R,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BgV,IAAvC;AACH,OAHM,MAGA;AACH,eAAQ,oBAAR;AACH;;AACD3L,MAAAA,GAAG,CAACG,QAAJ,CAAawL,IAAb,EAAmB,UAAU3S,GAAV,EAAehB,IAAf,EAAqB;AACpC,YAAIgB,GAAJ,EAAS,MAAMA,GAAN;AACTqP,QAAAA,KAAK,GAAGrQ,IAAI,CAAC4T,QAAL,EAAR;AACAxE,QAAAA,MAAM,CAAC,QAAD,CAAN,CAAiBiB,KAAjB;AACH,OAJD;AAKA,aAAOjB,MAAM,CAACC,IAAP,EAAP;AACH;AACJ;;AAzBwC,CAApB,CAAzB,C,CA4BA;;AACA,MAAMwE,eAAe,GAAG,IAAIlb,eAAJ,CAAoB;AACxC4E,EAAAA,IAAI,EAAE,6BADkC;AAExC6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB,EAAjB,EAAqB4R,SAArB,EAF8B;;AAGxCC,EAAAA,GAAG,GAAG;AACF,QAAIlS,MAAM,CAACmB,QAAX,EAAqB;AACjB,UAAI;AACA;AACAiD,QAAAA,qBAAqB;AACxB,OAHD,CAGE,OAAOyB,CAAP,EAAU;AACRM,QAAAA,OAAO,CAACC,GAAR,CAAYP,CAAZ;AACA,cAAM,IAAI7F,MAAM,CAAC8F,KAAX,CAAiB,gBAAjB,EAAmCD,CAAC,CAACE,OAArC,CAAN;AACH;AACJ;;AACD,WAAOjF,oBAAoB,CAACyD,IAArB,CAA0B,EAA1B,EAA8BC,KAA9B,EAAP;AACH;;AAduC,CAApB,CAAxB,C,CAiBA;;AACA,MAAM+W,mBAAmB,GAAG,IAAInb,eAAJ,CAAoB;AAC5C4E,EAAAA,IAAI,EAAE,iCADsC;AAE5C6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB;AACvBe,IAAAA,QAAQ,EAAE;AAAC2Q,MAAAA,IAAI,EAAE1K,MAAP;AAAemL,MAAAA,QAAQ,EAAE;AAAzB;AADa,GAAjB,EAEPP,SAFO,EAFkC;;AAK5CC,EAAAA,GAAG,CAAC9Q,QAAD,EAAW;AACV,QAAIpB,MAAM,CAACmB,QAAX,EAAqB;AACjB,UAAImS,KAAJ;AACA,UAAIZ,QAAJ;AACA,UAAIE,YAAY,GAAGxR,QAAQ,CAACwR,YAA5B;AACA,UAAIE,iBAAiB,GAAG1R,QAAQ,CAAC0R,iBAAjC;AACA,UAAIC,YAAY,GAAG3R,QAAQ,CAAC2R,YAA5B;AACA,UAAIC,iBAAiB,GAAG5R,QAAQ,CAAC4R,iBAAjC;;AACA,UAAIF,iBAAJ,EAAuB;AACnB;AACAJ,QAAAA,QAAQ,GAAGI,iBAAX;AACH,OAHD,MAGO,IAAIF,YAAJ,EAAkB;AACrBF,QAAAA,QAAQ,GAAGE,YAAX;AACH;;AACD,UAAII,iBAAJ,EAAuB;AACnBM,QAAAA,KAAK,GAAGN,iBAAR;AACH,OAFD,MAEO;AACHM,QAAAA,KAAK,GAAGP,YAAR;AACH,OAjBgB,CAmBjB;;;AACA,UAAIO,KAAK,IAAIZ,QAAb,EAAuB;AACnBnS,QAAAA,eAAe,CAAC8S,aAAhB,CAA8B3M,MAA9B,CAAqC;AAAC4M,UAAAA,KAAK,EAAEA;AAAR,SAArC,EAAqD;AAACkI,UAAAA,KAAK,EAAE;AAAC/I,YAAAA,KAAK,EAAEC;AAAR;AAAR,SAArD;AACH,OAtBgB,CAuBjB;;;AACA,UAAIY,KAAK,IAAI,CAACZ,QAAd,EAAwB;AACpBnS,QAAAA,eAAe,CAAC8S,aAAhB,CAA8BW,MAA9B,CAAqC;AAACV,UAAAA,KAAK,EAAEA;AAAR,SAArC;AACH,OA1BgB,CA2BjB;;;AACA,UAAIZ,QAAQ,IAAI,CAACY,KAAjB,EAAwB;AACpB;AACA/S,QAAAA,eAAe,CAAC2S,KAAhB,CAAsBc,MAAtB,CAA6B;AAAChP,UAAAA,IAAI,EAAE0N;AAAP,SAA7B,EAFoB,CAGpB;;AACAnS,QAAAA,eAAe,CAAC8S,aAAhB,CAA8B3M,MAA9B,CAAqC;AAAC+L,UAAAA,KAAK,EAAEC;AAAR,SAArC,EAAwD;AAAC8I,UAAAA,KAAK,EAAE;AAAC/I,YAAAA,KAAK,EAAEC;AAAR;AAAR,SAAxD,EAAoF;AAAC+I,UAAAA,KAAK,EAAE;AAAR,SAApF;AACH;;AACD,aAAO,KAAP;AACH;AACJ;;AA1C2C,CAApB,CAA5B,C,CA6CA;;AACA,MAAMC,WAAW,GAAG,IAAItb,eAAJ,CAAoB;AACpC4E,EAAAA,IAAI,EAAE,yBAD8B;AAEpC6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB;AACvBqb,IAAAA,WAAW,EAAE;AAAC3J,MAAAA,IAAI,EAAEC;AAAP;AADU,GAAjB,EAEPC,SAFO,EAF0B;;AAKpCC,EAAAA,GAAG,CAACwJ,WAAD,EAAc;AACb,QAAIrD,WAAW,GAAG9X,eAAe,CAAC+X,WAAhB,CAA4BnF,OAA5B,CAAoC,EAApC,CAAlB;AACA,QAAIwI,WAAW,GAAGtD,WAAW,CAACE,MAAZ,CAAmBnQ,OAAnB,CAA2BsT,WAA3B,CAAlB;AACArD,IAAAA,WAAW,CAACE,MAAZ,CAAmBC,MAAnB,CAA0BmD,WAA1B,EAAuC,CAAvC;AACApb,IAAAA,eAAe,CAAC+X,WAAhB,CAA4B5R,MAA5B,CAAmC,EAAnC,EAAuC2R,WAAvC;AACA,WAAO,KAAP;AACH;;AAXmC,CAApB,CAApB,C,CAcA;;AACA,MAAMuD,cAAc,GAAG,IAAIxb,eAAJ,CAAoB;AACvC4E,EAAAA,IAAI,EAAE,4BADiC;AAEvC6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB;AACvB0E,IAAAA,MAAM,EAAE;AAACgN,MAAAA,IAAI,EAAEC;AAAP;AADe,GAAjB,EAEPC,SAFO,EAF6B;;AAKvCC,EAAAA,GAAG,CAACnN,MAAD,EAAS;AACR,QAAI/E,MAAM,CAACmB,QAAX,EAAqB;AACjBZ,MAAAA,eAAe,CAACiT,SAAhB,CAA0BQ,MAA1B,CAAiC;AAAChP,QAAAA,IAAI,EAAED;AAAP,OAAjC;AACH;AACJ;;AATsC,CAApB,CAAvB,C,CAYA;;AACA,MAAM8W,QAAQ,GAAG,UAAUC,MAAV,EAAkB;AAC/B,MAAIrM,GAAG,GAAG1I,OAAO,CAAC,UAAD,CAAjB;;AACA,QAAMgV,oBAAoB,GAAGD,MAAM,CAACE,MAApC;AACA,QAAMjK,IAAI,GAAG+J,MAAM,CAACG,OAApB;AACA,QAAMrD,OAAO,GAAGkD,MAAM,CAACjD,GAAvB;AACA,MAAIqD,OAAO,GAAGha,OAAO,CAACC,GAAR,CAAYuU,QAA1B,CAL+B,CAM/B;;AACA,MAAI1W,MAAM,CAACoB,QAAP,CAAgBC,OAAhB,IAA2B,IAA3B,IAAmCrB,MAAM,CAACoB,QAAP,CAAgBC,OAAhB,CAAwB8a,WAAxB,IAAuC,IAA9E,EAAoF;AAChFnc,IAAAA,MAAM,CAACoB,QAAP,CAAgBC,OAAhB,CAAwB8a,WAAxB,GAAsC,iBAAtC;AACH;;AAED,MAAInc,MAAM,CAACoB,QAAP,CAAgBC,OAAhB,IAA2B,IAA3B,IAAmCrB,MAAM,CAACoB,QAAP,CAAgBC,OAAhB,CAAwBa,OAAxB,IAAmC,IAAtE,IAA8ElC,MAAM,CAACoB,QAAP,CAAgBC,OAAhB,CAAwBa,OAAxB,CAAgCka,OAAhC,IAA2C,IAA7H,EAAmI;AAC/H,YAAQpc,MAAM,CAACoB,QAAP,CAAgBC,OAAhB,CAAwBa,OAAxB,CAAgCka,OAAxC;AACI,WAAK,aAAL;AACA,WAAK,aAAL;AACA,WAAK,YAAL;AACIF,QAAAA,OAAO,GAAGlc,MAAM,CAACoB,QAAP,CAAgBC,OAAhB,CAAwBa,OAAxB,CAAgCka,OAA1C;AACA;;AACJ;AACIF,QAAAA,OAAO,GAAGha,OAAO,CAACC,GAAR,CAAYuU,QAAtB;AACD;AARP;AAUH;;AACD,MAAI2F,UAAJ;AACA,MAAIC,cAAc,GAAGC,MAAM,CAACC,OAAP,CAAe,mCAAf,CAArB;;AACA,MAAIF,cAAc,IAAI,IAAtB,EAA4B,CAAG;AAC9B;;AACDD,EAAAA,UAAU,GAAGtT,IAAI,CAACiG,KAAL,CAAWsN,cAAX,CAAb;AACA,MAAIzD,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIpS,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG4V,UAAU,CAAC3X,MAAjC,EAAyC+B,EAAE,EAA3C,EAA+C;AAC3C,QAAIgW,GAAG,GAAGJ,UAAU,CAAC5V,EAAD,CAApB;;AACA,QAAIgW,GAAG,CAACC,sBAAJ,IAA8BR,OAAlC,EAA2C;AACvCrD,MAAAA,GAAG,GAAG4D,GAAG,CAACE,IAAJ,CAASxU,MAAT,CAAgB,UAAU0Q,GAAV,EAAe;AACjC,eAAOA,GAAG,CAACA,GAAJ,KAAYD,OAAnB;AACH,OAFK,EAEH,CAFG,CAAN;AAGH;AACJ;;AACD,QAAMgE,UAAU,GAAG/D,GAAG,GAAGA,GAAG,CAACgE,OAAP,GAAiB,SAAvC;AACA,QAAMC,QAAQ,GAAGjE,GAAG,GAAGA,GAAG,CAACkE,KAAP,GAAe,SAAnC;AACA,QAAMC,SAAS,GAAGnE,GAAG,GAAGA,GAAG,CAACmE,SAAP,GAAmB,SAAxC;AACA,QAAMf,OAAO,GAAGlK,IAAI,GAAGA,IAAH,GAAUrR,SAAS,CAACuc,QAAV,CAAmBC,IAAjD;AACA3c,EAAAA,eAAe,CAACqY,OAAhB,CAAwBvG,MAAxB,CAA+B;AAACwG,IAAAA,GAAG,EAACD;AAAL,GAA/B,EAA6C;AAACjS,IAAAA,IAAI,EAAC;AAACkS,MAAAA,GAAG,EAACD;AAAL;AAAN,GAA7C,EAzC+B,CA2C/B;;AACA;;;;;;;;AAQA;;AACA,MAAImD,oBAAoB,YAAYrb,SAAS,CAACyc,gBAA9C,EAAgE;AAC5D,QAAIC,cAAc,GAAGrB,oBAAoB,CAACsB,UAArB,EAArB;;AACA,SAAK,IAAIC,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGF,cAAc,CAAC1Y,MAAzC,EAAiD4Y,IAAI,EAArD,EAAyD;AACrD,YAAMC,WAAW,GAAGH,cAAc,CAACE,IAAD,CAAlC;AACAC,MAAAA,WAAW,CAACpY,aAAZ,GAA4Bc,MAAM,GAAGK,MAAT,EAA5B;;AACA,UAAIxF,oBAAoB,CAACyD,IAArB,CAA0B;AAACS,QAAAA,IAAI,EAAEuY,WAAW,CAACvY;AAAnB,OAA1B,EAAoDwY,KAApD,MAA+D,CAAnE,EAAsE;AAClE1c,QAAAA,oBAAoB,CAAC4F,MAArB,CAA4B;AAAC1B,UAAAA,IAAI,EAAEuY,WAAW,CAACvY;AAAnB,SAA5B,EAAsDuY,WAAtD,EAAmE;AAAClL,UAAAA,MAAM,EAAE;AAAT,SAAnE;AACH;AACJ;AACJ,GATD,MASO;AACH,UAAM,IAAIrS,MAAM,CAAC8F,KAAX,CAAiB,gBAAjB,EAAmC,mCAAnC,CAAN;AACH;;AAEDvF,EAAAA,eAAe,CAAC2S,KAAhB,CAAsBc,MAAtB,CAA6B,EAA7B;AACAvT,EAAAA,aAAa,CAACgd,OAAd;AACAld,EAAAA,eAAe,CAAC8S,aAAhB,CAA8BW,MAA9B,CAAqC,EAArC;AACAvT,EAAAA,aAAa,CAACid,eAAd;AACAnd,EAAAA,eAAe,CAACiU,WAAhB,CAA4BR,MAA5B,CAAmC,EAAnC;AACAvT,EAAAA,aAAa,CAACkd,aAAd;AACApd,EAAAA,eAAe,CAACiW,kBAAhB,CAAmCxC,MAAnC,CAA0C,EAA1C;AACAzT,EAAAA,eAAe,CAAC+X,WAAhB,CAA4BtE,MAA5B,CAAmC,EAAnC;AACAvT,EAAAA,aAAa,CAACmd,aAAd;AACArd,EAAAA,eAAe,CAACsd,QAAhB,CAAyB7J,MAAzB,CAAgC,EAAhC;AACAvT,EAAAA,aAAa,CAACqd,UAAd,CAAyBhB,QAAzB,EAAmCF,UAAnC,EAA+CI,SAA/C,EAA0Df,OAA1D;AACA1b,EAAAA,eAAe,CAACwd,WAAhB,CAA4B/J,MAA5B,CAAmC,EAAnC;AACAzT,EAAAA,eAAe,CAACyd,UAAhB,CAA2BhK,MAA3B,CAAkC,EAAlC;AACAzT,EAAAA,eAAe,CAAC0d,iBAAhB,CAAkCjK,MAAlC,CAAyC,EAAzC,EA/E+B,CAgFnC;AACI;;AACA,QAAMzN,OAAO,GAAGC,wBAAhB;;AACA,OAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGF,OAAO,CAAC7B,MAA9B,EAAsC+B,EAAE,EAAxC,EAA4C;AACxCd,IAAAA,MAAM,CAACa,wBAAP,CAAgCC,EAAhC;AACH;;AACDnG,EAAAA,SAAS,CAACsG,KAAV;AACH,CAvFD,C,CAyFA;;;AACA,MAAMsX,eAAe,GAAG,IAAI9d,eAAJ,CAAoB;AACxC4E,EAAAA,IAAI,EAAE,6BADkC;AAExC6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB;AACvB0R,IAAAA,IAAI,EAAE;AAACA,MAAAA,IAAI,EAAEC;AAAP,KADiB;AAEvBhN,IAAAA,IAAI,EAAE;AAAC+M,MAAAA,IAAI,EAAEC;AAAP,KAFiB;AAGvBvK,IAAAA,IAAI,EAAE;AAACsK,MAAAA,IAAI,EAAE1K,MAAP;AAAemL,MAAAA,QAAQ,EAAE;AAAzB;AAHiB,GAAjB,EAIPP,SAJO,EAF8B;;AAQxCC,EAAAA,GAAG,CAAChP,MAAD,EAAS;AACR,QAAIlD,MAAM,CAACmB,QAAX,EAAqB;AACjBgF,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAelD,MAAM,CAAC6O,IAAtB,GAA6B,QAA7B,GAAwC7O,MAAM,CAAC8B,IAA3D;AACA,UAAIoW,IAAI,GAAG,EAAX;;AACA,UAAIlY,MAAM,CAAC6O,IAAP,IAAe,MAAnB,EAA2B;AACvBqJ,QAAAA,IAAI,GAAG,+BAA+BlY,MAAM,CAAC8B,IAA7C;AACH,OAFD,MAEO,IAAI9B,MAAM,CAACib,GAAP,IAAc,OAAlB,EAA2B;AAC9B/C,QAAAA,IAAI,GAAG,kCAAkClY,MAAM,CAAC8B,IAAhD;AACH,OAFM,MAEA;AACH,eAAQ,oBAAR;AACH;;AACDmB,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAelD,MAAM,CAAC6O,IAAtB,GAA6B,SAA7B,GAAyCqJ,IAArD;;AACA,UAAI3L,GAAG,GAAG1I,OAAO,CAAC,UAAD,CAAjB;;AACA0I,MAAAA,GAAG,CAAC2O,SAAJ,CAAchD,IAAd,EAAoBlY,MAAM,CAACuE,IAAP,CAAY4T,QAAZ,EAApB,EAA4C,UAAU5S,GAAV,EAAe;AACvD,YAAIA,GAAJ,EAAS;AACL,iBAAQA,GAAG,CAACG,cAAJ,EAAR;AACH;;AACDzC,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAclD,MAAM,CAAC6O,IAArB,GAA4B,SAA5B,GAAwCqJ,IAApD;AACH,OALD;AAMH;AACJ;;AA5BuC,CAApB,CAAxB,C,CA+BA;;AACA,MAAMiD,wBAAwB,GAAG,IAAIje,eAAJ,CAAoB;AACjD4E,EAAAA,IAAI,EAAE,sCAD2C;AAEjD6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB;AACvB2E,IAAAA,IAAI,EAAE;AAAC+M,MAAAA,IAAI,EAAEC;AAAP,KADiB;AAEvBvK,IAAAA,IAAI,EAAE;AAACsK,MAAAA,IAAI,EAAE1K,MAAP;AAAemL,MAAAA,QAAQ,EAAE;AAAzB;AAFiB,GAAjB,EAGPP,SAHO,EAFuC;;AAMjDC,EAAAA,GAAG,CAAChP,MAAD,EAAS;AACR,QAAIuE,IAAI,GAAGvE,MAAM,CAACuE,IAAlB;;AACA,QAAIzH,MAAM,CAACmB,QAAX,EAAqB;AACjB,UAAIuP,CAAC,GAAG,EAAR;;AACA,UAAIjJ,IAAI,CAACsW,WAAT,EAAsB;AAClBxd,QAAAA,eAAe,CAACwd,WAAhB,CAA4B/J,MAA5B,CAAmC,EAAnC;AACAtD,QAAAA,CAAC,GAAG9G,CAAC,CAACmC,GAAF,CAAMtE,IAAI,CAACsW,WAAX,EAAwB,UAAUO,CAAV,EAAa;AACrC,iBAAO1U,CAAC,CAAC2U,IAAF,CAAOD,CAAP,EAAU,KAAV,CAAP;AACH,SAFG,CAAJ;AAGA5N,QAAAA,CAAC,CAAC8N,OAAF,CAAU,UAAUF,CAAV,EAAa;AACnB/d,UAAAA,eAAe,CAACwd,WAAhB,CAA4BtM,MAA5B,CAAmC6M,CAAnC;AACH,SAFD;AAGH;;AACD,UAAI7W,IAAI,CAACuW,UAAT,EAAqB;AACjBzd,QAAAA,eAAe,CAACyd,UAAhB,CAA2BhK,MAA3B,CAAkC,EAAlC;AACAtD,QAAAA,CAAC,GAAG9G,CAAC,CAACmC,GAAF,CAAMtE,IAAI,CAACuW,UAAX,EAAuB,UAAUM,CAAV,EAAa;AACpC,iBAAO1U,CAAC,CAAC2U,IAAF,CAAOD,CAAP,EAAU,KAAV,CAAP;AACH,SAFG,CAAJ;AAGA5N,QAAAA,CAAC,CAAC8N,OAAF,CAAU,UAAUF,CAAV,EAAa;AACnB/d,UAAAA,eAAe,CAACyd,UAAhB,CAA2BvM,MAA3B,CAAkC6M,CAAlC;AACH,SAFD;AAGH;;AACD,UAAI7W,IAAI,CAAC+O,kBAAT,EAA6B;AACzBjW,QAAAA,eAAe,CAACiW,kBAAhB,CAAmCxC,MAAnC,CAA0C,EAA1C;AACAtD,QAAAA,CAAC,GAAG9G,CAAC,CAACmC,GAAF,CAAMtE,IAAI,CAAC+O,kBAAX,EAA+B,UAAU8H,CAAV,EAAa;AAC5C,iBAAO1U,CAAC,CAAC2U,IAAF,CAAOD,CAAP,EAAU,KAAV,CAAP;AACH,SAFG,CAAJ;AAGA5N,QAAAA,CAAC,CAAC8N,OAAF,CAAU,UAAUF,CAAV,EAAa;AACnB/d,UAAAA,eAAe,CAACiW,kBAAhB,CAAmC/E,MAAnC,CAA0C6M,CAA1C;AACH,SAFD;AAGH;;AACD,UAAI7W,IAAI,CAACoW,QAAT,EAAmB;AACftd,QAAAA,eAAe,CAACsd,QAAhB,CAAyB7J,MAAzB,CAAgC,EAAhC;AACAtD,QAAAA,CAAC,GAAG9G,CAAC,CAACmC,GAAF,CAAMtE,IAAI,CAACoW,QAAX,EAAqB,UAAUS,CAAV,EAAa;AAClC,iBAAO1U,CAAC,CAAC2U,IAAF,CAAOD,CAAP,EAAU,KAAV,CAAP;AACH,SAFG,CAAJ;AAGA5N,QAAAA,CAAC,CAAC8N,OAAF,CAAU,UAAUF,CAAV,EAAa;AACnB/d,UAAAA,eAAe,CAACsd,QAAhB,CAAyBpM,MAAzB,CAAgC6M,CAAhC;AACH,SAFD;AAGH;;AACD,UAAI7W,IAAI,CAAC6Q,WAAT,EAAsB;AAClB/X,QAAAA,eAAe,CAAC+X,WAAhB,CAA4BtE,MAA5B,CAAmC,EAAnC;AACAtD,QAAAA,CAAC,GAAG9G,CAAC,CAACmC,GAAF,CAAMtE,IAAI,CAAC6Q,WAAX,EAAwB,UAAUgG,CAAV,EAAa;AACrC,iBAAO1U,CAAC,CAAC2U,IAAF,CAAOD,CAAP,EAAU,KAAV,CAAP;AACH,SAFG,CAAJ;AAGA5N,QAAAA,CAAC,CAAC8N,OAAF,CAAU,UAAUF,CAAV,EAAa;AACnB/d,UAAAA,eAAe,CAAC+X,WAAhB,CAA4B7G,MAA5B,CAAmC6M,CAAnC;AACH,SAFD;AAGH;;AACD,UAAI7W,IAAI,CAAC4L,aAAT,EAAwB;AACpB9S,QAAAA,eAAe,CAAC8S,aAAhB,CAA8BW,MAA9B,CAAqC,EAArC;AACAtD,QAAAA,CAAC,GAAG9G,CAAC,CAACmC,GAAF,CAAMtE,IAAI,CAAC4L,aAAX,EAA0B,UAAUiL,CAAV,EAAa;AACvC,iBAAO1U,CAAC,CAAC2U,IAAF,CAAOD,CAAP,EAAU,KAAV,CAAP;AACH,SAFG,CAAJ;AAGA5N,QAAAA,CAAC,CAAC8N,OAAF,CAAU,UAAUF,CAAV,EAAa;AACnB/d,UAAAA,eAAe,CAAC8S,aAAhB,CAA8B5B,MAA9B,CAAqC6M,CAArC;AACH,SAFD;AAGH;;AACD,UAAI7W,IAAI,CAACyL,KAAT,EAAgB;AACZ3S,QAAAA,eAAe,CAAC2S,KAAhB,CAAsBc,MAAtB,CAA6B,EAA7B;AACAtD,QAAAA,CAAC,GAAG9G,CAAC,CAACmC,GAAF,CAAMtE,IAAI,CAACyL,KAAX,EAAkB,UAAUoL,CAAV,EAAa;AAC/B,iBAAO1U,CAAC,CAAC2U,IAAF,CAAOD,CAAP,EAAU,KAAV,CAAP;AACH,SAFG,CAAJ;AAGA5N,QAAAA,CAAC,CAAC8N,OAAF,CAAU,UAAUF,CAAV,EAAa;AACnB/d,UAAAA,eAAe,CAAC2S,KAAhB,CAAsBzB,MAAtB,CAA6B6M,CAA7B;AACH,SAFD;AAGH;;AACD,UAAI7W,IAAI,CAAC+L,SAAT,EAAoB;AAChBjT,QAAAA,eAAe,CAACiT,SAAhB,CAA0BQ,MAA1B,CAAiC,EAAjC;AACAtD,QAAAA,CAAC,GAAG9G,CAAC,CAACmC,GAAF,CAAMtE,IAAI,CAAC+L,SAAX,EAAsB,UAAU8K,CAAV,EAAa;AACnC,iBAAO1U,CAAC,CAAC2U,IAAF,CAAOD,CAAP,EAAU,KAAV,CAAP;AACH,SAFG,CAAJ;AAGA5N,QAAAA,CAAC,CAAC8N,OAAF,CAAU,UAAUF,CAAV,EAAa;AACnB/d,UAAAA,eAAe,CAACiT,SAAhB,CAA0B/B,MAA1B,CAAiC6M,CAAjC;AACH,SAFD;AAGH;;AACD,UAAI7W,IAAI,CAAC+M,WAAT,EAAsB;AAClBjU,QAAAA,eAAe,CAACiU,WAAhB,CAA4BR,MAA5B,CAAmC,EAAnC;AACAtD,QAAAA,CAAC,GAAG9G,CAAC,CAACmC,GAAF,CAAMtE,IAAI,CAAC+M,WAAX,EAAwB,UAAU8J,CAAV,EAAa;AACrC,iBAAO1U,CAAC,CAAC2U,IAAF,CAAOD,CAAP,EAAU,KAAV,CAAP;AACH,SAFG,CAAJ;AAGA5N,QAAAA,CAAC,CAAC8N,OAAF,CAAU,UAAUF,CAAV,EAAa;AACnB/d,UAAAA,eAAe,CAACiU,WAAhB,CAA4B/C,MAA5B,CAAmC6M,CAAnC;AACH,SAFD;AAGH;AACJ;AACJ;;AA5FgD,CAApB,CAAjC;AA+FA,MAAMG,UAAU,GAAG,IAAIre,eAAJ,CAAoB;AACnC4E,EAAAA,IAAI,EAAE,wBAD6B;AAEnC6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB;AACvB8W,IAAAA,SAAS,EAAE;AACPpF,MAAAA,IAAI,EAAEC;AADC,KADY;AAIvB0M,IAAAA,MAAM,EAAE;AACJ3M,MAAAA,IAAI,EAAE1K,MADF;AACUmL,MAAAA,QAAQ,EAAE;AADpB,KAJe;AAOvBmM,IAAAA,cAAc,EAAE;AACZ5M,MAAAA,IAAI,EAAE1K,MADM;AACEmL,MAAAA,QAAQ,EAAE;AADZ;AAPO,GAAjB,EAUPP,SAVO,EAFyB;;AAanCC,EAAAA,GAAG,CAAChP,MAAD,EAAS;AACR,QAAIlD,MAAM,CAACmB,QAAX,EAAqB;AACjB,UAAIgG,GAAG,GAAGjE,MAAM,CAACiU,SAAjB;AACA,UAAIuH,MAAM,GAAGxb,MAAM,CAACwb,MAApB;AACA,UAAIC,cAAc,GAAGzb,MAAM,CAACyb,cAA5B;;AACA,UAAI;AACA3d,QAAAA,qBAAqB,CAACqR,MAAtB,CAA6B;AAAClL,UAAAA,GAAG,EAAEA;AAAN,SAA7B,EAAyC;AAACR,UAAAA,IAAI,EAAE;AAAC,yBAAa,IAAI+K,IAAJ,EAAd;AAA0BgN,YAAAA,MAAM,EAAEA,MAAlC;AAA0CC,YAAAA,cAAc,EAAEA;AAA1D;AAAP,SAAzC;AACH,OAFD,CAEE,OAAO3V,KAAP,EAAc;AACZ,cAAM,IAAIhJ,MAAM,CAAC8F,KAAX,CAAiB,kCAAkCqB,GAAlC,GAAwC,KAAxC,GAAgD6B,KAAK,CAACjD,OAAvE,CAAN;AACH;AACJ;AACJ;;AAxBkC,CAApB,CAAnB,C,CA2BA;;AACA,MAAM6Y,YAAY,GAAG,IAAIxe,eAAJ,CAAoB;AACrC4E,EAAAA,IAAI,EAAE,0BAD+B;AAErC6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB;AACvBwe,IAAAA,MAAM,EAAE;AACJ9M,MAAAA,IAAI,EAAEC;AADF,KADe;AAIvB5I,IAAAA,CAAC,EAAE;AACC2I,MAAAA,IAAI,EAAE1K,MADP;AAECmL,MAAAA,QAAQ,EAAE;AAFX,KAJoB;AAQvBsM,IAAAA,UAAU,EAAE;AACR/M,MAAAA,IAAI,EAAEC;AADE;AARW,GAAjB,EAWPC,SAXO,EAF2B;;AAcrCC,EAAAA,GAAG,CAAChP,MAAD,EAAS;AACR,QAAI0Q,IAAI,GAAG,WAAX;AACArT,IAAAA,eAAe,CAACwT,aAAhB,CAA8B1B,MAA9B,CAAqC;AAACrN,MAAAA,IAAI,EAAE9B,MAAM,CAAC2b;AAAd,KAArC,EAA4D;AACxDE,MAAAA,OAAO,EAAE9Y,MAAM,GAAGK,MAAT,CAAgB,qBAAhB,CAD+C;AAExDtB,MAAAA,IAAI,EAAE9B,MAAM,CAAC2b,MAF2C;AAGxDpX,MAAAA,IAAI,EAAEvE,MAAM,CAACkG,CAH2C;AAIxD4V,MAAAA,KAAK,EAAEhf,MAAM,CAACmS,MAAP,MAAmB,IAAnB,GAA0B,WAA1B,GAAwCnS,MAAM,CAACmS,MAAP,EAJS;AAKxD2M,MAAAA,UAAU,EAAE5b,MAAM,CAAC4b,UALqC;AAMxDG,MAAAA,OAAO,EAAE,IAAIvN,IAAJ,EAN+C;AAOxDwN,MAAAA,OAAO,EAAElf,MAAM,CAAC4T,IAAP,MAAiB,IAAjB,GAAwB,WAAxB,GAAsCA;AAPS,KAA5D;AASH;;AAzBoC,CAApB,CAArB,C,CA4BA;;AACA,MAAMuL,cAAc,GAAG,IAAI/e,eAAJ,CAAoB;AACvC4E,EAAAA,IAAI,EAAE,4BADiC;AAEvC6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB;AACvBe,IAAAA,QAAQ,EAAE;AAAC2Q,MAAAA,IAAI,EAAE1K,MAAP;AAAemL,MAAAA,QAAQ,EAAE;AAAzB;AADa,GAAjB,EAEPP,SAFO,EAF6B;;AAKvCC,EAAAA,GAAG,CAAC9Q,QAAD,EAAW;AACV,QAAIpB,MAAM,CAACmB,QAAX,EAAqB;AACjB,UAAI6D,IAAI,GAAG5D,QAAQ,CAAC4D,IAApB;AACA,UAAIyP,QAAQ,GAAGrT,QAAQ,CAACqT,QAAxB;AACA,UAAIC,YAAY,GAAGtT,QAAQ,CAACsT,YAA5B;AACA,UAAI0K,kBAAkB,GAAGhe,QAAQ,CAACge,kBAAlC;AACA7e,MAAAA,eAAe,CAACiU,WAAhB,CAA4B9N,MAA5B,CAAmC,EAAnC,EAAuC;AACnCC,QAAAA,IAAI,EAAE;AACF3B,UAAAA,IAAI,EAAEA,IADJ;AAEFyP,UAAAA,QAAQ,EAAEA,QAFR;AAGFC,UAAAA,YAAY,EAAEA,YAHZ;AAIFC,UAAAA,aAAa,EAAEyK;AAJb;AAD6B,OAAvC;AAQA,aAAO,KAAP;AACH;AACJ;;AArBsC,CAApB,CAAvB;AAwBA,MAAMC,WAAW,GAAG,IAAIjf,eAAJ,CAAoB;AACpC4E,EAAAA,IAAI,EAAE,yBAD8B;AAEpC6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB;AACvBe,IAAAA,QAAQ,EAAE;AAAC2Q,MAAAA,IAAI,EAAE1K,MAAP;AAAemL,MAAAA,QAAQ,EAAE;AAAzB;AADa,GAAjB,EAEPP,SAFO,EAF0B;;AAKpCC,EAAAA,GAAG,CAAChP,MAAD,EAAS;AACR,QAAIlD,MAAM,CAACmB,QAAX,EAAqB;AACjB,UAAIC,QAAQ,GAAG8B,MAAM,CAAC9B,QAAtB;AACA,UAAIke,WAAW,GAAGle,QAAQ,CAACke,WAA3B;AACA,UAAIvC,KAAK,GAAG3b,QAAQ,CAAC2b,KAArB;AACA,UAAIwC,SAAS,GAAGne,QAAQ,CAACme,SAAzB;AACA,UAAIC,cAAc,GAAGpe,QAAQ,CAACoe,cAA9B;AACA,UAAIC,aAAa,GAAGre,QAAQ,CAACqe,aAA7B;AACAlf,MAAAA,eAAe,CAACsd,QAAhB,CAAyBnX,MAAzB,CAAgC,EAAhC,EAAoC;AAChCC,QAAAA,IAAI,EAAE;AACF+Y,UAAAA,WAAW,EAAEJ,WADX;AAEFK,UAAAA,KAAK,EAAE5C,KAFL;AAGF6C,UAAAA,SAAS,EAAEL,SAHT;AAIFM,UAAAA,cAAc,EAAEL,cAJd;AAKFC,UAAAA,aAAa,EAAEA;AALb;AAD0B,OAApC;AASH;;AACD,WAAO,KAAP;AACH;;AAxBmC,CAApB,CAApB;AA4BA;;AAEA,MAAMK,2BAA2B,GAAG,IAAI1f,eAAJ,CAAoB;AACpD4E,EAAAA,IAAI,EAAE,yCAD8C;AAEpD6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB,EAAjB,EAAqB4R,SAArB,EAF0C;;AAGpDC,EAAAA,GAAG,GAAG;AACF,WAAOpR,oBAAoB,CAACyD,IAArB,CAA0B,EAA1B,EAA8BC,KAA9B,EAAP;AACH;;AALmD,CAApB,CAApC;AAQA,MAAMub,aAAa,GAAG,IAAI3f,eAAJ,CAAoB;AACtC4E,EAAAA,IAAI,EAAE,2BADgC;AAEtC6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CACN;AACIqT,IAAAA,IAAI,EAAE;AAAC3B,MAAAA,IAAI,EAAEC;AAAP,KADV;AAEI4B,IAAAA,IAAI,EAAE;AAAC7B,MAAAA,IAAI,EAAEC;AAAP,KAFV;AAGI6B,IAAAA,QAAQ,EAAE;AAAC9B,MAAAA,IAAI,EAAEC;AAAP,KAHd;AAII2B,IAAAA,QAAQ,EAAE;AAAC5B,MAAAA,IAAI,EAAEC;AAAP;AAJd,GADM,EAMHC,SANG,EAF4B;;AAStCC,EAAAA,GAAG,CAAChP,MAAD,EAAS;AACR,QAAIlD,MAAM,CAACmB,QAAX,EAAqB;AACjB,YAAMyV,MAAM,GAAG7P,OAAO,CAAC,eAAD,CAAtB;;AACA,YAAMiZ,SAAS,GAAGpJ,MAAM,CAACqJ,IAAP,CAAY,UAAUC,QAAV,EAAoB;AAC9C,cAAMC,UAAU,GAAGxf,KAAK,CAACyf,gBAAN,CAAuB;AACtC1M,UAAAA,IAAI,EAAExQ,MAAM,CAACwQ,IADyB;AAEtCE,UAAAA,IAAI,EAAE1Q,MAAM,CAAC0Q,IAFyB;AAGtCC,UAAAA,QAAQ,EAAE3Q,MAAM,CAAC2Q,QAHqB;AAItCF,UAAAA,QAAQ,EAAEzQ,MAAM,CAACyQ;AAJqB,SAAvB,CAAnB;AAMAwM,QAAAA,UAAU,CAACE,KAAX,CAAiB,cAAjB,EAAiC,UAAU5X,GAAV,EAAexB,MAAf,EAAuB;AACpD,gBAAM/B,MAAM,GAAG+B,MAAM,CAAC8E,GAAP,CAAW,UAAUuU,CAAV,EAAa;AACnC,mBAAOA,CAAC,CAACC,sBAAT;AACH,WAFc,CAAf;AAGA,iBAAOL,QAAQ,CAACzX,GAAD,EAAMvD,MAAN,CAAf;AACH,SALD;AAMAib,QAAAA,UAAU,CAACtZ,GAAX,CAAe,UAAU4B,GAAV,EAAe;AAC1B,cAAIA,GAAJ,EAAS;AACLtC,YAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACH;AACJ,SAJD;AAKH,OAlBiB,CAAlB;AAmBA,aAAO4Z,SAAS,GAAGlJ,IAAZ,EAAP;AACH;AACJ;;AAjCqC,CAApB,CAAtB;AAoCA,MAAM0J,4CAA4C,GAAG,IAAIpgB,eAAJ,CAAoB;AACrE4E,EAAAA,IAAI,EAAE,0DAD+D;AAErE6M,EAAAA,QAAQ,EAAE,IAAIxR,YAAJ,CAAiB,EAAjB,EAAqB4R,SAArB,EAF2D;;AAGrEC,EAAAA,GAAG,GAAG;AACF,QAAIuO,GAAG,GAAG3f,oBAAoB,CAACyD,IAArB,CAA0B,EAA1B,EAA8BC,KAA9B,EAAV;AACA,QAAIG,EAAE,GAAG8b,GAAG,CAAC,CAAD,CAAH,CAAO7b,GAAhB;AACA9D,IAAAA,oBAAoB,CAAC4F,MAArB,CAA4B;AAAC9B,MAAAA,GAAG,EAAED;AAAN,KAA5B,EAAuC;AAACgC,MAAAA,IAAI,EAAE;AAACxB,QAAAA,aAAa,EAAE;AAAhB;AAAP,KAAvC;AACA,WAAOrE,oBAAoB,CAACyD,IAArB,CAA0B,EAA1B,EAA8BC,KAA9B,EAAP;AACH;;AARoE,CAApB,CAArD;AAhwEAvE,MAAM,CAACygB,aAAP,CA2wEeC,WAAW,GAAG;AACzB/O,EAAAA,cAAc,EAAEA,cADS;AAEzBW,EAAAA,kBAAkB,EAAEA,kBAFK;AAGzBgB,EAAAA,qBAAqB,EAAEA,qBAHE;AAIzBO,EAAAA,cAAc,EAAEA,cAJS;AAKzBG,EAAAA,UAAU,EAAEA,UALa;AAMzB+B,EAAAA,iBAAiB,EAAEA,iBANM;AAOzBG,EAAAA,uBAAuB,EAAEA,uBAPA;AAQzBC,EAAAA,YAAY,EAAEA,YARW;AASzBc,EAAAA,iBAAiB,EAAEA,iBATM;AAUzBE,EAAAA,wBAAwB,EAAEA,wBAVD;AAWzBC,EAAAA,SAAS,EAAEA,SAXc;AAYzBC,EAAAA,mBAAmB,EAACA,mBAZK;AAazBC,EAAAA,aAAa,EAAEA,aAbU;AAczBK,EAAAA,eAAe,EAAEA,eAdQ;AAezBK,EAAAA,cAAc,EAAEA,cAfS;AAgBzBC,EAAAA,WAAW,EAAEA,WAhBY;AAiBzBO,EAAAA,OAAO,EAAEA,OAjBgB;AAkBzB0C,EAAAA,gBAAgB,EAAEA,gBAlBO;AAmBzBG,EAAAA,eAAe,EAAEA,eAnBQ;AAoBzBC,EAAAA,mBAAmB,EAAEA,mBApBI;AAqBzBG,EAAAA,WAAW,EAAEA,WArBY;AAsBzBE,EAAAA,cAAc,EAAEA,cAtBS;AAuBzBC,EAAAA,QAAQ,EAAEA,QAvBe;AAwBzBqC,EAAAA,eAAe,EAAEA,eAxBQ;AAyBzBG,EAAAA,wBAAwB,EAAEA,wBAzBD;AA0BzBI,EAAAA,UAAU,EAAEA,UA1Ba;AA2BzBG,EAAAA,YAAY,EAAEA,YA3BW;AA4BzBO,EAAAA,cAAc,EAAEA,cA5BS;AA6BzBE,EAAAA,WAAW,EAAEA,WA7BY;AA8BzBS,EAAAA,2BAA2B,EAAEA,2BA9BJ;AA+BzBC,EAAAA,aAAa,EAAEA,aA/BU;AAgCzBS,EAAAA,4CAA4C,EAAEA,4CAhCrB;AAiCzBtf,EAAAA,OAAO,EAAEA;AAjCgB,CA3wE7B","sourcesContent":["/*\n * Copyright (c) 2019 Colorado State University and Regents of the University of Colorado. All rights reserved.\n */\n\nimport {Meteor} from \"meteor/meteor\";\nimport {ValidatedMethod} from 'meteor/mdg:validated-method';\nimport {SimpleSchema} from 'meteor/aldeed:simple-schema';\nimport {matsCache, matsCollections, matsDataQueryUtils, matsDataUtils, matsTypes} from 'meteor/randyp:mats-common';\nimport {mysql} from 'meteor/pcel:mysql';\nimport {url} from 'url';\nimport {Mongo} from 'meteor/mongo';\n\n// PRIVATE\n\n// local collection used to keep the table update times for refresh - won't ever be synchronized or persisted.\nconst metaDataTableUpdates = new Mongo.Collection(null);\nconst LayoutStoreCollection = new Mongo.Collection(\"LayoutStoreCollection\"); // initialize collection used for pop-out window functionality\nconst DownSampleResults = new Mongo.Collection(\"DownSampleResults\");\n\nvar MV_DIRS = {};\n// Define routes for server\nif (Meteor.isServer) {\n    if (Meteor.settings.private !== undefined && Meteor.settings.private !== null) {\n        const _MV_OUT = Meteor.settings.private.MV_OUTPUT;\n        const _MV_HOME = Meteor.settings.private.MV_HOME;\n        const _MV_LOGDIR = _MV_OUT + \"/xml/\";\n        const _MV_ERRDIR = _MV_OUT + \"/xml/\";\n        const _MV_DATADIR = _MV_OUT + \"/data/\";\n        const _MV_SQLDIR = _MV_OUT + \"/xml/\";  // sql output goes with the xml output\n        const _MV_XMLDIR = _MV_OUT + \"/xml/\";\n        const _MV_SCRIPTSDIR = _MV_OUT + \"/scripts/\";\n        const _MV_PLOTSSDIR = _MV_OUT + \"/plots/\";\n        process.env.JAVA_HOME = Meteor.settings.private.JAVA_HOME;\n        process.env.MV_HOME = Meteor.settings.private.MV_HOME;\n\n        MV_DIRS = {\n            LOGDIR: _MV_LOGDIR,\n            ERRDIR: _MV_ERRDIR,\n            DATADIR: _MV_DATADIR,\n            SQLDIR: _MV_SQLDIR,\n            XMLDIR: _MV_XMLDIR,\n            SCRIPTSDIR: _MV_SCRIPTSDIR,\n            PLOTSDIR: _MV_PLOTSSDIR,\n            HOME: _MV_HOME\n        };\n    }\n\n    // add indexes to result and axes collections\n    DownSampleResults.rawCollection().createIndex({\"createdAt\": 1}, {expireAfterSeconds: 3600 * 8}); // 8 hour expiration\n    LayoutStoreCollection.rawCollection().createIndex({\"createdAt\": 1}, {expireAfterSeconds: 900}); // 15 min expiration\n\n    // define some server side routes\n    Picker.route('/_getCSV/:key', function (params, req, res, next) {\n        Picker.middleware(_getCSV(params, req, res, next));\n    });\n\n    Picker.route('/CSV/:f/:key/:m/:a', function (params, req, res, next) {\n        Picker.middleware(_getCSV(params, req, res, next));\n    });\n\n    Picker.route('/:app/CSV/:f/:key/:m/:a', function (params, req, res, next) {\n        Picker.middleware(_getCSV(params, req, res, next));\n    });\n\n    Picker.route('/gsd/mats/:app/CSV/:f/:key/:m/:a', function (params, req, res, next) {\n        Picker.middleware(_getCSV(params, req, res, next));\n    });\n\n    Picker.route('/_getJSON/:key', function (params, req, res, next) {\n        Picker.middleware(_getJSON(params, req, res, next));\n    });\n\n    Picker.route('/JSON/:f/:key/:m/:a', function (params, req, res, next) {\n        Picker.middleware(_getJSON(params, req, res, next));\n    });\n\n    Picker.route('/:app/JSON/:f/:key/:m/:a', function (params, req, res, next) {\n        Picker.middleware(_getJSON(params, req, res, next));\n    });\n\n    Picker.route('/gsd/mats/:app/JSON/:f/:key/:m/:a', function (params, req, res, next) {\n        Picker.middleware(_getJSON(params, req, res, next));\n    });\n\n    Picker.route('/_clearCache', function (params, req, res, next) {\n        Picker.middleware(_clearCache(params, req, res, next));\n    });\n\n    Picker.route('/:app/_clearCache', function (params, req, res, next) {\n        Picker.middleware(_clearCache(params, req, res, next));\n    });\n\n    Picker.route('/gsd/mats/:app/_clearCache', function (params, req, res, next) {\n        Picker.middleware(_clearCache(params, req, res, next));\n    });\n\n    Picker.route('/refreshMetadata', function (params, req, res, next) {\n        Picker.middleware(_refreshMetadataMWltData(params, req, res, next));\n    });\n\n    Picker.route('/:app/refreshMetadata', function (params, req, res, next) {\n        Picker.middleware(_refreshMetadataMWltData(params, req, res, next));\n    });\n\n    Picker.route('/gsd/mats/:app/refreshMetadata', function (params, req, res, next) {\n        Picker.middleware(_refreshMetadataMWltData(params, req, res, next));\n    });\n\n// create picker routes for metviewer middleware static files\n    Picker.route('/:app/mvdata/:key', function (params, req, res, next) {\n        Picker.middleware(_mvGetData(params, req, res, next));\n    });\n    Picker.route('/gsd/mats/:app/mvdata/:key', function (params, req, res, next) {\n        Picker.middleware(_mvGetData(params, req, res, next));\n    });\n\n    Picker.route('/:app/mvpoints1/:key', function (params, req, res, next) {\n        Picker.middleware(_mvGetPoints1(params, req, res, next));\n    });\n    Picker.route('/gsd/mats/:app/mvpoints1/:key', function (params, req, res, next) {\n        Picker.middleware(_mvGetPoints1(params, req, res, next));\n    });\n\n    Picker.route('/:app/mvpoints2/:key', function (params, req, res, next) {\n        Picker.middleware(_mvGetPoints2(params, req, res, next));\n    });\n    Picker.route('/gsd/mats/:app/mvpoints2/:key', function (params, req, res, next) {\n        Picker.middleware(_mvGetPoints2(params, req, res, next));\n    });\n\n    Picker.route('/:app/mvxml/:key', function (params, req, res, next) {\n        Picker.middleware(_mvGetXml(params, req, res, next));\n    });\n    Picker.route('/gsd/mats/:app/mvxml/:key', function (params, req, res, next) {\n        Picker.middleware(_mvGetXml(params, req, res, next));\n    });\n\n    Picker.route('/:app/mvplot/:key', function (params, req, res, next) {\n        Picker.middleware(_mvGetPlot(params, req, res, next));\n    });\n    Picker.route('/gsd/mats/:app/mvplot/:key', function (params, req, res, next) {\n        Picker.middleware(_mvGetPlot(params, req, res, next));\n    });\n\n    Picker.route('/:app/mvscript/:key', function (params, req, res, next) {\n        Picker.middleware(_mvGetScript(params, req, res, next));\n    });\n    Picker.route('/gsd/mats/:app/mvscript/:key', function (params, req, res, next) {\n        Picker.middleware(_mvGetScript(params, req, res, next));\n    });\n\n    Picker.route('/:app/mvsql/:key', function (params, req, res, next) {\n        Picker.middleware(_mvGetSql(params, req, res, next));\n    });\n    Picker.route('/gsd/mats/:app/mvsql/:key', function (params, req, res, next) {\n        Picker.middleware(_mvGetSql(params, req, res, next));\n    });\n\n    Picker.route('/:app/mvlog/:key', function (params, req, res, next) {\n        Picker.middleware(_mvGetLog(params, req, res, next));\n    });\n    Picker.route('/gsd/mats/:app/mvlog/:key', function (params, req, res, next) {\n        Picker.middleware(_mvGetLog(params, req, res, next));\n    });\n\n    Picker.route('/:app/mverr/:key', function (params, req, res, next) {\n        Picker.middleware(_mvGetErr(params, req, res, next));\n    });\n    Picker.route('/gsd/mats/:app/mverr/:key', function (params, req, res, next) {\n        Picker.middleware(_mvGetErr(params, req, res, next));\n    });\n}\n\n// private - used to see if the main page needs to update its selectors\nconst _checkMetaDataRefresh = function () {\n    // This routine compares the current last modified time of the tables used for curveParameter metadata\n    // with the last update time to determine if an update is necessary. We really only do this for Curveparams\n    /*\n        metaDataTableUpdates:\n        {\n            name: dataBaseName,\n            tables: [tableName1, tableName2 ..],\n            lastRefreshed : timestamp\n        }\n     */\n    var refresh = false;\n    const tableUpdates = metaDataTableUpdates.find({}).fetch();\n    for (var tui = 0; tui < tableUpdates.length; tui++) {\n        var id = tableUpdates[tui]._id;\n        var poolName = tableUpdates[tui].pool;\n        var dbName = tableUpdates[tui].name;\n        var tableNames = tableUpdates[tui].tables;\n        var lastRefreshed = tableUpdates[tui]['lastRefreshed'];\n        var updatedEpoch = Number.MAX_VALUE;\n        for (var ti = 0; ti < tableNames.length; ti++) {\n            var tName = tableNames[ti];\n            var rows = matsDataQueryUtils.simplePoolQueryWrapSynchronous(global[poolName], \"SELECT UNIX_TIMESTAMP(UPDATE_TIME)\" +\n                \"    FROM   information_schema.tables\" +\n                \"    WHERE  TABLE_SCHEMA = '\" + dbName + \"'\" +\n                \"    AND TABLE_NAME = '\" + tName + \"'\");\n            for (var i = 0; i < rows.length; i++) {\n                try {\n                    updatedEpoch = rows[i]['UNIX_TIMESTAMP(UPDATE_TIME)'];\n                    break;\n                } catch (e) {\n                    throw new Error(\"_checkMetaDataRefresh - cannot find last update time for database: \" + dbName + \" and table: \" + tName + \" ERROR:\" + e.message);\n                }\n                if (updatedEpoch === Number.MAX_VALUE) {\n                    throw new Error(\"_checkMetaDataRefresh - cannot find last update time for database: \" + dbName + \" and table: \" + tName);\n                }\n            }\n            const lastRefreshedEpoch = moment(lastRefreshed).valueOf() / 1000;\n            if (lastRefreshedEpoch < updatedEpoch) {\n                refresh = true;\n                console.log(\"Refreshing the metadata in the app selectors because table \" + dbName + \".\" + tName + \" was updated at \" + moment.utc(updatedEpoch * 1000).format(\"YYYY-MM-DD HH:mm:ss\") + \" while the metadata was last refreshed at \" + moment.utc(lastRefreshedEpoch * 1000).format(\"YYYY-MM-DD HH:mm:ss\"));\n                break;\n            }\n        }\n        if (refresh === true) {\n            // refresh the app metadata\n            // app specific routines\n            //const asrKeys = Object.keys(appSpecificResetRoutines);\n            const asrKeys = appSpecificResetRoutines;\n            for (var ai = 0; ai < asrKeys.length; ai++) {\n                global.appSpecificResetRoutines[ai]();\n            }\n            // remember that we updated ALL the metadata tables just now\n            metaDataTableUpdates.update({_id: id}, {$set: {lastRefreshed: moment().format()}});\n        }\n    }\n    return true;\n};\n\n// private middleware for clearing the cache\nconst _clearCache = function (params, req, res, next) {\n    if (Meteor.isServer) {\n        matsCache.clear();\n        res.end();\n    }\n};\n\n// private middleware for _getCSV route\nconst _getCSV = function (params, req, res, next) {\n    if (Meteor.isServer) {\n        var stringify = require('csv-stringify');\n        var csv = \"\";\n        try {\n            var result = _getFlattenedResultData(params.key, 0, -1000);\n            var statArray = Object.values(result.stats);\n            var dataArray = Object.values(result.data);\n            var statResultArray = [];\n            var dataResultArray = [];\n            for (var si = 0; si < statArray.length; si++) {\n                statResultArray.push(Object.keys(statArray[si])); // push the stat header for this curve(keys)\n                statResultArray.push(statArray[si]['n'] === 0 ? [statArray[si].label] : Object.values(statArray[si])); // push the stats for this curve\n            }\n\n            for (var di = 0; di < dataArray.length; di++) {\n                var dataSubArray = Object.values(dataArray[di]);\n                var dataHeader = dataSubArray[0] === undefined ? statArray[di].label : Object.keys(dataSubArray[0]);\n                //dataHeader[0] = 'label';\n                dataHeader[0] = dataSubArray[0] === undefined ? \"NO DATA\" : Object.keys(dataSubArray[0]).filter(key => key.indexOf('Curve') != -1)[0];\n                dataResultArray.push(dataHeader); // push this curve data header (keys)\n                if (dataSubArray[0] === undefined) {\n                    continue;\n                }\n                for (var dsi = 0; dsi < dataSubArray.length; dsi++) {  // push this curves data\n                    dataResultArray.push(Object.values(dataSubArray[dsi]));\n                }\n            }\n            var fileName = \"matsplot-\" + moment.utc().format('YYYYMMDD-HH.mm.ss') + \".csv\";\n            res.setHeader('Content-disposition', 'attachment; filename=' + fileName);\n            res.setHeader('Content-Type', 'attachment.ContentType');\n            stringify(statResultArray, {header: true}, function (err, output) {\n                if (err) {\n                    console.log(\"error in _getCSV:\", err);\n                    res.write(\"error,\" + err.toLocaleString());\n                    res.end();\n                    return;\n                }\n                res.write(output);\n                stringify(dataResultArray, {header: true}, function (err, output) {\n                    if (err) {\n                        console.log(\"error in _getCSV:\", err);\n                        res.write(\"error,\" + err.toLocaleString());\n                        res.end();\n                        return;\n                    }\n                    res.write(output);\n                    res.end();\n                });\n                delete result;\n                delete statResultArray;\n                delete dataResultArray;\n            });\n        } catch (e) {\n            console.log('error retrieving data: ', e);\n            csv = \"error,\" + e.toLocaleString();\n            res.setHeader('Content-disposition', 'attachment; filename=matsplot.csv');\n            res.setHeader('Content-Type', 'attachment.ContentType');\n            res.end(csv);\n        }\n    }\n};\n\n// private middleware for _getJSON route\nconst _getJSON = function (params, req, res, next) {\n    if (Meteor.isServer) {\n        var flatJSON = \"\";\n        try {\n            var result = _getPagenatedData(params.key, 0, -1000);\n            flatJSON = JSON.stringify(result);\n        } catch (e) {\n            console.log('error retrieving data: ', e);\n            flatJSON = JSON.stringify({error: e});\n            delete flatJSON.dsiRealPageIndex;\n            delete flatJSON.dsiTextDirection;\n        }\n        res.setHeader('Content-Type', 'application/json');\n        res.write(flatJSON);\n        res.end();\n        delete flatJSON;\n        delete result;\n    }\n};\n\n// private method for getting pagenated results and flattening them in order to be appropriate for text display.\nconst _getFlattenedResultData = function (rk, p, np) {\n    if (Meteor.isServer) {\n        var resp;\n        try {\n            var r = rk;\n            var p = p;\n            var np = np;\n            // get the pagenated data\n            var result = _getPagenatedData(r, p, np);\n            // find the type\n            var plotTypes = result.basis.plotParams.plotTypes;\n            var plotType = (_.invert(plotTypes))[true];\n            // extract data\n            var data = result.data;\n            var dsiRealPageIndex = result.dsiRealPageIndex;\n            var dsiTextDirection = result.dsiTextDirection;\n            switch (plotType) {\n                case matsTypes.PlotTypes.timeSeries:\n                case matsTypes.PlotTypes.dailyModelCycle:\n                    var returnData = {};\n                    returnData.stats = {};   // map of maps\n                    returnData.data = {};  // map of arrays of maps\n                    /*\n                    returnData is\n                    {\n                        stats: {\n                                    curve0: {label:someLabel, mean:someMean,sd:someSd....}\n                                    curve1: {label:someLabel, mean:someMean,sd:someSd....}\n                                    ...\n                                }\n                        data: {\n                                    curve0: [\n                                                {time:someTime, stat: someStat, sd: someSd,....},\n                                                {time:someTime, stat: someStat, sd: someSd,....},\n                                                ....\n                                            ],\n                                    curve1: [\n                                                {time:someTime, stat: someStat, sd: someSd,....},\n                                                {time:someTime, stat: someStat, sd: someSd,....},\n                                                ....\n                                            ],\n                                            ...\n                              }\n                    }\n                     */\n                    for (var ci = 0; ci < data.length; ci++) { // for each curve\n                        // if the curve label is a reserved word do not process the curve (its a zero or max curve)\n                        var reservedWords = Object.values(matsTypes.ReservedWords);\n                        if (reservedWords.indexOf(data[ci].label) >= 0) {\n                            continue; // don't process the zero or max curves\n                        }\n                        var stats = {};\n                        stats['label'] = data[ci].label;\n                        stats['mean'] = data[ci].glob_stats.d_mean;\n                        stats['standard deviation'] = data[ci].glob_stats.sd;\n                        stats['n'] = data[ci].glob_stats.n_good;\n                        stats['standard error'] = data[ci].glob_stats.stde_betsy;\n                        stats['lag1'] = data[ci].glob_stats.lag1;\n                        stats['minimum'] = data[ci].glob_stats.minVal;\n                        stats['maximum'] = data[ci].glob_stats.maxVal;\n                        returnData.stats[data[ci].label] = stats;\n\n                        var curveData = [];  // map of maps\n                        for (var cdi = 0; cdi < data[ci].x.length; cdi++) { //for each datapoint\n                            var curveDataElement = {};\n                            curveDataElement[data[ci].label + ' time'] = data[ci].x[cdi];\n                            curveDataElement['raw stat from query'] = data[ci].stats[cdi].raw_stat;\n                            curveDataElement['plotted stat'] = data[ci].y[cdi];\n                            curveDataElement['std dev'] = data[ci].stats[cdi].sd;\n                            curveDataElement['std error'] = data[ci].stats[cdi].stde_betsy;\n                            curveDataElement['lag1'] = data[ci].stats[cdi].lag1;\n                            curveDataElement['n'] = data[ci].stats[cdi].n_good;\n                            curveData.push(curveDataElement);\n                        }\n                        returnData.data[data[ci].label] = curveData;\n                    }\n                    break;\n                case matsTypes.PlotTypes.profile:\n                    var returnData = {};\n                    returnData.stats = {};   // map of maps\n                    returnData.data = {};  // map of arrays of map\n                    for (var ci = 0; ci < data.length; ci++) {  // for each curve\n                        var reservedWords = Object.values(matsTypes.ReservedWords);\n                        if (reservedWords.indexOf(data[ci].label) >= 0) {\n                            continue; // don't process the zero or max curves\n                        }\n                        var stats = {};\n                        stats['label'] = data[ci].label;\n                        stats['mean'] = data[ci].glob_stats.d_mean;\n                        stats['standard deviation'] = data[ci].glob_stats.sd;\n                        stats['n'] = data[ci].glob_stats.n_good;\n                        stats['standard error'] = data[ci].glob_stats.stde_betsy;\n                        stats['lag1'] = data[ci].glob_stats.lag1;\n                        stats['minimum'] = data[ci].glob_stats.minVal;\n                        stats['maximum'] = data[ci].glob_stats.maxVal;\n                        returnData.stats[data[ci].label] = stats;\n\n                        var cdata = data[ci].data;\n                        var curveData = [];  // array of maps\n                        for (var cdi = 0; cdi < data[ci].x.length; cdi++) {  // for each datapoint\n                            var curveDataElement = {};\n                            curveDataElement[data[ci].label + ' level'] = data[ci].y[cdi];\n                            curveDataElement['raw stat from query'] = data[ci].stats[cdi].raw_stat;\n                            curveDataElement['plotted stat'] = data[ci].x[cdi];\n                            curveDataElement['std dev'] = data[ci].stats[cdi].sd;\n                            curveDataElement['std error'] = data[ci].stats[cdi].stde_betsy;\n                            curveDataElement['lag1'] = data[ci].stats[cdi].lag1;\n                            curveDataElement['n'] = data[ci].stats[cdi].n_good;\n                            curveData.push(curveDataElement);\n                        }\n                        returnData.data[data[ci].label] = curveData;\n                    }\n                    break;\n                case matsTypes.PlotTypes.dieoff:\n                case matsTypes.PlotTypes.threshold:\n                case matsTypes.PlotTypes.validtime:\n                    var labelSuffix;\n                    switch (plotType) {\n                        case matsTypes.PlotTypes.dieoff:\n                            labelSuffix = \" forecast lead time\";\n                            break;\n                        case matsTypes.PlotTypes.validtime:\n                            labelSuffix = \" hour of day\";\n                            break;\n                        case matsTypes.PlotTypes.threshold:\n                            labelSuffix = \" threshold (in)\";\n                            break;\n                    }\n                    var returnData = {};\n                    returnData.stats = {};   // map of maps\n                    returnData.data = {};  // map of arrays of maps\n\n                    for (var ci = 0; ci < data.length; ci++) {  // for each curve\n                        var reservedWords = Object.values(matsTypes.ReservedWords);\n                        if (reservedWords.indexOf(data[ci].label) >= 0) {\n                            continue; // don't process the zero or max curves\n                        }\n                        var stats = {};\n                        stats['label'] = data[ci].label;\n                        stats['mean'] = data[ci].glob_stats.d_mean;\n                        stats['standard deviation'] = data[ci].glob_stats.sd;\n                        stats['n'] = data[ci].glob_stats.n_good;\n                        stats['minimum'] = data[ci].glob_stats.minVal;\n                        stats['maximum'] = data[ci].glob_stats.maxVal;\n                        returnData.stats[data[ci].label] = stats;\n\n                        var curveData = [];  // map of maps\n                        for (var cdi = 0; cdi < data[ci].x.length; cdi++) {  // for each datapoint\n                            var curveDataElement = {};\n                            curveDataElement[data[ci].label + labelSuffix] = data[ci].x[cdi];\n                            curveDataElement['raw stat from query'] = data[ci].stats[cdi].raw_stat;\n                            curveDataElement['plotted stat'] = data[ci].y[cdi];\n                            curveDataElement['std dev'] = data[ci].stats[cdi].sd;\n                            curveDataElement['n'] = data[ci].stats[cdi].n_good;\n                            curveData.push(curveDataElement);\n                        }\n                        returnData.data[data[ci].label] = curveData;\n                    }\n                    break;\n                case matsTypes.PlotTypes.reliability:\n                    var returnData = {};\n                    returnData.stats = {};   // map of maps\n                    returnData.data = {};  // map of arrays of map\n                    for (var ci = 0; ci < data.length; ci++) {  // for each curve\n                        var reservedWords = Object.values(matsTypes.ReservedWords);\n                        if (reservedWords.indexOf(data[ci].label) >= 0) {\n                            continue; // don't process the zero or max curves\n                        }\n                        var stats = {};\n                        stats['label'] = data[ci].label;\n                        stats['sample climo'] = data[ci].glob_stats.sample_climo;\n                        returnData.stats[data[ci].label] = stats;\n\n                        var cdata = data[ci].data;\n                        var curveData = [];  // array of maps\n                        for (var cdi = 0; cdi < data[ci].y.length; cdi++) {  // for each datapoint\n                            var curveDataElement = {};\n                            curveDataElement[data[ci].label + ' probability bin'] = data[ci].stats[cdi].prob_bin;\n                            curveDataElement['hit rate'] = data[ci].stats[cdi].hit_rate;\n                            curveDataElement['oy'] = data[ci].stats[cdi].obs_y;\n                            curveDataElement['on'] = data[ci].stats[cdi].obs_n;\n                            curveData.push(curveDataElement);\n                        }\n                        returnData.data[data[ci].label] = curveData;\n                    }\n                    break;\n                case matsTypes.PlotTypes.map:\n                    var returnData = {};\n                    returnData.stats = {};   // map of maps\n                    returnData.data = {};  // map of arrays of maps\n\n                    var stats = {};\n                    stats['label'] = data[0].label;\n                    stats['total number of obs'] = data[0].stats.reduce(function (prev, curr) {\n                        return prev + curr.N_times;\n                    }, 0);\n                    stats['mean difference'] = matsDataUtils.average(data[0].queryVal);\n                    stats['standard deviation'] = matsDataUtils.stdev(data[0].queryVal);\n                    stats['minimum time'] = data[0].stats.reduce(function (prev, curr) {\n                        return (prev < curr.min_time ? prev : curr.min_time);\n                    });\n                    stats['minimum time'] = moment.utc(stats['minimum time'] * 1000).format('YYYY-MM-DD HH:mm');\n                    stats['maximum time'] = data[0].stats.reduce(function (prev, curr) {\n                        return (prev > curr.max_time ? prev : curr.max_time);\n                    });\n                    stats['maximum time'] = moment.utc(stats['maximum time'] * 1000).format('YYYY-MM-DD HH:mm');\n\n                    returnData.stats[data[0].label] = stats;\n\n                    var curveData = [];  // map of maps\n                    for (var si = 0; si < data[0].siteName.length; si++) {\n                        var curveDataElement = {};\n                        curveDataElement['Site Name'] = data[0].siteName[si];\n                        curveDataElement['Number of Times'] = data[0].stats[si].N_times;\n                        curveDataElement['Start Date'] = moment.utc((data[0].stats[si].min_time) * 1000).format('YYYY-MM-DD HH:mm');\n                        curveDataElement['End Date'] = moment.utc((data[0].stats[si].max_time) * 1000).format('YYYY-MM-DD HH:mm');\n                        curveDataElement['Average Difference'] = data[0].queryVal[si];\n                        curveData.push(curveDataElement);\n                    }\n                    returnData.data[data[0].label] = curveData;\n                    break;\n                case matsTypes.PlotTypes.histogram:\n                    var returnData = {};\n                    returnData.stats = {};   // map of maps\n                    returnData.data = {};  // map of arrays of maps\n\n                    for (var ci = 0; ci < data.length; ci++) { // for each curve\n                        var reservedWords = Object.values(matsTypes.ReservedWords);\n                        if (reservedWords.indexOf(data[ci].label) >= 0) {\n                            continue; // don't process the zero or max curves\n                        }\n                        var stats = {};\n                        stats['label'] = data[ci].label;\n                        stats['mean'] = data[ci].glob_stats.glob_mean;\n                        stats['standard deviation'] = data[ci].glob_stats.glob_sd;\n                        stats['n'] = data[ci].glob_stats.glob_n;\n                        stats['minimum'] = data[ci].glob_stats.glob_min;\n                        stats['maximum'] = data[ci].glob_stats.glob_max;\n                        returnData.stats[data[ci].label] = stats;\n\n                        var curveData = [];  // map of maps\n                        for (var cdi = 0; cdi < data[ci].x.length; cdi++) {   // for each datapoint\n                            var curveDataElement = {};\n                            curveDataElement[data[ci].label + ' bin range'] = data[ci].bin_stats[cdi]['binLabel'];\n                            curveDataElement['n'] = data[ci].bin_stats[cdi].bin_n;\n                            curveDataElement['bin rel freq'] = data[ci].bin_stats[cdi].bin_rf;\n                            curveDataElement['bin lower bound'] = data[ci].bin_stats[cdi].binLowBound;\n                            curveDataElement['bin upper bound'] = data[ci].bin_stats[cdi].binUpBound;\n                            curveDataElement['bin mean'] = data[ci].bin_stats[cdi].bin_mean;\n                            curveDataElement['bin std dev'] = data[ci].bin_stats[cdi].bin_sd;\n                            curveData.push(curveDataElement);\n                        }\n                        returnData.data[data[ci].label] = curveData;\n                    }\n                    break;\n                case matsTypes.PlotTypes.contour:\n                case matsTypes.PlotTypes.contourDiff:\n                    var returnData = {};\n                    returnData.stats = {};   // map of maps\n                    returnData.data = {};  // map of arrays of maps\n                    var stats = {};\n                    stats['label'] = data[0].label;\n                    stats['total number of points'] = data[0].glob_stats.n;\n                    stats['mean stat'] = data[0].glob_stats.mean;\n                    stats['minimum time'] = data[0].glob_stats.minDate;\n                    stats['minimum time'] = moment.utc(stats['minimum time'] * 1000).format('YYYY-MM-DD HH:mm');\n                    stats['maximum time'] = data[0].glob_stats.maxDate;\n                    stats['maximum time'] = moment.utc(stats['maximum time'] * 1000).format('YYYY-MM-DD HH:mm');\n\n                    returnData.stats[data[0].label] = stats;\n\n                    var curveData = [];  // map of maps\n                    for (var si = 0; si < data[0].xTextOutput.length; si++) {\n                        var curveDataElement = {};\n                        curveDataElement['xVal'] = data[0].xTextOutput[si];\n                        curveDataElement['yVal'] = data[0].yTextOutput[si];\n                        curveDataElement['stat'] = data[0].zTextOutput[si];\n                        curveDataElement['N'] = data[0].nTextOutput[si];\n                        curveDataElement['Start Date'] = moment.utc((data[0].minDateTextOutput[si]) * 1000).format('YYYY-MM-DD HH:mm');\n                        curveDataElement['End Date'] = moment.utc((data[0].maxDateTextOutput[si]) * 1000).format('YYYY-MM-DD HH:mm');\n                        curveData.push(curveDataElement);\n                    }\n                    returnData.data[data[0].label] = curveData;\n                    break;\n                case matsTypes.PlotTypes.scatter2d:\n                    var returnData = {}; // returns a map of arrays of maps\n                    /*\n                    returnData = {\n                                    curve0: [\n                                                {\n                                                xval: number,\n                                                yval: number,\n                                                bestfit: number || none\n                                                },\n                                                {\n                                                xval: number,\n                                                yval: number,\n                                                bestfit: number || none\n                                                },\n                                               .....\n                                            ],\n                                     curve1: [\n                                                {\n                                                xval: number,\n                                                yval: number,\n                                                bestfit: number || none\n                                                },\n                                                {\n                                                xval: number,\n                                                yval: number,\n                                                bestfit: number || none\n                                                },\n                                               .....\n                                            ],\n                                            ....\n                                }\n                     */\n                    var firstBestFitIndex = -1;\n                    var bestFitIndexes = {};\n                    for (var ci = 0; ci < data.length; ci++) {\n                        if (ci == firstBestFitIndex) {\n                            break; // best fit curves are at the end so do not do further processing\n                        }\n                        var curveData = data[ci];\n                        // look for a best fit curve - only have to look at curves with higher index than this one\n                        var bestFitIndex = -1;\n                        for (var cbi = ci + 1; cbi < data.length; cbi++) {\n                            if (((data[cbi].label).indexOf(curveData.label) !== -1) && ((data[cbi].label).indexOf(\"-best fit\") != -1)) {\n                                bestFitIndexes[ci] = cbi;\n                                if (firstBestFitIndex == -1) {\n                                    firstBestFitIndex = cbi;\n                                }\n                                break;\n                            }\n                        }\n                        var curveTextData = [];\n                        for (var cdi = 0; cdi < curveData.data.length; cdi++) {\n                            var element = {};\n                            element['xAxis'] = curveData.data[cdi][0];\n                            element['yAxis'] = curveData.data[cdi][1];\n                            if (bestFitIndexes[ci] === undefined) {\n                                element['best fit'] = \"none;\"\n                            } else {\n                                element['best fit'] = data[bestFitIndexes[ci]].data[cdi][1];\n                            }\n                            curveTextData.push(element);\n                        }\n                        returnData[curveData.label] = curveTextData;\n                    }\n                    break;\n                default:\n                    return undefined;\n            }\n            returnData.dsiRealPageIndex = dsiRealPageIndex;\n            returnData.dsiTextDirection = dsiTextDirection;\n            return returnData;\n        } catch (error) {\n           throw new Meteor.Error(\"Error in _getFlattenedResultData function: \" + error.message);\n        }\n    }\n};\n\n// private method for getting pagenated data\n// a newPageIndex of -1000 means get all the data (used for export)\n// a newPageIndex of -2000 means get just the last page\nconst _getPagenatedData = function (rky, p, np) {\n    if (Meteor.isServer) {\n        var key = rky;\n        var myPageIndex = p;\n        var newPageIndex = np;\n        var ret;\n        var rawReturn;\n\n        try {\n            var result = matsCache.getResult(key);\n            rawReturn = result === undefined ? undefined : result.result; // getResult structure is {key:something, result:resultObject}\n        } catch (e) {\n            console.log(\"_getPagenatedData: Error - \", e);\n            return undefined;\n        }\n        ret = rawReturn === undefined ? undefined : JSON.parse(JSON.stringify(rawReturn));\n        var start;\n        var end;\n        var direction = 1;\n        if (newPageIndex === -1000) {\n            // all the data\n            start = 0;\n            end = Number.MAX_VALUE;\n        } else if (newPageIndex === -2000) {\n            // just the last page\n            start = -2000;\n            direction = -1;\n        } else if (myPageIndex <= newPageIndex) {\n            // proceed forward\n            start = (newPageIndex - 1) * 100;\n            end = newPageIndex * 100;\n        } else {\n            // move back\n            direction = -1;\n            start = newPageIndex * 100;\n            end = (newPageIndex + 1) * 100;\n        }\n\n        var dsiStart;\n        var dsiEnd;\n        for (var csi = 0; csi < ret.data.length; csi++) {\n            if (ret.data[csi].x == null || ret.data[csi].x.length <= 100) {\n                continue; // don't bother pagenating datasets less than or equal to a page - ret is rawReturn\n            }\n            dsiStart = start;\n            dsiEnd = end;\n            if (dsiStart > ret.data[csi].x.length || dsiStart === -2000) {\n                // show the last page if we either requested it specifically or are trying to navigate past it\n                dsiStart = Math.floor(rawReturn.data[csi].x.length / 100) * 100;\n                dsiEnd = rawReturn.data[csi].x.length;\n                if (dsiEnd === dsiStart) {\n                    // make sure the last page isn't empty--if rawReturn.data[csi].data.length/100 produces a whole number,\n                    // dsiStart and dsiEnd would be the same. This makes sure that the last full page is indeed the last page, without a phantom empty page afterwards\n                    dsiStart = dsiEnd - 100;\n                }\n            }\n            if (dsiStart < 0) {\n                // show the first page if we are trying to navigate before it\n                dsiStart = 0;\n                dsiEnd = 100;\n            }\n            if (dsiEnd < dsiStart) {\n                // make sure that the end is after the start\n                dsiEnd = dsiStart + 100;\n            }\n            if (dsiEnd > ret.data[csi].x.length) {\n                // make sure we don't request past the end -- if results are one page, this should convert the\n                // start and end from 0 and 100 to 0 and whatever the end is.\n                dsiEnd = ret.data[csi].x.length;\n            }\n            ret.data[csi].x = rawReturn.data[csi].x.slice(dsiStart, dsiEnd);\n            ret.data[csi].y = rawReturn.data[csi].y.slice(dsiStart, dsiEnd);\n            ret.data[csi].stats = rawReturn.data[csi].stats.slice(dsiStart, dsiEnd);\n            ret.data[csi].glob_stats = rawReturn.data[csi].glob_stats;\n        }\n\n        delete rawReturn;\n        if (direction === 1) {\n            ret.dsiRealPageIndex = Math.floor(dsiEnd / 100);\n        } else {\n            ret.dsiRealPageIndex = Math.floor(dsiStart / 100);\n        }\n        ret.dsiTextDirection = direction;\n        return ret;\n    }\n};\n\n//private middleware for getting metviewer data file\nconst _mvGetData = function(params, req, res, next) {\n    const fse = require(\"fs-extra\");\n    const filePath = MV_DIRS.DATADIR;\n    const baseName = params.key + \".data\";\n    const fileName = filePath + '/' + baseName;\n    try {\n        fse.readFile(fileName, function(err, data) {\n            res.setHeader('Content-Type', 'text/plain')\n            if (err) {console.log(err);} // Fail if the file can't be read.\n            res.end(data); // Send the file data to the browser.\n        });\n    }\n    catch (error) {\n        res.setHeader('Content-Type', 'text/plain');\n        res.write(\"Error Error getting data file :\" + baseName);\n        res.end();\n    }\n}\n\n//private middleware for getting metviewer points1 file\nconst _mvGetPoints1 = function(params, req, res, next) {\n    const fse = require(\"fs-extra\");\n    const filePath = MV_DIRS.DATADIR;\n    const baseName = params.key + \".points1\";\n    const fileName = filePath + '/' + baseName;\n    try {\n        fse.readFile(fileName, function(err, data) {\n            res.setHeader('Content-Type', 'text/plain')\n            if (err) {console.log(err);} // Fail if the file can't be read.\n            res.end(data); // Send the file data to the browser.\n        });\n    }\n    catch (error) {\n        res.setHeader('Content-Type', 'text/plain');\n        res.write(\"Error Error getting data file :\" + baseName);\n        res.end();\n    }\n}\n\n\n//private middleware for getting metviewer points1 file\nconst _mvGetPoints2 = function(params, req, res, next) {\n    const fse = require(\"fs-extra\");\n    const filePath = MV_DIRS.DATADIR;\n    const baseName = params.key + \".points2\";\n    const fileName = filePath + '/' + baseName;\n    try {\n        fse.readFile(fileName, function(err, data) {\n            res.setHeader('Content-Type', 'text/plain')\n            if (err) {console.log(err);} // Fail if the file can't be read.\n            res.end(data); // Send the file data to the browser.\n        });\n    }\n    catch (error) {\n        res.setHeader('Content-Type', 'text/plain');\n        res.write(\"Error Error getting data file :\" + baseName);\n        res.end();\n    }\n}\n\n//private middleware for getting metviewer xml file\nconst _mvGetXml = function(params, req, res, next) {\n    const fse = require(\"fs-extra\");\n    const filePath = MV_DIRS.XMLDIR;\n    const baseName = params.key + \".xml\";\n    const fileName = filePath + '/' + baseName;\n    try {\n        fse.readFile(fileName, function(err, data) {\n            res.setHeader('Content-Type', 'text/plain');\n            if (err) {console.log(err);} // Fail if the file can't be read.\n            res.end(data); // Send the file data to the browser.\n        });\n    }\n    catch (error) {\n        res.setHeader('Content-Type', 'text/plain');\n        res.write(\"Error Error getting xml file :\" + baseName);\n        res.end();\n    }\n}\n//private middleware for getting metviewer plot file\nconst _mvGetPlot = function(params, req, res, next) {\n    const fse = require(\"fs-extra\");\n    const filePath = MV_DIRS.PLOTSDIR;\n    const baseName = params.key + \".png\";\n    const fileName = filePath + '/' + baseName;\n    try {\n        fse.readFile(fileName, function(err, data) {\n            res.setHeader('Content-Type', 'image/png');\n            if (err) {console.log(err);} // Fail if the file can't be read.\n            res.end(data); // Send the file data to the browser.\n        });\n    }\n    catch (error) {\n        res.setHeader('Content-Type', 'application/txt');\n        res.write(\"Error Error getting plot file :\" + baseName);\n        res.end();\n    }\n}\n//private middleware for getting metviewer script file\nconst _mvGetScript = function(params, req, res, next) {\n    const fse = require(\"fs-extra\");\n    const filePath = MV_DIRS.SCRIPTSDIR;\n    const baseName = params.key + \".R\";\n    const fileName = filePath + '/' + baseName;\n    try {\n        fse.readFile(fileName, function(err, data) {\n            res.setHeader('Content-Type', 'text/plain');\n            if (err) {console.log(err);} // Fail if the file can't be read.\n            res.end(data); // Send the file data to the browser.\n        });\n    }\n    catch (error) {\n        res.setHeader('Content-Type', 'text/plain');\n        res.write(\"Error Error getting script file :\" + baseName);\n        res.end();\n    }}\n//private middleware for getting metviewer sql file\nconst _mvGetSql = function(params, req, res, next) {\n    const fse = require(\"fs-extra\");\n    const filePath = MV_DIRS.SQLDIR;\n    const baseName = params.key + \".sql\";\n    const fileName = filePath + '/' + baseName;\n    try {\n        fse.readFile(fileName, function(err, data) {\n            res.setHeader('Content-Type', 'text/sql');\n            if (err) {console.log(err);} // Fail if the file can't be read.\n            res.end(data); // Send the file data to the browser.\n        });\n    }\n    catch (error) {\n        res.setHeader('Content-Type', 'text/plain');\n        res.write(\"Error Error getting sql file :\" + baseName);\n        res.end();\n    }\n}\n//private middleware for getting metviewer log file\nconst _mvGetLog = function(params, req, res, next) {\n    const fse = require(\"fs-extra\");\n    const filePath = MV_DIRS.LOGDIR;\n    const baseName = params.key + \".log\";\n    const fileName = filePath + '/' + baseName;\n    try {\n        fse.readFile(fileName, function(err, data) {\n            res.setHeader('Content-Type', 'text/plain');\n            if (err) {console.log(err);} // Fail if the file can't be read.\n            res.end(data); // Send the file data to the browser.\n        });\n    }\n    catch (error) {\n        res.setHeader('Content-Type', 'text/plain');\n        res.write(\"Error Error getting log file :\" + baseName);\n        res.end();\n    }\n}\n//private middleware for getting metviewer err file\nconst _mvGetErr = function(params, req, res, next) {\n    const fse = require(\"fs-extra\");\n    const filePath = MV_DIRS.ERRDIR;\n    const baseName = params.key + \".err\";\n    const fileName = filePath + '/' + baseName;\n    try {\n        fse.readFile(fileName, function(err, data) {\n            res.setHeader('Content-Type', 'text/plain');\n            if (err) {\n                res.setHeader('Content-Type', 'text/plain');\n                res.write(\"Error Error getting err file :\" + baseName);\n                res.end();\n            } else {\n                res.end(data); // Send the file data to the browser.\n            }\n        });\n    }\n    catch (error) {\n        res.setHeader('Content-Type', 'text/plain');\n        res.write(\"Error Error getting plot file :\" + baseName);\n        res.end();\n    }\n}\n\n\n// private define a middleware for clearing the cache\nconst _refreshMetadataMWltData = function (params, req, res, next) {\n    if (Meteor.isServer) {\n        _checkMetaDataRefresh();\n        res.end();\n    }\n};\n\n// private save the result from the query into mongo and downsample if that result's size is greater than 1Mb\nconst _saveResultData = function (result) {\n    if (Meteor.isServer) {\n        var sizeof = require('object-sizeof');\n        var hash = require('object-hash');\n        var key = hash(result.basis.plotParams);\n        var threshold = 1000000;\n        var ret = {};\n        try {\n            var dSize = sizeof(result.data);\n            //console.log(\"result.basis.data size is \", dSize);\n            // TimeSeries and DailyModelCycle are the only plot types that require downSampling\n            if (dSize > threshold && (result.basis.plotParams.plotTypes.TimeSeries || result.basis.plotParams.plotTypes.DailyModelCycle)) {\n                // greater than threshold need to downsample\n                // downsample and save it in DownSampleResult\n                console.log(\"DownSampling\");\n                var downsampler = require(\"downsample-lttb\");\n                var totalPoints = 0;\n                for (var di = 0; di < result.data.length; di++) {\n                    totalPoints += result.data[di].x_epoch.length;\n                }\n                var allowedNumberOfPoints = (threshold / dSize) * totalPoints;\n                var downSampleResult = result === undefined ? undefined : JSON.parse(JSON.stringify(result));\n                for (var ci = 0; ci < result.data.length; ci++) {\n                    var dsData = {};\n                    var xyDataset = result.data[ci].x_epoch.map(function (d, index) {\n                        return [result.data[ci].x_epoch[index], result.data[ci].y[index]];\n                    });\n                    var ratioTotalPoints = xyDataset.length / totalPoints;\n                    var myAllowedPoints = Math.round(ratioTotalPoints * allowedNumberOfPoints);\n                    // downsample the array\n                    var downsampledSeries;\n                    if (myAllowedPoints < xyDataset.length && xyDataset.length > 2) {\n                        downsampledSeries = downsampler.processData(xyDataset, myAllowedPoints);\n                        // replace the y attributes (tooltips etc.) with the y attributes from the nearest x\n                        var originalIndex = 0;\n                        // skip through the original dataset capturing each downSampled data point\n                        var arrayKeys = [];\n                        var nonArrayKeys = [];\n                        var keys = Object.keys(result.data[ci]);\n                        for (var ki = 0; ki < keys.length; ki++) {\n                            if (keys[ki] !== 'x_epoch') {\n                                if (Array.isArray(result.data[ci][keys[ki]])) {\n                                    arrayKeys.push(keys[ki]);\n                                    dsData[keys[ki]] = [];\n                                } else {\n                                    nonArrayKeys.push(keys[ki]);\n                                }\n                            }\n                        }\n                        // We only ever downsample series plots - never profiles and series plots only ever have error_y arrays.\n                        // This is a little hacky but what is happening is we putting error_y.array on the arrayKeys list so that it gets its\n                        // downsampled equivalent values.\n                        for (ki = 0; ki < nonArrayKeys.length; ki++) {\n                            dsData[nonArrayKeys[ki]] = result.data[ci][nonArrayKeys[ki]];\n                        }\n                        // remove the original error_y array data.\n                        dsData['error_y'].array = [];\n                        for (var dsi = 0; dsi < downsampledSeries.length; dsi++) {\n                            while (originalIndex < result.data[ci].x_epoch.length && (result.data[ci].x_epoch[originalIndex] < downsampledSeries[dsi][0])) {\n                                originalIndex++;\n                            }\n                            // capture the stuff related to this downSampled data point (downSampled data points are always a subset of original data points)\n                            for (ki = 0; ki < arrayKeys.length; ki++) {\n                                dsData[arrayKeys[ki]][dsi] = result.data[ci][arrayKeys[ki]][originalIndex];\n                            }\n                            dsData['error_y']['array'][dsi] = result.data[ci]['error_y']['array'][originalIndex];\n                        }\n                        // add downsampled annotation to curve options\n                        downSampleResult[ci] = dsData;\n                        downSampleResult[ci].annotation += \"   **DOWNSAMPLED**\";\n                    } else {\n                        downSampleResult[ci] = result.data[ci];\n                    }\n                    downSampleResult.data[ci] = downSampleResult[ci];\n                }\n                DownSampleResults.rawCollection().insert({\"createdAt\": new Date(), key: key, result: downSampleResult});// createdAt ensures expiration set in mats-collections\n                ret = {key: key, result: downSampleResult};\n            } else {\n                ret = {key: key, result: result};\n            }\n            // save original dataset in the matsCache\n            if (result.basis.plotParams.plotTypes.TimeSeries || result.basis.plotParams.plotTypes.DailyModelCycle) {\n                for (var ci = 0; ci < result.data.length; ci++) {\n                    delete (result.data[ci]['x_epoch']);     // we only needed this as an index for downsampling\n                }\n            }\n            matsCache.storeResult(key, {key: key, result: result}); // lifespan is handled by lowDb (internally) in matscache\n        } catch (error) {\n            if (error.toLocaleString().indexOf(\"larger than the maximum size\") != -1) {\n                throw new Meteor.Error(+\": Requesting too much data... try averaging\");\n            }\n        }\n        return ret;\n    }\n};\n\n// PUBLIC METHODS\n//administration tools\nconst addSentAddress = new ValidatedMethod({\n    name: 'matsMethods.addSentAddress',\n    validate: new SimpleSchema({\n        toAddress: {type: String}\n    }).validator(),\n    run(toAddress) {\n        if (!Meteor.userId()) {\n            throw new Meteor.Error(401, \"not-logged-in\");\n        }\n        matsCollections.SentAddresses.upsert({address: toAddress}, {address: toAddress, userId: Meteor.userId()});\n        return false;\n    }\n});\n\n\n//  administation tool\nconst applyAuthorization = new ValidatedMethod({\n    name: 'matsMethods.applyAuthorization',\n    validate: new SimpleSchema({\n        settings: {type: Object, blackbox: true}\n    }).validator(),\n    run(settings) {\n        if (Meteor.isServer) {\n            var roles;\n            var roleName;\n            var authorization;\n\n            var userRoleName = settings.userRoleName;\n            var userRoleDescription = settings.userRoleDescription;\n            var authorizationRole = settings.authorizationRole;\n            var newUserEmail = settings.newUserEmail;\n            var existingUserEmail = settings.existingUserEmail;\n\n            if (authorizationRole) {\n                // existing role - the role roleName - no need to verify as the selection list came from the database\n                roleName = authorizationRole;\n            } else if (userRoleName && userRoleDescription) {\n                // possible new role - see if it happens to already exist\n                var role = matsCollections.Roles.findOne({name: userRoleName});\n                if (role === undefined) {\n                    // need to add new role using description\n                    matsCollections.Roles.upsert({name: userRoleName}, {$set: {description: userRoleDescription}});\n                    roleName = userRoleName;\n                } else {\n                    // see if the description matches...\n                    roleName = role.name;\n                    var description = role.description;\n                    if (description != userRoleDescription) {\n                        // have to update the description\n                        matsCollections.Roles.upsert({name: userRoleName}, {$set: {description: userRoleDescription}});\n                    }\n                }\n            }\n            // now we have a role roleName - now we need an email\n            if (existingUserEmail) {\n                // existing user -  no need to verify as the selection list came from the database\n                // see if it already has the role\n                authorization = matsCollections.Authorization.findOne({email: existingUserEmail});\n                roles = authorization.roles;\n                if (roles.indexOf(roleName) == -1) {\n                    // have to add the role\n                    if (roleName) {\n                        roles.push(roleName);\n                    }\n                    matsCollections.Authorization.upsert({email: existingUserEmail}, {$set: {roles: roles}});\n                }\n            } else if (newUserEmail) {\n                // possible new authorization - see if it happens to exist\n                authorization = matsCollections.Authorization.findOne({email: newUserEmail});\n                if (authorization !== undefined) {\n                    // authorization exists - add role to roles if necessary\n                    roles = authorization.roles;\n                    if (roles.indexOf(roleName) == -1) {\n                        // have to add the role\n                        if (roleName) {\n                            roles.push(roleName);\n                        }\n                        matsCollections.Authorization.upsert({email: existingUserEmail}, {$set: {roles: roles}});\n                    }\n                } else {\n                    // need a new authorization\n                    roles = [];\n                    if (roleName) {\n                        roles.push(roleName);\n                    }\n                    if (newUserEmail) {\n                        matsCollections.Authorization.upsert({email: newUserEmail}, {$set: {roles: roles}});\n                    }\n                }\n            }\n            return false;\n        }\n    }\n});\n\n// database controls\nconst applyDatabaseSettings = new ValidatedMethod({\n    name: 'matsMethods.applyDatabaseSettings',\n    validate: new SimpleSchema({\n        settings: {type: Object, blackbox: true}\n    }).validator(),\n\n    run(settings) {\n        if (Meteor.isServer) {\n            if (settings.name) {\n                matsCollections.Databases.upsert({name: settings.name}, {\n                    $set: {\n                        name: settings.name,\n                        role: settings.role,\n                        status: settings.status,\n                        host: settings.host,\n                        database: settings.database,\n                        user: settings.user,\n                        password: settings.password\n                    }\n                });\n            }\n            return false;\n        }\n    }\n});\n\n\n//administration tools\nconst deleteSettings = new ValidatedMethod({\n    name: 'matsMethods.deleteSettings',\n    validate: new SimpleSchema({\n        name: {\n            type: String\n        }\n    }).validator(),\n    run(params) {\n        if (!Meteor.userId()) {\n            throw new Meteor.Error(\"not-logged-in\");\n        }\n        if (Meteor.isServer) {\n            matsCollections.CurveSettings.remove({name: params.name});\n        }\n    }\n});\n\n//administration tools\nconst emailImage = new ValidatedMethod({\n    name: 'matsMethods.emailImage',\n    validate: new SimpleSchema({\n        imageStr: {type: String},\n        toAddress: {type: String},\n        subject: {type: String}\n    }).validator(),\n    run(params) {\n        var imageStr = params.imageStr;\n        var toAddress = params.toAddress;\n        var subject = params.subject;\n        if (!Meteor.userId()) {\n            throw new Meteor.Error(401, \"not-logged-in\");\n        }\n        var fromAddress = Meteor.user().services.google.email;\n        // these come from google - see\n        // http://masashi-k.blogspot.fr/2013/06/sending-mail-with-gmail-using-xoauth2.html\n        //http://stackoverflow.com/questions/24098461/nodemailer-gmail-what-exactly-is-a-refresh-token-and-how-do-i-get-one/24123550\n\n        // the gmail account for the credentials is mats.mail.daemon@gmail.com - pwd mats2015!\n        //var clientId = \"339389735380-382sf11aicmgdgn7e72p4end5gnm9sad.apps.googleusercontent.com\";\n        //var clientSecret = \"7CfNN-tRl5QAL595JTW2TkRl\";\n        //var refresh_token = \"1/PDql7FR01N2gmq5NiTfnrT-OlCYC3U67KJYYDNPeGnA\";\n        var credentials = matsCollections.Credentials.findOne({name: \"oauth_google\"}, {\n            clientId: 1,\n            clientSecret: 1,\n            refresh_token: 1\n        });\n        var clientId = credentials.clientId;\n        var clientSecret = credentials.clientSecret;\n        var refresh_token = credentials.refresh_token;\n\n        var smtpTransporter;\n        try {\n            smtpTransporter = Nodemailer.createTransport(\"SMTP\", {\n                service: \"Gmail\",\n                auth: {\n                    XOAuth2: {\n                        user: \"mats.gsd@noaa.gov\",\n                        clientId: clientId,\n                        clientSecret: clientSecret,\n                        refreshToken: refresh_token\n                    }\n                }\n            });\n\n        } catch (e) {\n            throw new Meteor.Error(401, \"Transport error \" + e.message());\n        }\n        try {\n            var mailOptions = {\n                sender: fromAddress,\n                replyTo: fromAddress,\n                from: fromAddress,\n                to: toAddress,\n                subject: subject,\n                attachments: [\n                    {\n                        filename: \"graph.png\",\n                        contents: new Buffer(imageStr.split(\"base64,\")[1], \"base64\")\n                    }\n                ]\n            };\n\n            smtpTransporter.sendMail(mailOptions, function (error, response) {\n                if (error) {\n                    console.log(\"smtpTransporter error \" + error + \" from:\" + fromAddress + \" to:\" + toAddress);\n                } else {\n                    console.log(response + \" from:\" + fromAddress + \" to:\" + toAddress);\n                }\n                smtpTransporter.close();\n            });\n        } catch (e) {\n            throw new Meteor.Error(401, \"Send error \" + e.message());\n        }\n        return false;\n    }\n});\n\n// administation tool\nconst getAuthorizations = new ValidatedMethod({\n    name: 'matsMethods.getAuthorizations',\n    validate: new SimpleSchema({}).validator(),\n    run() {\n        var roles = [];\n        if (Meteor.isServer) {\n            var userEmail = Meteor.user().services.google.email.toLowerCase();\n            roles = matsCollections.Authorization.findOne({email: userEmail}).roles;\n        }\n        return roles;\n    }\n});\n\n// administration tool\nconst getDataFunctionFileList = new ValidatedMethod({\n    name: 'matsMethods.getDataFunctionFileList',\n    validate: new SimpleSchema({}).validator(),\n    run() {\n        if (Meteor.isServer) {\n        }\n    }\n});\n\n\n// retrieves the saved query results (or downsampled results)\nconst getGraphData = new ValidatedMethod({\n    name: 'matsMethods.getGraphData',\n    validate: new SimpleSchema({\n        plotParams: {\n            type: Object,\n            blackbox: true\n        },\n        plotType: {\n            type: String\n        },\n        expireKey: {\n            type: Boolean\n        }\n    }).validator(),\n    run(params) {\n        if (Meteor.isServer) {\n            var plotGraphFunction = matsCollections.PlotGraphFunctions.findOne({plotType: params.plotType});\n            var dataFunction = plotGraphFunction.dataFunction;\n            var ret;\n            try {\n                var hash = require('object-hash');\n                var key = hash(params.plotParams);\n                if (process.env.NODE_ENV === \"development\" || params.expireKey) {\n                    matsCache.expireKey(key);\n                }\n                var results = matsCache.getResult(key);\n                if (results === undefined) {\n                    // results aren't in the cache - need to process data routine\n                    const Future = require('fibers/future');\n                    var future = new Future();\n                    global[dataFunction](params.plotParams, function (results) {\n                        ret = _saveResultData(results);\n                        future[\"return\"](ret);\n                    });\n                    return future.wait();\n                } else { // results were already in the matsCache (same params and not yet expired)\n                    // are results in the downsampled collection?\n                    var dsResults = DownSampleResults.findOne({key: key}, {}, {disableOplog: true});\n                    if (dsResults !== undefined) {\n                        // results are in the mongo cache downsampled collection - returned the downsampled graph data\n                        ret = dsResults;\n                        // update the expire time in the downsampled collection - this requires a new Date\n                        DownSampleResults.rawCollection().update({key: key}, {$set: {\"createdAt\": new Date()}});\n                    } else {\n                        ret = results;  // {key:someKey, result:resultObject}\n                        // refresh expire time. The only way to perform a refresh on matsCache is to re-save the result.\n                        matsCache.storeResult(results.key, results);\n                    }\n                    var sizeof = require('object-sizeof');\n                    console.log(\"result.data size is \", sizeof(results));\n                    return ret;\n                }\n            } catch (dataFunctionError) {\n                if (dataFunctionError.toLocaleString().indexOf(\"INFO:\") !== -1) {\n                    throw new Meteor.Error(dataFunctionError.message);\n                } else {\n                    throw new Meteor.Error(\"Error in getGraphData function:\" + dataFunction + \" : \" + dataFunctionError.message);\n                }\n            }\n            return undefined; // probably won't get here\n        }\n    }\n});\n\n// retrieves the saved query results (or downsampled results) for a specific key\nconst getGraphDataByKey = new ValidatedMethod({\n    name: 'matsMethods.getGraphDataByKey',\n    validate: new SimpleSchema({\n        resultKey: {\n            type: String\n        }\n    }).validator(),\n    run(params) {\n        if (Meteor.isServer) {\n            var ret;\n            var key = params.resultKey;\n            try {\n                var dsResults = DownSampleResults.findOne({key: key}, {}, {disableOplog: true});\n                if (dsResults !== undefined) {\n                    ret = dsResults;\n                } else {\n                    ret = matsCache.getResult(key); // {key:someKey, result:resultObject}\n                }\n                var sizeof = require('object-sizeof');\n                console.log(\"getGraphDataByKey results size is \", sizeof(dsResults));\n                return ret;\n            } catch (error) {\n                throw new Meteor.Error(\"Error in getGraphDataByKey function:\" + key + \" : \" + error.message);\n            }\n            return undefined;\n        }\n    }\n});\n\n// administration tool\nconst getGraphFunctionFileList = new ValidatedMethod({\n    name: 'matsMethods.getGraphFunctionFileList',\n    validate: new SimpleSchema({}).validator(),\n    run() {\n        if (Meteor.isServer) {\n        }\n    }\n});\n\nconst getLayout = new ValidatedMethod({\n    name: 'matsMethods.getLayout',\n    validate: new SimpleSchema({\n        resultKey: {\n            type: String\n        }\n    }).validator(),\n    run(params) {\n        if (Meteor.isServer) {\n            var ret;\n            var key = params.resultKey;\n            try {\n                ret = LayoutStoreCollection.rawCollection().findOne({key: key});\n                return ret;\n            } catch (error) {\n                throw new Meteor.Error(\"Error in getLayout function:\" + key + \" : \" + error.message);\n            }\n            return undefined;\n        }\n    }\n});\n\n// retrieves the saved artifacts (file urls) that were generated by nvBatch for a specific key\nconst getMvArtifactsByKey = new ValidatedMethod({\n    name: 'matsMethods.getMvArtifactsByKey',\n    validate: new SimpleSchema({\n        key: {\n            type: String\n        }\n    }).validator(),\n    run(params) {\n        if (Meteor.isServer) {\n            var ret;\n            var key = params.key;\n            try {\n                ret = matsCache.getResult(key); // {key:someKey, result:resultObject}\n                return ret;\n            } catch (error) {\n                throw new Meteor.Error(\"Error in getMvArtifactsByKey function:\" + key + \" : \" + error.message);\n            }\n            return undefined;\n        }\n    }\n});\n\n/*\ngetPlotResult is used by the graph/text_*_output templates which are used to display textual results.\nBecause the data isn't being rendered graphically this data is always full size, i.e. NOT downsampled.\nThat is why it only finds it in the Result file cache, never the DownSampleResult collection.\n\nBecause the dataset can be so large ... e.g. megabytes the data retrieval is pagenated. The index is\napplied to the underlying datasets.The data gets stripped down and flattened to only contain the data neccesary for text presentation.\nA new page index of -1000 means get all the data i.e. no pagenation.\n */\nconst getPlotResult = new ValidatedMethod({\n    name: 'matsMethods.getPlotResult',\n    validate: new SimpleSchema({\n        resultKey: {type: String},\n        pageIndex: {type: Number},\n        newPageIndex: {type: Number}\n    }).validator(),\n    run(params) {\n        if (Meteor.isServer) {\n            var rKey = params.resultKey;\n            var pi = params.pageIndex;\n            var npi = params.newPageIndex;\n            var ret = {};\n            try {\n                ret = _getFlattenedResultData(rKey, pi, npi);\n            } catch (e) {\n                console.log(e);\n            }\n            return ret;\n        }\n    }\n});\n\n\nconst getReleaseNotes = new ValidatedMethod({\n    name: 'matsMethods.getReleaseNotes',\n    validate: new SimpleSchema({}).validator(),\n    run() {\n        //     return Assets.getText('public/MATSReleaseNotes.html');\n        // }\n        if (Meteor.isServer) {\n            var future = require('fibers/future');\n            var fse = require('fs-extra');\n            var dFuture = new future();\n            var fData;\n            console.log(process.env.PWD);\n            var file;\n            if (process.env.NODE_ENV === \"development\") {\n                file = process.env.PWD + \"/../../meteor_packages/mats-common/public/MATSReleaseNotes.html\";\n            } else {\n                file = process.env.PWD + \"/programs/server/assets/packages/randyp_mats-common/public/MATSReleaseNotes.html\";\n            }\n            try {\n                fse.readFile(file, 'utf8', function (err, data) {\n                    if (err) {\n                        fData = err.message;\n                        dFuture[\"return\"]();\n                    } else {\n                        fData = data;\n                        dFuture[\"return\"]();\n                    }\n                });\n            } catch (e) {\n                fData = e.message;\n                dFuture[\"return\"]();\n            }\n            dFuture.wait();\n            return fData;\n        }\n    }\n});\n\n\n// administration tool\nconst getUserAddress = new ValidatedMethod({\n    name: 'matsMethods.getUserAddress',\n    validate: new SimpleSchema({}).validator(),\n    run() {\n        if (Meteor.isServer) {\n            return Meteor.user().services.google.email.toLowerCase();\n        }\n    }\n});\n\n// app utility\nconst insertColor = new ValidatedMethod({\n    name: 'matsMethods.insertColor',\n    validate: new SimpleSchema({\n        newColor: {type: String},\n        insertAfterIndex: {type: Number}\n    }).validator(),\n    run(params) {\n        if (params.newColor == \"rgb(255,255,255)\") {\n            return false;\n        }\n        var colorScheme = matsCollections.ColorScheme.findOne({});\n        colorScheme.colors.splice(params.insertAfterIndex, 0, newColor);\n        matsCollections.update({}, colorScheme);\n        return false;\n    }\n});\n\n\n// checks to see if the mv artifacts are cached (based on plotspec hash) if not execs an mvbatch and caches the results\nconst mvBatch = new ValidatedMethod({\n    name: 'matsMethods.mvBatch',\n    validate: new SimpleSchema({\n        plotParams: {\n            type: Object,\n            blackbox: true\n        },\n        plotType: {\n            type: String\n        }\n    }).validator(),\n    run(params) {\n        if (Meteor.isServer) {\n            var mvbatch = MV_DIRS.HOME + \"/bin/mv_batch.sh\";\n            var plotGraphFunction = matsCollections.PlotGraphFunctions.findOne({plotType: params.plotType});\n            var plotSpecFunction = plotGraphFunction.plotSpecFunction;\n            var ret;\n            const appName = matsCollections.appName.findOne({}).app;\n            const fse = require('fs-extra');\n            // generate the key from the params\n            const hash = require('object-hash');\n            const key = hash(params.plotParams);\n            // generate the server router (Picker) urls according to the hash key.\n            var artifacts = {};\n            if (process.env.NODE_ENV === \"development\") {\n                artifacts = {\n                    png: appName + \"/mvplot/\" + key,\n                    xml: appName + \"/mvxml/\" + key,\n                    sql: appName + \"/mvsql/\" + key,\n                    log: appName + \"/mvlog/\" + key,\n                    err: appName + \"/mverr/\" + key,\n                    R: appName + \"/mvscript/\" + key,\n                    data: appName + \"/mvdata/\" + key,\n                    points1: appName + \"/mvpoints1/\" + key,\n                    points2: appName + \"/mvpoints2/\" + key,\n                };\n            } else {\n                // in production the appName is already at the end of the location.href\n                // - which is used to form a url for retrieving the artifact\n                artifacts = {\n                    png: \"/mvplot/\" + key,\n                    xml: \"/mvxml/\" + key,\n                    sql: \"/mvsql/\" + key,\n                    log: \"/mvlog/\" + key,\n                    err: \"/mverr/\" + key,\n                    R: \"/mvscript/\" + key,\n                    data: \"/mvdata/\" + key,\n                    points1: \"/mvpoints1/\" + key,\n                    points2: \"/mvpoints2/\" + key,\n                };\n            }\n            // generate the real file paths (these are not exposed to clients)\n            const plotSpecFilePath = MV_DIRS.XMLDIR + key + \".xml\";\n            const pngFilePath = MV_DIRS.PLOTSDIR + key + \".png\";\n            const sqlFilePath = MV_DIRS.SQLDIR + key + \".sql\";\n            const logFilePath = MV_DIRS.LOGDIR + key + \".log\";\n            const errFilePath = MV_DIRS.ERRDIR + key + \".err\";\n            const scriptFilePath = MV_DIRS.SCRIPTSDIR + key + \".R\";\n            const dataFilePath = MV_DIRS.DATADIR + key + \".data\";\n            const points1Path = MV_DIRS.DATADIR + key + \".points1\";\n            const points2Path = MV_DIRS.DATADIR + key + \".points2\";\n            // NOTE: the plotParams should include an mvPlot:true parameter.\n            // This should have been set in the caller. This makes the mv plotSpec cache entry unique from a MATS plot\n            if (params.plotParams.mvPlot !== true) {\n                throw new Meteor.Error(\"Error in mvBatch: Not an mv plot request: no plotParams.mvPlot:true\");\n            }\n            if (process.env.NODE_ENV === \"development\" || params.expireKey) {\n                matsCache.expireKey(key);\n                // in development just blow away the files too\n                try {\n                    fse.unlinkSync(plotSpecFilePath);\n                } catch (ignore){}\n                try {\n                    fse.unlinkSync(pngFilePath);\n                } catch (ignore){}\n                try {\n                    fse.unlinkSync(sqlFilePath);\n                } catch (ignore){}\n                try {\n                    fse.unlinkSync(logFilePath);\n                } catch (ignore){}\n                try {\n                    fse.unlinkSync(errFilePath);\n                } catch (ignore){}\n                try {\n                    fse.unlinkSync(scriptFilePath);\n                } catch (ignore){}\n                try {\n                    fse.unlinkSync(dataFilePath);\n                } catch (ignore){}\n                try {\n                    fse.unlinkSync(points1Path);\n                } catch (ignore){}\n                try {\n                    fse.unlinkSync(points2Path);\n                } catch (ignore){}\n            }\n            // try to get the key from the cache\n            var artifactPaths = matsCache.getResult(key);\n            var filesExist = false;\n            if (artifactPaths != null) {\n                // artifact paths were already cached\n                // do the files exist?\n                // check for file existence\n                var xmlSpecExists = fse.existsSync(plotSpecFilePath);\n                var plotExists = fse.existsSync(pngFilePath);\n                var scriptExists = fse.existsSync(scriptFilePath);\n                var dataExists = fse.existsSync(dataFilePath);\n                var sqlExists = fse.existsSync(sqlFilePath);\n                var logExists = fse.existsSync(logFilePath);\n                filesExist = xmlSpecExists && plotExists && scriptExists && dataExists && sqlExists && logExists;\n            }\n            // either the artifacts were cached but the files don't exist or the artifacts were not cached\n            if (artifactPaths == null || filesExist === false) {\n                // artifactPaths are not in the cache - or the files are not there - need to process plotSpecFunction routine\n                // translate the plotparams to a plotSpec and use the key in the plotSpec reference\n                global[plotSpecFunction](params.plotParams, key, function (err, plotSpec) {\n                    // callback\n                    if (err) {\n                        console.log(err, \"plotspecFunction:\", plotSpecFunction);\n                        throw new Meteor.Error(err + \"plotspecFunction: \" + plotSpecFunction);\n                    } else {\n\n                        // no error and we have a plot spec\n                        // see if the artifacts exist as files. They might have been run before and are still hanging around.\n                        // NOTE: the MV_OUTPUT aren't cached at all (i.e. no expiration) -\n                        // therefore the expiration of the MATS cache plotSpec and the actual artifacts is sloppy.\n\n                        // check for file existence\n                        var xmlSpecExists = fse.existsSync(plotSpecFilePath);\n                        var plotExists = fse.existsSync(pngFilePath);\n                        var scriptExists = fse.existsSync(scriptFilePath);\n                        var dataExists = fse.existsSync(dataFilePath);\n                        var sqlExists = fse.existsSync(sqlFilePath);\n                        var logExists = fse.existsSync(logFilePath);\n                        var filesExist = xmlSpecExists && plotExists && scriptExists && dataExists && sqlExists && logExists;\n                        if (!filesExist) {\n                            const mvBatchCmd = MV_DIRS.HOME + \"/bin/mv_batch.sh \" + ' ' + plotSpecFilePath;\n                            const cp = require('child_process');\n                            // save the plotSpec\n                            fse.outputFileSync(plotSpecFilePath, plotSpec);\n                            // exec mv batch with this plotSpec - this should be synchronous\n                            cp.execSync(mvBatchCmd, (error, stdout, stderr) => {\n                                if (stderr) {\n                                    fse.outputFileSync(errFilePath, stderr, function (err) {\n                                        if (err) {\n                                            console.log(\"Error:couldn't write error file\" + err); //null\n                                        }\n                                    });\n                                } else {\n                                    fse.outputFileSync(errFilePath, \"no stderr for key: \" + key, function (err) {\n                                        if (err) {\n                                            console.log(\"Error:couldn't write error file\" + err); //null\n                                        }\n                                    });\n                                }\n                                if (stdout) {\n                                    if (stdout.match(/ERROR/)) {\n                                        fse.outputFileSync(errFilePath, stdout, function (err) {\n                                            if (err) {\n                                                console.log(\"Error:couldn't write log/err file\" + err);\n                                            }\n                                        });\n                                    }\n                                    fse.outputFileSync(logFilePath, stdout, function (err) {\n                                        if (err) {\n                                            console.log(\"Error:couldn't write log file\" + err);\n                                        }\n                                    });\n                                    var sqlout = stdout.match(/[\\s\\S]*#*(SELECT[\\s\\S]*)Database/) == null ? null : stdout.match(/[\\s\\S]*#*(SELECT[\\s\\S]*)Database/)[1];\n                                    if (sqlout == null) {\n                                        fse.outputFileSync(sqlFilePath, \"no sql statement found in output for key: \" + key, function (err) {\n                                            if (err) {\n                                                console.log(\"Error:couldn't write sql file\" + err);\n                                            }\n                                        });\n                                    } else {\n                                        fse.outputFileSync(sqlFilePath, sqlout, function (err) {\n                                            if (err) {\n                                                console.log(\"Error:couldn't write sql file\" + err);\n                                            }\n                                        });\n                                    }\n                                } else {\n                                    fse.outputFileSync(logFilePath, \"No stdout captured for: \" + key, function (err) {\n                                        if (err) {\n                                            console.log(\"Error:couldn't write log file\" + err);\n                                        }\n                                    });\n                                }\n\n                                // no error - check for the files and cache the spec and filePaths\n                                var xmlSpecExists = fse.existsSync(plotSpecFilePath);\n                                var plotExists = fse.existsSync(pngFilePath);\n                                var scriptExists = fse.existsSync(scriptFilePath);\n                                var dataExists = fse.existsSync(dataFilePath);\n                                var sqlExists = fse.existsSync(sqlFilePath);\n                                var logExists = fse.existsSync(logFilePath);\n                                var filesExist = xmlSpecExists && plotExists && scriptExists && dataExists && sqlExists && logExists;\n                                if (!filesExist) {\n                                    console.error('exec error: expected files do not exist');\n                                }\n                                matsCache.storeResult(key, artifacts);\n                                /*\n                                    The mvbatch should have saved the plot artifacts according to the following plotSpec elements\n                                        <data_file>key.data</data_file>\n                                        <plot_file>key.png</plot_file>\n                                        <r_file>key.R</r_file>\n                                    where key is the same as the key for the matsCache\n                                    The stored artifacts shoulkd be like ...\n                                        MV_OUTPUT/plots/key.png\n                                        MV_OUTPUT/xml/key.xml\n                                        MV_OUTPUT/xml/key.sql\n                                        MV_OUTPUT/xml/key.log\n                                        MV_OUTPUT/scripts/key.R\n                                        MV_OUTPUT/data/key.data\n                                        MV_OUTPUT/data/key.sum_stat.info\n                                        MV_OUTPUT/data/key.data.sum_stat\n\n                                        MV_OUTPUT/xml/key.xml is the plotSpec\n                                */\n                                return {'key': key, 'artifacts':artifacts};\n                            }); //ret = {key:key, result:{artifacts:artifacts}}\n                            // return the key and the artifacts\n                        }  // plotspec did not exist\n                        else {\n                            // the files actually already existed but we needed the plotspec\n                            // so just refresh the cache and return the key right away\n                            matsCache.storeResult(key, artifacts);\n                            return {'key': key, 'artifacts':artifacts};\n                        }\n                    }\n                });\n            } // either artifactPaths == null || filesExist === false\n            else {\n                // artifacts existed and plotspec existed - refresh the cache\n                matsCache.storeResult(key, artifacts);\n                return {'key': key, 'artifacts':artifacts};\n            }\n            return {'key': key, 'artifacts':artifacts};\n        } // if Meteor is Server\n    } // run\n});\n\n// administration tool\nconst readFunctionFile = new ValidatedMethod({\n    name: 'matsMethods.readFunctionFile',\n    validate: new SimpleSchema({}).validator(),\n    run() {\n        if (Meteor.isServer) {\n            var future = require('fibers/future');\n            var fse = require('fs-extra');\n            var path = \"\";\n            var fData;\n            if (type == \"data\") {\n                path = \"/web/static/dataFunctions/\" + file;\n                console.log('exporting data file: ' + path);\n            } else if (type == \"graph\") {\n                path = \"/web/static/displayFunctions/\" + file;\n                console.log('exporting graph file: ' + path);\n            } else {\n                return (\"error - wrong type\");\n            }\n            fse.readFile(path, function (err, data) {\n                if (err) throw err;\n                fData = data.toString();\n                future[\"return\"](fData);\n            });\n            return future.wait();\n        }\n    }\n});\n\n// refreshes the metadata for the app that's running\nconst refreshMetaData = new ValidatedMethod({\n    name: 'matsMethods.refreshMetaData',\n    validate: new SimpleSchema({}).validator(),\n    run() {\n        if (Meteor.isServer) {\n            try {\n                //console.log(\"Asked to refresh metadata\");\n                _checkMetaDataRefresh();\n            } catch (e) {\n                console.log(e);\n                throw new Meteor.Error(\"Server error: \", e.message);\n            }\n        }\n        return metaDataTableUpdates.find({}).fetch();\n    }\n});\n\n// administation tool\nconst removeAuthorization = new ValidatedMethod({\n    name: 'matsMethods.removeAuthorization',\n    validate: new SimpleSchema({\n        settings: {type: Object, blackbox: true}\n    }).validator(),\n    run(settings) {\n        if (Meteor.isServer) {\n            var email;\n            var roleName;\n            var userRoleName = settings.userRoleName;\n            var authorizationRole = settings.authorizationRole;\n            var newUserEmail = settings.newUserEmail;\n            var existingUserEmail = settings.existingUserEmail;\n            if (authorizationRole) {\n                // existing role - the role roleName - no need to verify as the selection list came from the database\n                roleName = authorizationRole;\n            } else if (userRoleName) {\n                roleName = userRoleName;\n            }\n            if (existingUserEmail) {\n                email = existingUserEmail;\n            } else {\n                email = newUserEmail;\n            }\n\n            // if user and role remove the role from the user\n            if (email && roleName) {\n                matsCollections.Authorization.update({email: email}, {$pull: {roles: roleName}});\n            }\n            // if user and no role remove the user\n            if (email && !roleName) {\n                matsCollections.Authorization.remove({email: email});\n            }\n            // if role and no user remove role and remove role from all users\n            if (roleName && !email) {\n                // remove the role\n                matsCollections.Roles.remove({name: roleName});\n                // remove the roleName role from all the authorizations\n                matsCollections.Authorization.update({roles: roleName}, {$pull: {roles: roleName}}, {multi: true});\n            }\n            return false;\n        }\n    }\n});\n\n// app utility\nconst removeColor = new ValidatedMethod({\n    name: 'matsMethods.removeColor',\n    validate: new SimpleSchema({\n        removeColor: {type: String}\n    }).validator(),\n    run(removeColor) {\n        var colorScheme = matsCollections.ColorScheme.findOne({});\n        var removeIndex = colorScheme.colors.indexOf(removeColor);\n        colorScheme.colors.splice(removeIndex, 1);\n        matsCollections.ColorScheme.update({}, colorScheme);\n        return false;\n    }\n});\n\n// database controls\nconst removeDatabase = new ValidatedMethod({\n    name: 'matsMethods.removeDatabase',\n    validate: new SimpleSchema({\n        dbName: {type: String}\n    }).validator(),\n    run(dbName) {\n        if (Meteor.isServer) {\n            matsCollections.Databases.remove({name: dbName});\n        }\n    }\n});\n\n// makes sure all of the parameters display appropriate selections in relation to one another\nconst resetApp = function (appRef) {\n    var fse = require('fs-extra');\n    const metaDataTableRecords = appRef.appMdr;\n    const type = appRef.appType;\n    const appName = appRef.app;\n    var dep_env = process.env.NODE_ENV;\n    // set some defaults for python processing - these can be overridden\n    if (Meteor.settings.private != null && Meteor.settings.private.PYTHON_PATH == null) {\n        Meteor.settings.private.PYTHON_PATH = \"/usr/bin/python\";\n    }\n\n    if (Meteor.settings.private != null && Meteor.settings.private.process != null && Meteor.settings.private.process.RUN_ENV != null) {\n        switch (Meteor.settings.private.process.RUN_ENV) {\n            case \"development\":\n            case \"integration\":\n            case \"production\":\n                dep_env = Meteor.settings.private.process.RUN_ENV;\n                break;\n            default:\n                dep_env = process.env.NODE_ENV;\n               break;\n        }\n    }\n    var deployment;\n    var deploymentText = Assets.getText('public/deployment/deployment.json');\n    if (deploymentText == null) {  // equivilent to deploymentText === null || deploymentText === undefined\n    }\n    deployment = JSON.parse(deploymentText);\n    var app = {};\n    for (var ai = 0; ai < deployment.length; ai++) {\n        var dep = deployment[ai];\n        if (dep.deployment_environment == dep_env) {\n            app = dep.apps.filter(function (app) {\n                return app.app === appName;\n            })[0];\n        }\n    }\n    const appVersion = app ? app.version : \"unknown\";\n    const appTitle = app ? app.title : \"unknown\";\n    const buildDate = app ? app.buildDate : \"unknown\";\n    const appType = type ? type : matsTypes.AppTypes.mats;\n    matsCollections.appName.upsert({app:appName},{$set:{app:appName}});\n\n    // remember that we updated the metadata tables just now - create metaDataTableUpdates\n    /*\n        metaDataTableUpdates:\n        {\n            name: dataBaseName,\n            tables: [tableName1, tableName2 ..],\n            lastRefreshed : timestamp\n        }\n     */\n    // only create metadata tables if the resetApp was called with a real metaDataTables object\n    if (metaDataTableRecords instanceof matsTypes.MetaDataDBRecord) {\n        var metaDataTables = metaDataTableRecords.getRecords();\n        for (var mdti = 0; mdti < metaDataTables.length; mdti++) {\n            const metaDataRef = metaDataTables[mdti];\n            metaDataRef.lastRefreshed = moment().format();\n            if (metaDataTableUpdates.find({name: metaDataRef.name}).count() == 0) {\n                metaDataTableUpdates.update({name: metaDataRef.name}, metaDataRef, {upsert: true});\n            }\n        }\n    } else {\n        throw new Meteor.Error(\"Server error: \", \"resetApp: bad pool-database entry\");\n    }\n\n    matsCollections.Roles.remove({});\n    matsDataUtils.doRoles();\n    matsCollections.Authorization.remove({});\n    matsDataUtils.doAuthorization();\n    matsCollections.Credentials.remove({});\n    matsDataUtils.doCredentials();\n    matsCollections.PlotGraphFunctions.remove({});\n    matsCollections.ColorScheme.remove({});\n    matsDataUtils.doColorScheme();\n    matsCollections.Settings.remove({});\n    matsDataUtils.doSettings(appTitle, appVersion, buildDate, appType);\n    matsCollections.CurveParams.remove({});\n    matsCollections.PlotParams.remove({});\n    matsCollections.CurveTextPatterns.remove({});\n// app specific routines\n    //const asrKeys = Object.keys(appSpecificResetRoutines);\n    const asrKeys = appSpecificResetRoutines;\n    for (var ai = 0; ai < asrKeys.length; ai++) {\n        global.appSpecificResetRoutines[ai]();\n    }\n    matsCache.clear();\n};\n\n// administration tool\nconst restoreFromFile = new ValidatedMethod({\n    name: 'matsMethods.restoreFromFile',\n    validate: new SimpleSchema({\n        type: {type: String},\n        name: {type: String},\n        data: {type: Object, blackbox: true}\n    }).validator(),\n\n    run(params) {\n        if (Meteor.isServer) {\n            console.log(\"restoring \" + params.type + \" file \" + params.name);\n            var path = \"\";\n            if (params.type == \"data\") {\n                path = \"/web/static/dataFunctions/\" + params.name;\n            } else if (params.ype == \"graph\") {\n                path = \"/web/static/displayFunctions/\" + params.name;\n            } else {\n                return (\"error - wrong tyoe\");\n            }\n            console.log('importing ' + params.type + ' file: ' + path);\n            var fse = require('fs-extra');\n            fse.writeFile(path, params.data.toString(), function (err) {\n                if (err) {\n                    return (err.toLocaleString());\n                }\n                console.log('imported ' + params.type + ' file: ' + path);\n            });\n        }\n    }\n});\n\n// administration tool\nconst restoreFromParameterFile = new ValidatedMethod({\n    name: 'matsMethods.restoreFromParameterFile',\n    validate: new SimpleSchema({\n        name: {type: String},\n        data: {type: Object, blackbox: true}\n    }).validator(),\n    run(params) {\n        var data = params.data;\n        if (Meteor.isServer) {\n            var d = [];\n            if (data.CurveParams) {\n                matsCollections.CurveParams.remove({});\n                d = _.map(data.CurveParams, function (o) {\n                    return _.omit(o, '_id');\n                });\n                d.forEach(function (o) {\n                    matsCollections.CurveParams.insert(o);\n                });\n            }\n            if (data.PlotParams) {\n                matsCollections.PlotParams.remove({});\n                d = _.map(data.PlotParams, function (o) {\n                    return _.omit(o, '_id');\n                });\n                d.forEach(function (o) {\n                    matsCollections.PlotParams.insert(o);\n                });\n            }\n            if (data.PlotGraphFunctions) {\n                matsCollections.PlotGraphFunctions.remove({});\n                d = _.map(data.PlotGraphFunctions, function (o) {\n                    return _.omit(o, '_id');\n                });\n                d.forEach(function (o) {\n                    matsCollections.PlotGraphFunctions.insert(o);\n                });\n            }\n            if (data.Settings) {\n                matsCollections.Settings.remove({});\n                d = _.map(data.Settings, function (o) {\n                    return _.omit(o, '_id');\n                });\n                d.forEach(function (o) {\n                    matsCollections.Settings.insert(o);\n                });\n            }\n            if (data.ColorScheme) {\n                matsCollections.ColorScheme.remove({});\n                d = _.map(data.ColorScheme, function (o) {\n                    return _.omit(o, '_id');\n                });\n                d.forEach(function (o) {\n                    matsCollections.ColorScheme.insert(o);\n                });\n            }\n            if (data.Authorization) {\n                matsCollections.Authorization.remove({});\n                d = _.map(data.Authorization, function (o) {\n                    return _.omit(o, '_id');\n                });\n                d.forEach(function (o) {\n                    matsCollections.Authorization.insert(o);\n                });\n            }\n            if (data.Roles) {\n                matsCollections.Roles.remove({});\n                d = _.map(data.Roles, function (o) {\n                    return _.omit(o, '_id');\n                });\n                d.forEach(function (o) {\n                    matsCollections.Roles.insert(o);\n                });\n            }\n            if (data.Databases) {\n                matsCollections.Databases.remove({});\n                d = _.map(data.Databases, function (o) {\n                    return _.omit(o, '_id');\n                });\n                d.forEach(function (o) {\n                    matsCollections.Databases.insert(o);\n                });\n            }\n            if (data.Credentials) {\n                matsCollections.Credentials.remove({});\n                d = _.map(data.Credentials, function (o) {\n                    return _.omit(o, '_id');\n                });\n                d.forEach(function (o) {\n                    matsCollections.Credentials.insert(o);\n                });\n            }\n        }\n    }\n});\n\nconst saveLayout = new ValidatedMethod({\n    name: 'matsMethods.saveLayout',\n    validate: new SimpleSchema({\n        resultKey: {\n            type: String\n        },\n        layout: {\n            type: Object, blackbox: true\n        },\n        curveOpsUpdate: {\n            type: Object, blackbox: true\n        }\n    }).validator(),\n    run(params) {\n        if (Meteor.isServer) {\n            var key = params.resultKey;\n            var layout = params.layout;\n            var curveOpsUpdate = params.curveOpsUpdate;\n            try {\n                LayoutStoreCollection.upsert({key: key}, {$set: {\"createdAt\": new Date(), layout: layout, curveOpsUpdate: curveOpsUpdate}});\n            } catch (error) {\n                throw new Meteor.Error(\"Error in saveLayout function:\" + key + \" : \" + error.message);\n            }\n        }\n    }\n});\n\n//administration tools\nconst saveSettings = new ValidatedMethod({\n    name: 'matsMethods.saveSettings',\n    validate: new SimpleSchema({\n        saveAs: {\n            type: String\n        },\n        p: {\n            type: Object,\n            blackbox: true\n        },\n        permission: {\n            type: String\n        }\n    }).validator(),\n    run(params) {\n        var user = \"anonymous\";\n        matsCollections.CurveSettings.upsert({name: params.saveAs}, {\n            created: moment().format(\"MM/DD/YYYY HH:mm:ss\"),\n            name: params.saveAs,\n            data: params.p,\n            owner: Meteor.userId() == null ? \"anonymous\" : Meteor.userId(),\n            permission: params.permission,\n            savedAt: new Date(),\n            savedBy: Meteor.user() == null ? \"anonymous\" : user\n        });\n    }\n});\n\n// administation tool\nconst setCredentials = new ValidatedMethod({\n    name: 'matsMethods.setCredentials',\n    validate: new SimpleSchema({\n        settings: {type: Object, blackbox: true}\n    }).validator(),\n    run(settings) {\n        if (Meteor.isServer) {\n            var name = settings.name;\n            var clientId = settings.clientId;\n            var clientSecret = settings.clientSecret;\n            var clientRefreshToken = settings.clientRefreshToken;\n            matsCollections.Credentials.update({}, {\n                $set: {\n                    name: name,\n                    clientId: clientId,\n                    clientSecret: clientSecret,\n                    refresh_token: clientRefreshToken\n                }\n            });\n            return false;\n        }\n    }\n});\n\nconst setSettings = new ValidatedMethod({\n    name: 'matsMethods.setSettings',\n    validate: new SimpleSchema({\n        settings: {type: Object, blackbox: true}\n    }).validator(),\n    run(params) {\n        if (Meteor.isServer) {\n            var settings = params.settings;\n            var labelPrefix = settings.labelPrefix;\n            var title = settings.title;\n            var lineWidth = settings.lineWidth;\n            var nullFillString = settings.nullFillString;\n            var resetFromCode = settings.resetFromCode;\n            matsCollections.Settings.update({}, {\n                $set: {\n                    LabelPrefix: labelPrefix,\n                    Title: title,\n                    LineWidth: lineWidth,\n                    NullFillString: nullFillString,\n                    resetFromCode: resetFromCode\n                }\n            });\n        }\n        return false;\n    }\n});\n\n\n/* test methods */\n\nconst testGetMetaDataTableUpdates = new ValidatedMethod({\n    name: 'matsMethods.testGetMetaDataTableUpdates',\n    validate: new SimpleSchema({}).validator(),\n    run() {\n        return metaDataTableUpdates.find({}).fetch();\n    }\n});\n\nconst testGetTables = new ValidatedMethod({\n    name: 'matsMethods.testGetTables',\n    validate: new SimpleSchema(\n        {\n            host: {type: String},\n            user: {type: String},\n            password: {type: String},\n            database: {type: String}\n        }).validator(),\n    run(params) {\n        if (Meteor.isServer) {\n            const Future = require('fibers/future');\n            const queryWrap = Future.wrap(function (callback) {\n                const connection = mysql.createConnection({\n                    host: params.host,\n                    user: params.user,\n                    password: params.password,\n                    database: params.database\n                });\n                connection.query(\"show tables;\", function (err, result) {\n                    const tables = result.map(function (a) {\n                        return a.Tables_in_ruc_ua_sums2;\n                    });\n                    return callback(err, tables);\n                });\n                connection.end(function (err) {\n                    if (err) {\n                        console.log(\"testGetTables cannot end connection\");\n                    }\n                });\n            });\n            return queryWrap().wait();\n        }\n    }\n});\n\nconst testSetMetaDataTableUpdatesLastRefreshedBack = new ValidatedMethod({\n    name: 'matsMethods.testSetMetaDataTableUpdatesLastRefreshedBack',\n    validate: new SimpleSchema({}).validator(),\n    run() {\n        var mtu = metaDataTableUpdates.find({}).fetch();\n        var id = mtu[0]._id;\n        metaDataTableUpdates.update({_id: id}, {$set: {lastRefreshed: 0}});\n        return metaDataTableUpdates.find({}).fetch();\n    }\n});\n\nexport default matsMethods = {\n    addSentAddress: addSentAddress,\n    applyAuthorization: applyAuthorization,\n    applyDatabaseSettings: applyDatabaseSettings,\n    deleteSettings: deleteSettings,\n    emailImage: emailImage,\n    getAuthorizations: getAuthorizations,\n    getDataFunctionFileList: getDataFunctionFileList,\n    getGraphData: getGraphData,\n    getGraphDataByKey: getGraphDataByKey,\n    getGraphFunctionFileList: getGraphFunctionFileList,\n    getLayout: getLayout,\n    getMvArtifactsByKey:getMvArtifactsByKey,\n    getPlotResult: getPlotResult,\n    getReleaseNotes: getReleaseNotes,\n    getUserAddress: getUserAddress,\n    insertColor: insertColor,\n    mvBatch: mvBatch,\n    readFunctionFile: readFunctionFile,\n    refreshMetaData: refreshMetaData,\n    removeAuthorization: removeAuthorization,\n    removeColor: removeColor,\n    removeDatabase: removeDatabase,\n    resetApp: resetApp,\n    restoreFromFile: restoreFromFile,\n    restoreFromParameterFile: restoreFromParameterFile,\n    saveLayout: saveLayout,\n    saveSettings: saveSettings,\n    setCredentials: setCredentials,\n    setSettings: setSettings,\n    testGetMetaDataTableUpdates: testGetMetaDataTableUpdates,\n    testGetTables: testGetTables,\n    testSetMetaDataTableUpdatesLastRefreshedBack: testSetMetaDataTableUpdatesLastRefreshedBack,\n    MV_DIRS: MV_DIRS\n};\n"]},"sourceType":"script","hash":"c3418d75e35baa4784624d1dc621ce6503df6dd9"}
