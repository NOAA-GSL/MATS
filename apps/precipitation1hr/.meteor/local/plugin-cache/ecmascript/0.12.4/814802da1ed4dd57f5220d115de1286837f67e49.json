{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/lib/param_util.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/randyp:mats-common/lib/param_util.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/lib/param_util.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/lib/param_util.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/randyp:mats-common/lib/param_util.js"}},"code":"let matsTypes;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsTypes(v) {\n    matsTypes = v;\n  }\n\n}, 0);\nlet matsCollections;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsCollections(v) {\n    matsCollections = v;\n  }\n\n}, 1);\nlet matsCurveUtils;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsCurveUtils(v) {\n    matsCurveUtils = v;\n  }\n\n}, 2);\nlet matsPlotUtils;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsPlotUtils(v) {\n    matsPlotUtils = v;\n  }\n\n}, 3);\nlet moment;\nmodule.link(\"meteor/momentjs:moment\", {\n  moment(v) {\n    moment = v;\n  }\n\n}, 4);\n\n// get the document id for the control button element that corresponds to the param name\nconst getControlButtonIdForParamName = function (paramName) {\n  // scatter axis don't really exist in matsCollections.CurveParams but they are elements\n  const pname = paramName.replace(/^.axis-/, '');\n  const param = matsCollections.CurveParams.findOne({\n    name: pname\n  });\n\n  if (param !== undefined) {\n    const id = \"controlButton-\" + param.name;\n    return id;\n  }\n}; // get the control Button Element that corresponds to the param name\n\n\nconst getControlElementForParamName = function (paramName) {\n  // scatter axis don't really exist in matsCollections.CurveParams but they are elements\n  const pname = paramName.replace(/^.axis-/, '');\n  return document.getElementById(getControlButtonIdForParamName(pname));\n}; // get the document element that corresponds to the param name\n\n\nconst getValueElementForParamName = function (paramName) {\n  // scatter axis don't really exist in matsCollections.CurveParams but they are elements\n  const pname = paramName.replace(/^.axis-/, '');\n  const val = getValueIdForParamName(pname);\n  return document.getElementById(val);\n}; // get the current selected value in the document element that corresponds to the param name\n// Note that the value should be reflected in the adjoining control button value textContent.\n\n\nconst getValueForParamName = function (paramName) {\n  try {\n    const elem = getValueElementForParamName(paramName);\n    return getValueElementForParamName(paramName).textContent.trim();\n  } catch (error) {\n    return undefined;\n  }\n}; // get the VALUE BOX id for the element that corresponds to the param name\n\n\nconst getValueIdForParamName = function (paramName) {\n  // scatter axis don't really exist in matsCollections.CurveParams but they are elements\n  const pname = paramName.replace(/^.axis-/, '');\n  return \"controlButton-\" + pname + \"-value\";\n}; // set the VALUE BOX text for the element that corresponds to the param name\n\n\nconst setValueTextForParamName = function (paramName, text) {\n  try {\n    var text = text;\n    var param = matsCollections.CurveParams.findOne({\n      name: paramName\n    });\n\n    if (param === undefined) {\n      param = matsCollections.PlotParams.findOne({\n        name: paramName\n      });\n    }\n\n    if (param === undefined) {\n      return;\n    }\n\n    if (text === undefined) {\n      if (param.multiple) {\n        // .... if multi selected  get the first .. last\n        const selection = getInputElementForParamName(paramName).selectedOptions;\n\n        if (selection.length == 0) {\n          text = \"\";\n        } else if (selection.length == 1) {\n          text = selection[0].textContent;\n        } else {\n          text = selection[0].textContent + \" .. \" + selection[selection.length - 1].textContent;\n        }\n      }\n    }\n\n    const elem = getValueElementForParamName(paramName);\n\n    if (elem.textContent !== text) {\n      elem.textContent = text;\n    }\n  } catch (error) {\n    console.log(\"Error: could not find param: \" + paramName);\n  }\n}; // get the document id for the element that corresponds to the param name\n\n\nconst getInputIdForParamName = function (paramName) {\n  // scatter axis don't really exist in matsCollections.CurveParams but they are elements\n  const pname = paramName.replace(/^.axis-/, '');\n  var param = matsCollections.CurveParams.findOne({\n    name: pname\n  });\n\n  if (param === undefined) {\n    param = matsCollections.PlotParams.findOne({\n      name: pname\n    });\n  }\n\n  if (param === undefined) {\n    param = matsCollections.Scatter2dParams.findOne({\n      name: pname\n    });\n\n    if (param === undefined) {\n      return undefined;\n    }\n  }\n\n  if (param.type === matsTypes.InputTypes.dateRange) {\n    return (\"element-\" + param.name).replace(/ /g, '-');\n  } else {\n    return (param.name + \"-\" + param.type).replace(/ /g, '-');\n  }\n}; // get the parameter for the element that corresponds to the param name\n\n\nconst getParameterForName = function (paramName) {\n  // scatter axis don't really exist in matsCollections.CurveParams but they are elements\n  const pname = paramName.replace(/^.axis-/, '');\n  var param = matsCollections.CurveParams.findOne({\n    name: pname\n  });\n\n  if (param === undefined) {\n    param = matsCollections.PlotParams.findOne({\n      name: pname\n    });\n  }\n\n  if (param === undefined) {\n    param = matsCollections.Scatter2dParams.findOne({\n      name: pname\n    });\n\n    if (param === undefined) {\n      return undefined;\n    }\n  }\n\n  return param;\n}; // get the document element that corresponds to the param name\n\n\nconst getInputElementForParamName = function (paramName) {\n  const name = paramName.replace(/^.axis-/, '');\n  const id = getInputIdForParamName(name);\n\n  if (id === undefined) {\n    return undefined;\n  }\n\n  return document.getElementById(id);\n}; // get a param disabledOptions list - if any.\n\n\nconst getDisabledOptionsForParamName = function (paramName) {\n  const name = paramName.replace(/^.axis-/, '');\n  const id = getInputIdForParamName(name);\n\n  if (id === undefined) {\n    return undefined;\n  }\n\n  const param = getParameterForName(name);\n\n  if (!param) {\n    return undefined;\n  }\n\n  return param.disabledOptions;\n}; // set the input for the element that corresponds to the param name\n// also sets a data-mats-currentValue attribute\n\n\nconst setInputForParamName = function (paramName, value) {\n  const param = getParameterForName(paramName);\n  const id = getInputIdForParamName(paramName);\n  const idSelectorStr = \"#\" + id;\n  const idSelector = $(idSelectorStr); // SHOULD DEAL WITH CHECKBOXES HERE\n\n  if (param.type === matsTypes.InputTypes.radioGroup) {\n    $(\"#\" + id + \"-\" + value).prop(\"checked\", true);\n  } else {\n    idSelector.val(value);\n    setValueTextForParamName(paramName, value);\n  }\n};\n\nconst getElementValues = function () {\n  const data = {\n    curveParams: {},\n    plotParams: {},\n    scatterParams: {}\n  };\n  const axis = ['xaxis-', 'yaxis-'];\n  var params = matsCollections.CurveParams.find({}).fetch();\n  params.forEach(function (param) {\n    var val = \"\";\n\n    if (param.type === matsTypes.InputTypes.radioGroup) {\n      var selector = \"input:radio[name='\" + param.name + \"']:checked\";\n      val = $(selector).val();\n    } else if (param.type === matsTypes.InputTypes.checkBoxGroup) {\n      var selector = \"input[name='\" + param.name + \"']:checked\";\n      val = $(selector).map(function (_, el) {\n        return $(el).val();\n      }).get();\n    } else if (param.type === matsTypes.InputTypes.dateRange) {\n      val = getValueForParamName(param.name);\n    } else {\n      var idSelect = '#' + getInputIdForParamName(param.name);\n      val = $(idSelect).val();\n    }\n\n    data.curveParams[param.name] = val;\n\n    if (matsPlotUtils.getPlotType() == matsTypes.PlotTypes.scatter2d) {\n      for (var a = 0; a < axis.length; a++) {\n        const axisStr = axis[a];\n        const name = axisStr + param.name;\n        var val = \"\";\n\n        if (param.type === matsTypes.InputTypes.radioGroup) {\n          var selector = \"input:radio[name='\" + name + \"']:checked\";\n          val = $(selector).val();\n        } else if (param.type === matsTypes.InputTypes.checkBoxGroup) {\n          var selector = \"input[name='\" + name + \"']:checked\";\n          val = $(selector).map(function (_, el) {\n            return $(el).val();\n          }).get();\n        } else {\n          var idSelect = '#' + getInputIdForParamName(name);\n          val = $(idSelect).val();\n        }\n\n        data.curveParams[name] = val;\n      }\n    }\n  });\n  params = matsCollections.PlotParams.find({}).fetch();\n  params.forEach(function (param) {\n    var val = \"\";\n\n    if (param.type === matsTypes.InputTypes.radioGroup) {\n      var selector = \"input:radio[name='\" + param.name + \"']:checked\";\n      val = $(selector).val();\n    } else if (param.type === matsTypes.InputTypes.checkBoxGroup) {\n      var selector = \"input[name='\" + param.name + \"']:checked\";\n      val = $(selector).map(function (_, el) {\n        return $(el).val();\n      }).get();\n    } else {\n      var idSelect = '#' + getInputIdForParamName(param.name);\n      val = $(idSelect).val();\n    }\n\n    data.plotParams[param.name] = val;\n  });\n  params = matsCollections.Scatter2dParams.find({}).fetch();\n  params.forEach(function (param) {\n    var val = \"\";\n\n    if (param.type === matsTypes.InputTypes.radioGroup) {\n      var selector = \"input:radio[name='\" + param.name + \"']:checked\";\n      val = $(selector).val();\n    } else if (param.type === matsTypes.InputTypes.checkBoxGroup) {\n      var selector = \"input[name='\" + param.name + \"']:checked\";\n      val = $(selector).map(function (_, el) {\n        return $(el).val();\n      }).get();\n    } else {\n      var idSelect = '#' + getInputIdForParamName(param.name);\n      val = $(idSelect).val();\n    }\n\n    data.scatterParams[param.name] = val;\n\n    if (matsPlotUtils.getPlotType() == matsTypes.PlotTypes.scatter2d) {\n      for (var a = 0; a < axis.length; a++) {\n        var axisStr = axis[a];\n        var name = axisStr + param.name;\n        var val = \"\";\n\n        if (param.type === matsTypes.InputTypes.radioGroup) {\n          var selector = \"input:radio[name='\" + name + \"']:checked\";\n          val = $(selector).val();\n        } else if (param.type === matsTypes.InputTypes.checkBoxGroup) {\n          var selector = \"input[name='\" + name + \"']:checked\";\n          val = $(selector).map(function (_, el) {\n            return $(el).val();\n          }).get();\n        } else {\n          var idSelect = '#' + getInputIdForParamName(name);\n          val = $(idSelect).val();\n        }\n\n        data.scatterParams[name] = val;\n      }\n    }\n  });\n  return data;\n};\n\nconst expandParams = function () {\n  const params = matsCollections.CurveParams.find({}).fetch();\n  params.forEach(function (param) {\n    if (param.type !== matsTypes.InputTypes.selectMap) {\n      const selector = \"element\" + \"-\" + param.name;\n      const elem = document.getElementById(selector);\n\n      if (elem) {\n        elem.style.display = \"block\";\n        const dataElem = document.getElementById(param.name + \"-\" + param.type);\n\n        if (dataElem && dataElem.options && dataElem.selectedIndex >= 0) {\n          dataElem.options[dataElem.selectedIndex].scrollIntoView();\n        }\n      }\n    }\n  });\n};\n\nconst collapseParams = function () {\n  const params = matsCollections.CurveParams.find({}).fetch();\n  params.forEach(function (param) {\n    if (param.type !== matsTypes.InputTypes.selectMap) {\n      const selector = \"element\" + \"-\" + param.name;\n\n      if (document.getElementById(selector)) {\n        document.getElementById(selector).style.display = \"none\";\n      }\n    }\n  });\n};\n\nconst collapseParam = function (paramName) {\n  const param = matsCollections.CurveParams.findOne({\n    name: paramName\n  });\n\n  if (param === undefined || param === null) {\n    return;\n  }\n\n  if (param.type !== matsTypes.InputTypes.selectMap) {\n    const selector = \"element\" + \"-\" + param.name;\n\n    if (document.getElementById(selector)) {\n      document.getElementById(selector).style.display = \"none\";\n    }\n  }\n};\n\nconst typeSort = function (arr) {\n  if (arr === undefined) {\n    return undefined;\n  }\n\n  return arr.sort(function (a, b) {\n    if (isNaN(Number(a) && isNaN(Number(b)))) {\n      // string compare\n      const A = a.toLowerCase();\n      const B = b.toLowerCase();\n\n      if (A < B) {\n        return -1;\n      } else if (A > B) {\n        return 1;\n      } else {\n        return 0;\n      }\n    } else if (isNaN(Number(a) || isNaN(Number(b)))) {\n      // number always precedes\n      if (isNaN(Number(a))) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else {\n      return a - b; // numerical compare\n    }\n  });\n};\n\nconst setDefaultForParamName = function (param) {\n  const paramName = param.name;\n  const type = param.type;\n  const defaultValue = param.default;\n\n  if (paramName == 'label') {\n    setInputForParamName(paramName, Session.get('NextCurveLabel'));\n  } else {\n    if (defaultValue != \"undefined\") {\n      if (type === matsTypes.InputTypes.select && (defaultValue === -1 || defaultValue === undefined || defaultValue === matsTypes.InputTypes.unused)) {\n        setInputForParamName(paramName, matsTypes.InputTypes.unused);\n      } else {\n        setInputForParamName(paramName, defaultValue);\n      }\n    }\n  }\n};\n\nconst getDefaultDateRange = function (name) {\n  var dateParam = matsCollections.CurveParams.findOne({\n    name: name\n  });\n\n  if (dateParam === undefined) {\n    dateParam = matsCollections.PlotParams.findOne({\n      name: name\n    });\n  }\n\n  const startInit = dateParam.startDate;\n  const stopInit = dateParam.stopDate;\n  const dstr = dateParam.default;\n  return {\n    startDate: startInit,\n    stopDate: stopInit,\n    dstr: dstr\n  };\n};\n\nconst getMinMaxDates = function (minDate, maxDate) {\n  var minMoment = moment(minDate, \"MM/DD/YYYY HH:mm\");\n  var maxMoment = moment(maxDate, \"MM/DD/YYYY HH:mm\");\n\n  if (maxMoment.diff(minMoment, 'days') > 30) {\n    minDate = moment(maxMoment.subtract(30, 'days')).format(\"MM/DD/YYYY HH:mm\");\n  }\n\n  return {\n    minDate: minDate,\n    maxDate: maxDate\n  };\n};\n\nconst setAllParamsToDefault = function () {\n  // default the superiors and refresh them so that they cause the dependent options to refresh\n  var params = matsCollections.CurveParams.find({}).fetch();\n  const superiors = matsCollections.CurveParams.find({\n    \"dependentNames\": {\n      \"$exists\": true\n    }\n  }).fetch();\n  superiors.forEach(function (param) {\n    setDefaultForParamName(param); // actually call the refresh directly - don't use an event, because we want this all to be synchronous\n\n    matsSelectUtils.refresh(null, param.name); // remove from params list - actually rewrite params list NOT with this param\n\n    params = params.filter(function (obj) {\n      return obj.name !== param.name;\n    });\n  }); // refresh all the non superiors to their default values\n\n  const nonDependents = matsCollections.CurveParams.find({\n    \"superiorNames\": {\n      \"$exists\": true\n    }\n  }).fetch();\n  nonDependents.forEach(function (param) {\n    setDefaultForParamName(param);\n\n    if (param.type === matsTypes.InputTypes.dateRange) {\n      const dstr = getDefaultDateRange(param.name).dstr;\n      setValueTextForParamName(param.name, dstr);\n    } else {\n      matsSelectUtils.refresh(null, param.name); // remove from params list - actually rewrite params list NOT with this param\n\n      params = params.filter(function (obj) {\n        return obj.name !== param.name;\n      });\n    }\n  }); // reset everything else\n\n  params.forEach(function (param) {\n    if (param.type === matsTypes.InputTypes.dateRange) {\n      const dstr = getDefaultDateRange(param.name).dstr;\n      setValueTextForParamName(param.name, dstr);\n    } else if (param.type === matsTypes.InputTypes.selectMap) {\n      const targetId = param.name + '-' + param.type;\n      const targetElem = document.getElementById(targetId);\n      const resetMapEvent = new CustomEvent(\"reset\", {\n        detail: {\n          refElement: null\n        }\n      });\n      targetElem.dispatchEvent(resetMapEvent);\n    } else {\n      setDefaultForParamName(param);\n    }\n  });\n  matsCollections.PlotParams.find({}).fetch().forEach(function (param) {\n    if (param.type === matsTypes.InputTypes.dateRange) {\n      const dstr = getDefaultDateRange(param.name).dstr;\n      setValueTextForParamName(param.name, dstr);\n    } else {\n      setDefaultForParamName(param);\n    }\n  });\n}; // is the input element displaying? used by curve_param_item_group\n\n\nconst isInputElementVisible = function (paramName) {\n  const name = paramName.replace(/^.axis-/, ''); // need to acount for scatter plots params\n\n  const inputElement = getInputElementForParamName(name);\n  return $(inputElement).is(':visible');\n}; // is the input element displaying? used by curve_param_item_group\n\n\nconst isParamVisible = function (paramName) {\n  const name = paramName.replace(/^.axis-/, ''); // need to acount for scatter plots params\n\n  const paramRef = \"#\" + name + \"-item\";\n  return $(paramRef).is(':visible');\n}; // is the input element displaying? used by curve_param_item_group\n\n\nconst isControlButtonVisible = function (paramName) {\n  const name = paramName.replace(/^.axis-/, ''); // need to acount for scatter plots params\n\n  const paramRef = \"#controlButton-\" + name;\n  return $(paramRef).is(':visible');\n};\n\nconst setInputValueForParamAndtriggerChange = function (paramName, value) {\n  const elem = getInputElementForParamName(paramName);\n  elem.value = value;\n  setValueTextForParamName(paramName, elem.value);\n  $(elem).trigger('change');\n};\n\nconst getOptionsMapForParam = function (paramName) {\n  const param = matsCollections.CurveParams.findOne({\n    name: paramName\n  });\n  return param.optionsMap;\n};\n\nconst getOptionsForParam = function (paramName) {\n  const param = matsCollections.CurveParams.findOne({\n    name: paramName\n  });\n  return param.options;\n};\n\nconst getAppName = function () {\n  const app = matsCollections.appName.findOne({}).app;\n  return app;\n};\n\nconst getCurveItemValueForParamName = function (curveNumber, paramName) {//MODEL-curve-0-Item\n  //    const id = paramName.toString().toUpperCase() + \"-curve-\" + curveNumber + \"-Item\"; // the id of the text span for a curveItem\n  //    return text = ‌‌document.getElementById(id).innerText;\n  // const elem = $(\"#\" + id);\n  // var text = undefined;\n  // if (elem) {\n  //     text = elem.text();\n  // }\n};\n\nconst visibilityControllerForParam = function (paramName) {\n  /*\n  Need to iterate all the params looking for one that has this paramName as a key in its\n  hideOtherFor map.\n  If it exists, that param is returned. Otherwise return undefined.\n   */\n  var params = matsCollections.CurveParams.find({}).fetch();\n  var found = undefined;\n  params.some(function (param) {\n    if (param.hideOtherFor) {\n      const pKeys = Object.keys(param.hideOtherFor);\n\n      if (pKeys.indexOf(paramName) !== -1) {\n        found = param;\n        return;\n      }\n    }\n  });\n  return found;\n};\n\nmodule.exportDefault(matsParamUtils = {\n  getDisabledOptionsForParamName: getDisabledOptionsForParamName,\n  getControlButtonIdForParamName: getControlButtonIdForParamName,\n  getControlElementForParamName: getControlElementForParamName,\n  getValueElementForParamName: getValueElementForParamName,\n  getValueForParamName: getValueForParamName,\n  setValueTextForParamName: setValueTextForParamName,\n  getValueIdForParamName: getValueIdForParamName,\n  getInputIdForParamName: getInputIdForParamName,\n  getInputElementForParamName: getInputElementForParamName,\n  getElementValues: getElementValues,\n  setInputForParamName: setInputForParamName,\n  expandParams: expandParams,\n  collapseParams: collapseParams,\n  collapseParam: collapseParam,\n  getParameterForName: getParameterForName,\n  setDefaultForParamName: setDefaultForParamName,\n  setAllParamsToDefault: setAllParamsToDefault,\n  typeSort: typeSort,\n  isInputElementVisible: isInputElementVisible,\n  isParamVisible: isParamVisible,\n  isControlButtonVisible: isControlButtonVisible,\n  setInputValueForParamAndtriggerChange: setInputValueForParamAndtriggerChange,\n  getOptionsForParam: getOptionsForParam,\n  getOptionsMapForParam: getOptionsMapForParam,\n  getCurveItemValueForParamName: getCurveItemValueForParamName,\n  visibilityControllerForParam: visibilityControllerForParam,\n  getAppName: getAppName,\n  getDefaultDateRange: getDefaultDateRange,\n  getMinMaxDates: getMinMaxDates\n});","map":{"version":3,"sources":["packages/randyp:mats-common/lib/param_util.js"],"names":["matsTypes","module","link","v","matsCollections","matsCurveUtils","matsPlotUtils","moment","getControlButtonIdForParamName","paramName","pname","replace","param","CurveParams","findOne","name","undefined","id","getControlElementForParamName","document","getElementById","getValueElementForParamName","val","getValueIdForParamName","getValueForParamName","elem","textContent","trim","error","setValueTextForParamName","text","PlotParams","multiple","selection","getInputElementForParamName","selectedOptions","length","console","log","getInputIdForParamName","Scatter2dParams","type","InputTypes","dateRange","getParameterForName","getDisabledOptionsForParamName","disabledOptions","setInputForParamName","value","idSelectorStr","idSelector","$","radioGroup","prop","getElementValues","data","curveParams","plotParams","scatterParams","axis","params","find","fetch","forEach","selector","checkBoxGroup","map","_","el","get","idSelect","getPlotType","PlotTypes","scatter2d","a","axisStr","expandParams","selectMap","style","display","dataElem","options","selectedIndex","scrollIntoView","collapseParams","collapseParam","typeSort","arr","sort","b","isNaN","Number","A","toLowerCase","B","setDefaultForParamName","defaultValue","default","Session","select","unused","getDefaultDateRange","dateParam","startInit","startDate","stopInit","stopDate","dstr","getMinMaxDates","minDate","maxDate","minMoment","maxMoment","diff","subtract","format","setAllParamsToDefault","superiors","matsSelectUtils","refresh","filter","obj","nonDependents","targetId","targetElem","resetMapEvent","CustomEvent","detail","refElement","dispatchEvent","isInputElementVisible","inputElement","is","isParamVisible","paramRef","isControlButtonVisible","setInputValueForParamAndtriggerChange","trigger","getOptionsMapForParam","optionsMap","getOptionsForParam","getAppName","app","appName","getCurveItemValueForParamName","curveNumber","visibilityControllerForParam","found","some","hideOtherFor","pKeys","Object","keys","indexOf","exportDefault","matsParamUtils"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2019 Colorado State University and Regents of the University of Colorado. All rights reserved.\n */\n\nimport {matsTypes} from 'meteor/randyp:mats-common';\nimport {matsCollections} from 'meteor/randyp:mats-common';\nimport {matsCurveUtils} from 'meteor/randyp:mats-common';\nimport {matsPlotUtils} from 'meteor/randyp:mats-common';\nimport {moment} from 'meteor/momentjs:moment'\n\n// get the document id for the control button element that corresponds to the param name\nconst getControlButtonIdForParamName = function (paramName) {\n    // scatter axis don't really exist in matsCollections.CurveParams but they are elements\n    const pname = paramName.replace(/^.axis-/, '');\n    const param = matsCollections.CurveParams.findOne({name: pname});\n    if (param !== undefined) {\n        const id = \"controlButton-\" + param.name;\n        return id;\n    }\n};\n\n// get the control Button Element that corresponds to the param name\nconst getControlElementForParamName = function (paramName) {\n    // scatter axis don't really exist in matsCollections.CurveParams but they are elements\n    const pname = paramName.replace(/^.axis-/, '');\n    return document.getElementById(getControlButtonIdForParamName(pname));\n};\n\n// get the document element that corresponds to the param name\nconst getValueElementForParamName = function (paramName) {\n    // scatter axis don't really exist in matsCollections.CurveParams but they are elements\n    const pname = paramName.replace(/^.axis-/, '');\n    const val = getValueIdForParamName(pname);\n    return document.getElementById(val);\n};\n\n// get the current selected value in the document element that corresponds to the param name\n// Note that the value should be reflected in the adjoining control button value textContent.\nconst getValueForParamName = function (paramName) {\n    try {\n        const elem = getValueElementForParamName(paramName);\n        return getValueElementForParamName(paramName).textContent.trim();\n    } catch (error) {\n        return undefined;\n    }\n};\n\n// get the VALUE BOX id for the element that corresponds to the param name\nconst getValueIdForParamName = function (paramName) {\n    // scatter axis don't really exist in matsCollections.CurveParams but they are elements\n    const pname = paramName.replace(/^.axis-/, '');\n    return \"controlButton-\" + pname + \"-value\";\n};\n\n// set the VALUE BOX text for the element that corresponds to the param name\nconst setValueTextForParamName = function (paramName, text) {\n    try {\n        var text = text;\n        var param = matsCollections.CurveParams.findOne({name: paramName});\n        if (param === undefined) {\n            param = matsCollections.PlotParams.findOne({name: paramName});\n        }\n        if (param === undefined) {\n            return;\n        }\n        if (text === undefined) {\n            if (param.multiple) {\n                // .... if multi selected  get the first .. last\n                const selection = getInputElementForParamName(paramName).selectedOptions;\n                if (selection.length == 0) {\n                    text = \"\";\n                } else if (selection.length == 1) {\n                    text = selection[0].textContent;\n                } else {\n                    text = selection[0].textContent + \" .. \" + selection[selection.length - 1].textContent;\n                }\n            }\n        }\n        const elem = getValueElementForParamName(paramName);\n        if (elem.textContent !== text) {\n            elem.textContent = text;\n        }\n    } catch (error) {\n        console.log(\"Error: could not find param: \" + paramName);\n    }\n};\n\n// get the document id for the element that corresponds to the param name\nconst getInputIdForParamName = function (paramName) {\n    // scatter axis don't really exist in matsCollections.CurveParams but they are elements\n    const pname = paramName.replace(/^.axis-/, '');\n    var param = matsCollections.CurveParams.findOne({name: pname});\n    if (param === undefined) {\n        param = matsCollections.PlotParams.findOne({name: pname});\n    }\n    if (param === undefined) {\n        param = matsCollections.Scatter2dParams.findOne({name: pname});\n        if (param === undefined) {\n            return undefined;\n        }\n    }\n    if (param.type === matsTypes.InputTypes.dateRange) {\n        return (\"element-\" + param.name).replace(/ /g, '-');\n    } else {\n        return (param.name + \"-\" + param.type).replace(/ /g, '-');\n    }\n};\n\n\n// get the parameter for the element that corresponds to the param name\nconst getParameterForName = function (paramName) {\n    // scatter axis don't really exist in matsCollections.CurveParams but they are elements\n    const pname = paramName.replace(/^.axis-/, '');\n\n    var param = matsCollections.CurveParams.findOne({name: pname});\n    if (param === undefined) {\n        param = matsCollections.PlotParams.findOne({name: pname});\n    }\n    if (param === undefined) {\n        param = matsCollections.Scatter2dParams.findOne({name: pname});\n        if (param === undefined) {\n            return undefined;\n        }\n    }\n    return (param);\n};\n\n// get the document element that corresponds to the param name\nconst getInputElementForParamName = function (paramName) {\n    const name = paramName.replace(/^.axis-/, '');\n    const id = getInputIdForParamName(name);\n    if (id === undefined) {\n        return undefined;\n    }\n    return document.getElementById(id);\n};\n\n// get a param disabledOptions list - if any.\nconst getDisabledOptionsForParamName = function (paramName) {\n    const name = paramName.replace(/^.axis-/, '');\n    const id = getInputIdForParamName(name);\n    if (id === undefined) {\n        return undefined;\n    }\n    const param = getParameterForName(name);\n    if (!param) {\n        return undefined;\n    }\n    return param.disabledOptions;\n};\n\n// set the input for the element that corresponds to the param name\n// also sets a data-mats-currentValue attribute\nconst setInputForParamName = function (paramName, value) {\n    const param = getParameterForName(paramName);\n    const id = getInputIdForParamName(paramName);\n    const idSelectorStr = \"#\" + id;\n    const idSelector = $(idSelectorStr);\n\n    // SHOULD DEAL WITH CHECKBOXES HERE\n    if (param.type === matsTypes.InputTypes.radioGroup) {\n        $(\"#\" + id + \"-\" + value).prop(\"checked\", true);\n    } else {\n        idSelector.val(value);\n        setValueTextForParamName(paramName, value);\n    }\n};\n\nconst getElementValues = function () {\n    const data = {\n        curveParams: {},\n        plotParams: {},\n        scatterParams: {}\n    };\n    const axis = ['xaxis-', 'yaxis-'];\n    var params = matsCollections.CurveParams.find({}).fetch();\n    params.forEach(function (param) {\n        var val = \"\";\n        if (param.type === matsTypes.InputTypes.radioGroup) {\n            var selector = \"input:radio[name='\" + param.name + \"']:checked\";\n            val = $(selector).val()\n        } else if (param.type === matsTypes.InputTypes.checkBoxGroup) {\n            var selector = \"input[name='\" + param.name + \"']:checked\";\n            val = $(selector).map(function (_, el) {\n                return $(el).val();\n            }).get();\n        } else if (param.type === matsTypes.InputTypes.dateRange) {\n            val = getValueForParamName(param.name);\n        } else {\n            var idSelect = '#' + getInputIdForParamName(param.name);\n            val = $(idSelect).val();\n        }\n        data.curveParams[param.name] = val;\n        if (matsPlotUtils.getPlotType() == matsTypes.PlotTypes.scatter2d) {\n            for (var a = 0; a < axis.length; a++) {\n                const axisStr = axis[a];\n                const name = axisStr + param.name;\n                var val = \"\";\n                if (param.type === matsTypes.InputTypes.radioGroup) {\n                    var selector = \"input:radio[name='\" + name + \"']:checked\";\n                    val = $(selector).val()\n                } else if (param.type === matsTypes.InputTypes.checkBoxGroup) {\n                    var selector = \"input[name='\" + name + \"']:checked\";\n                    val = $(selector).map(function (_, el) {\n                        return $(el).val();\n                    }).get();\n                } else {\n                    var idSelect = '#' + getInputIdForParamName(name);\n                    val = $(idSelect).val();\n                }\n                data.curveParams[name] = val;\n            }\n        }\n    });\n\n    params = matsCollections.PlotParams.find({}).fetch();\n    params.forEach(function (param) {\n        var val = \"\";\n        if (param.type === matsTypes.InputTypes.radioGroup) {\n            var selector = \"input:radio[name='\" + param.name + \"']:checked\";\n            val = $(selector).val()\n        } else if (param.type === matsTypes.InputTypes.checkBoxGroup) {\n            var selector = \"input[name='\" + param.name + \"']:checked\";\n            val = $(selector).map(function (_, el) {\n                return $(el).val();\n            }).get();\n        } else {\n            var idSelect = '#' + getInputIdForParamName(param.name);\n            val = $(idSelect).val();\n        }\n        data.plotParams[param.name] = val;\n    });\n\n    params = matsCollections.Scatter2dParams.find({}).fetch();\n    params.forEach(function (param) {\n        var val = \"\";\n        if (param.type === matsTypes.InputTypes.radioGroup) {\n            var selector = \"input:radio[name='\" + param.name + \"']:checked\";\n            val = $(selector).val()\n        } else if (param.type === matsTypes.InputTypes.checkBoxGroup) {\n            var selector = \"input[name='\" + param.name + \"']:checked\";\n            val = $(selector).map(function (_, el) {\n                return $(el).val();\n            }).get();\n        } else {\n            var idSelect = '#' + getInputIdForParamName(param.name);\n            val = $(idSelect).val();\n        }\n        data.scatterParams[param.name] = val;\n        if (matsPlotUtils.getPlotType() == matsTypes.PlotTypes.scatter2d) {\n            for (var a = 0; a < axis.length; a++) {\n                var axisStr = axis[a];\n                var name = axisStr + param.name;\n                var val = \"\";\n                if (param.type === matsTypes.InputTypes.radioGroup) {\n                    var selector = \"input:radio[name='\" + name + \"']:checked\";\n                    val = $(selector).val()\n                } else if (param.type === matsTypes.InputTypes.checkBoxGroup) {\n                    var selector = \"input[name='\" + name + \"']:checked\";\n                    val = $(selector).map(function (_, el) {\n                        return $(el).val();\n                    }).get();\n                } else {\n                    var idSelect = '#' + getInputIdForParamName(name);\n                    val = $(idSelect).val();\n                }\n                data.scatterParams[name] = val;\n            }\n        }\n    });\n    return data;\n};\n\nconst expandParams = function () {\n    const params = matsCollections.CurveParams.find({}).fetch();\n    params.forEach(function (param) {\n        if (param.type !== matsTypes.InputTypes.selectMap) {\n            const selector = \"element\" + \"-\" + param.name;\n            const elem = document.getElementById(selector);\n            if (elem) {\n                elem.style.display = \"block\";\n                const dataElem = document.getElementById(param.name + \"-\" + param.type);\n                if (dataElem && dataElem.options && dataElem.selectedIndex >= 0) {\n                    dataElem.options[dataElem.selectedIndex].scrollIntoView();\n                }\n            }\n        }\n    });\n};\n\nconst collapseParams = function () {\n    const params = matsCollections.CurveParams.find({}).fetch();\n    params.forEach(function (param) {\n        if (param.type !== matsTypes.InputTypes.selectMap) {\n            const selector = \"element\" + \"-\" + param.name;\n            if (document.getElementById(selector)) {\n                document.getElementById(selector).style.display = \"none\";\n            }\n        }\n    });\n};\n\nconst collapseParam = function (paramName) {\n    const param = matsCollections.CurveParams.findOne({name: paramName});\n    if (param === undefined || param === null) {\n        return;\n    }\n    if (param.type !== matsTypes.InputTypes.selectMap) {\n        const selector = \"element\" + \"-\" + param.name;\n        if (document.getElementById(selector)) {\n            document.getElementById(selector).style.display = \"none\";\n        }\n    }\n};\n\nconst typeSort = function (arr) {\n    if (arr === undefined) {\n        return undefined;\n    }\n    return arr.sort(function (a, b) {\n        if (isNaN(Number(a) && isNaN(Number(b)))) { // string compare\n            const A = a.toLowerCase();\n            const B = b.toLowerCase();\n            if (A < B) {\n                return -1;\n            } else if (A > B) {\n                return 1;\n            } else {\n                return 0;\n            }\n        } else if (isNaN(Number(a) || isNaN(Number(b)))) {   // number always precedes\n            if (isNaN(Number(a))) {\n                return 1;\n            } else {\n                return -1\n            }\n        } else {\n            return a - b;  // numerical compare\n        }\n    });\n};\n\nconst setDefaultForParamName = function (param) {\n    const paramName = param.name;\n    const type = param.type;\n    const defaultValue = param.default;\n    if (paramName == 'label') {\n        setInputForParamName(paramName, Session.get('NextCurveLabel'));\n    } else {\n        if (defaultValue != \"undefined\") {\n            if (type === matsTypes.InputTypes.select && (defaultValue === -1 || defaultValue === undefined || defaultValue === matsTypes.InputTypes.unused)) {\n                setInputForParamName(paramName, matsTypes.InputTypes.unused);\n            }\n            else {\n                setInputForParamName(paramName, defaultValue);\n            }\n        }\n    }\n};\n\nconst getDefaultDateRange = function(name) {\n    var dateParam = matsCollections.CurveParams.findOne({name: name});\n    if (dateParam === undefined) {\n        dateParam = matsCollections.PlotParams.findOne({name: name});\n    }\n    const startInit = dateParam.startDate;\n    const stopInit = dateParam.stopDate;\n    const dstr = dateParam.default;\n    return {startDate:startInit,stopDate:stopInit,dstr:dstr};\n};\n\nconst getMinMaxDates = function(minDate, maxDate) {\n    var minMoment = moment(minDate,\"MM/DD/YYYY HH:mm\");\n    var maxMoment = moment(maxDate, \"MM/DD/YYYY HH:mm\");\n    if (maxMoment.diff(minMoment, 'days') > 30) {\n        minDate = moment(maxMoment.subtract(30, 'days')).format(\"MM/DD/YYYY HH:mm\");\n    }\n    return {minDate:minDate,maxDate:maxDate};\n};\n\nconst setAllParamsToDefault = function () {\n    // default the superiors and refresh them so that they cause the dependent options to refresh\n    var params = matsCollections.CurveParams.find({}).fetch();\n\n    const superiors = matsCollections.CurveParams.find({\"dependentNames\": {\"$exists\": true}}).fetch();\n    superiors.forEach(function (param) {\n        setDefaultForParamName(param);\n        // actually call the refresh directly - don't use an event, because we want this all to be synchronous\n        matsSelectUtils.refresh(null, param.name);\n        // remove from params list - actually rewrite params list NOT with this param\n        params = params.filter(function (obj) {\n            return obj.name !== param.name;\n        });\n    });\n    // refresh all the non superiors to their default values\n    const nonDependents = matsCollections.CurveParams.find({\"superiorNames\": {\"$exists\": true}}).fetch();\n    nonDependents.forEach(function (param) {\n        setDefaultForParamName(param);\n        if (param.type === matsTypes.InputTypes.dateRange) {\n            const dstr = getDefaultDateRange(param.name).dstr;\n            setValueTextForParamName(param.name, dstr);\n        } else {\n            matsSelectUtils.refresh(null, param.name);\n            // remove from params list - actually rewrite params list NOT with this param\n            params = params.filter(function (obj) {\n                return obj.name !== param.name;\n            });\n        }\n    });\n    // reset everything else\n    params.forEach(function (param) {\n        if (param.type === matsTypes.InputTypes.dateRange) {\n            const dstr = getDefaultDateRange(param.name).dstr;\n            setValueTextForParamName(param.name, dstr);\n        } else if (param.type === matsTypes.InputTypes.selectMap) {\n            const targetId = param.name + '-' + param.type;\n            const targetElem = document.getElementById(targetId);\n            const resetMapEvent = new CustomEvent(\"reset\", {\n                detail: {\n                    refElement: null\n                }\n            });\n            targetElem.dispatchEvent(resetMapEvent);\n        } else {\n            setDefaultForParamName(param);\n        }\n    });\n    matsCollections.PlotParams.find({}).fetch().forEach(function (param) {\n        if (param.type === matsTypes.InputTypes.dateRange) {\n            const dstr = getDefaultDateRange(param.name).dstr;\n            setValueTextForParamName(param.name, dstr);\n        } else {\n            setDefaultForParamName(param);\n        }\n    });\n\n};\n// is the input element displaying? used by curve_param_item_group\nconst isInputElementVisible = function (paramName) {\n    const name = paramName.replace(/^.axis-/, ''); // need to acount for scatter plots params\n    const inputElement = getInputElementForParamName(name);\n    return $(inputElement).is(':visible');\n};\n\n// is the input element displaying? used by curve_param_item_group\nconst isParamVisible = function (paramName) {\n    const name = paramName.replace(/^.axis-/, ''); // need to acount for scatter plots params\n    const paramRef = \"#\" + name + \"-item\";\n    return $(paramRef).is(':visible');\n};\n\n// is the input element displaying? used by curve_param_item_group\nconst isControlButtonVisible = function (paramName) {\n    const name = paramName.replace(/^.axis-/, ''); // need to acount for scatter plots params\n    const paramRef = \"#controlButton-\" + name;\n    return $(paramRef).is(':visible');\n};\n\nconst setInputValueForParamAndtriggerChange = function (paramName, value) {\n    const elem = getInputElementForParamName(paramName);\n    elem.value = value;\n    setValueTextForParamName(paramName, elem.value);\n    $(elem).trigger('change');\n};\n\nconst getOptionsMapForParam = function (paramName) {\n    const param = matsCollections.CurveParams.findOne({name: paramName});\n    return param.optionsMap;\n};\n\nconst getOptionsForParam = function (paramName) {\n    const param = matsCollections.CurveParams.findOne({name: paramName});\n    return param.options;\n};\n\nconst getAppName = function () {\n    const app = matsCollections.appName.findOne({}).app;\n    return app;\n};\n\nconst getCurveItemValueForParamName = function (curveNumber, paramName) {\n    //MODEL-curve-0-Item\n//    const id = paramName.toString().toUpperCase() + \"-curve-\" + curveNumber + \"-Item\"; // the id of the text span for a curveItem\n//    return text = ‌‌document.getElementById(id).innerText;\n    // const elem = $(\"#\" + id);\n    // var text = undefined;\n    // if (elem) {\n    //     text = elem.text();\n    // }\n};\nconst visibilityControllerForParam = function (paramName) {\n    /*\n    Need to iterate all the params looking for one that has this paramName as a key in its\n    hideOtherFor map.\n    If it exists, that param is returned. Otherwise return undefined.\n     */\n    var params = matsCollections.CurveParams.find({}).fetch();\n    var found = undefined;\n    params.some(function (param) {\n        if (param.hideOtherFor) {\n            const pKeys = Object.keys(param.hideOtherFor);\n            if (pKeys.indexOf(paramName) !== -1) {\n                found = param;\n                return;\n            }\n        }\n    });\n    return found;\n}\n\nexport default matsParamUtils = {\n    getDisabledOptionsForParamName: getDisabledOptionsForParamName,\n    getControlButtonIdForParamName: getControlButtonIdForParamName,\n    getControlElementForParamName: getControlElementForParamName,\n    getValueElementForParamName: getValueElementForParamName,\n    getValueForParamName: getValueForParamName,\n    setValueTextForParamName: setValueTextForParamName,\n    getValueIdForParamName: getValueIdForParamName,\n    getInputIdForParamName: getInputIdForParamName,\n    getInputElementForParamName: getInputElementForParamName,\n    getElementValues: getElementValues,\n    setInputForParamName: setInputForParamName,\n    expandParams: expandParams,\n    collapseParams: collapseParams,\n    collapseParam: collapseParam,\n    getParameterForName: getParameterForName,\n    setDefaultForParamName: setDefaultForParamName,\n    setAllParamsToDefault: setAllParamsToDefault,\n    typeSort: typeSort,\n    isInputElementVisible: isInputElementVisible,\n    isParamVisible: isParamVisible,\n    isControlButtonVisible: isControlButtonVisible,\n    setInputValueForParamAndtriggerChange: setInputValueForParamAndtriggerChange,\n    getOptionsForParam: getOptionsForParam,\n    getOptionsMapForParam: getOptionsMapForParam,\n    getCurveItemValueForParamName: getCurveItemValueForParamName,\n    visibilityControllerForParam: visibilityControllerForParam,\n    getAppName: getAppName,\n    getDefaultDateRange:getDefaultDateRange,\n    getMinMaxDates:getMinMaxDates\n};"]},"sourceType":"script","hash":"814802da1ed4dd57f5220d115de1286837f67e49"}
