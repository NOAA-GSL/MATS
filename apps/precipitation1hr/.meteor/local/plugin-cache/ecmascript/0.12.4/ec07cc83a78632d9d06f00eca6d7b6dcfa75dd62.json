{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/accounts-ui-unstyled/login_buttons_dialogs.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/accounts-ui-unstyled/login_buttons_dialogs.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/accounts-ui-unstyled/login_buttons_dialogs.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/accounts-ui-unstyled/login_buttons_dialogs.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/accounts-ui-unstyled/login_buttons_dialogs.js"}},"code":"let displayName, dropdown, validatePassword;\nmodule.link(\"./login_buttons.js\", {\n  displayName(v) {\n    displayName = v;\n  },\n\n  dropdown(v) {\n    dropdown = v;\n  },\n\n  validatePassword(v) {\n    validatePassword = v;\n  }\n\n}, 0);\n// for convenience\nconst loginButtonsSession = Accounts._loginButtonsSession; // since we don't want to pass around the callback that we get from our event\n// handlers, we just make it a variable for the whole file\n\nlet doneCallback;\nAccounts.onResetPasswordLink((token, done) => {\n  loginButtonsSession.set(\"resetPasswordToken\", token);\n  doneCallback = done;\n});\nAccounts.onEnrollmentLink((token, done) => {\n  loginButtonsSession.set(\"enrollAccountToken\", token);\n  doneCallback = done;\n});\nAccounts.onEmailVerificationLink((token, done) => {\n  Accounts.verifyEmail(token, error => {\n    if (!error) {\n      loginButtonsSession.set('justVerifiedEmail', true);\n    }\n\n    done(); // XXX show something if there was an error.\n  });\n}); //\n// resetPasswordDialog template\n//\n\nTemplate._resetPasswordDialog.events({\n  'click #login-buttons-reset-password-button': () => resetPassword(),\n  'keypress #reset-password-new-password': event => {\n    if (event.keyCode === 13) resetPassword();\n  },\n  'click #login-buttons-cancel-reset-password': () => {\n    loginButtonsSession.set('resetPasswordToken', null);\n    if (doneCallback) doneCallback();\n  }\n});\n\nconst resetPassword = () => {\n  loginButtonsSession.resetMessages();\n  const newPassword = document.getElementById('reset-password-new-password').value;\n  if (!validatePassword(newPassword)) return;\n  Accounts.resetPassword(loginButtonsSession.get('resetPasswordToken'), newPassword, error => {\n    if (error) {\n      loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n    } else {\n      loginButtonsSession.set('resetPasswordToken', null);\n      loginButtonsSession.set('justResetPassword', true);\n      if (doneCallback) doneCallback();\n    }\n  });\n};\n\nTemplate._resetPasswordDialog.helpers({\n  displayName,\n  inResetPasswordFlow: () => loginButtonsSession.get('resetPasswordToken')\n}); //\n// justResetPasswordDialog template\n//\n\n\nTemplate._justResetPasswordDialog.events({\n  'click #just-verified-dismiss-button': () => loginButtonsSession.set('justResetPassword', false)\n});\n\nTemplate._justResetPasswordDialog.helpers({\n  visible: () => loginButtonsSession.get('justResetPassword'),\n  displayName\n}); //\n// enrollAccountDialog template\n//\n\n\nconst enrollAccount = () => {\n  loginButtonsSession.resetMessages();\n  const password = document.getElementById('enroll-account-password').value;\n  if (!validatePassword(password)) return;\n  Accounts.resetPassword(loginButtonsSession.get('enrollAccountToken'), password, error => {\n    if (error) {\n      loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n    } else {\n      loginButtonsSession.set('enrollAccountToken', null);\n      if (doneCallback) doneCallback();\n    }\n  });\n};\n\nTemplate._enrollAccountDialog.events({\n  'click #login-buttons-enroll-account-button': enrollAccount,\n  'keypress #enroll-account-password': event => {\n    if (event.keyCode === 13) enrollAccount();\n  },\n  'click #login-buttons-cancel-enroll-account': () => {\n    loginButtonsSession.set('enrollAccountToken', null);\n    if (doneCallback) doneCallback();\n  }\n});\n\nTemplate._enrollAccountDialog.helpers({\n  displayName,\n  inEnrollAccountFlow: () => loginButtonsSession.get('enrollAccountToken')\n}); //\n// justVerifiedEmailDialog template\n//\n\n\nTemplate._justVerifiedEmailDialog.events({\n  'click #just-verified-dismiss-button': () => loginButtonsSession.set('justVerifiedEmail', false)\n});\n\nTemplate._justVerifiedEmailDialog.helpers({\n  visible: () => loginButtonsSession.get('justVerifiedEmail'),\n  displayName\n}); //\n// loginButtonsMessagesDialog template\n//\n\n\nTemplate._loginButtonsMessagesDialog.events({\n  'click #messages-dialog-dismiss-button': () => loginButtonsSession.resetMessages()\n});\n\nTemplate._loginButtonsMessagesDialog.helpers({\n  visible: () => {\n    const hasMessage = loginButtonsSession.get('infoMessage') || loginButtonsSession.get('errorMessage');\n    return !dropdown() && hasMessage;\n  }\n}); //\n// configureLoginServiceDialog template\n//\n\n\nTemplate._configureLoginServiceDialog.events({\n  'click .configure-login-service-dismiss-button': () => loginButtonsSession.set('configureLoginServiceDialogVisible', false),\n  'click #configure-login-service-dialog-save-configuration': () => {\n    if (loginButtonsSession.get('configureLoginServiceDialogVisible') && !loginButtonsSession.get('configureLoginServiceDialogSaveDisabled')) {\n      // Prepare the configuration document for this login service\n      const serviceName = loginButtonsSession.get('configureLoginServiceDialogServiceName');\n      const configuration = {\n        service: serviceName\n      }; // Fetch the value of each input field\n\n      configurationFields().forEach(field => {\n        configuration[field.property] = document.getElementById(\"configure-login-service-dialog-\".concat(field.property)).value.replace(/^\\s*|\\s*$/g, \"\"); // trim() doesnt work on IE8;\n      }); // Replacement of single use of jQuery in this package so we can remove\n      // the dependency\n\n      const inputs = [].slice.call( // Because HTMLCollections aren't arrays\n      document.getElementById('configure-login-service-dialog').getElementsByTagName('input'));\n      configuration.loginStyle = document.querySelector('#configure-login-service-dialog input[name=\"loginStyle\"]:checked').value; // Configure this login service\n\n      Accounts.connection.call(\"configureLoginService\", configuration, (error, result) => {\n        if (error) Meteor._debug(\"Error configuring login service \".concat(serviceName), error);else loginButtonsSession.set('configureLoginServiceDialogVisible', false);\n      });\n    }\n  },\n  // IE8 doesn't support the 'input' event, so we'll run this on the keyup as\n  // well. (Keeping the 'input' event means that this also fires when you use\n  // the mouse to change the contents of the field, eg 'Cut' menu item.)\n  'input, keyup input': event => {\n    // if the event fired on one of the configuration input fields,\n    // check whether we should enable the 'save configuration' button\n    if (event.target.id.indexOf('configure-login-service-dialog') === 0) updateSaveDisabled();\n  }\n}); // check whether the 'save configuration' button should be enabled.\n// this is a really strange way to implement this and a Forms\n// Abstraction would make all of this reactive, and simpler.\n\n\nconst updateSaveDisabled = () => {\n  const anyFieldEmpty = configurationFields().reduce((prev, field) => prev || document.getElementById(\"configure-login-service-dialog-\".concat(field.property)).value === '', false);\n  loginButtonsSession.set('configureLoginServiceDialogSaveDisabled', anyFieldEmpty);\n}; // Returns the appropriate template for this login service.  This\n// template should be defined in the service's package\n\n\nTemplate._configureLoginServiceDialog.templateForService = serviceName => {\n  serviceName = serviceName || loginButtonsSession.get('configureLoginServiceDialogServiceName'); // XXX Service providers should be able to specify their configuration\n  // template name.\n\n  return Template[\"configureLoginServiceDialogFor\".concat(serviceName === 'meteor-developer' ? 'MeteorDeveloper' : capitalize(serviceName))];\n};\n\nconst configurationFields = () => {\n  const template = Template._configureLoginServiceDialog.templateForService();\n\n  return template.fields();\n};\n\nTemplate._configureLoginServiceDialog.helpers({\n  configurationFields,\n  visible: () => loginButtonsSession.get('configureLoginServiceDialogVisible'),\n  // renders the appropriate template\n  configurationSteps: () => Template._configureLoginServiceDialog.templateForService(),\n  saveDisabled: () => loginButtonsSession.get('configureLoginServiceDialogSaveDisabled')\n}); // XXX from http://epeli.github.com/underscore.string/lib/underscore.string.js\n\n\nconst capitalize = str => {\n  str = str == null ? '' : String(str);\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nTemplate._configureLoginOnDesktopDialog.helpers({\n  visible: () => loginButtonsSession.get('configureOnDesktopVisible')\n});\n\nTemplate._configureLoginOnDesktopDialog.events({\n  'click #configure-on-desktop-dismiss-button': () => loginButtonsSession.set('configureOnDesktopVisible', false)\n});","map":{"version":3,"sources":["packages/accounts-ui-unstyled/login_buttons_dialogs.js"],"names":["displayName","dropdown","validatePassword","module","link","v","loginButtonsSession","Accounts","_loginButtonsSession","doneCallback","onResetPasswordLink","token","done","set","onEnrollmentLink","onEmailVerificationLink","verifyEmail","error","Template","_resetPasswordDialog","events","resetPassword","event","keyCode","resetMessages","newPassword","document","getElementById","value","get","errorMessage","reason","helpers","inResetPasswordFlow","_justResetPasswordDialog","visible","enrollAccount","password","_enrollAccountDialog","inEnrollAccountFlow","_justVerifiedEmailDialog","_loginButtonsMessagesDialog","hasMessage","_configureLoginServiceDialog","serviceName","configuration","service","configurationFields","forEach","field","property","replace","inputs","slice","call","getElementsByTagName","loginStyle","querySelector","connection","result","Meteor","_debug","target","id","indexOf","updateSaveDisabled","anyFieldEmpty","reduce","prev","templateForService","capitalize","template","fields","configurationSteps","saveDisabled","str","String","charAt","toUpperCase","_configureLoginOnDesktopDialog"],"mappings":"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","sourcesContent":["import { displayName, dropdown, validatePassword } from './login_buttons.js';\n// for convenience\nconst loginButtonsSession = Accounts._loginButtonsSession;\n\n// since we don't want to pass around the callback that we get from our event\n// handlers, we just make it a variable for the whole file\nlet doneCallback;\n\nAccounts.onResetPasswordLink((token, done) => {\n  loginButtonsSession.set(\"resetPasswordToken\", token);\n  doneCallback = done;\n});\n\nAccounts.onEnrollmentLink((token, done) => {\n  loginButtonsSession.set(\"enrollAccountToken\", token);\n  doneCallback = done;\n});\n\nAccounts.onEmailVerificationLink((token, done) => {\n  Accounts.verifyEmail(token, error => {\n    if (! error) {\n      loginButtonsSession.set('justVerifiedEmail', true);\n    }\n\n    done();\n    // XXX show something if there was an error.\n  });\n});\n\n\n//\n// resetPasswordDialog template\n//\n\nTemplate._resetPasswordDialog.events({\n  'click #login-buttons-reset-password-button': () => resetPassword(),\n  'keypress #reset-password-new-password': event => {\n    if (event.keyCode === 13)\n      resetPassword();\n  },\n  'click #login-buttons-cancel-reset-password': () => {\n    loginButtonsSession.set('resetPasswordToken', null);\n    if (doneCallback)\n      doneCallback();\n  }\n});\n\nconst resetPassword = () => {\n  loginButtonsSession.resetMessages();\n  const newPassword = document.getElementById('reset-password-new-password').value;\n  if (!validatePassword(newPassword))\n    return;\n\n  Accounts.resetPassword(\n    loginButtonsSession.get('resetPasswordToken'), newPassword,\n    error => {\n      if (error) {\n        loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n      } else {\n        loginButtonsSession.set('resetPasswordToken', null);\n        loginButtonsSession.set('justResetPassword', true);\n        if (doneCallback)\n          doneCallback();\n      }\n    });\n};\n\nTemplate._resetPasswordDialog.helpers({\n  displayName,\n  inResetPasswordFlow: () => loginButtonsSession.get('resetPasswordToken'),\n});\n\n//\n// justResetPasswordDialog template\n//\n\nTemplate._justResetPasswordDialog.events({\n  'click #just-verified-dismiss-button': () =>\n    loginButtonsSession.set('justResetPassword', false),\n});\n\nTemplate._justResetPasswordDialog.helpers({\n  visible: () => loginButtonsSession.get('justResetPassword'),\n  displayName,\n});\n\n\n\n//\n// enrollAccountDialog template\n//\n\nconst enrollAccount = () => {\n  loginButtonsSession.resetMessages();\n  const password = document.getElementById('enroll-account-password').value;\n  if (!validatePassword(password))\n    return;\n\n  Accounts.resetPassword(\n    loginButtonsSession.get('enrollAccountToken'), password,\n    error => {\n      if (error) {\n        loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n      } else {\n        loginButtonsSession.set('enrollAccountToken', null);\n        if (doneCallback)\n          doneCallback();\n      }\n    });\n};\n\nTemplate._enrollAccountDialog.events({\n  'click #login-buttons-enroll-account-button': enrollAccount,\n  'keypress #enroll-account-password': event => {\n    if (event.keyCode === 13)\n      enrollAccount();\n  },\n  'click #login-buttons-cancel-enroll-account': () => {\n    loginButtonsSession.set('enrollAccountToken', null);\n    if (doneCallback)\n      doneCallback();\n  }\n});\n\nTemplate._enrollAccountDialog.helpers({\n  displayName,\n  inEnrollAccountFlow: () => loginButtonsSession.get('enrollAccountToken'),\n});\n\n\n//\n// justVerifiedEmailDialog template\n//\n\nTemplate._justVerifiedEmailDialog.events({\n  'click #just-verified-dismiss-button': () =>\n    loginButtonsSession.set('justVerifiedEmail', false),\n});\n\nTemplate._justVerifiedEmailDialog.helpers({\n  visible: () => loginButtonsSession.get('justVerifiedEmail'),\n  displayName,\n});\n\n\n//\n// loginButtonsMessagesDialog template\n//\n\nTemplate._loginButtonsMessagesDialog.events({\n  'click #messages-dialog-dismiss-button': () =>\n    loginButtonsSession.resetMessages(),\n});\n\nTemplate._loginButtonsMessagesDialog.helpers({\n  visible: () => {\n    const hasMessage = loginButtonsSession.get('infoMessage') || loginButtonsSession.get('errorMessage');\n    return !dropdown() && hasMessage;\n  }\n});\n\n\n//\n// configureLoginServiceDialog template\n//\n\nTemplate._configureLoginServiceDialog.events({\n  'click .configure-login-service-dismiss-button': () =>\n    loginButtonsSession.set('configureLoginServiceDialogVisible', false),\n  'click #configure-login-service-dialog-save-configuration': () => {\n    if (loginButtonsSession.get('configureLoginServiceDialogVisible') &&\n        ! loginButtonsSession.get('configureLoginServiceDialogSaveDisabled')) {\n      // Prepare the configuration document for this login service\n      const serviceName = loginButtonsSession.get('configureLoginServiceDialogServiceName');\n      const configuration = {\n        service: serviceName\n      };\n\n      // Fetch the value of each input field\n      configurationFields().forEach(field => {\n        configuration[field.property] = document.getElementById(\n          `configure-login-service-dialog-${field.property}`).value\n          .replace(/^\\s*|\\s*$/g, \"\"); // trim() doesnt work on IE8;\n      });\n\n      // Replacement of single use of jQuery in this package so we can remove\n      // the dependency\n      const inputs = [].slice.call( // Because HTMLCollections aren't arrays\n        document\n          .getElementById('configure-login-service-dialog')\n          .getElementsByTagName('input')\n      );\n\n      configuration.loginStyle =\n        document.querySelector('#configure-login-service-dialog input[name=\"loginStyle\"]:checked').value;\n\n      // Configure this login service\n      Accounts.connection.call(\n        \"configureLoginService\", configuration, (error, result) => {\n          if (error)\n            Meteor._debug(`Error configuring login service ${serviceName}`,\n                          error);\n          else\n            loginButtonsSession.set('configureLoginServiceDialogVisible',\n                                    false);\n        });\n    }\n  },\n  // IE8 doesn't support the 'input' event, so we'll run this on the keyup as\n  // well. (Keeping the 'input' event means that this also fires when you use\n  // the mouse to change the contents of the field, eg 'Cut' menu item.)\n  'input, keyup input': event => {\n    // if the event fired on one of the configuration input fields,\n    // check whether we should enable the 'save configuration' button\n    if (event.target.id.indexOf('configure-login-service-dialog') === 0)\n      updateSaveDisabled();\n  }\n});\n\n// check whether the 'save configuration' button should be enabled.\n// this is a really strange way to implement this and a Forms\n// Abstraction would make all of this reactive, and simpler.\nconst updateSaveDisabled = () => {\n  const anyFieldEmpty = configurationFields().reduce((prev, field) =>\n    prev || document.getElementById(\n      `configure-login-service-dialog-${field.property}`\n    ).value === '',\n    false\n  );\n\n  loginButtonsSession.set('configureLoginServiceDialogSaveDisabled', anyFieldEmpty);\n};\n\n// Returns the appropriate template for this login service.  This\n// template should be defined in the service's package\nTemplate._configureLoginServiceDialog.templateForService = serviceName => {\n  serviceName = serviceName || loginButtonsSession.get('configureLoginServiceDialogServiceName');\n  // XXX Service providers should be able to specify their configuration\n  // template name.\n  return Template[`configureLoginServiceDialogFor${\n                  serviceName === 'meteor-developer' ?\n                   'MeteorDeveloper' :\n                   capitalize(serviceName)}`];\n};\n\nconst configurationFields = () => {\n  const template = Template._configureLoginServiceDialog.templateForService();\n  return template.fields();\n};\n\nTemplate._configureLoginServiceDialog.helpers({\n  configurationFields,\n  visible: () => loginButtonsSession.get('configureLoginServiceDialogVisible'),\n  // renders the appropriate template\n  configurationSteps: () =>\n    Template._configureLoginServiceDialog.templateForService(),\n  saveDisabled: () =>\n    loginButtonsSession.get('configureLoginServiceDialogSaveDisabled'),\n});\n\n// XXX from http://epeli.github.com/underscore.string/lib/underscore.string.js\nconst capitalize = str => {\n  str = str == null ? '' : String(str);\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nTemplate._configureLoginOnDesktopDialog.helpers({\n  visible: () => loginButtonsSession.get('configureOnDesktopVisible'),\n});\n\nTemplate._configureLoginOnDesktopDialog.events({\n  'click #configure-on-desktop-dismiss-button': () =>\n    loginButtonsSession.set('configureOnDesktopVisible', false),\n});\n"]},"sourceType":"script","hash":"ec07cc83a78632d9d06f00eca6d7b6dcfa75dd62"}
