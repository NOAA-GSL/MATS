{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/templates/params/curve_param_group.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/randyp:mats-common/templates/params/curve_param_group.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/templates/params/curve_param_group.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/templates/params/curve_param_group.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/randyp:mats-common/templates/params/curve_param_group.js"}},"code":"var matsTypes;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsTypes: function (v) {\n    matsTypes = v;\n  }\n}, 0);\nvar matsCollections;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsCollections: function (v) {\n    matsCollections = v;\n  }\n}, 1);\nvar matsPlotUtils;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsPlotUtils: function (v) {\n    matsPlotUtils = v;\n  }\n}, 2);\n\nvar duplicate = function (param) {\n  var obj = {};\n  var keys = Object.keys(param);\n\n  for (var i = 0; i < keys.length; i++) {\n    if (keys[i] !== \"_id\") {\n      obj[keys[i]] = param[keys[i]];\n    }\n  }\n\n  return obj;\n};\n\nfilterParams = function (params) {\n  /*\n  If the plottype is a 2d scatter plot we need to basically create a new set of parameters (except for the label)\n  for each axis. The double set of parameters will get sent back to the backend.\n   */\n  if (matsPlotUtils.getPlotType() === matsTypes.PlotTypes.scatter2d) {\n    var xparams = [];\n    var yparams = [];\n    var newParams = [];\n\n    for (var i = 0; i < params.length; i++) {\n      var xp = duplicate(params[i]);\n      xp.name = \"xaxis-\" + params[i].name;\n      xp.hidden = true;\n      xparams.push(xp);\n      var yp = duplicate(params[i]);\n      yp.name = \"yaxis-\" + params[i].name;\n      yp.hidden = true;\n      yparams.push(yp);\n    }\n\n    newParams = newParams.concat(params);\n    newParams = newParams.concat(xparams);\n    newParams = newParams.concat(yparams);\n    return newParams;\n  } else {\n    return params;\n  }\n};\n\nTemplate.curveParamGroup.helpers({\n  CurveParams: function (num) {\n    var restoreSettingsTime = Session.get(\"restoreSettingsTime\"); // used to force re-render\n\n    var lastUpdate = Session.get('lastUpdate');\n    var params = matsCollections.CurveParams.find({\n      displayGroup: num\n    }, {\n      sort: [\"displayOrder\", \"asc\"]\n    }).fetch();\n    params = filterParams(params);\n    return params;\n  },\n  displayGroup: function () {\n    return \"block\";\n  },\n  log: function () {\n    console.log(this);\n  }\n});","map":{"version":3,"sources":["packages/randyp:mats-common/templates/params/curve_param_group.js"],"names":["matsTypes","module","link","v","matsCollections","matsPlotUtils","duplicate","param","obj","keys","Object","i","length","filterParams","params","getPlotType","PlotTypes","scatter2d","xparams","yparams","newParams","xp","name","hidden","push","yp","concat","Template","curveParamGroup","helpers","CurveParams","num","restoreSettingsTime","Session","get","lastUpdate","find","displayGroup","sort","fetch","log","console"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2019 Colorado State University and Regents of the University of Colorado. All rights reserved.\n */\n\nimport { matsTypes } from 'meteor/randyp:mats-common';\n import { matsCollections } from 'meteor/randyp:mats-common';\nimport { matsPlotUtils } from 'meteor/randyp:mats-common';\n\nvar duplicate = function(param) {\n    var obj = {};\n    var keys = Object.keys(param);\n    for (var i=0; i<keys.length;i++){\n        if (keys[i] !== \"_id\") {\n            obj[keys[i]] = param[keys[i]];\n        }\n    }\n    return obj;\n};\n\nfilterParams = function(params) {\n/*\nIf the plottype is a 2d scatter plot we need to basically create a new set of parameters (except for the label)\nfor each axis. The double set of parameters will get sent back to the backend.\n */\n    if (matsPlotUtils.getPlotType() === matsTypes.PlotTypes.scatter2d) {\n        var xparams = [];\n        var yparams = [];\n        var newParams = [];\n        for (var i = 0; i < params.length;i++) {\n            var xp = duplicate(params[i]);\n            xp.name = \"xaxis-\" + params[i].name;\n            xp.hidden = true;\n            xparams.push(xp);\n            var yp = duplicate(params[i]);\n            yp.name = \"yaxis-\" + params[i].name;\n            yp.hidden = true;\n            yparams.push(yp);\n        }\n        newParams = newParams.concat(params);\n        newParams = newParams.concat(xparams);\n        newParams = newParams.concat(yparams);\n        return newParams;\n    } else {\n        return params;\n    }\n};\n\nTemplate.curveParamGroup.helpers({\n    CurveParams: function (num) {\n        var restoreSettingsTime = Session.get(\"restoreSettingsTime\"); // used to force re-render\n        var lastUpdate = Session.get('lastUpdate');\n        var params = matsCollections.CurveParams.find({displayGroup:num},{sort:[\"displayOrder\", \"asc\"]}).fetch();\n        params = filterParams(params);\n        return params;\n    },\n    displayGroup: function() {\n        return \"block\";\n    },\n    log: function() {\n        console.log(this);\n    }\n});"]},"sourceType":"script","hash":"38fa92abfb6c6970df2ad188f36be355eb834c46"}
