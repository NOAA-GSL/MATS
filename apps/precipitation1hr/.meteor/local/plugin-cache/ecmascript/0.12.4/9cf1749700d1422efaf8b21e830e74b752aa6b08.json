{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/templates/curves/curve_item.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/randyp:mats-common/templates/curves/curve_item.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/templates/curves/curve_item.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/templates/curves/curve_item.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/randyp:mats-common/templates/curves/curve_item.js"}},"code":"var matsTypes;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsTypes: function (v) {\n    matsTypes = v;\n  }\n}, 0);\nvar matsCollections;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsCollections: function (v) {\n    matsCollections = v;\n  }\n}, 1);\nvar matsCurveUtils;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsCurveUtils: function (v) {\n    matsCurveUtils = v;\n  }\n}, 2);\nvar matsPlotUtils;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsPlotUtils: function (v) {\n    matsPlotUtils = v;\n  }\n}, 3);\nvar matsParamUtils;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsParamUtils: function (v) {\n    matsParamUtils = v;\n  }\n}, 4);\nlabel;\nTemplate.curveItem.onRendered(function () {\n  // the value used for the colorpicker (l) MUST match the returned value in the colorpick helper\n  label = this.data.label;\n  $(function () {\n    var l = '.' + label + '-colorpick';\n    $(l).colorpicker({\n      format: \"rgb\",\n      align: \"left\"\n    });\n  });\n});\nTemplate.curveItem.helpers({\n  removeCurve: function () {\n    var confirmRemoveCurve = Session.get(\"confirmRemoveCurve\");\n    return confirmRemoveCurve ? confirmRemoveCurve.label : null;\n  },\n  displayEditXaxis: function () {\n    if (Session.get('plotType') === matsTypes.PlotTypes.scatter2d) {\n      return \"block\";\n    }\n\n    return \"none\";\n  },\n  displayEditYaxis: function () {\n    if (Session.get('plotType') === matsTypes.PlotTypes.scatter2d) {\n      return \"block\";\n    }\n\n    return \"none\";\n  },\n  displayEdit: function () {\n    if (Session.get('plotType') === matsTypes.PlotTypes.scatter2d) {\n      return \"none\";\n    }\n\n    return \"block\";\n  },\n  colorpick: function () {\n    var l = this.label + '-colorpick';\n    return l;\n  },\n  text: function () {\n    if (this.diffFrom === undefined) {\n      var plotType = Session.get('plotType');\n\n      if (plotType === undefined) {\n        var pfuncs = matsCollections.PlotGraphFunctions.find({}).fetch();\n\n        for (var i = 0; i < pfuncs.length; i++) {\n          if (pfuncs[i].checked === true) {\n            Session.set('plotType', pfuncs[i].plotType);\n          }\n        }\n\n        plotType = Session.get('plotType');\n      }\n\n      if (this.region) {\n        this.regionName = this.region.split(' ')[0];\n      }\n\n      return matsPlotUtils.getCurveText(plotType, this);\n    } else {\n      return this.label + \":  Difference\";\n    }\n  },\n  color: function () {\n    return this.color;\n  },\n  label: function () {\n    return this.label;\n  },\n  defaultColor: function () {\n    var curves = Session.get('Curves');\n    var label = this.label;\n\n    for (var i = 0; i < curves.length; i++) {\n      if (curves[i].label === label) {\n        return curves[i].color;\n      }\n    }\n  },\n  curveNumber: function () {\n    var label = this.label;\n    var curves = Session.get(\"Curves\");\n    var index = curves.findIndex(function (obj) {\n      return obj.label === label;\n    });\n    return index;\n  },\n  log: function () {\n    console.log(this);\n  },\n  DBcurve: function () {\n    return this.diffFrom === undefined;\n  },\n  editingThis: function () {\n    return Session.get('editMode') === this.label;\n  },\n  editCurve: function () {\n    return Session.get('editMode');\n  },\n  editTarget: function () {\n    return Session.get(\"eventTargetCurve\");\n  }\n});\n\nvar setParamsToAxis = function (newAxis, currentParams) {\n  // reset scatter plot apply stuff\n  matsCurveUtils.resetScatterApply(); // set param values to this curve\n  // reset the form parameters for the superiors first\n\n  var currentParamName;\n  var params = matsCollections.CurveParams.find({\n    \"dependentNames\": {\n      \"$exists\": true\n    }\n  }).fetch();\n\n  for (var p = 0; p < params.length; p++) {\n    var plotParam = params[p]; // do any date parameters - there are no axis date params in a scatter plot\n\n    if (plotParam.type === matsTypes.InputTypes.dateRange) {\n      if (currentParams[plotParam.name] === undefined) {\n        continue; // just like continue\n      }\n\n      var dateArr = currentParams[plotParam.name].split(' - ');\n      var from = dateArr[0];\n      var to = dateArr[1];\n      var idref = \"#\" + plotParam.name + \"-item\";\n      $(idref).data('daterangepicker').setStartDate(moment(from, 'MM-DD-YYYY HH:mm'));\n      $(idref).data('daterangepicker').setEndDate(moment(to, 'MM-DD-YYYY HH:mm'));\n      matsParamUtils.setValueTextForParamName(plotParam.name, currentParams[plotParam.name]);\n    } else {\n      currentParamName = currentParams[newAxis + \"-\" + plotParam.name] === undefined ? plotParam.name : newAxis + \"-\" + plotParam.name;\n      var val = currentParams[currentParamName] === null || currentParams[currentParamName] === undefined ? matsTypes.InputTypes.unused : currentParams[currentParamName];\n      matsParamUtils.setInputForParamName(plotParam.name, val);\n    }\n  } // now reset the form parameters for the dependents\n\n\n  params = matsCollections.CurveParams.find({\n    \"dependentNames\": {\n      \"$exists\": false\n    }\n  }).fetch();\n\n  for (var p = 0; p < params.length; p++) {\n    var plotParam = params[p]; // do any plot date parameters\n\n    currentParamName = currentParams[newAxis + \"-\" + plotParam.name] === undefined ? plotParam.name : newAxis + \"-\" + plotParam.name;\n\n    if (plotParam.type === matsTypes.InputTypes.dateRange) {\n      if (currentParams[currentParamName] === undefined) {\n        continue; // just like continue\n      }\n\n      var _dateArr = currentParams[currentParamName].split(' - ');\n\n      var _from = _dateArr[0];\n      var _to = _dateArr[1];\n\n      var _idref = \"#\" + plotParam.name + \"-item\";\n\n      $(_idref).data('daterangepicker').setStartDate(moment(_from, 'MM-DD-YYYY HH:mm'));\n      $(_idref).data('daterangepicker').setEndDate(moment(_to, 'MM-DD-YYYY HH:mm'));\n      matsParamUtils.setValueTextForParamName(plotParam.name, currentParams[currentParamName]);\n    } else {\n      var _val = currentParams[currentParamName] === null || currentParams[currentParamName] === undefined ? matsTypes.InputTypes.unused : currentParams[currentParamName];\n\n      matsParamUtils.setInputForParamName(plotParam.name, _val);\n    }\n  } // reset the scatter parameters\n\n\n  params = matsCollections.Scatter2dParams.find({}).fetch();\n\n  for (var p = 0; p < params.length; p++) {\n    var plotParam = params[p];\n    currentParamName = currentParams[newAxis + \"-\" + plotParam.name] === undefined ? plotParam.name : newAxis + \"-\" + plotParam.name;\n\n    var _val2 = currentParams[currentParamName] === null || currentParams[currentParamName] === undefined ? matsTypes.InputTypes.unused : currentParams[currentParamName];\n\n    matsParamUtils.setInputForParamName(plotParam.name, _val2);\n  }\n\n  matsParamUtils.collapseParams();\n  return false;\n};\n\nvar curveListEditNode; // used to pass the edit button to the modal continue\n\nTemplate.curveItem.events({\n  'click .save-changes': function () {\n    $(\".displayBtn\").css({\n      border: \"\"\n    }); // clear any borders from any display buttons\n\n    document.getElementById('save').click();\n    Session.set(\"paramWellColor\", \"#f5f5f5\");\n  },\n  'click .cancel': function () {\n    $(\".displayBtn\").css({\n      border: \"\"\n    }); // clear any borders from any display buttons\n\n    document.getElementById('cancel').click();\n    Session.set(\"paramWellColor\", \"#f5f5f5\");\n  },\n  'click .remove-curve': function (event) {\n    var removeCurve = Session.get(\"confirmRemoveCurve\");\n\n    if (removeCurve && removeCurve.confirm) {\n      var label = removeCurve.label;\n      var color = removeCurve.color;\n\n      var Curves = _.reject(Session.get('Curves'), function (item) {\n        return item.label === label;\n      });\n\n      Session.set('Curves', Curves);\n      matsCurveUtils.clearUsedLabel(label);\n      matsCurveUtils.clearUsedColor(color);\n      matsCurveUtils.checkDiffs();\n      Session.set(\"confirmRemoveCurve\", \"\");\n      Session.set(\"lastUpdate\", Date.now());\n\n      if (Curves.length === 0) {\n        location.reload(true);\n      }\n\n      return false;\n    } else {\n      Session.set(\"confirmRemoveCurve\", {\n        label: this.label,\n        color: this.color\n      });\n      $(\"#modal-confirm-remove-curve\").modal();\n    }\n  },\n  'click .confirm-remove-curve': function () {\n    var confirmCurve = Session.get(\"confirmRemoveCurve\");\n    Session.set(\"confirmRemoveCurve\", {\n      label: confirmCurve.label,\n      color: confirmCurve.color,\n      confirm: true\n    });\n    $(\"#curve-list-remove\").trigger('click');\n  },\n  'click .edit-curve-xaxis': function (event) {\n    Session.set('axis', 'xaxis');\n    Session.set('editMode', this.label);\n    var currentParams = jQuery.extend({}, this);\n    setParamsToAxis('xaxis', currentParams);\n  },\n  'click .edit-curve-yaxis': function (event) {\n    Session.set('axis', 'yaxis');\n    Session.set('editMode', this.label);\n    var currentParams = jQuery.extend({}, this);\n    setParamsToAxis('yaxis', currentParams);\n  },\n  'click .edit-curve': function (event) {\n    var srcEditButton = event.currentTarget;\n    var name = srcEditButton.name;\n    var editingCurve = Session.get('editMode');\n    curveListEditNode = $(event.currentTarget.parentNode.parentNode.parentNode.parentNode).find(\"#curve-list-edit\");\n    var eventTargetCurve = $(event.currentTarget.parentNode.parentNode.parentNode).find(\".displayItemLabelSpan\").text().trim();\n    Session.set(\"eventTargetCurve\", eventTargetCurve);\n    Session.set(\"intendedActiveDisplayButton\", name);\n    Session.set(\"activeDisplayButton\", name);\n\n    if (editingCurve !== undefined && editingCurve !== \"\" && editingCurve !== eventTargetCurve) {\n      // editing a different curve // have to do the modal for confirmation\n      $(\"#confirm-lost-edits\").modal();\n      return;\n    }\n\n    Session.set('editMode', this.label); // reset scatter plot apply stuff\n\n    matsCurveUtils.resetScatterApply(); // capture the current parameters from the curveItem\n\n    var currentParams = jQuery.extend({}, this); // set param values to this curve\n    // reset the form parameters for the superiors first\n\n    var params = matsCollections.CurveParams.find({\n      \"dependentNames\": {\n        \"$exists\": true\n      }\n    }).fetch();\n\n    for (var p = 0; p < params.length; p++) {\n      var plotParam = params[p]; // do any curve date parameters\n\n      if (plotParam.type === matsTypes.InputTypes.dateRange) {\n        if (currentParams[plotParam.name] === undefined) {\n          continue; // just like continue\n        }\n\n        var dateArr = currentParams[plotParam.name].split(' - ');\n        var from = dateArr[0];\n        var to = dateArr[1];\n        var idref = \"#\" + plotParam.name + \"-item\";\n        $(idref).data('daterangepicker').setStartDate(moment(from, 'MM-DD-YYYY HH:mm'));\n        $(idref).data('daterangepicker').setEndDate(moment(to, 'MM-DD-YYYY HH:mm'));\n        matsParamUtils.setValueTextForParamName(plotParam.name, currentParams[plotParam.name]);\n      } else {\n        var val = currentParams[plotParam.name] === null || currentParams[plotParam.name] === undefined ? matsTypes.InputTypes.unused : currentParams[plotParam.name];\n        matsParamUtils.setInputForParamName(plotParam.name, val); // refresh its dependents\n\n        matsSelectUtils.refreshDependents(null, plotParam);\n      }\n    } // now reset the form parameters for anything with hide/disable controls\n\n\n    params = matsCollections.CurveParams.find({\n      \"$and\": [{\n        \"dependentNames\": {\n          \"$exists\": false\n        }\n      }, {\n        \"$or\": [{\n          \"hideOtherFor\": {\n            \"$exists\": true\n          }\n        }, {\n          \"disableOtherFor\": {\n            \"$exists\": true\n          }\n        }]\n      }]\n    }).fetch();\n\n    for (var p = 0; p < params.length; p++) {\n      var plotParam = params[p]; // do any plot date parameters\n\n      if (plotParam.type === matsTypes.InputTypes.dateRange) {\n        if (currentParams[plotParam.name] === undefined) {\n          continue; // just like continue\n        }\n\n        var _dateArr2 = currentParams[plotParam.name].split(' - ');\n\n        var _from2 = _dateArr2[0];\n        var _to2 = _dateArr2[1];\n\n        var _idref2 = \"#\" + plotParam.name + \"-item\";\n\n        $(_idref2).data('daterangepicker').setStartDate(moment(_from2, 'MM-DD-YYYY HH:mm'));\n        $(_idref2).data('daterangepicker').setEndDate(moment(_to2, 'MM-DD-YYYY HH:mm'));\n        matsParamUtils.setValueTextForParamName(plotParam.name, currentParams[plotParam.name]);\n      } else {\n        var val = currentParams[plotParam.name] === null || currentParams[plotParam.name] === undefined ? matsTypes.InputTypes.unused : currentParams[plotParam.name];\n        matsParamUtils.setInputForParamName(plotParam.name, val);\n      }\n    } // now reset the form parameters for everything else\n\n\n    params = matsCollections.CurveParams.find({\n      \"$and\": [{\n        \"dependentNames\": {\n          \"$exists\": false\n        }\n      }, {\n        \"$and\": [{\n          \"hideOtherFor\": {\n            \"$exists\": false\n          }\n        }, {\n          \"disableOtherFor\": {\n            \"$exists\": false\n          }\n        }]\n      }]\n    }).fetch();\n\n    for (var p = 0; p < params.length; p++) {\n      var plotParam = params[p]; // do any plot date parameters\n\n      if (plotParam.type === matsTypes.InputTypes.dateRange) {\n        if (currentParams[plotParam.name] === undefined) {\n          continue; // just like continue\n        }\n\n        var _dateArr3 = currentParams[plotParam.name].split(' - ');\n\n        var _from3 = _dateArr3[0];\n        var _to3 = _dateArr3[1];\n\n        var _idref3 = \"#\" + plotParam.name + \"-item\";\n\n        $(_idref3).data('daterangepicker').setStartDate(moment(_from3, 'MM-DD-YYYY HH:mm'));\n        $(_idref3).data('daterangepicker').setEndDate(moment(_to3, 'MM-DD-YYYY HH:mm'));\n        matsParamUtils.setValueTextForParamName(plotParam.name, currentParams[plotParam.name]);\n      } else {\n        var val = currentParams[plotParam.name] === null || currentParams[plotParam.name] === undefined ? matsTypes.InputTypes.unused : currentParams[plotParam.name];\n        matsParamUtils.setInputForParamName(plotParam.name, val);\n      }\n    } // reset the scatter parameters\n\n\n    params = matsCollections.Scatter2dParams.find({}).fetch();\n\n    for (var p = 0; p < params.length; p++) {\n      var plotParam = params[p];\n\n      var _val3 = currentParams[plotParam.name] === null || currentParams[plotParam.name] === undefined ? matsTypes.InputTypes.unused : currentParams[plotParam.name];\n\n      matsParamUtils.setInputForParamName(plotParam.name, _val3);\n    }\n\n    matsParamUtils.collapseParams();\n    return false;\n  },\n  'hidePicker': function () {\n    var Curves = Session.get('Curves');\n    var label = this.label;\n\n    for (var i = 0; i < Curves.length; i++) {\n      if (label === Curves[i].label) {\n        Curves[i].color = document.getElementById(label + \"-color-value\").value;\n      }\n    }\n\n    Session.set('Curves', Curves);\n    return false;\n  },\n  'click .displayBtn': function (event) {\n    var srcDisplayButton = event.currentTarget;\n    var name = srcDisplayButton.name;\n    var inputElem = matsParamUtils.getInputElementForParamName(name);\n    var controlElem = matsParamUtils.getControlElementForParamName(name);\n    var editingCurve = Session.get('editMode');\n\n    if (name.startsWith('xaxis')) {\n      curveListEditNode = $(event.currentTarget.parentNode.parentNode.parentNode.parentNode).find(\"#curve-list-edit-xaxis\");\n    } else if (name.startsWith('yaxis')) {\n      curveListEditNode = $(event.currentTarget.parentNode.parentNode.parentNode.parentNode).find(\"#curve-list-edit-yaxis\");\n    } else {\n      if (matsPlotUtils.getPlotType() === matsTypes.PlotTypes.scatter2d) {\n        // for a scatter param that is not axis specific we still have to choos an axis - just choose x\n        curveListEditNode = $(event.currentTarget.parentNode.parentNode.parentNode.parentNode).find(\"#curve-list-edit-xaxis\");\n      } else {\n        curveListEditNode = $(event.currentTarget.parentNode.parentNode.parentNode.parentNode).find(\"#curve-list-edit\");\n      }\n    }\n\n    var eventTargetCurve = $(event.currentTarget.parentNode.parentNode.parentNode).find(\".displayItemLabelSpan\").text().trim();\n    Session.set(\"eventTargetCurve\", eventTargetCurve);\n    Session.set(\"intendedActiveDisplayButton\", name);\n    Session.set(\"activeDisplayButton\", name);\n\n    if (editingCurve !== undefined && editingCurve !== \"\" && editingCurve !== eventTargetCurve) {\n      // editing a different curve // have to do the modal for confirmation\n      $(\"#confirm-lost-edits\").modal();\n      return;\n    }\n\n    inputElem && inputElem.focus();\n    curveListEditNode.click();\n    controlElem && controlElem.click();\n    Session.set(\"elementChanged\", Date.now());\n  },\n  'click .continue-lose-edits': function () {\n    var intendedName = Session.get(\"intendedActiveDisplayButton\");\n    var activeDisplayButton = Session.set(\"activeDisplayButton\", intendedName);\n    document.getElementById('cancel').click();\n    Session.set(\"paramWellColor\", \"#f5f5f5\");\n    var controlElem = matsParamUtils.getControlElementForParamName(intendedName);\n    var inputElem = matsParamUtils.getInputElementForParamName(intendedName);\n    inputElem && inputElem.focus();\n    curveListEditNode.click();\n    controlElem && controlElem.click();\n    Session.set(\"elementChanged\", Date.now());\n  },\n  'click .cancle-lose-edits': function () {\n    // don't change the active button\n    var name = Session.get(\"activeDisplayButton\");\n    var controlElem = matsParamUtils.getControlElementForParamName(name);\n    var inputElem = matsParamUtils.getInputElementForParamName(name);\n    inputElem && inputElem.focus();\n    controlElem && controlElem.click();\n    Session.set(\"elementChanged\", Date.now());\n  },\n  'click .fa-paint-brush': function () {\n    $(\"#\" + this.label + \"-color-value\").trigger('click');\n  }\n});","map":{"version":3,"sources":["packages/randyp:mats-common/templates/curves/curve_item.js"],"names":["matsTypes","module","link","v","matsCollections","matsCurveUtils","matsPlotUtils","matsParamUtils","label","Template","curveItem","onRendered","data","$","l","colorpicker","format","align","helpers","removeCurve","confirmRemoveCurve","Session","get","displayEditXaxis","PlotTypes","scatter2d","displayEditYaxis","displayEdit","colorpick","text","diffFrom","undefined","plotType","pfuncs","PlotGraphFunctions","find","fetch","i","length","checked","set","region","regionName","split","getCurveText","color","defaultColor","curves","curveNumber","index","findIndex","obj","log","console","DBcurve","editingThis","editCurve","editTarget","setParamsToAxis","newAxis","currentParams","resetScatterApply","currentParamName","params","CurveParams","p","plotParam","type","InputTypes","dateRange","name","dateArr","from","to","idref","setStartDate","moment","setEndDate","setValueTextForParamName","val","unused","setInputForParamName","Scatter2dParams","collapseParams","curveListEditNode","events","css","border","document","getElementById","click","event","confirm","Curves","_","reject","item","clearUsedLabel","clearUsedColor","checkDiffs","Date","now","location","reload","modal","confirmCurve","trigger","jQuery","extend","srcEditButton","currentTarget","editingCurve","parentNode","eventTargetCurve","trim","matsSelectUtils","refreshDependents","value","srcDisplayButton","inputElem","getInputElementForParamName","controlElem","getControlElementForParamName","startsWith","getPlotType","focus","intendedName","activeDisplayButton"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2019 Colorado State University and Regents of the University of Colorado. All rights reserved.\n */\n\nimport { matsTypes } from \"meteor/randyp:mats-common\";\nimport { matsCollections } from 'meteor/randyp:mats-common';\nimport { matsCurveUtils } from 'meteor/randyp:mats-common';\nimport { matsPlotUtils } from 'meteor/randyp:mats-common';\nimport { matsParamUtils } from 'meteor/randyp:mats-common';\nlabel;\nTemplate.curveItem.onRendered(function() {\n    // the value used for the colorpicker (l) MUST match the returned value in the colorpick helper\n    label = this.data.label;\n    $(function () {\n        var l = '.' + label + '-colorpick';\n        $(l).colorpicker({format: \"rgb\", align:\"left\"});\n    });\n});\n\nTemplate.curveItem.helpers({\n    removeCurve: function() {\n      var confirmRemoveCurve = Session.get(\"confirmRemoveCurve\");\n      return confirmRemoveCurve ? confirmRemoveCurve.label : null;\n    },\n    displayEditXaxis: function() {\n        if (Session.get('plotType') === matsTypes.PlotTypes.scatter2d) {\n            return \"block\";\n        }\n        return \"none\";\n    },\n    displayEditYaxis: function() {\n        if (Session.get('plotType') === matsTypes.PlotTypes.scatter2d) {\n            return \"block\";\n        }\n        return \"none\";\n    },\n    displayEdit: function() {\n        if (Session.get('plotType') === matsTypes.PlotTypes.scatter2d) {\n            return \"none\";\n        }\n        return \"block\";\n    },\n    colorpick: function() {\n        var l = this.label + '-colorpick';\n        return l;\n    },\n    text: function () {\n        if (this.diffFrom === undefined) {\n            var plotType = Session.get('plotType');\n            if (plotType === undefined) {\n                var pfuncs = matsCollections.PlotGraphFunctions.find({}).fetch();\n                for (var i = 0; i < pfuncs.length; i++) {\n                    if (pfuncs[i].checked === true) {\n                        Session.set('plotType', pfuncs[i].plotType);\n                    }\n                }\n                plotType = Session.get('plotType');\n            }\n            if (this.region) {\n                this.regionName = this.region.split(' ')[0];\n            }\n            return matsPlotUtils.getCurveText(plotType, this);\n        } else {\n            return this.label + \":  Difference\";\n        }\n    },\n    color: function() {\n      return this.color;\n    },\n    label: function() {\n        return this.label;\n    },\n    defaultColor: function() {\n        var curves = Session.get('Curves');\n        var label = this.label;\n        for (var i = 0; i < curves.length; i++) {\n            if (curves[i].label === label) {\n                return curves[i].color;\n            }\n        }\n    },\n    curveNumber: function() {\n        const label = this.label;\n        const curves = Session.get(\"Curves\");\n        const index = curves.findIndex(\n            function(obj){\n                return obj.label === label;\n            }\n        );\n        return index;\n    },\n    log: function() {\n        console.log(this);\n    },\n    DBcurve: function() {\n        return (this.diffFrom === undefined);\n    },\n    editingThis: function() {\n        return (Session.get('editMode') === this.label);\n    },\n    editCurve: function() {\n        return Session.get('editMode');\n    },\n    editTarget: function() {\n        return Session.get(\"eventTargetCurve\");\n    }\n});\n\nconst setParamsToAxis = function(newAxis, currentParams) {\n    // reset scatter plot apply stuff\n    matsCurveUtils.resetScatterApply();\n    // set param values to this curve\n    // reset the form parameters for the superiors first\n    var currentParamName;\n    var params = matsCollections.CurveParams.find({\"dependentNames\" : { \"$exists\" : true }}).fetch();\n    for (var p  = 0; p < params.length; p++) {\n        var plotParam = params[p];\n        // do any date parameters - there are no axis date params in a scatter plot\n        if (plotParam.type === matsTypes.InputTypes.dateRange) {\n            if (currentParams[plotParam.name] === undefined) {\n                continue;   // just like continue\n            }\n            const dateArr = currentParams[plotParam.name].split(' - ');\n            const from = dateArr[0];\n            const to = dateArr[1];\n            const idref = \"#\" + plotParam.name + \"-item\";\n            $(idref).data('daterangepicker').setStartDate(moment (from, 'MM-DD-YYYY HH:mm'));\n            $(idref).data('daterangepicker').setEndDate(moment (to, 'MM-DD-YYYY HH:mm'));\n            matsParamUtils.setValueTextForParamName(plotParam.name,currentParams[plotParam.name]);\n        } else {\n            currentParamName = currentParams[newAxis + \"-\" + plotParam.name] === undefined ?  plotParam.name : newAxis + \"-\" + plotParam.name;\n            const val =  currentParams[currentParamName] === null ||\n            currentParams[currentParamName] === undefined ? matsTypes.InputTypes.unused : currentParams[currentParamName];\n            matsParamUtils.setInputForParamName(plotParam.name, val);\n        }\n    }\n    // now reset the form parameters for the dependents\n    params = matsCollections.CurveParams.find({\"dependentNames\" : { \"$exists\" : false }}).fetch();\n    for (var p  = 0; p < params.length; p++) {\n        var plotParam = params[p];\n        // do any plot date parameters\n        currentParamName = currentParams[newAxis + \"-\" + plotParam.name] === undefined ?  plotParam.name : newAxis + \"-\" + plotParam.name;\n        if (plotParam.type === matsTypes.InputTypes.dateRange) {\n            if (currentParams[currentParamName] === undefined) {\n                continue;   // just like continue\n            }\n            const dateArr = currentParams[currentParamName].split(' - ');\n            const from = dateArr[0];\n            const to = dateArr[1];\n            const idref = \"#\" + plotParam.name + \"-item\";\n            $(idref).data('daterangepicker').setStartDate(moment (from, 'MM-DD-YYYY HH:mm'));\n            $(idref).data('daterangepicker').setEndDate(moment (to, 'MM-DD-YYYY HH:mm'));\n            matsParamUtils.setValueTextForParamName(plotParam.name,currentParams[currentParamName]);\n        } else {\n            const val =  currentParams[currentParamName] === null ||\n            currentParams[currentParamName] === undefined ? matsTypes.InputTypes.unused : currentParams[currentParamName];\n            matsParamUtils.setInputForParamName(plotParam.name, val);\n        }\n    }\n    // reset the scatter parameters\n    params = matsCollections.Scatter2dParams.find({}).fetch();\n    for (var p  = 0; p < params.length; p++) {\n        var plotParam = params[p];\n        currentParamName = currentParams[newAxis + \"-\" + plotParam.name] === undefined ?  plotParam.name : newAxis + \"-\" + plotParam.name;\n        const val =  currentParams[currentParamName] === null ||\n        currentParams[currentParamName] === undefined ? matsTypes.InputTypes.unused : currentParams[currentParamName];\n        matsParamUtils.setInputForParamName(plotParam.name, val);\n    }\n    matsParamUtils.collapseParams();\n    return false;\n\n\n};\n\nvar curveListEditNode;  // used to pass the edit button to the modal continue\nTemplate.curveItem.events({\n    'click .save-changes' : function() {\n        $(\".displayBtn\").css({border:\"\"}); // clear any borders from any display buttons\n        document.getElementById('save').click();\n        Session.set(\"paramWellColor\",\"#f5f5f5\");\n    },\n    'click .cancel' : function() {\n        $(\".displayBtn\").css({border: \"\"}); // clear any borders from any display buttons\n        document.getElementById('cancel').click();\n        Session.set(\"paramWellColor\",\"#f5f5f5\");\n    },\n    'click .remove-curve': function (event) {\n        var removeCurve = Session.get(\"confirmRemoveCurve\");\n        if (removeCurve && removeCurve.confirm) {\n            var label = removeCurve.label;\n            var color = removeCurve.color;\n            var Curves = _.reject(Session.get('Curves'), function (item) {\n                return item.label === label\n            });\n            Session.set('Curves', Curves);\n            matsCurveUtils.clearUsedLabel(label);\n            matsCurveUtils.clearUsedColor(color);\n            matsCurveUtils.checkDiffs();\n            Session.set(\"confirmRemoveCurve\",\"\");\n            Session.set(\"lastUpdate\", Date.now());\n            if (Curves.length === 0) {\n                location.reload(true);\n            }\n            return false;\n        } else{\n            Session.set(\"confirmRemoveCurve\",{label:this.label,color:this.color});\n            $(\"#modal-confirm-remove-curve\").modal();\n        }\n    },\n    'click .confirm-remove-curve': function () {\n        var confirmCurve = Session.get(\"confirmRemoveCurve\");\n        Session.set(\"confirmRemoveCurve\", {label:confirmCurve.label,color:confirmCurve.color,confirm:true});\n        $(\"#curve-list-remove\").trigger('click');\n    },\n    'click .edit-curve-xaxis': function(event) {\n        Session.set('axis','xaxis');\n        Session.set('editMode', this.label);\n        var currentParams = jQuery.extend({}, this);\n        setParamsToAxis('xaxis', currentParams);\n    },\n    'click .edit-curve-yaxis': function(event) {\n        Session.set('axis','yaxis');\n        Session.set('editMode', this.label);\n        var currentParams = jQuery.extend({}, this);\n        setParamsToAxis('yaxis',currentParams);\n    },\n    'click .edit-curve': function (event) {\n        const srcEditButton = event.currentTarget;\n        const name = srcEditButton.name;\n        const editingCurve = Session.get('editMode');\n        curveListEditNode = $(event.currentTarget.parentNode.parentNode.parentNode.parentNode).find(\"#curve-list-edit\");\n        const eventTargetCurve = $(event.currentTarget.parentNode.parentNode.parentNode).find(\".displayItemLabelSpan\").text().trim();\n        Session.set(\"eventTargetCurve\",eventTargetCurve);\n        Session.set(\"intendedActiveDisplayButton\",name);\n        Session.set(\"activeDisplayButton\",name);\n        if(editingCurve !== undefined && editingCurve !== \"\" && editingCurve !== eventTargetCurve) {\n            // editing a different curve // have to do the modal for confirmation\n            $(\"#confirm-lost-edits\").modal();\n            return;\n        }\n        Session.set('editMode', this.label);\n        // reset scatter plot apply stuff\n        matsCurveUtils.resetScatterApply();\n        // capture the current parameters from the curveItem\n        var currentParams = jQuery.extend({}, this);\n        // set param values to this curve\n        // reset the form parameters for the superiors first\n        var params = matsCollections.CurveParams.find({\"dependentNames\" : { \"$exists\" : true }}).fetch();\n        for (var p  = 0; p < params.length; p++) {\n            var plotParam = params[p];\n            // do any curve date parameters\n            if (plotParam.type === matsTypes.InputTypes.dateRange) {\n                if (currentParams[plotParam.name] === undefined) {\n                    continue;   // just like continue\n                }\n                const dateArr = currentParams[plotParam.name].split(' - ');\n                const from = dateArr[0];\n                const to = dateArr[1];\n                const idref = \"#\" + plotParam.name + \"-item\";\n                $(idref).data('daterangepicker').setStartDate(moment (from, 'MM-DD-YYYY HH:mm'));\n                $(idref).data('daterangepicker').setEndDate(moment (to, 'MM-DD-YYYY HH:mm'));\n                matsParamUtils.setValueTextForParamName(plotParam.name,currentParams[plotParam.name]);\n            } else {\n                var val =  currentParams[plotParam.name] === null ||\n                currentParams[plotParam.name] === undefined ? matsTypes.InputTypes.unused : currentParams[plotParam.name];\n                matsParamUtils.setInputForParamName(plotParam.name, val);\n                // refresh its dependents\n                matsSelectUtils.refreshDependents(null,plotParam);\n            }\n        }\n        // now reset the form parameters for anything with hide/disable controls\n        params = matsCollections.CurveParams.find({\"$and\" : [{ \"dependentNames\" : { \"$exists\" : false }}, {\"$or\" : [{ \"hideOtherFor\" : { \"$exists\" : true }}, { \"disableOtherFor\" : { \"$exists\" : true }}]}]}).fetch();\n        for (var p  = 0; p < params.length; p++) {\n            var plotParam = params[p];\n            // do any plot date parameters\n            if (plotParam.type === matsTypes.InputTypes.dateRange) {\n                if (currentParams[plotParam.name] === undefined) {\n                    continue;   // just like continue\n                }\n                const dateArr = currentParams[plotParam.name].split(' - ');\n                const from = dateArr[0];\n                const to = dateArr[1];\n                const idref = \"#\" + plotParam.name + \"-item\";\n                $(idref).data('daterangepicker').setStartDate(moment (from, 'MM-DD-YYYY HH:mm'));\n                $(idref).data('daterangepicker').setEndDate(moment (to, 'MM-DD-YYYY HH:mm'));\n                matsParamUtils.setValueTextForParamName(plotParam.name,currentParams[plotParam.name]);\n            } else {\n                var val =  currentParams[plotParam.name] === null ||\n                currentParams[plotParam.name] === undefined ? matsTypes.InputTypes.unused : currentParams[plotParam.name];\n                matsParamUtils.setInputForParamName(plotParam.name, val);\n            }\n        }\n        // now reset the form parameters for everything else\n        params = matsCollections.CurveParams.find({\"$and\" : [{ \"dependentNames\" : { \"$exists\" : false }}, {\"$and\" : [{ \"hideOtherFor\" : { \"$exists\" : false }}, { \"disableOtherFor\" : { \"$exists\" : false }}]}]}).fetch();\n        for (var p  = 0; p < params.length; p++) {\n            var plotParam = params[p];\n            // do any plot date parameters\n            if (plotParam.type === matsTypes.InputTypes.dateRange) {\n                if (currentParams[plotParam.name] === undefined) {\n                    continue;   // just like continue\n                }\n                const dateArr = currentParams[plotParam.name].split(' - ');\n                const from = dateArr[0];\n                const to = dateArr[1];\n                const idref = \"#\" + plotParam.name + \"-item\";\n                $(idref).data('daterangepicker').setStartDate(moment (from, 'MM-DD-YYYY HH:mm'));\n                $(idref).data('daterangepicker').setEndDate(moment (to, 'MM-DD-YYYY HH:mm'));\n                matsParamUtils.setValueTextForParamName(plotParam.name,currentParams[plotParam.name]);\n            } else {\n                var val =  currentParams[plotParam.name] === null ||\n                currentParams[plotParam.name] === undefined ? matsTypes.InputTypes.unused : currentParams[plotParam.name];\n                matsParamUtils.setInputForParamName(plotParam.name, val);\n            }\n        }\n        // reset the scatter parameters\n        params = matsCollections.Scatter2dParams.find({}).fetch();\n        for (var p  = 0; p < params.length; p++) {\n            var plotParam = params[p];\n            const val =  currentParams[plotParam.name] === null ||\n            currentParams[plotParam.name] === undefined ? matsTypes.InputTypes.unused : currentParams[plotParam.name];\n            matsParamUtils.setInputForParamName(plotParam.name, val);\n        }\n        matsParamUtils.collapseParams();\n        return false;\n    },\n    'hidePicker': function() {\n        var Curves = Session.get('Curves');\n        var label = this.label;\n        for (var i = 0; i < Curves.length; i++) {\n            if (label === Curves[i].label) {\n                Curves[i].color = document.getElementById(label + \"-color-value\").value;\n            }\n        }\n        Session.set('Curves',Curves);\n        return false;\n    },\n    'click .displayBtn': function (event) {\n        const srcDisplayButton = event.currentTarget;\n        const name = srcDisplayButton.name;\n        const inputElem = matsParamUtils.getInputElementForParamName(name);\n        const controlElem = matsParamUtils.getControlElementForParamName(name);\n        const editingCurve = Session.get('editMode');\n        if (name.startsWith('xaxis')) {\n            curveListEditNode = $(event.currentTarget.parentNode.parentNode.parentNode.parentNode).find(\"#curve-list-edit-xaxis\");\n        } else if (name.startsWith('yaxis')) {\n            curveListEditNode = $(event.currentTarget.parentNode.parentNode.parentNode.parentNode).find(\"#curve-list-edit-yaxis\");\n        } else {\n            if (matsPlotUtils.getPlotType() === matsTypes.PlotTypes.scatter2d) {\n                // for a scatter param that is not axis specific we still have to choos an axis - just choose x\n                curveListEditNode = $(event.currentTarget.parentNode.parentNode.parentNode.parentNode).find(\"#curve-list-edit-xaxis\");\n            } else {\n                curveListEditNode = $(event.currentTarget.parentNode.parentNode.parentNode.parentNode).find(\"#curve-list-edit\");\n            }\n        }\n        const eventTargetCurve = $(event.currentTarget.parentNode.parentNode.parentNode).find(\".displayItemLabelSpan\").text().trim();\n        Session.set(\"eventTargetCurve\",eventTargetCurve);\n        Session.set(\"intendedActiveDisplayButton\",name);\n        Session.set(\"activeDisplayButton\",name);\n        if(editingCurve !== undefined && editingCurve !== \"\" && editingCurve !== eventTargetCurve) {\n            // editing a different curve // have to do the modal for confirmation\n            $(\"#confirm-lost-edits\").modal();\n            return;\n        }\n        inputElem && inputElem.focus();\n        curveListEditNode.click();\n        controlElem && controlElem.click();\n        Session.set(\"elementChanged\", Date.now());\n    },\n    'click .continue-lose-edits': function() {\n        const intendedName = Session.get(\"intendedActiveDisplayButton\");\n        var activeDisplayButton = Session.set(\"activeDisplayButton\", intendedName);\n        document.getElementById('cancel').click();\n        Session.set(\"paramWellColor\", \"#f5f5f5\");\n        const controlElem = matsParamUtils.getControlElementForParamName(intendedName);\n        const inputElem = matsParamUtils.getInputElementForParamName(intendedName);\n        inputElem && inputElem.focus();\n        curveListEditNode.click();\n        controlElem && controlElem.click();\n        Session.set(\"elementChanged\", Date.now());\n    },\n    'click .cancle-lose-edits': function() {\n        // don't change the active button\n        const name = Session.get(\"activeDisplayButton\");\n        const controlElem = matsParamUtils.getControlElementForParamName(name);\n        const inputElem = matsParamUtils.getInputElementForParamName(name);\n        inputElem && inputElem.focus();\n        controlElem && controlElem.click();\n        Session.set(\"elementChanged\", Date.now());\n    },\n    'click .fa-paint-brush': function() {\n        $(\"#\" + this.label + \"-color-value\").trigger('click');\n    }\n});"]},"sourceType":"script","hash":"9cf1749700d1422efaf8b21e830e74b752aa6b08"}
