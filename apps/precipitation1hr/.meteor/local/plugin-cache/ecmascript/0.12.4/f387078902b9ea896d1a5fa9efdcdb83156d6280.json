{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/ddp-server/livedata_server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/ddp-server/livedata_server.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/ddp-server/livedata_server.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/ddp-server/livedata_server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/ddp-server/livedata_server.js"}},"code":"DDPServer = {};\n\nvar Fiber = Npm.require('fibers'); // This file contains classes:\n// * Session - The server's connection to a single DDP client\n// * Subscription - A single subscription for a single client\n// * Server - An entire server that may talk to > 1 client. A DDP endpoint.\n//\n// Session and Subscription are file scope. For now, until we freeze\n// the interface, Server is package scope (in the future it should be\n// exported.)\n// Represents a single document in a SessionCollectionView\n\n\nvar SessionDocumentView = function () {\n  var self = this;\n  self.existsIn = {}; // set of subscriptionHandle\n\n  self.dataByKey = {}; // key-> [ {subscriptionHandle, value} by precedence]\n};\n\nDDPServer._SessionDocumentView = SessionDocumentView;\n\n_.extend(SessionDocumentView.prototype, {\n  getFields: function () {\n    var self = this;\n    var ret = {};\n\n    _.each(self.dataByKey, function (precedenceList, key) {\n      ret[key] = precedenceList[0].value;\n    });\n\n    return ret;\n  },\n  clearField: function (subscriptionHandle, key, changeCollector) {\n    var self = this; // Publish API ignores _id if present in fields\n\n    if (key === \"_id\") return;\n    var precedenceList = self.dataByKey[key]; // It's okay to clear fields that didn't exist. No need to throw\n    // an error.\n\n    if (!precedenceList) return;\n    var removedValue = undefined;\n\n    for (var i = 0; i < precedenceList.length; i++) {\n      var precedence = precedenceList[i];\n\n      if (precedence.subscriptionHandle === subscriptionHandle) {\n        // The view's value can only change if this subscription is the one that\n        // used to have precedence.\n        if (i === 0) removedValue = precedence.value;\n        precedenceList.splice(i, 1);\n        break;\n      }\n    }\n\n    if (_.isEmpty(precedenceList)) {\n      delete self.dataByKey[key];\n      changeCollector[key] = undefined;\n    } else if (removedValue !== undefined && !EJSON.equals(removedValue, precedenceList[0].value)) {\n      changeCollector[key] = precedenceList[0].value;\n    }\n  },\n  changeField: function (subscriptionHandle, key, value, changeCollector, isAdd) {\n    var self = this; // Publish API ignores _id if present in fields\n\n    if (key === \"_id\") return; // Don't share state with the data passed in by the user.\n\n    value = EJSON.clone(value);\n\n    if (!_.has(self.dataByKey, key)) {\n      self.dataByKey[key] = [{\n        subscriptionHandle: subscriptionHandle,\n        value: value\n      }];\n      changeCollector[key] = value;\n      return;\n    }\n\n    var precedenceList = self.dataByKey[key];\n    var elt;\n\n    if (!isAdd) {\n      elt = _.find(precedenceList, function (precedence) {\n        return precedence.subscriptionHandle === subscriptionHandle;\n      });\n    }\n\n    if (elt) {\n      if (elt === precedenceList[0] && !EJSON.equals(value, elt.value)) {\n        // this subscription is changing the value of this field.\n        changeCollector[key] = value;\n      }\n\n      elt.value = value;\n    } else {\n      // this subscription is newly caring about this field\n      precedenceList.push({\n        subscriptionHandle: subscriptionHandle,\n        value: value\n      });\n    }\n  }\n});\n/**\n * Represents a client's view of a single collection\n * @param {String} collectionName Name of the collection it represents\n * @param {Object.<String, Function>} sessionCallbacks The callbacks for added, changed, removed\n * @class SessionCollectionView\n */\n\n\nvar SessionCollectionView = function (collectionName, sessionCallbacks) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.documents = {};\n  self.callbacks = sessionCallbacks;\n};\n\nDDPServer._SessionCollectionView = SessionCollectionView;\n\n_.extend(SessionCollectionView.prototype, {\n  isEmpty: function () {\n    var self = this;\n    return _.isEmpty(self.documents);\n  },\n  diff: function (previous) {\n    var self = this;\n    DiffSequence.diffObjects(previous.documents, self.documents, {\n      both: _.bind(self.diffDocument, self),\n      rightOnly: function (id, nowDV) {\n        self.callbacks.added(self.collectionName, id, nowDV.getFields());\n      },\n      leftOnly: function (id, prevDV) {\n        self.callbacks.removed(self.collectionName, id);\n      }\n    });\n  },\n  diffDocument: function (id, prevDV, nowDV) {\n    var self = this;\n    var fields = {};\n    DiffSequence.diffObjects(prevDV.getFields(), nowDV.getFields(), {\n      both: function (key, prev, now) {\n        if (!EJSON.equals(prev, now)) fields[key] = now;\n      },\n      rightOnly: function (key, now) {\n        fields[key] = now;\n      },\n      leftOnly: function (key, prev) {\n        fields[key] = undefined;\n      }\n    });\n    self.callbacks.changed(self.collectionName, id, fields);\n  },\n  added: function (subscriptionHandle, id, fields) {\n    var self = this;\n    var docView = self.documents[id];\n    var added = false;\n\n    if (!docView) {\n      added = true;\n      docView = new SessionDocumentView();\n      self.documents[id] = docView;\n    }\n\n    docView.existsIn[subscriptionHandle] = true;\n    var changeCollector = {};\n\n    _.each(fields, function (value, key) {\n      docView.changeField(subscriptionHandle, key, value, changeCollector, true);\n    });\n\n    if (added) self.callbacks.added(self.collectionName, id, changeCollector);else self.callbacks.changed(self.collectionName, id, changeCollector);\n  },\n  changed: function (subscriptionHandle, id, changed) {\n    var self = this;\n    var changedResult = {};\n    var docView = self.documents[id];\n    if (!docView) throw new Error(\"Could not find element with id \" + id + \" to change\");\n\n    _.each(changed, function (value, key) {\n      if (value === undefined) docView.clearField(subscriptionHandle, key, changedResult);else docView.changeField(subscriptionHandle, key, value, changedResult);\n    });\n\n    self.callbacks.changed(self.collectionName, id, changedResult);\n  },\n  removed: function (subscriptionHandle, id) {\n    var self = this;\n    var docView = self.documents[id];\n\n    if (!docView) {\n      var err = new Error(\"Removed nonexistent document \" + id);\n      throw err;\n    }\n\n    delete docView.existsIn[subscriptionHandle];\n\n    if (_.isEmpty(docView.existsIn)) {\n      // it is gone from everyone\n      self.callbacks.removed(self.collectionName, id);\n      delete self.documents[id];\n    } else {\n      var changed = {}; // remove this subscription from every precedence list\n      // and record the changes\n\n      _.each(docView.dataByKey, function (precedenceList, key) {\n        docView.clearField(subscriptionHandle, key, changed);\n      });\n\n      self.callbacks.changed(self.collectionName, id, changed);\n    }\n  }\n});\n/******************************************************************************/\n\n/* Session                                                                    */\n\n/******************************************************************************/\n\n\nvar Session = function (server, version, socket, options) {\n  var self = this;\n  self.id = Random.id();\n  self.server = server;\n  self.version = version;\n  self.initialized = false;\n  self.socket = socket; // set to null when the session is destroyed. multiple places below\n  // use this to determine if the session is alive or not.\n\n  self.inQueue = new Meteor._DoubleEndedQueue();\n  self.blocked = false;\n  self.workerRunning = false; // Sub objects for active subscriptions\n\n  self._namedSubs = {};\n  self._universalSubs = [];\n  self.userId = null;\n  self.collectionViews = {}; // Set this to false to not send messages when collectionViews are\n  // modified. This is done when rerunning subs in _setUserId and those messages\n  // are calculated via a diff instead.\n\n  self._isSending = true; // If this is true, don't start a newly-created universal publisher on this\n  // session. The session will take care of starting it when appropriate.\n\n  self._dontStartNewUniversalSubs = false; // when we are rerunning subscriptions, any ready messages\n  // we want to buffer up for when we are done rerunning subscriptions\n\n  self._pendingReady = []; // List of callbacks to call when this connection is closed.\n\n  self._closeCallbacks = []; // XXX HACK: If a sockjs connection, save off the URL. This is\n  // temporary and will go away in the near future.\n\n  self._socketUrl = socket.url; // Allow tests to disable responding to pings.\n\n  self._respondToPings = options.respondToPings; // This object is the public interface to the session. In the public\n  // API, it is called the `connection` object.  Internally we call it\n  // a `connectionHandle` to avoid ambiguity.\n\n  self.connectionHandle = {\n    id: self.id,\n    close: function () {\n      self.close();\n    },\n    onClose: function (fn) {\n      var cb = Meteor.bindEnvironment(fn, \"connection onClose callback\");\n\n      if (self.inQueue) {\n        self._closeCallbacks.push(cb);\n      } else {\n        // if we're already closed, call the callback.\n        Meteor.defer(cb);\n      }\n    },\n    clientAddress: self._clientAddress(),\n    httpHeaders: self.socket.headers\n  };\n  self.send({\n    msg: 'connected',\n    session: self.id\n  }); // On initial connect, spin up all the universal publishers.\n\n  Fiber(function () {\n    self.startUniversalSubs();\n  }).run();\n\n  if (version !== 'pre1' && options.heartbeatInterval !== 0) {\n    // We no longer need the low level timeout because we have heartbeating.\n    socket.setWebsocketTimeout(0);\n    self.heartbeat = new DDPCommon.Heartbeat({\n      heartbeatInterval: options.heartbeatInterval,\n      heartbeatTimeout: options.heartbeatTimeout,\n      onTimeout: function () {\n        self.close();\n      },\n      sendPing: function () {\n        self.send({\n          msg: 'ping'\n        });\n      }\n    });\n    self.heartbeat.start();\n  }\n\n  Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"livedata\", \"sessions\", 1);\n};\n\n_.extend(Session.prototype, {\n  sendReady: function (subscriptionIds) {\n    var self = this;\n    if (self._isSending) self.send({\n      msg: \"ready\",\n      subs: subscriptionIds\n    });else {\n      _.each(subscriptionIds, function (subscriptionId) {\n        self._pendingReady.push(subscriptionId);\n      });\n    }\n  },\n  sendAdded: function (collectionName, id, fields) {\n    var self = this;\n    if (self._isSending) self.send({\n      msg: \"added\",\n      collection: collectionName,\n      id: id,\n      fields: fields\n    });\n  },\n  sendChanged: function (collectionName, id, fields) {\n    var self = this;\n    if (_.isEmpty(fields)) return;\n\n    if (self._isSending) {\n      self.send({\n        msg: \"changed\",\n        collection: collectionName,\n        id: id,\n        fields: fields\n      });\n    }\n  },\n  sendRemoved: function (collectionName, id) {\n    var self = this;\n    if (self._isSending) self.send({\n      msg: \"removed\",\n      collection: collectionName,\n      id: id\n    });\n  },\n  getSendCallbacks: function () {\n    var self = this;\n    return {\n      added: _.bind(self.sendAdded, self),\n      changed: _.bind(self.sendChanged, self),\n      removed: _.bind(self.sendRemoved, self)\n    };\n  },\n  getCollectionView: function (collectionName) {\n    var self = this;\n\n    if (_.has(self.collectionViews, collectionName)) {\n      return self.collectionViews[collectionName];\n    }\n\n    var ret = new SessionCollectionView(collectionName, self.getSendCallbacks());\n    self.collectionViews[collectionName] = ret;\n    return ret;\n  },\n  added: function (subscriptionHandle, collectionName, id, fields) {\n    var self = this;\n    var view = self.getCollectionView(collectionName);\n    view.added(subscriptionHandle, id, fields);\n  },\n  removed: function (subscriptionHandle, collectionName, id) {\n    var self = this;\n    var view = self.getCollectionView(collectionName);\n    view.removed(subscriptionHandle, id);\n\n    if (view.isEmpty()) {\n      delete self.collectionViews[collectionName];\n    }\n  },\n  changed: function (subscriptionHandle, collectionName, id, fields) {\n    var self = this;\n    var view = self.getCollectionView(collectionName);\n    view.changed(subscriptionHandle, id, fields);\n  },\n  startUniversalSubs: function () {\n    var self = this; // Make a shallow copy of the set of universal handlers and start them. If\n    // additional universal publishers start while we're running them (due to\n    // yielding), they will run separately as part of Server.publish.\n\n    var handlers = _.clone(self.server.universal_publish_handlers);\n\n    _.each(handlers, function (handler) {\n      self._startSubscription(handler);\n    });\n  },\n  // Destroy this session and unregister it at the server.\n  close: function () {\n    var self = this; // Destroy this session, even if it's not registered at the\n    // server. Stop all processing and tear everything down. If a socket\n    // was attached, close it.\n    // Already destroyed.\n\n    if (!self.inQueue) return; // Drop the merge box data immediately.\n\n    self.inQueue = null;\n    self.collectionViews = {};\n\n    if (self.heartbeat) {\n      self.heartbeat.stop();\n      self.heartbeat = null;\n    }\n\n    if (self.socket) {\n      self.socket.close();\n      self.socket._meteorSession = null;\n    }\n\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"livedata\", \"sessions\", -1);\n    Meteor.defer(function () {\n      // stop callbacks can yield, so we defer this on close.\n      // sub._isDeactivated() detects that we set inQueue to null and\n      // treats it as semi-deactivated (it will ignore incoming callbacks, etc).\n      self._deactivateAllSubscriptions(); // Defer calling the close callbacks, so that the caller closing\n      // the session isn't waiting for all the callbacks to complete.\n\n\n      _.each(self._closeCallbacks, function (callback) {\n        callback();\n      });\n    }); // Unregister the session.\n\n    self.server._removeSession(self);\n  },\n  // Send a message (doing nothing if no socket is connected right now.)\n  // It should be a JSON object (it will be stringified.)\n  send: function (msg) {\n    var self = this;\n\n    if (self.socket) {\n      if (Meteor._printSentDDP) Meteor._debug(\"Sent DDP\", DDPCommon.stringifyDDP(msg));\n      self.socket.send(DDPCommon.stringifyDDP(msg));\n    }\n  },\n  // Send a connection error.\n  sendError: function (reason, offendingMessage) {\n    var self = this;\n    var msg = {\n      msg: 'error',\n      reason: reason\n    };\n    if (offendingMessage) msg.offendingMessage = offendingMessage;\n    self.send(msg);\n  },\n  // Process 'msg' as an incoming message. (But as a guard against\n  // race conditions during reconnection, ignore the message if\n  // 'socket' is not the currently connected socket.)\n  //\n  // We run the messages from the client one at a time, in the order\n  // given by the client. The message handler is passed an idempotent\n  // function 'unblock' which it may call to allow other messages to\n  // begin running in parallel in another fiber (for example, a method\n  // that wants to yield.) Otherwise, it is automatically unblocked\n  // when it returns.\n  //\n  // Actually, we don't have to 'totally order' the messages in this\n  // way, but it's the easiest thing that's correct. (unsub needs to\n  // be ordered against sub, methods need to be ordered against each\n  // other.)\n  processMessage: function (msg_in) {\n    var self = this;\n    if (!self.inQueue) // we have been destroyed.\n      return; // Respond to ping and pong messages immediately without queuing.\n    // If the negotiated DDP version is \"pre1\" which didn't support\n    // pings, preserve the \"pre1\" behavior of responding with a \"bad\n    // request\" for the unknown messages.\n    //\n    // Fibers are needed because heartbeat uses Meteor.setTimeout, which\n    // needs a Fiber. We could actually use regular setTimeout and avoid\n    // these new fibers, but it is easier to just make everything use\n    // Meteor.setTimeout and not think too hard.\n    //\n    // Any message counts as receiving a pong, as it demonstrates that\n    // the client is still alive.\n\n    if (self.heartbeat) {\n      Fiber(function () {\n        self.heartbeat.messageReceived();\n      }).run();\n    }\n\n    if (self.version !== 'pre1' && msg_in.msg === 'ping') {\n      if (self._respondToPings) self.send({\n        msg: \"pong\",\n        id: msg_in.id\n      });\n      return;\n    }\n\n    if (self.version !== 'pre1' && msg_in.msg === 'pong') {\n      // Since everything is a pong, nothing to do\n      return;\n    }\n\n    self.inQueue.push(msg_in);\n    if (self.workerRunning) return;\n    self.workerRunning = true;\n\n    var processNext = function () {\n      var msg = self.inQueue && self.inQueue.shift();\n\n      if (!msg) {\n        self.workerRunning = false;\n        return;\n      }\n\n      Fiber(function () {\n        var blocked = true;\n\n        var unblock = function () {\n          if (!blocked) return; // idempotent\n\n          blocked = false;\n          processNext();\n        };\n\n        self.server.onMessageHook.each(function (callback) {\n          callback(msg, self);\n          return true;\n        });\n        if (_.has(self.protocol_handlers, msg.msg)) self.protocol_handlers[msg.msg].call(self, msg, unblock);else self.sendError('Bad request', msg);\n        unblock(); // in case the handler didn't already do it\n      }).run();\n    };\n\n    processNext();\n  },\n  protocol_handlers: {\n    sub: function (msg) {\n      var self = this; // reject malformed messages\n\n      if (typeof msg.id !== \"string\" || typeof msg.name !== \"string\" || 'params' in msg && !(msg.params instanceof Array)) {\n        self.sendError(\"Malformed subscription\", msg);\n        return;\n      }\n\n      if (!self.server.publish_handlers[msg.name]) {\n        self.send({\n          msg: 'nosub',\n          id: msg.id,\n          error: new Meteor.Error(404, `Subscription '${msg.name}' not found`)\n        });\n        return;\n      }\n\n      if (_.has(self._namedSubs, msg.id)) // subs are idempotent, or rather, they are ignored if a sub\n        // with that id already exists. this is important during\n        // reconnect.\n        return; // XXX It'd be much better if we had generic hooks where any package can\n      // hook into subscription handling, but in the mean while we special case\n      // ddp-rate-limiter package. This is also done for weak requirements to\n      // add the ddp-rate-limiter package in case we don't have Accounts. A\n      // user trying to use the ddp-rate-limiter must explicitly require it.\n\n      if (Package['ddp-rate-limiter']) {\n        var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n        var rateLimiterInput = {\n          userId: self.userId,\n          clientAddress: self.connectionHandle.clientAddress,\n          type: \"subscription\",\n          name: msg.name,\n          connectionId: self.id\n        };\n\n        DDPRateLimiter._increment(rateLimiterInput);\n\n        var rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n\n        if (!rateLimitResult.allowed) {\n          self.send({\n            msg: 'nosub',\n            id: msg.id,\n            error: new Meteor.Error('too-many-requests', DDPRateLimiter.getErrorMessage(rateLimitResult), {\n              timeToReset: rateLimitResult.timeToReset\n            })\n          });\n          return;\n        }\n      }\n\n      var handler = self.server.publish_handlers[msg.name];\n\n      self._startSubscription(handler, msg.id, msg.params, msg.name);\n    },\n    unsub: function (msg) {\n      var self = this;\n\n      self._stopSubscription(msg.id);\n    },\n    method: function (msg, unblock) {\n      var self = this; // reject malformed messages\n      // For now, we silently ignore unknown attributes,\n      // for forwards compatibility.\n\n      if (typeof msg.id !== \"string\" || typeof msg.method !== \"string\" || 'params' in msg && !(msg.params instanceof Array) || 'randomSeed' in msg && typeof msg.randomSeed !== \"string\") {\n        self.sendError(\"Malformed method invocation\", msg);\n        return;\n      }\n\n      var randomSeed = msg.randomSeed || null; // set up to mark the method as satisfied once all observers\n      // (and subscriptions) have reacted to any writes that were\n      // done.\n\n      var fence = new DDPServer._WriteFence();\n      fence.onAllCommitted(function () {\n        // Retire the fence so that future writes are allowed.\n        // This means that callbacks like timers are free to use\n        // the fence, and if they fire before it's armed (for\n        // example, because the method waits for them) their\n        // writes will be included in the fence.\n        fence.retire();\n        self.send({\n          msg: 'updated',\n          methods: [msg.id]\n        });\n      }); // find the handler\n\n      var handler = self.server.method_handlers[msg.method];\n\n      if (!handler) {\n        self.send({\n          msg: 'result',\n          id: msg.id,\n          error: new Meteor.Error(404, `Method '${msg.method}' not found`)\n        });\n        fence.arm();\n        return;\n      }\n\n      var setUserId = function (userId) {\n        self._setUserId(userId);\n      };\n\n      var invocation = new DDPCommon.MethodInvocation({\n        isSimulation: false,\n        userId: self.userId,\n        setUserId: setUserId,\n        unblock: unblock,\n        connection: self.connectionHandle,\n        randomSeed: randomSeed\n      });\n      const promise = new Promise((resolve, reject) => {\n        // XXX It'd be better if we could hook into method handlers better but\n        // for now, we need to check if the ddp-rate-limiter exists since we\n        // have a weak requirement for the ddp-rate-limiter package to be added\n        // to our application.\n        if (Package['ddp-rate-limiter']) {\n          var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n          var rateLimiterInput = {\n            userId: self.userId,\n            clientAddress: self.connectionHandle.clientAddress,\n            type: \"method\",\n            name: msg.method,\n            connectionId: self.id\n          };\n\n          DDPRateLimiter._increment(rateLimiterInput);\n\n          var rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n\n          if (!rateLimitResult.allowed) {\n            reject(new Meteor.Error(\"too-many-requests\", DDPRateLimiter.getErrorMessage(rateLimitResult), {\n              timeToReset: rateLimitResult.timeToReset\n            }));\n            return;\n          }\n        }\n\n        resolve(DDPServer._CurrentWriteFence.withValue(fence, () => DDP._CurrentMethodInvocation.withValue(invocation, () => maybeAuditArgumentChecks(handler, invocation, msg.params, \"call to '\" + msg.method + \"'\"))));\n      });\n\n      function finish() {\n        fence.arm();\n        unblock();\n      }\n\n      const payload = {\n        msg: \"result\",\n        id: msg.id\n      };\n      promise.then(result => {\n        finish();\n\n        if (result !== undefined) {\n          payload.result = result;\n        }\n\n        self.send(payload);\n      }, exception => {\n        finish();\n        payload.error = wrapInternalException(exception, `while invoking method '${msg.method}'`);\n        self.send(payload);\n      });\n    }\n  },\n  _eachSub: function (f) {\n    var self = this;\n\n    _.each(self._namedSubs, f);\n\n    _.each(self._universalSubs, f);\n  },\n  _diffCollectionViews: function (beforeCVs) {\n    var self = this;\n    DiffSequence.diffObjects(beforeCVs, self.collectionViews, {\n      both: function (collectionName, leftValue, rightValue) {\n        rightValue.diff(leftValue);\n      },\n      rightOnly: function (collectionName, rightValue) {\n        _.each(rightValue.documents, function (docView, id) {\n          self.sendAdded(collectionName, id, docView.getFields());\n        });\n      },\n      leftOnly: function (collectionName, leftValue) {\n        _.each(leftValue.documents, function (doc, id) {\n          self.sendRemoved(collectionName, id);\n        });\n      }\n    });\n  },\n  // Sets the current user id in all appropriate contexts and reruns\n  // all subscriptions\n  _setUserId: function (userId) {\n    var self = this;\n    if (userId !== null && typeof userId !== \"string\") throw new Error(\"setUserId must be called on string or null, not \" + typeof userId); // Prevent newly-created universal subscriptions from being added to our\n    // session; they will be found below when we call startUniversalSubs.\n    //\n    // (We don't have to worry about named subscriptions, because we only add\n    // them when we process a 'sub' message. We are currently processing a\n    // 'method' message, and the method did not unblock, because it is illegal\n    // to call setUserId after unblock. Thus we cannot be concurrently adding a\n    // new named subscription.)\n\n    self._dontStartNewUniversalSubs = true; // Prevent current subs from updating our collectionViews and call their\n    // stop callbacks. This may yield.\n\n    self._eachSub(function (sub) {\n      sub._deactivate();\n    }); // All subs should now be deactivated. Stop sending messages to the client,\n    // save the state of the published collections, reset to an empty view, and\n    // update the userId.\n\n\n    self._isSending = false;\n    var beforeCVs = self.collectionViews;\n    self.collectionViews = {};\n    self.userId = userId; // _setUserId is normally called from a Meteor method with\n    // DDP._CurrentMethodInvocation set. But DDP._CurrentMethodInvocation is not\n    // expected to be set inside a publish function, so we temporary unset it.\n    // Inside a publish function DDP._CurrentPublicationInvocation is set.\n\n    DDP._CurrentMethodInvocation.withValue(undefined, function () {\n      // Save the old named subs, and reset to having no subscriptions.\n      var oldNamedSubs = self._namedSubs;\n      self._namedSubs = {};\n      self._universalSubs = [];\n\n      _.each(oldNamedSubs, function (sub, subscriptionId) {\n        self._namedSubs[subscriptionId] = sub._recreate(); // nb: if the handler throws or calls this.error(), it will in fact\n        // immediately send its 'nosub'. This is OK, though.\n\n        self._namedSubs[subscriptionId]._runHandler();\n      }); // Allow newly-created universal subs to be started on our connection in\n      // parallel with the ones we're spinning up here, and spin up universal\n      // subs.\n\n\n      self._dontStartNewUniversalSubs = false;\n      self.startUniversalSubs();\n    }); // Start sending messages again, beginning with the diff from the previous\n    // state of the world to the current state. No yields are allowed during\n    // this diff, so that other changes cannot interleave.\n\n\n    Meteor._noYieldsAllowed(function () {\n      self._isSending = true;\n\n      self._diffCollectionViews(beforeCVs);\n\n      if (!_.isEmpty(self._pendingReady)) {\n        self.sendReady(self._pendingReady);\n        self._pendingReady = [];\n      }\n    });\n  },\n  _startSubscription: function (handler, subId, params, name) {\n    var self = this;\n    var sub = new Subscription(self, handler, subId, params, name);\n    if (subId) self._namedSubs[subId] = sub;else self._universalSubs.push(sub);\n\n    sub._runHandler();\n  },\n  // tear down specified subscription\n  _stopSubscription: function (subId, error) {\n    var self = this;\n    var subName = null;\n\n    if (subId && self._namedSubs[subId]) {\n      subName = self._namedSubs[subId]._name;\n\n      self._namedSubs[subId]._removeAllDocuments();\n\n      self._namedSubs[subId]._deactivate();\n\n      delete self._namedSubs[subId];\n    }\n\n    var response = {\n      msg: 'nosub',\n      id: subId\n    };\n\n    if (error) {\n      response.error = wrapInternalException(error, subName ? \"from sub \" + subName + \" id \" + subId : \"from sub id \" + subId);\n    }\n\n    self.send(response);\n  },\n  // tear down all subscriptions. Note that this does NOT send removed or nosub\n  // messages, since we assume the client is gone.\n  _deactivateAllSubscriptions: function () {\n    var self = this;\n\n    _.each(self._namedSubs, function (sub, id) {\n      sub._deactivate();\n    });\n\n    self._namedSubs = {};\n\n    _.each(self._universalSubs, function (sub) {\n      sub._deactivate();\n    });\n\n    self._universalSubs = [];\n  },\n  // Determine the remote client's IP address, based on the\n  // HTTP_FORWARDED_COUNT environment variable representing how many\n  // proxies the server is behind.\n  _clientAddress: function () {\n    var self = this; // For the reported client address for a connection to be correct,\n    // the developer must set the HTTP_FORWARDED_COUNT environment\n    // variable to an integer representing the number of hops they\n    // expect in the `x-forwarded-for` header. E.g., set to \"1\" if the\n    // server is behind one proxy.\n    //\n    // This could be computed once at startup instead of every time.\n\n    var httpForwardedCount = parseInt(process.env['HTTP_FORWARDED_COUNT']) || 0;\n    if (httpForwardedCount === 0) return self.socket.remoteAddress;\n    var forwardedFor = self.socket.headers[\"x-forwarded-for\"];\n    if (!_.isString(forwardedFor)) return null;\n    forwardedFor = forwardedFor.trim().split(/\\s*,\\s*/); // Typically the first value in the `x-forwarded-for` header is\n    // the original IP address of the client connecting to the first\n    // proxy.  However, the end user can easily spoof the header, in\n    // which case the first value(s) will be the fake IP address from\n    // the user pretending to be a proxy reporting the original IP\n    // address value.  By counting HTTP_FORWARDED_COUNT back from the\n    // end of the list, we ensure that we get the IP address being\n    // reported by *our* first proxy.\n\n    if (httpForwardedCount < 0 || httpForwardedCount > forwardedFor.length) return null;\n    return forwardedFor[forwardedFor.length - httpForwardedCount];\n  }\n});\n/******************************************************************************/\n\n/* Subscription                                                               */\n\n/******************************************************************************/\n// ctor for a sub handle: the input to each publish function\n// Instance name is this because it's usually referred to as this inside a\n// publish\n\n/**\n * @summary The server's side of a subscription\n * @class Subscription\n * @instanceName this\n * @showInstanceName true\n */\n\n\nvar Subscription = function (session, handler, subscriptionId, params, name) {\n  var self = this;\n  self._session = session; // type is Session\n\n  /**\n   * @summary Access inside the publish function. The incoming [connection](#meteor_onconnection) for this subscription.\n   * @locus Server\n   * @name  connection\n   * @memberOf Subscription\n   * @instance\n   */\n\n  self.connection = session.connectionHandle; // public API object\n\n  self._handler = handler; // my subscription ID (generated by client, undefined for universal subs).\n\n  self._subscriptionId = subscriptionId; // undefined for universal subs\n\n  self._name = name;\n  self._params = params || []; // Only named subscriptions have IDs, but we need some sort of string\n  // internally to keep track of all subscriptions inside\n  // SessionDocumentViews. We use this subscriptionHandle for that.\n\n  if (self._subscriptionId) {\n    self._subscriptionHandle = 'N' + self._subscriptionId;\n  } else {\n    self._subscriptionHandle = 'U' + Random.id();\n  } // has _deactivate been called?\n\n\n  self._deactivated = false; // stop callbacks to g/c this sub.  called w/ zero arguments.\n\n  self._stopCallbacks = []; // the set of (collection, documentid) that this subscription has\n  // an opinion about\n\n  self._documents = {}; // remember if we are ready.\n\n  self._ready = false; // Part of the public API: the user of this sub.\n\n  /**\n   * @summary Access inside the publish function. The id of the logged-in user, or `null` if no user is logged in.\n   * @locus Server\n   * @memberOf Subscription\n   * @name  userId\n   * @instance\n   */\n\n  self.userId = session.userId; // For now, the id filter is going to default to\n  // the to/from DDP methods on MongoID, to\n  // specifically deal with mongo/minimongo ObjectIds.\n  // Later, you will be able to make this be \"raw\"\n  // if you want to publish a collection that you know\n  // just has strings for keys and no funny business, to\n  // a ddp consumer that isn't minimongo\n\n  self._idFilter = {\n    idStringify: MongoID.idStringify,\n    idParse: MongoID.idParse\n  };\n  Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"livedata\", \"subscriptions\", 1);\n};\n\n_.extend(Subscription.prototype, {\n  _runHandler: function () {\n    // XXX should we unblock() here? Either before running the publish\n    // function, or before running _publishCursor.\n    //\n    // Right now, each publish function blocks all future publishes and\n    // methods waiting on data from Mongo (or whatever else the function\n    // blocks on). This probably slows page load in common cases.\n    var self = this;\n\n    try {\n      var res = DDP._CurrentPublicationInvocation.withValue(self, () => maybeAuditArgumentChecks(self._handler, self, EJSON.clone(self._params), // It's OK that this would look weird for universal subscriptions,\n      // because they have no arguments so there can never be an\n      // audit-argument-checks failure.\n      \"publisher '\" + self._name + \"'\"));\n    } catch (e) {\n      self.error(e);\n      return;\n    } // Did the handler call this.error or this.stop?\n\n\n    if (self._isDeactivated()) return;\n\n    self._publishHandlerResult(res);\n  },\n  _publishHandlerResult: function (res) {\n    // SPECIAL CASE: Instead of writing their own callbacks that invoke\n    // this.added/changed/ready/etc, the user can just return a collection\n    // cursor or array of cursors from the publish function; we call their\n    // _publishCursor method which starts observing the cursor and publishes the\n    // results. Note that _publishCursor does NOT call ready().\n    //\n    // XXX This uses an undocumented interface which only the Mongo cursor\n    // interface publishes. Should we make this interface public and encourage\n    // users to implement it themselves? Arguably, it's unnecessary; users can\n    // already write their own functions like\n    //   var publishMyReactiveThingy = function (name, handler) {\n    //     Meteor.publish(name, function () {\n    //       var reactiveThingy = handler();\n    //       reactiveThingy.publishMe();\n    //     });\n    //   };\n    var self = this;\n\n    var isCursor = function (c) {\n      return c && c._publishCursor;\n    };\n\n    if (isCursor(res)) {\n      try {\n        res._publishCursor(self);\n      } catch (e) {\n        self.error(e);\n        return;\n      } // _publishCursor only returns after the initial added callbacks have run.\n      // mark subscription as ready.\n\n\n      self.ready();\n    } else if (_.isArray(res)) {\n      // check all the elements are cursors\n      if (!_.all(res, isCursor)) {\n        self.error(new Error(\"Publish function returned an array of non-Cursors\"));\n        return;\n      } // find duplicate collection names\n      // XXX we should support overlapping cursors, but that would require the\n      // merge box to allow overlap within a subscription\n\n\n      var collectionNames = {};\n\n      for (var i = 0; i < res.length; ++i) {\n        var collectionName = res[i]._getCollectionName();\n\n        if (_.has(collectionNames, collectionName)) {\n          self.error(new Error(\"Publish function returned multiple cursors for collection \" + collectionName));\n          return;\n        }\n\n        collectionNames[collectionName] = true;\n      }\n\n      ;\n\n      try {\n        _.each(res, function (cur) {\n          cur._publishCursor(self);\n        });\n      } catch (e) {\n        self.error(e);\n        return;\n      }\n\n      self.ready();\n    } else if (res) {\n      // truthy values other than cursors or arrays are probably a\n      // user mistake (possible returning a Mongo document via, say,\n      // `coll.findOne()`).\n      self.error(new Error(\"Publish function can only return a Cursor or \" + \"an array of Cursors\"));\n    }\n  },\n  // This calls all stop callbacks and prevents the handler from updating any\n  // SessionCollectionViews further. It's used when the user unsubscribes or\n  // disconnects, as well as during setUserId re-runs. It does *NOT* send\n  // removed messages for the published objects; if that is necessary, call\n  // _removeAllDocuments first.\n  _deactivate: function () {\n    var self = this;\n    if (self._deactivated) return;\n    self._deactivated = true;\n\n    self._callStopCallbacks();\n\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"livedata\", \"subscriptions\", -1);\n  },\n  _callStopCallbacks: function () {\n    var self = this; // tell listeners, so they can clean up\n\n    var callbacks = self._stopCallbacks;\n    self._stopCallbacks = [];\n\n    _.each(callbacks, function (callback) {\n      callback();\n    });\n  },\n  // Send remove messages for every document.\n  _removeAllDocuments: function () {\n    var self = this;\n\n    Meteor._noYieldsAllowed(function () {\n      _.each(self._documents, function (collectionDocs, collectionName) {\n        // Iterate over _.keys instead of the dictionary itself, since we'll be\n        // mutating it.\n        _.each(_.keys(collectionDocs), function (strId) {\n          self.removed(collectionName, self._idFilter.idParse(strId));\n        });\n      });\n    });\n  },\n  // Returns a new Subscription for the same session with the same\n  // initial creation parameters. This isn't a clone: it doesn't have\n  // the same _documents cache, stopped state or callbacks; may have a\n  // different _subscriptionHandle, and gets its userId from the\n  // session, not from this object.\n  _recreate: function () {\n    var self = this;\n    return new Subscription(self._session, self._handler, self._subscriptionId, self._params, self._name);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription, triggering a call on the client to the `onStop` callback passed to [`Meteor.subscribe`](#meteor_subscribe), if any. If `error` is not a [`Meteor.Error`](#meteor_error), it will be [sanitized](#meteor_error).\n   * @locus Server\n   * @param {Error} error The error to pass to the client.\n   * @instance\n   * @memberOf Subscription\n   */\n  error: function (error) {\n    var self = this;\n    if (self._isDeactivated()) return;\n\n    self._session._stopSubscription(self._subscriptionId, error);\n  },\n  // Note that while our DDP client will notice that you've called stop() on the\n  // server (and clean up its _subscriptions table) we don't actually provide a\n  // mechanism for an app to notice this (the subscribe onError callback only\n  // triggers if there is an error).\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription and invokes the client's `onStop` callback with no error.\n   * @locus Server\n   * @instance\n   * @memberOf Subscription\n   */\n  stop: function () {\n    var self = this;\n    if (self._isDeactivated()) return;\n\n    self._session._stopSubscription(self._subscriptionId);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Registers a callback function to run when the subscription is stopped.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {Function} func The callback function\n   */\n  onStop: function (callback) {\n    var self = this;\n    callback = Meteor.bindEnvironment(callback, 'onStop callback', self);\n    if (self._isDeactivated()) callback();else self._stopCallbacks.push(callback);\n  },\n  // This returns true if the sub has been deactivated, *OR* if the session was\n  // destroyed but the deferred call to _deactivateAllSubscriptions hasn't\n  // happened yet.\n  _isDeactivated: function () {\n    var self = this;\n    return self._deactivated || self._session.inQueue === null;\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been added to the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the new document.\n   * @param {String} id The new document's ID.\n   * @param {Object} fields The fields in the new document.  If `_id` is present it is ignored.\n   */\n  added: function (collectionName, id, fields) {\n    var self = this;\n    if (self._isDeactivated()) return;\n    id = self._idFilter.idStringify(id);\n    Meteor._ensure(self._documents, collectionName)[id] = true;\n\n    self._session.added(self._subscriptionHandle, collectionName, id, fields);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document in the record set has been modified.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the changed document.\n   * @param {String} id The changed document's ID.\n   * @param {Object} fields The fields in the document that have changed, together with their new values.  If a field is not present in `fields` it was left unchanged; if it is present in `fields` and has a value of `undefined` it was removed from the document.  If `_id` is present it is ignored.\n   */\n  changed: function (collectionName, id, fields) {\n    var self = this;\n    if (self._isDeactivated()) return;\n    id = self._idFilter.idStringify(id);\n\n    self._session.changed(self._subscriptionHandle, collectionName, id, fields);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been removed from the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that the document has been removed from.\n   * @param {String} id The ID of the document that has been removed.\n   */\n  removed: function (collectionName, id) {\n    var self = this;\n    if (self._isDeactivated()) return;\n    id = self._idFilter.idStringify(id); // We don't bother to delete sets of things in a collection if the\n    // collection is empty.  It could break _removeAllDocuments.\n\n    delete self._documents[collectionName][id];\n\n    self._session.removed(self._subscriptionHandle, collectionName, id);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that an initial, complete snapshot of the record set has been sent.  This will trigger a call on the client to the `onReady` callback passed to  [`Meteor.subscribe`](#meteor_subscribe), if any.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   */\n  ready: function () {\n    var self = this;\n    if (self._isDeactivated()) return;\n    if (!self._subscriptionId) return; // unnecessary but ignored for universal sub\n\n    if (!self._ready) {\n      self._session.sendReady([self._subscriptionId]);\n\n      self._ready = true;\n    }\n  }\n});\n/******************************************************************************/\n\n/* Server                                                                     */\n\n/******************************************************************************/\n\n\nServer = function (options) {\n  var self = this; // The default heartbeat interval is 30 seconds on the server and 35\n  // seconds on the client.  Since the client doesn't need to send a\n  // ping as long as it is receiving pings, this means that pings\n  // normally go from the server to the client.\n  //\n  // Note: Troposphere depends on the ability to mutate\n  // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n\n  self.options = _.defaults(options || {}, {\n    heartbeatInterval: 15000,\n    heartbeatTimeout: 15000,\n    // For testing, allow responding to pings to be disabled.\n    respondToPings: true\n  }); // Map of callbacks to call when a new connection comes in to the\n  // server and completes DDP version negotiation. Use an object instead\n  // of an array so we can safely remove one from the list while\n  // iterating over it.\n\n  self.onConnectionHook = new Hook({\n    debugPrintExceptions: \"onConnection callback\"\n  }); // Map of callbacks to call when a new message comes in.\n\n  self.onMessageHook = new Hook({\n    debugPrintExceptions: \"onMessage callback\"\n  });\n  self.publish_handlers = {};\n  self.universal_publish_handlers = [];\n  self.method_handlers = {};\n  self.sessions = {}; // map from id to session\n\n  self.stream_server = new StreamServer();\n  self.stream_server.register(function (socket) {\n    // socket implements the SockJSConnection interface\n    socket._meteorSession = null;\n\n    var sendError = function (reason, offendingMessage) {\n      var msg = {\n        msg: 'error',\n        reason: reason\n      };\n      if (offendingMessage) msg.offendingMessage = offendingMessage;\n      socket.send(DDPCommon.stringifyDDP(msg));\n    };\n\n    socket.on('data', function (raw_msg) {\n      if (Meteor._printReceivedDDP) {\n        Meteor._debug(\"Received DDP\", raw_msg);\n      }\n\n      try {\n        try {\n          var msg = DDPCommon.parseDDP(raw_msg);\n        } catch (err) {\n          sendError('Parse error');\n          return;\n        }\n\n        if (msg === null || !msg.msg) {\n          sendError('Bad request', msg);\n          return;\n        }\n\n        if (msg.msg === 'connect') {\n          if (socket._meteorSession) {\n            sendError(\"Already connected\", msg);\n            return;\n          }\n\n          Fiber(function () {\n            self._handleConnect(socket, msg);\n          }).run();\n          return;\n        }\n\n        if (!socket._meteorSession) {\n          sendError('Must connect first', msg);\n          return;\n        }\n\n        socket._meteorSession.processMessage(msg);\n      } catch (e) {\n        // XXX print stack nicely\n        Meteor._debug(\"Internal exception while processing message\", msg, e);\n      }\n    });\n    socket.on('close', function () {\n      if (socket._meteorSession) {\n        Fiber(function () {\n          socket._meteorSession.close();\n        }).run();\n      }\n    });\n  });\n};\n\n_.extend(Server.prototype, {\n  /**\n   * @summary Register a callback to be called when a new DDP connection is made to the server.\n   * @locus Server\n   * @param {function} callback The function to call when a new DDP connection is established.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  onConnection: function (fn) {\n    var self = this;\n    return self.onConnectionHook.register(fn);\n  },\n\n  /**\n   * @summary Register a callback to be called when a new DDP message is received.\n   * @locus Server\n   * @param {function} callback The function to call when a new DDP message is received.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  onMessage: function (fn) {\n    var self = this;\n    return self.onMessageHook.register(fn);\n  },\n  _handleConnect: function (socket, msg) {\n    var self = this; // The connect message must specify a version and an array of supported\n    // versions, and it must claim to support what it is proposing.\n\n    if (!(typeof msg.version === 'string' && _.isArray(msg.support) && _.all(msg.support, _.isString) && _.contains(msg.support, msg.version))) {\n      socket.send(DDPCommon.stringifyDDP({\n        msg: 'failed',\n        version: DDPCommon.SUPPORTED_DDP_VERSIONS[0]\n      }));\n      socket.close();\n      return;\n    } // In the future, handle session resumption: something like:\n    //  socket._meteorSession = self.sessions[msg.session]\n\n\n    var version = calculateVersion(msg.support, DDPCommon.SUPPORTED_DDP_VERSIONS);\n\n    if (msg.version !== version) {\n      // The best version to use (according to the client's stated preferences)\n      // is not the one the client is trying to use. Inform them about the best\n      // version to use.\n      socket.send(DDPCommon.stringifyDDP({\n        msg: 'failed',\n        version: version\n      }));\n      socket.close();\n      return;\n    } // Yay, version matches! Create a new session.\n    // Note: Troposphere depends on the ability to mutate\n    // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n\n\n    socket._meteorSession = new Session(self, version, socket, self.options);\n    self.sessions[socket._meteorSession.id] = socket._meteorSession;\n    self.onConnectionHook.each(function (callback) {\n      if (socket._meteorSession) callback(socket._meteorSession.connectionHandle);\n      return true;\n    });\n  },\n\n  /**\n   * Register a publish handler function.\n   *\n   * @param name {String} identifier for query\n   * @param handler {Function} publish handler\n   * @param options {Object}\n   *\n   * Server will call handler function on each new subscription,\n   * either when receiving DDP sub message for a named subscription, or on\n   * DDP connect for a universal subscription.\n   *\n   * If name is null, this will be a subscription that is\n   * automatically established and permanently on for all connected\n   * client, instead of a subscription that can be turned on and off\n   * with subscribe().\n   *\n   * options to contain:\n   *  - (mostly internal) is_auto: true if generated automatically\n   *    from an autopublish hook. this is for cosmetic purposes only\n   *    (it lets us determine whether to print a warning suggesting\n   *    that you turn off autopublish.)\n   */\n\n  /**\n   * @summary Publish a record set.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   * @locus Server\n   * @param {String|Object} name If String, name of the record set.  If Object, publications Dictionary of publish functions by name.  If `null`, the set has no name, and the record set is automatically sent to all connected clients.\n   * @param {Function} func Function called on the server each time a client subscribes.  Inside the function, `this` is the publish handler object, described below.  If the client passed arguments to `subscribe`, the function is called with the same arguments.\n   */\n  publish: function (name, handler, options) {\n    var self = this;\n\n    if (!_.isObject(name)) {\n      options = options || {};\n\n      if (name && name in self.publish_handlers) {\n        Meteor._debug(\"Ignoring duplicate publish named '\" + name + \"'\");\n\n        return;\n      }\n\n      if (Package.autopublish && !options.is_auto) {\n        // They have autopublish on, yet they're trying to manually\n        // picking stuff to publish. They probably should turn off\n        // autopublish. (This check isn't perfect -- if you create a\n        // publish before you turn on autopublish, it won't catch\n        // it. But this will definitely handle the simple case where\n        // you've added the autopublish package to your app, and are\n        // calling publish from your app code.)\n        if (!self.warned_about_autopublish) {\n          self.warned_about_autopublish = true;\n\n          Meteor._debug(\"** You've set up some data subscriptions with Meteor.publish(), but\\n\" + \"** you still have autopublish turned on. Because autopublish is still\\n\" + \"** on, your Meteor.publish() calls won't have much effect. All data\\n\" + \"** will still be sent to all clients.\\n\" + \"**\\n\" + \"** Turn off autopublish by removing the autopublish package:\\n\" + \"**\\n\" + \"**   $ meteor remove autopublish\\n\" + \"**\\n\" + \"** .. and make sure you have Meteor.publish() and Meteor.subscribe() calls\\n\" + \"** for each collection that you want clients to see.\\n\");\n        }\n      }\n\n      if (name) self.publish_handlers[name] = handler;else {\n        self.universal_publish_handlers.push(handler); // Spin up the new publisher on any existing session too. Run each\n        // session's subscription in a new Fiber, so that there's no change for\n        // self.sessions to change while we're running this loop.\n\n        _.each(self.sessions, function (session) {\n          if (!session._dontStartNewUniversalSubs) {\n            Fiber(function () {\n              session._startSubscription(handler);\n            }).run();\n          }\n        });\n      }\n    } else {\n      _.each(name, function (value, key) {\n        self.publish(key, value, {});\n      });\n    }\n  },\n  _removeSession: function (session) {\n    var self = this;\n\n    if (self.sessions[session.id]) {\n      delete self.sessions[session.id];\n    }\n  },\n\n  /**\n   * @summary Defines functions that can be invoked over the network by clients.\n   * @locus Anywhere\n   * @param {Object} methods Dictionary whose keys are method names and values are functions.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  methods: function (methods) {\n    var self = this;\n\n    _.each(methods, function (func, name) {\n      if (typeof func !== 'function') throw new Error(\"Method '\" + name + \"' must be a function\");\n      if (self.method_handlers[name]) throw new Error(\"A method named '\" + name + \"' is already defined\");\n      self.method_handlers[name] = func;\n    });\n  },\n  call: function (name, ...args) {\n    if (args.length && typeof args[args.length - 1] === \"function\") {\n      // If it's a function, the last argument is the result callback, not\n      // a parameter to the remote method.\n      var callback = args.pop();\n    }\n\n    return this.apply(name, args, callback);\n  },\n  // A version of the call method that always returns a Promise.\n  callAsync: function (name, ...args) {\n    return this.applyAsync(name, args);\n  },\n  apply: function (name, args, options, callback) {\n    // We were passed 3 arguments. They may be either (name, args, options)\n    // or (name, args, callback)\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    } else {\n      options = options || {};\n    }\n\n    const promise = this.applyAsync(name, args, options); // Return the result in whichever way the caller asked for it. Note that we\n    // do NOT block on the write fence in an analogous way to how the client\n    // blocks on the relevant data being visible, so you are NOT guaranteed that\n    // cursor observe callbacks have fired when your callback is invoked. (We\n    // can change this if there's a real use case.)\n\n    if (callback) {\n      promise.then(result => callback(undefined, result), exception => callback(exception));\n    } else {\n      return promise.await();\n    }\n  },\n  // @param options {Optional Object}\n  applyAsync: function (name, args, options) {\n    // Run the handler\n    var handler = this.method_handlers[name];\n\n    if (!handler) {\n      return Promise.reject(new Meteor.Error(404, `Method '${name}' not found`));\n    } // If this is a method call from within another method or publish function,\n    // get the user state from the outer method or publish function, otherwise\n    // don't allow setUserId to be called\n\n\n    var userId = null;\n\n    var setUserId = function () {\n      throw new Error(\"Can't call setUserId on a server initiated method call\");\n    };\n\n    var connection = null;\n\n    var currentMethodInvocation = DDP._CurrentMethodInvocation.get();\n\n    var currentPublicationInvocation = DDP._CurrentPublicationInvocation.get();\n\n    var randomSeed = null;\n\n    if (currentMethodInvocation) {\n      userId = currentMethodInvocation.userId;\n\n      setUserId = function (userId) {\n        currentMethodInvocation.setUserId(userId);\n      };\n\n      connection = currentMethodInvocation.connection;\n      randomSeed = DDPCommon.makeRpcSeed(currentMethodInvocation, name);\n    } else if (currentPublicationInvocation) {\n      userId = currentPublicationInvocation.userId;\n\n      setUserId = function (userId) {\n        currentPublicationInvocation._session._setUserId(userId);\n      };\n\n      connection = currentPublicationInvocation.connection;\n    }\n\n    var invocation = new DDPCommon.MethodInvocation({\n      isSimulation: false,\n      userId,\n      setUserId,\n      connection,\n      randomSeed\n    });\n    return new Promise(resolve => resolve(DDP._CurrentMethodInvocation.withValue(invocation, () => maybeAuditArgumentChecks(handler, invocation, EJSON.clone(args), \"internal call to '\" + name + \"'\")))).then(EJSON.clone);\n  },\n  _urlForSession: function (sessionId) {\n    var self = this;\n    var session = self.sessions[sessionId];\n    if (session) return session._socketUrl;else return null;\n  }\n});\n\nvar calculateVersion = function (clientSupportedVersions, serverSupportedVersions) {\n  var correctVersion = _.find(clientSupportedVersions, function (version) {\n    return _.contains(serverSupportedVersions, version);\n  });\n\n  if (!correctVersion) {\n    correctVersion = serverSupportedVersions[0];\n  }\n\n  return correctVersion;\n};\n\nDDPServer._calculateVersion = calculateVersion; // \"blind\" exceptions other than those that were deliberately thrown to signal\n// errors to the client\n\nvar wrapInternalException = function (exception, context) {\n  if (!exception) return exception; // To allow packages to throw errors intended for the client but not have to\n  // depend on the Meteor.Error class, `isClientSafe` can be set to true on any\n  // error before it is thrown.\n\n  if (exception.isClientSafe) {\n    if (!(exception instanceof Meteor.Error)) {\n      const originalMessage = exception.message;\n      exception = new Meteor.Error(exception.error, exception.reason, exception.details);\n      exception.message = originalMessage;\n    }\n\n    return exception;\n  } // Tests can set the '_expectedByTest' flag on an exception so it won't go to\n  // the server log.\n\n\n  if (!exception._expectedByTest) {\n    Meteor._debug(\"Exception \" + context, exception);\n\n    if (exception.sanitizedError) {\n      Meteor._debug(\"Sanitized and reported to the client as:\", exception.sanitizedError);\n\n      Meteor._debug();\n    }\n  } // Did the error contain more details that could have been useful if caught in\n  // server code (or if thrown from non-client-originated code), but also\n  // provided a \"sanitized\" version with more context than 500 Internal server\n  // error? Use that.\n\n\n  if (exception.sanitizedError) {\n    if (exception.sanitizedError.isClientSafe) return exception.sanitizedError;\n\n    Meteor._debug(\"Exception \" + context + \" provides a sanitizedError that \" + \"does not have isClientSafe property set; ignoring\");\n  }\n\n  return new Meteor.Error(500, \"Internal server error\");\n}; // Audit argument checks, if the audit-argument-checks package exists (it is a\n// weak dependency of this package).\n\n\nvar maybeAuditArgumentChecks = function (f, context, args, description) {\n  args = args || [];\n\n  if (Package['audit-argument-checks']) {\n    return Match._failIfArgumentsAreNotAllChecked(f, context, args, description);\n  }\n\n  return f.apply(context, args);\n};","map":{"version":3,"sources":["packages/ddp-server/livedata_server.js"],"names":["DDPServer","Fiber","Npm","require","SessionDocumentView","self","existsIn","dataByKey","_SessionDocumentView","_","extend","prototype","getFields","ret","each","precedenceList","key","value","clearField","subscriptionHandle","changeCollector","removedValue","undefined","i","length","precedence","splice","isEmpty","EJSON","equals","changeField","isAdd","clone","has","elt","find","push","SessionCollectionView","collectionName","sessionCallbacks","documents","callbacks","_SessionCollectionView","diff","previous","DiffSequence","diffObjects","both","bind","diffDocument","rightOnly","id","nowDV","added","leftOnly","prevDV","removed","fields","prev","now","changed","docView","changedResult","Error","err","Session","server","version","socket","options","Random","initialized","inQueue","Meteor","_DoubleEndedQueue","blocked","workerRunning","_namedSubs","_universalSubs","userId","collectionViews","_isSending","_dontStartNewUniversalSubs","_pendingReady","_closeCallbacks","_socketUrl","url","_respondToPings","respondToPings","connectionHandle","close","onClose","fn","cb","bindEnvironment","defer","clientAddress","_clientAddress","httpHeaders","headers","send","msg","session","startUniversalSubs","run","heartbeatInterval","setWebsocketTimeout","heartbeat","DDPCommon","Heartbeat","heartbeatTimeout","onTimeout","sendPing","start","Package","Facts","incrementServerFact","sendReady","subscriptionIds","subs","subscriptionId","sendAdded","collection","sendChanged","sendRemoved","getSendCallbacks","getCollectionView","view","handlers","universal_publish_handlers","handler","_startSubscription","stop","_meteorSession","_deactivateAllSubscriptions","callback","_removeSession","_printSentDDP","_debug","stringifyDDP","sendError","reason","offendingMessage","processMessage","msg_in","messageReceived","processNext","shift","unblock","onMessageHook","protocol_handlers","call","sub","name","params","Array","publish_handlers","error","DDPRateLimiter","rateLimiterInput","type","connectionId","_increment","rateLimitResult","_check","allowed","getErrorMessage","timeToReset","unsub","_stopSubscription","method","randomSeed","fence","_WriteFence","onAllCommitted","retire","methods","method_handlers","arm","setUserId","_setUserId","invocation","MethodInvocation","isSimulation","connection","promise","Promise","resolve","reject","_CurrentWriteFence","withValue","DDP","_CurrentMethodInvocation","maybeAuditArgumentChecks","finish","payload","then","result","exception","wrapInternalException","_eachSub","f","_diffCollectionViews","beforeCVs","leftValue","rightValue","doc","_deactivate","oldNamedSubs","_recreate","_runHandler","_noYieldsAllowed","subId","Subscription","subName","_name","_removeAllDocuments","response","httpForwardedCount","parseInt","process","env","remoteAddress","forwardedFor","isString","trim","split","_session","_handler","_subscriptionId","_params","_subscriptionHandle","_deactivated","_stopCallbacks","_documents","_ready","_idFilter","idStringify","MongoID","idParse","res","_CurrentPublicationInvocation","e","_isDeactivated","_publishHandlerResult","isCursor","c","_publishCursor","ready","isArray","all","collectionNames","_getCollectionName","cur","_callStopCallbacks","collectionDocs","keys","strId","onStop","_ensure","Server","defaults","onConnectionHook","Hook","debugPrintExceptions","sessions","stream_server","StreamServer","register","on","raw_msg","_printReceivedDDP","parseDDP","_handleConnect","onConnection","onMessage","support","contains","SUPPORTED_DDP_VERSIONS","calculateVersion","publish","isObject","autopublish","is_auto","warned_about_autopublish","func","args","pop","apply","callAsync","applyAsync","await","currentMethodInvocation","get","currentPublicationInvocation","makeRpcSeed","_urlForSession","sessionId","clientSupportedVersions","serverSupportedVersions","correctVersion","_calculateVersion","context","isClientSafe","originalMessage","message","details","_expectedByTest","sanitizedError","description","Match","_failIfArgumentsAreNotAllChecked"],"mappings":"AAAAA,SAAS,GAAG,EAAZ;;AAEA,IAAIC,KAAK,GAAGC,GAAG,CAACC,OAAJ,CAAY,QAAZ,CAAZ,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,IAAIC,mBAAmB,GAAG,YAAY;AACpC,MAAIC,IAAI,GAAG,IAAX;AACAA,EAAAA,IAAI,CAACC,QAAL,GAAgB,EAAhB,CAFoC,CAEhB;;AACpBD,EAAAA,IAAI,CAACE,SAAL,GAAiB,EAAjB,CAHoC,CAGf;AACtB,CAJD;;AAMAP,SAAS,CAACQ,oBAAV,GAAiCJ,mBAAjC;;AAGAK,CAAC,CAACC,MAAF,CAASN,mBAAmB,CAACO,SAA7B,EAAwC;AAEtCC,EAAAA,SAAS,EAAE,YAAY;AACrB,QAAIP,IAAI,GAAG,IAAX;AACA,QAAIQ,GAAG,GAAG,EAAV;;AACAJ,IAAAA,CAAC,CAACK,IAAF,CAAOT,IAAI,CAACE,SAAZ,EAAuB,UAAUQ,cAAV,EAA0BC,GAA1B,EAA+B;AACpDH,MAAAA,GAAG,CAACG,GAAD,CAAH,GAAWD,cAAc,CAAC,CAAD,CAAd,CAAkBE,KAA7B;AACD,KAFD;;AAGA,WAAOJ,GAAP;AACD,GATqC;AAWtCK,EAAAA,UAAU,EAAE,UAAUC,kBAAV,EAA8BH,GAA9B,EAAmCI,eAAnC,EAAoD;AAC9D,QAAIf,IAAI,GAAG,IAAX,CAD8D,CAE9D;;AACA,QAAIW,GAAG,KAAK,KAAZ,EACE;AACF,QAAID,cAAc,GAAGV,IAAI,CAACE,SAAL,CAAeS,GAAf,CAArB,CAL8D,CAO9D;AACA;;AACA,QAAI,CAACD,cAAL,EACE;AAEF,QAAIM,YAAY,GAAGC,SAAnB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,cAAc,CAACS,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC9C,UAAIE,UAAU,GAAGV,cAAc,CAACQ,CAAD,CAA/B;;AACA,UAAIE,UAAU,CAACN,kBAAX,KAAkCA,kBAAtC,EAA0D;AACxD;AACA;AACA,YAAII,CAAC,KAAK,CAAV,EACEF,YAAY,GAAGI,UAAU,CAACR,KAA1B;AACFF,QAAAA,cAAc,CAACW,MAAf,CAAsBH,CAAtB,EAAyB,CAAzB;AACA;AACD;AACF;;AACD,QAAId,CAAC,CAACkB,OAAF,CAAUZ,cAAV,CAAJ,EAA+B;AAC7B,aAAOV,IAAI,CAACE,SAAL,CAAeS,GAAf,CAAP;AACAI,MAAAA,eAAe,CAACJ,GAAD,CAAf,GAAuBM,SAAvB;AACD,KAHD,MAGO,IAAID,YAAY,KAAKC,SAAjB,IACA,CAACM,KAAK,CAACC,MAAN,CAAaR,YAAb,EAA2BN,cAAc,CAAC,CAAD,CAAd,CAAkBE,KAA7C,CADL,EAC0D;AAC/DG,MAAAA,eAAe,CAACJ,GAAD,CAAf,GAAuBD,cAAc,CAAC,CAAD,CAAd,CAAkBE,KAAzC;AACD;AACF,GA1CqC;AA4CtCa,EAAAA,WAAW,EAAE,UAAUX,kBAAV,EAA8BH,GAA9B,EAAmCC,KAAnC,EACUG,eADV,EAC2BW,KAD3B,EACkC;AAC7C,QAAI1B,IAAI,GAAG,IAAX,CAD6C,CAE7C;;AACA,QAAIW,GAAG,KAAK,KAAZ,EACE,OAJ2C,CAM7C;;AACAC,IAAAA,KAAK,GAAGW,KAAK,CAACI,KAAN,CAAYf,KAAZ,CAAR;;AAEA,QAAI,CAACR,CAAC,CAACwB,GAAF,CAAM5B,IAAI,CAACE,SAAX,EAAsBS,GAAtB,CAAL,EAAiC;AAC/BX,MAAAA,IAAI,CAACE,SAAL,CAAeS,GAAf,IAAsB,CAAC;AAACG,QAAAA,kBAAkB,EAAEA,kBAArB;AACCF,QAAAA,KAAK,EAAEA;AADR,OAAD,CAAtB;AAEAG,MAAAA,eAAe,CAACJ,GAAD,CAAf,GAAuBC,KAAvB;AACA;AACD;;AACD,QAAIF,cAAc,GAAGV,IAAI,CAACE,SAAL,CAAeS,GAAf,CAArB;AACA,QAAIkB,GAAJ;;AACA,QAAI,CAACH,KAAL,EAAY;AACVG,MAAAA,GAAG,GAAGzB,CAAC,CAAC0B,IAAF,CAAOpB,cAAP,EAAuB,UAAUU,UAAV,EAAsB;AACjD,eAAOA,UAAU,CAACN,kBAAX,KAAkCA,kBAAzC;AACD,OAFK,CAAN;AAGD;;AAED,QAAIe,GAAJ,EAAS;AACP,UAAIA,GAAG,KAAKnB,cAAc,CAAC,CAAD,CAAtB,IAA6B,CAACa,KAAK,CAACC,MAAN,CAAaZ,KAAb,EAAoBiB,GAAG,CAACjB,KAAxB,CAAlC,EAAkE;AAChE;AACAG,QAAAA,eAAe,CAACJ,GAAD,CAAf,GAAuBC,KAAvB;AACD;;AACDiB,MAAAA,GAAG,CAACjB,KAAJ,GAAYA,KAAZ;AACD,KAND,MAMO;AACL;AACAF,MAAAA,cAAc,CAACqB,IAAf,CAAoB;AAACjB,QAAAA,kBAAkB,EAAEA,kBAArB;AAAyCF,QAAAA,KAAK,EAAEA;AAAhD,OAApB;AACD;AAEF;AA/EqC,CAAxC;AAkFA;;;;;;;;AAMA,IAAIoB,qBAAqB,GAAG,UAAUC,cAAV,EAA0BC,gBAA1B,EAA4C;AACtE,MAAIlC,IAAI,GAAG,IAAX;AACAA,EAAAA,IAAI,CAACiC,cAAL,GAAsBA,cAAtB;AACAjC,EAAAA,IAAI,CAACmC,SAAL,GAAiB,EAAjB;AACAnC,EAAAA,IAAI,CAACoC,SAAL,GAAiBF,gBAAjB;AACD,CALD;;AAOAvC,SAAS,CAAC0C,sBAAV,GAAmCL,qBAAnC;;AAGA5B,CAAC,CAACC,MAAF,CAAS2B,qBAAqB,CAAC1B,SAA/B,EAA0C;AAExCgB,EAAAA,OAAO,EAAE,YAAY;AACnB,QAAItB,IAAI,GAAG,IAAX;AACA,WAAOI,CAAC,CAACkB,OAAF,CAAUtB,IAAI,CAACmC,SAAf,CAAP;AACD,GALuC;AAOxCG,EAAAA,IAAI,EAAE,UAAUC,QAAV,EAAoB;AACxB,QAAIvC,IAAI,GAAG,IAAX;AACAwC,IAAAA,YAAY,CAACC,WAAb,CAAyBF,QAAQ,CAACJ,SAAlC,EAA6CnC,IAAI,CAACmC,SAAlD,EAA6D;AAC3DO,MAAAA,IAAI,EAAEtC,CAAC,CAACuC,IAAF,CAAO3C,IAAI,CAAC4C,YAAZ,EAA0B5C,IAA1B,CADqD;AAG3D6C,MAAAA,SAAS,EAAE,UAAUC,EAAV,EAAcC,KAAd,EAAqB;AAC9B/C,QAAAA,IAAI,CAACoC,SAAL,CAAeY,KAAf,CAAqBhD,IAAI,CAACiC,cAA1B,EAA0Ca,EAA1C,EAA8CC,KAAK,CAACxC,SAAN,EAA9C;AACD,OAL0D;AAO3D0C,MAAAA,QAAQ,EAAE,UAAUH,EAAV,EAAcI,MAAd,EAAsB;AAC9BlD,QAAAA,IAAI,CAACoC,SAAL,CAAee,OAAf,CAAuBnD,IAAI,CAACiC,cAA5B,EAA4Ca,EAA5C;AACD;AAT0D,KAA7D;AAWD,GApBuC;AAsBxCF,EAAAA,YAAY,EAAE,UAAUE,EAAV,EAAcI,MAAd,EAAsBH,KAAtB,EAA6B;AACzC,QAAI/C,IAAI,GAAG,IAAX;AACA,QAAIoD,MAAM,GAAG,EAAb;AACAZ,IAAAA,YAAY,CAACC,WAAb,CAAyBS,MAAM,CAAC3C,SAAP,EAAzB,EAA6CwC,KAAK,CAACxC,SAAN,EAA7C,EAAgE;AAC9DmC,MAAAA,IAAI,EAAE,UAAU/B,GAAV,EAAe0C,IAAf,EAAqBC,GAArB,EAA0B;AAC9B,YAAI,CAAC/B,KAAK,CAACC,MAAN,CAAa6B,IAAb,EAAmBC,GAAnB,CAAL,EACEF,MAAM,CAACzC,GAAD,CAAN,GAAc2C,GAAd;AACH,OAJ6D;AAK9DT,MAAAA,SAAS,EAAE,UAAUlC,GAAV,EAAe2C,GAAf,EAAoB;AAC7BF,QAAAA,MAAM,CAACzC,GAAD,CAAN,GAAc2C,GAAd;AACD,OAP6D;AAQ9DL,MAAAA,QAAQ,EAAE,UAAStC,GAAT,EAAc0C,IAAd,EAAoB;AAC5BD,QAAAA,MAAM,CAACzC,GAAD,CAAN,GAAcM,SAAd;AACD;AAV6D,KAAhE;AAYAjB,IAAAA,IAAI,CAACoC,SAAL,CAAemB,OAAf,CAAuBvD,IAAI,CAACiC,cAA5B,EAA4Ca,EAA5C,EAAgDM,MAAhD;AACD,GAtCuC;AAwCxCJ,EAAAA,KAAK,EAAE,UAAUlC,kBAAV,EAA8BgC,EAA9B,EAAkCM,MAAlC,EAA0C;AAC/C,QAAIpD,IAAI,GAAG,IAAX;AACA,QAAIwD,OAAO,GAAGxD,IAAI,CAACmC,SAAL,CAAeW,EAAf,CAAd;AACA,QAAIE,KAAK,GAAG,KAAZ;;AACA,QAAI,CAACQ,OAAL,EAAc;AACZR,MAAAA,KAAK,GAAG,IAAR;AACAQ,MAAAA,OAAO,GAAG,IAAIzD,mBAAJ,EAAV;AACAC,MAAAA,IAAI,CAACmC,SAAL,CAAeW,EAAf,IAAqBU,OAArB;AACD;;AACDA,IAAAA,OAAO,CAACvD,QAAR,CAAiBa,kBAAjB,IAAuC,IAAvC;AACA,QAAIC,eAAe,GAAG,EAAtB;;AACAX,IAAAA,CAAC,CAACK,IAAF,CAAO2C,MAAP,EAAe,UAAUxC,KAAV,EAAiBD,GAAjB,EAAsB;AACnC6C,MAAAA,OAAO,CAAC/B,WAAR,CACEX,kBADF,EACsBH,GADtB,EAC2BC,KAD3B,EACkCG,eADlC,EACmD,IADnD;AAED,KAHD;;AAIA,QAAIiC,KAAJ,EACEhD,IAAI,CAACoC,SAAL,CAAeY,KAAf,CAAqBhD,IAAI,CAACiC,cAA1B,EAA0Ca,EAA1C,EAA8C/B,eAA9C,EADF,KAGEf,IAAI,CAACoC,SAAL,CAAemB,OAAf,CAAuBvD,IAAI,CAACiC,cAA5B,EAA4Ca,EAA5C,EAAgD/B,eAAhD;AACH,GA3DuC;AA6DxCwC,EAAAA,OAAO,EAAE,UAAUzC,kBAAV,EAA8BgC,EAA9B,EAAkCS,OAAlC,EAA2C;AAClD,QAAIvD,IAAI,GAAG,IAAX;AACA,QAAIyD,aAAa,GAAG,EAApB;AACA,QAAID,OAAO,GAAGxD,IAAI,CAACmC,SAAL,CAAeW,EAAf,CAAd;AACA,QAAI,CAACU,OAAL,EACE,MAAM,IAAIE,KAAJ,CAAU,oCAAoCZ,EAApC,GAAyC,YAAnD,CAAN;;AACF1C,IAAAA,CAAC,CAACK,IAAF,CAAO8C,OAAP,EAAgB,UAAU3C,KAAV,EAAiBD,GAAjB,EAAsB;AACpC,UAAIC,KAAK,KAAKK,SAAd,EACEuC,OAAO,CAAC3C,UAAR,CAAmBC,kBAAnB,EAAuCH,GAAvC,EAA4C8C,aAA5C,EADF,KAGED,OAAO,CAAC/B,WAAR,CAAoBX,kBAApB,EAAwCH,GAAxC,EAA6CC,KAA7C,EAAoD6C,aAApD;AACH,KALD;;AAMAzD,IAAAA,IAAI,CAACoC,SAAL,CAAemB,OAAf,CAAuBvD,IAAI,CAACiC,cAA5B,EAA4Ca,EAA5C,EAAgDW,aAAhD;AACD,GA1EuC;AA4ExCN,EAAAA,OAAO,EAAE,UAAUrC,kBAAV,EAA8BgC,EAA9B,EAAkC;AACzC,QAAI9C,IAAI,GAAG,IAAX;AACA,QAAIwD,OAAO,GAAGxD,IAAI,CAACmC,SAAL,CAAeW,EAAf,CAAd;;AACA,QAAI,CAACU,OAAL,EAAc;AACZ,UAAIG,GAAG,GAAG,IAAID,KAAJ,CAAU,kCAAkCZ,EAA5C,CAAV;AACA,YAAMa,GAAN;AACD;;AACD,WAAOH,OAAO,CAACvD,QAAR,CAAiBa,kBAAjB,CAAP;;AACA,QAAIV,CAAC,CAACkB,OAAF,CAAUkC,OAAO,CAACvD,QAAlB,CAAJ,EAAiC;AAC/B;AACAD,MAAAA,IAAI,CAACoC,SAAL,CAAee,OAAf,CAAuBnD,IAAI,CAACiC,cAA5B,EAA4Ca,EAA5C;AACA,aAAO9C,IAAI,CAACmC,SAAL,CAAeW,EAAf,CAAP;AACD,KAJD,MAIO;AACL,UAAIS,OAAO,GAAG,EAAd,CADK,CAEL;AACA;;AACAnD,MAAAA,CAAC,CAACK,IAAF,CAAO+C,OAAO,CAACtD,SAAf,EAA0B,UAAUQ,cAAV,EAA0BC,GAA1B,EAA+B;AACvD6C,QAAAA,OAAO,CAAC3C,UAAR,CAAmBC,kBAAnB,EAAuCH,GAAvC,EAA4C4C,OAA5C;AACD,OAFD;;AAIAvD,MAAAA,IAAI,CAACoC,SAAL,CAAemB,OAAf,CAAuBvD,IAAI,CAACiC,cAA5B,EAA4Ca,EAA5C,EAAgDS,OAAhD;AACD;AACF;AAlGuC,CAA1C;AAqGA;;AACA;;AACA;;;AAEA,IAAIK,OAAO,GAAG,UAAUC,MAAV,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmCC,OAAnC,EAA4C;AACxD,MAAIhE,IAAI,GAAG,IAAX;AACAA,EAAAA,IAAI,CAAC8C,EAAL,GAAUmB,MAAM,CAACnB,EAAP,EAAV;AAEA9C,EAAAA,IAAI,CAAC6D,MAAL,GAAcA,MAAd;AACA7D,EAAAA,IAAI,CAAC8D,OAAL,GAAeA,OAAf;AAEA9D,EAAAA,IAAI,CAACkE,WAAL,GAAmB,KAAnB;AACAlE,EAAAA,IAAI,CAAC+D,MAAL,GAAcA,MAAd,CARwD,CAUxD;AACA;;AACA/D,EAAAA,IAAI,CAACmE,OAAL,GAAe,IAAIC,MAAM,CAACC,iBAAX,EAAf;AAEArE,EAAAA,IAAI,CAACsE,OAAL,GAAe,KAAf;AACAtE,EAAAA,IAAI,CAACuE,aAAL,GAAqB,KAArB,CAfwD,CAiBxD;;AACAvE,EAAAA,IAAI,CAACwE,UAAL,GAAkB,EAAlB;AACAxE,EAAAA,IAAI,CAACyE,cAAL,GAAsB,EAAtB;AAEAzE,EAAAA,IAAI,CAAC0E,MAAL,GAAc,IAAd;AAEA1E,EAAAA,IAAI,CAAC2E,eAAL,GAAuB,EAAvB,CAvBwD,CAyBxD;AACA;AACA;;AACA3E,EAAAA,IAAI,CAAC4E,UAAL,GAAkB,IAAlB,CA5BwD,CA8BxD;AACA;;AACA5E,EAAAA,IAAI,CAAC6E,0BAAL,GAAkC,KAAlC,CAhCwD,CAkCxD;AACA;;AACA7E,EAAAA,IAAI,CAAC8E,aAAL,GAAqB,EAArB,CApCwD,CAsCxD;;AACA9E,EAAAA,IAAI,CAAC+E,eAAL,GAAuB,EAAvB,CAvCwD,CA0CxD;AACA;;AACA/E,EAAAA,IAAI,CAACgF,UAAL,GAAkBjB,MAAM,CAACkB,GAAzB,CA5CwD,CA8CxD;;AACAjF,EAAAA,IAAI,CAACkF,eAAL,GAAuBlB,OAAO,CAACmB,cAA/B,CA/CwD,CAiDxD;AACA;AACA;;AACAnF,EAAAA,IAAI,CAACoF,gBAAL,GAAwB;AACtBtC,IAAAA,EAAE,EAAE9C,IAAI,CAAC8C,EADa;AAEtBuC,IAAAA,KAAK,EAAE,YAAY;AACjBrF,MAAAA,IAAI,CAACqF,KAAL;AACD,KAJqB;AAKtBC,IAAAA,OAAO,EAAE,UAAUC,EAAV,EAAc;AACrB,UAAIC,EAAE,GAAGpB,MAAM,CAACqB,eAAP,CAAuBF,EAAvB,EAA2B,6BAA3B,CAAT;;AACA,UAAIvF,IAAI,CAACmE,OAAT,EAAkB;AAChBnE,QAAAA,IAAI,CAAC+E,eAAL,CAAqBhD,IAArB,CAA0ByD,EAA1B;AACD,OAFD,MAEO;AACL;AACApB,QAAAA,MAAM,CAACsB,KAAP,CAAaF,EAAb;AACD;AACF,KAbqB;AActBG,IAAAA,aAAa,EAAE3F,IAAI,CAAC4F,cAAL,EAdO;AAetBC,IAAAA,WAAW,EAAE7F,IAAI,CAAC+D,MAAL,CAAY+B;AAfH,GAAxB;AAkBA9F,EAAAA,IAAI,CAAC+F,IAAL,CAAU;AAAEC,IAAAA,GAAG,EAAE,WAAP;AAAoBC,IAAAA,OAAO,EAAEjG,IAAI,CAAC8C;AAAlC,GAAV,EAtEwD,CAwExD;;AACAlD,EAAAA,KAAK,CAAC,YAAY;AAChBI,IAAAA,IAAI,CAACkG,kBAAL;AACD,GAFI,CAAL,CAEGC,GAFH;;AAIA,MAAIrC,OAAO,KAAK,MAAZ,IAAsBE,OAAO,CAACoC,iBAAR,KAA8B,CAAxD,EAA2D;AACzD;AACArC,IAAAA,MAAM,CAACsC,mBAAP,CAA2B,CAA3B;AAEArG,IAAAA,IAAI,CAACsG,SAAL,GAAiB,IAAIC,SAAS,CAACC,SAAd,CAAwB;AACvCJ,MAAAA,iBAAiB,EAAEpC,OAAO,CAACoC,iBADY;AAEvCK,MAAAA,gBAAgB,EAAEzC,OAAO,CAACyC,gBAFa;AAGvCC,MAAAA,SAAS,EAAE,YAAY;AACrB1G,QAAAA,IAAI,CAACqF,KAAL;AACD,OALsC;AAMvCsB,MAAAA,QAAQ,EAAE,YAAY;AACpB3G,QAAAA,IAAI,CAAC+F,IAAL,CAAU;AAACC,UAAAA,GAAG,EAAE;AAAN,SAAV;AACD;AARsC,KAAxB,CAAjB;AAUAhG,IAAAA,IAAI,CAACsG,SAAL,CAAeM,KAAf;AACD;;AAEDC,EAAAA,OAAO,CAAC,YAAD,CAAP,IAAyBA,OAAO,CAAC,YAAD,CAAP,CAAsBC,KAAtB,CAA4BC,mBAA5B,CACvB,UADuB,EACX,UADW,EACC,CADD,CAAzB;AAED,CAhGD;;AAkGA3G,CAAC,CAACC,MAAF,CAASuD,OAAO,CAACtD,SAAjB,EAA4B;AAE1B0G,EAAAA,SAAS,EAAE,UAAUC,eAAV,EAA2B;AACpC,QAAIjH,IAAI,GAAG,IAAX;AACA,QAAIA,IAAI,CAAC4E,UAAT,EACE5E,IAAI,CAAC+F,IAAL,CAAU;AAACC,MAAAA,GAAG,EAAE,OAAN;AAAekB,MAAAA,IAAI,EAAED;AAArB,KAAV,EADF,KAEK;AACH7G,MAAAA,CAAC,CAACK,IAAF,CAAOwG,eAAP,EAAwB,UAAUE,cAAV,EAA0B;AAChDnH,QAAAA,IAAI,CAAC8E,aAAL,CAAmB/C,IAAnB,CAAwBoF,cAAxB;AACD,OAFD;AAGD;AACF,GAXyB;AAa1BC,EAAAA,SAAS,EAAE,UAAUnF,cAAV,EAA0Ba,EAA1B,EAA8BM,MAA9B,EAAsC;AAC/C,QAAIpD,IAAI,GAAG,IAAX;AACA,QAAIA,IAAI,CAAC4E,UAAT,EACE5E,IAAI,CAAC+F,IAAL,CAAU;AAACC,MAAAA,GAAG,EAAE,OAAN;AAAeqB,MAAAA,UAAU,EAAEpF,cAA3B;AAA2Ca,MAAAA,EAAE,EAAEA,EAA/C;AAAmDM,MAAAA,MAAM,EAAEA;AAA3D,KAAV;AACH,GAjByB;AAmB1BkE,EAAAA,WAAW,EAAE,UAAUrF,cAAV,EAA0Ba,EAA1B,EAA8BM,MAA9B,EAAsC;AACjD,QAAIpD,IAAI,GAAG,IAAX;AACA,QAAII,CAAC,CAACkB,OAAF,CAAU8B,MAAV,CAAJ,EACE;;AAEF,QAAIpD,IAAI,CAAC4E,UAAT,EAAqB;AACnB5E,MAAAA,IAAI,CAAC+F,IAAL,CAAU;AACRC,QAAAA,GAAG,EAAE,SADG;AAERqB,QAAAA,UAAU,EAAEpF,cAFJ;AAGRa,QAAAA,EAAE,EAAEA,EAHI;AAIRM,QAAAA,MAAM,EAAEA;AAJA,OAAV;AAMD;AACF,GAhCyB;AAkC1BmE,EAAAA,WAAW,EAAE,UAAUtF,cAAV,EAA0Ba,EAA1B,EAA8B;AACzC,QAAI9C,IAAI,GAAG,IAAX;AACA,QAAIA,IAAI,CAAC4E,UAAT,EACE5E,IAAI,CAAC+F,IAAL,CAAU;AAACC,MAAAA,GAAG,EAAE,SAAN;AAAiBqB,MAAAA,UAAU,EAAEpF,cAA7B;AAA6Ca,MAAAA,EAAE,EAAEA;AAAjD,KAAV;AACH,GAtCyB;AAwC1B0E,EAAAA,gBAAgB,EAAE,YAAY;AAC5B,QAAIxH,IAAI,GAAG,IAAX;AACA,WAAO;AACLgD,MAAAA,KAAK,EAAE5C,CAAC,CAACuC,IAAF,CAAO3C,IAAI,CAACoH,SAAZ,EAAuBpH,IAAvB,CADF;AAELuD,MAAAA,OAAO,EAAEnD,CAAC,CAACuC,IAAF,CAAO3C,IAAI,CAACsH,WAAZ,EAAyBtH,IAAzB,CAFJ;AAGLmD,MAAAA,OAAO,EAAE/C,CAAC,CAACuC,IAAF,CAAO3C,IAAI,CAACuH,WAAZ,EAAyBvH,IAAzB;AAHJ,KAAP;AAKD,GA/CyB;AAiD1ByH,EAAAA,iBAAiB,EAAE,UAAUxF,cAAV,EAA0B;AAC3C,QAAIjC,IAAI,GAAG,IAAX;;AACA,QAAII,CAAC,CAACwB,GAAF,CAAM5B,IAAI,CAAC2E,eAAX,EAA4B1C,cAA5B,CAAJ,EAAiD;AAC/C,aAAOjC,IAAI,CAAC2E,eAAL,CAAqB1C,cAArB,CAAP;AACD;;AACD,QAAIzB,GAAG,GAAG,IAAIwB,qBAAJ,CAA0BC,cAA1B,EAC0BjC,IAAI,CAACwH,gBAAL,EAD1B,CAAV;AAEAxH,IAAAA,IAAI,CAAC2E,eAAL,CAAqB1C,cAArB,IAAuCzB,GAAvC;AACA,WAAOA,GAAP;AACD,GA1DyB;AA4D1BwC,EAAAA,KAAK,EAAE,UAAUlC,kBAAV,EAA8BmB,cAA9B,EAA8Ca,EAA9C,EAAkDM,MAAlD,EAA0D;AAC/D,QAAIpD,IAAI,GAAG,IAAX;AACA,QAAI0H,IAAI,GAAG1H,IAAI,CAACyH,iBAAL,CAAuBxF,cAAvB,CAAX;AACAyF,IAAAA,IAAI,CAAC1E,KAAL,CAAWlC,kBAAX,EAA+BgC,EAA/B,EAAmCM,MAAnC;AACD,GAhEyB;AAkE1BD,EAAAA,OAAO,EAAE,UAAUrC,kBAAV,EAA8BmB,cAA9B,EAA8Ca,EAA9C,EAAkD;AACzD,QAAI9C,IAAI,GAAG,IAAX;AACA,QAAI0H,IAAI,GAAG1H,IAAI,CAACyH,iBAAL,CAAuBxF,cAAvB,CAAX;AACAyF,IAAAA,IAAI,CAACvE,OAAL,CAAarC,kBAAb,EAAiCgC,EAAjC;;AACA,QAAI4E,IAAI,CAACpG,OAAL,EAAJ,EAAoB;AAClB,aAAOtB,IAAI,CAAC2E,eAAL,CAAqB1C,cAArB,CAAP;AACD;AACF,GAzEyB;AA2E1BsB,EAAAA,OAAO,EAAE,UAAUzC,kBAAV,EAA8BmB,cAA9B,EAA8Ca,EAA9C,EAAkDM,MAAlD,EAA0D;AACjE,QAAIpD,IAAI,GAAG,IAAX;AACA,QAAI0H,IAAI,GAAG1H,IAAI,CAACyH,iBAAL,CAAuBxF,cAAvB,CAAX;AACAyF,IAAAA,IAAI,CAACnE,OAAL,CAAazC,kBAAb,EAAiCgC,EAAjC,EAAqCM,MAArC;AACD,GA/EyB;AAiF1B8C,EAAAA,kBAAkB,EAAE,YAAY;AAC9B,QAAIlG,IAAI,GAAG,IAAX,CAD8B,CAE9B;AACA;AACA;;AACA,QAAI2H,QAAQ,GAAGvH,CAAC,CAACuB,KAAF,CAAQ3B,IAAI,CAAC6D,MAAL,CAAY+D,0BAApB,CAAf;;AACAxH,IAAAA,CAAC,CAACK,IAAF,CAAOkH,QAAP,EAAiB,UAAUE,OAAV,EAAmB;AAClC7H,MAAAA,IAAI,CAAC8H,kBAAL,CAAwBD,OAAxB;AACD,KAFD;AAGD,GA1FyB;AA4F1B;AACAxC,EAAAA,KAAK,EAAE,YAAY;AACjB,QAAIrF,IAAI,GAAG,IAAX,CADiB,CAGjB;AACA;AACA;AAEA;;AACA,QAAI,CAAEA,IAAI,CAACmE,OAAX,EACE,OATe,CAWjB;;AACAnE,IAAAA,IAAI,CAACmE,OAAL,GAAe,IAAf;AACAnE,IAAAA,IAAI,CAAC2E,eAAL,GAAuB,EAAvB;;AAEA,QAAI3E,IAAI,CAACsG,SAAT,EAAoB;AAClBtG,MAAAA,IAAI,CAACsG,SAAL,CAAeyB,IAAf;AACA/H,MAAAA,IAAI,CAACsG,SAAL,GAAiB,IAAjB;AACD;;AAED,QAAItG,IAAI,CAAC+D,MAAT,EAAiB;AACf/D,MAAAA,IAAI,CAAC+D,MAAL,CAAYsB,KAAZ;AACArF,MAAAA,IAAI,CAAC+D,MAAL,CAAYiE,cAAZ,GAA6B,IAA7B;AACD;;AAEDnB,IAAAA,OAAO,CAAC,YAAD,CAAP,IAAyBA,OAAO,CAAC,YAAD,CAAP,CAAsBC,KAAtB,CAA4BC,mBAA5B,CACvB,UADuB,EACX,UADW,EACC,CAAC,CADF,CAAzB;AAGA3C,IAAAA,MAAM,CAACsB,KAAP,CAAa,YAAY;AACvB;AACA;AACA;AACA1F,MAAAA,IAAI,CAACiI,2BAAL,GAJuB,CAMvB;AACA;;;AACA7H,MAAAA,CAAC,CAACK,IAAF,CAAOT,IAAI,CAAC+E,eAAZ,EAA6B,UAAUmD,QAAV,EAAoB;AAC/CA,QAAAA,QAAQ;AACT,OAFD;AAGD,KAXD,EA5BiB,CAyCjB;;AACAlI,IAAAA,IAAI,CAAC6D,MAAL,CAAYsE,cAAZ,CAA2BnI,IAA3B;AACD,GAxIyB;AA0I1B;AACA;AACA+F,EAAAA,IAAI,EAAE,UAAUC,GAAV,EAAe;AACnB,QAAIhG,IAAI,GAAG,IAAX;;AACA,QAAIA,IAAI,CAAC+D,MAAT,EAAiB;AACf,UAAIK,MAAM,CAACgE,aAAX,EACEhE,MAAM,CAACiE,MAAP,CAAc,UAAd,EAA0B9B,SAAS,CAAC+B,YAAV,CAAuBtC,GAAvB,CAA1B;AACFhG,MAAAA,IAAI,CAAC+D,MAAL,CAAYgC,IAAZ,CAAiBQ,SAAS,CAAC+B,YAAV,CAAuBtC,GAAvB,CAAjB;AACD;AACF,GAnJyB;AAqJ1B;AACAuC,EAAAA,SAAS,EAAE,UAAUC,MAAV,EAAkBC,gBAAlB,EAAoC;AAC7C,QAAIzI,IAAI,GAAG,IAAX;AACA,QAAIgG,GAAG,GAAG;AAACA,MAAAA,GAAG,EAAE,OAAN;AAAewC,MAAAA,MAAM,EAAEA;AAAvB,KAAV;AACA,QAAIC,gBAAJ,EACEzC,GAAG,CAACyC,gBAAJ,GAAuBA,gBAAvB;AACFzI,IAAAA,IAAI,CAAC+F,IAAL,CAAUC,GAAV;AACD,GA5JyB;AA8J1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA0C,EAAAA,cAAc,EAAE,UAAUC,MAAV,EAAkB;AAChC,QAAI3I,IAAI,GAAG,IAAX;AACA,QAAI,CAACA,IAAI,CAACmE,OAAV,EAAmB;AACjB,aAH8B,CAKhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAInE,IAAI,CAACsG,SAAT,EAAoB;AAClB1G,MAAAA,KAAK,CAAC,YAAY;AAChBI,QAAAA,IAAI,CAACsG,SAAL,CAAesC,eAAf;AACD,OAFI,CAAL,CAEGzC,GAFH;AAGD;;AAED,QAAInG,IAAI,CAAC8D,OAAL,KAAiB,MAAjB,IAA2B6E,MAAM,CAAC3C,GAAP,KAAe,MAA9C,EAAsD;AACpD,UAAIhG,IAAI,CAACkF,eAAT,EACElF,IAAI,CAAC+F,IAAL,CAAU;AAACC,QAAAA,GAAG,EAAE,MAAN;AAAclD,QAAAA,EAAE,EAAE6F,MAAM,CAAC7F;AAAzB,OAAV;AACF;AACD;;AACD,QAAI9C,IAAI,CAAC8D,OAAL,KAAiB,MAAjB,IAA2B6E,MAAM,CAAC3C,GAAP,KAAe,MAA9C,EAAsD;AACpD;AACA;AACD;;AAEDhG,IAAAA,IAAI,CAACmE,OAAL,CAAapC,IAAb,CAAkB4G,MAAlB;AACA,QAAI3I,IAAI,CAACuE,aAAT,EACE;AACFvE,IAAAA,IAAI,CAACuE,aAAL,GAAqB,IAArB;;AAEA,QAAIsE,WAAW,GAAG,YAAY;AAC5B,UAAI7C,GAAG,GAAGhG,IAAI,CAACmE,OAAL,IAAgBnE,IAAI,CAACmE,OAAL,CAAa2E,KAAb,EAA1B;;AACA,UAAI,CAAC9C,GAAL,EAAU;AACRhG,QAAAA,IAAI,CAACuE,aAAL,GAAqB,KAArB;AACA;AACD;;AAED3E,MAAAA,KAAK,CAAC,YAAY;AAChB,YAAI0E,OAAO,GAAG,IAAd;;AAEA,YAAIyE,OAAO,GAAG,YAAY;AACxB,cAAI,CAACzE,OAAL,EACE,OAFsB,CAEd;;AACVA,UAAAA,OAAO,GAAG,KAAV;AACAuE,UAAAA,WAAW;AACZ,SALD;;AAOA7I,QAAAA,IAAI,CAAC6D,MAAL,CAAYmF,aAAZ,CAA0BvI,IAA1B,CAA+B,UAAUyH,QAAV,EAAoB;AACjDA,UAAAA,QAAQ,CAAClC,GAAD,EAAMhG,IAAN,CAAR;AACA,iBAAO,IAAP;AACD,SAHD;AAKA,YAAII,CAAC,CAACwB,GAAF,CAAM5B,IAAI,CAACiJ,iBAAX,EAA8BjD,GAAG,CAACA,GAAlC,CAAJ,EACEhG,IAAI,CAACiJ,iBAAL,CAAuBjD,GAAG,CAACA,GAA3B,EAAgCkD,IAAhC,CAAqClJ,IAArC,EAA2CgG,GAA3C,EAAgD+C,OAAhD,EADF,KAGE/I,IAAI,CAACuI,SAAL,CAAe,aAAf,EAA8BvC,GAA9B;AACF+C,QAAAA,OAAO,GAnBS,CAmBL;AACZ,OApBI,CAAL,CAoBG5C,GApBH;AAqBD,KA5BD;;AA8BA0C,IAAAA,WAAW;AACZ,GAlPyB;AAoP1BI,EAAAA,iBAAiB,EAAE;AACjBE,IAAAA,GAAG,EAAE,UAAUnD,GAAV,EAAe;AAClB,UAAIhG,IAAI,GAAG,IAAX,CADkB,CAGlB;;AACA,UAAI,OAAQgG,GAAG,CAAClD,EAAZ,KAAoB,QAApB,IACA,OAAQkD,GAAG,CAACoD,IAAZ,KAAsB,QADtB,IAEE,YAAYpD,GAAb,IAAqB,EAAEA,GAAG,CAACqD,MAAJ,YAAsBC,KAAxB,CAF1B,EAE2D;AACzDtJ,QAAAA,IAAI,CAACuI,SAAL,CAAe,wBAAf,EAAyCvC,GAAzC;AACA;AACD;;AAED,UAAI,CAAChG,IAAI,CAAC6D,MAAL,CAAY0F,gBAAZ,CAA6BvD,GAAG,CAACoD,IAAjC,CAAL,EAA6C;AAC3CpJ,QAAAA,IAAI,CAAC+F,IAAL,CAAU;AACRC,UAAAA,GAAG,EAAE,OADG;AACMlD,UAAAA,EAAE,EAAEkD,GAAG,CAAClD,EADd;AAER0G,UAAAA,KAAK,EAAE,IAAIpF,MAAM,CAACV,KAAX,CAAiB,GAAjB,EAAuB,iBAAgBsC,GAAG,CAACoD,IAAK,aAAhD;AAFC,SAAV;AAGA;AACD;;AAED,UAAIhJ,CAAC,CAACwB,GAAF,CAAM5B,IAAI,CAACwE,UAAX,EAAuBwB,GAAG,CAAClD,EAA3B,CAAJ,EACE;AACA;AACA;AACA,eAtBgB,CAwBlB;AACA;AACA;AACA;AACA;;AACA,UAAI+D,OAAO,CAAC,kBAAD,CAAX,EAAiC;AAC/B,YAAI4C,cAAc,GAAG5C,OAAO,CAAC,kBAAD,CAAP,CAA4B4C,cAAjD;AACA,YAAIC,gBAAgB,GAAG;AACrBhF,UAAAA,MAAM,EAAE1E,IAAI,CAAC0E,MADQ;AAErBiB,UAAAA,aAAa,EAAE3F,IAAI,CAACoF,gBAAL,CAAsBO,aAFhB;AAGrBgE,UAAAA,IAAI,EAAE,cAHe;AAIrBP,UAAAA,IAAI,EAAEpD,GAAG,CAACoD,IAJW;AAKrBQ,UAAAA,YAAY,EAAE5J,IAAI,CAAC8C;AALE,SAAvB;;AAQA2G,QAAAA,cAAc,CAACI,UAAf,CAA0BH,gBAA1B;;AACA,YAAII,eAAe,GAAGL,cAAc,CAACM,MAAf,CAAsBL,gBAAtB,CAAtB;;AACA,YAAI,CAACI,eAAe,CAACE,OAArB,EAA8B;AAC5BhK,UAAAA,IAAI,CAAC+F,IAAL,CAAU;AACRC,YAAAA,GAAG,EAAE,OADG;AACMlD,YAAAA,EAAE,EAAEkD,GAAG,CAAClD,EADd;AAER0G,YAAAA,KAAK,EAAE,IAAIpF,MAAM,CAACV,KAAX,CACL,mBADK,EAEL+F,cAAc,CAACQ,eAAf,CAA+BH,eAA/B,CAFK,EAGL;AAACI,cAAAA,WAAW,EAAEJ,eAAe,CAACI;AAA9B,aAHK;AAFC,WAAV;AAOA;AACD;AACF;;AAED,UAAIrC,OAAO,GAAG7H,IAAI,CAAC6D,MAAL,CAAY0F,gBAAZ,CAA6BvD,GAAG,CAACoD,IAAjC,CAAd;;AAEApJ,MAAAA,IAAI,CAAC8H,kBAAL,CAAwBD,OAAxB,EAAiC7B,GAAG,CAAClD,EAArC,EAAyCkD,GAAG,CAACqD,MAA7C,EAAqDrD,GAAG,CAACoD,IAAzD;AAED,KA1DgB;AA4DjBe,IAAAA,KAAK,EAAE,UAAUnE,GAAV,EAAe;AACpB,UAAIhG,IAAI,GAAG,IAAX;;AAEAA,MAAAA,IAAI,CAACoK,iBAAL,CAAuBpE,GAAG,CAAClD,EAA3B;AACD,KAhEgB;AAkEjBuH,IAAAA,MAAM,EAAE,UAAUrE,GAAV,EAAe+C,OAAf,EAAwB;AAC9B,UAAI/I,IAAI,GAAG,IAAX,CAD8B,CAG9B;AACA;AACA;;AACA,UAAI,OAAQgG,GAAG,CAAClD,EAAZ,KAAoB,QAApB,IACA,OAAQkD,GAAG,CAACqE,MAAZ,KAAwB,QADxB,IAEE,YAAYrE,GAAb,IAAqB,EAAEA,GAAG,CAACqD,MAAJ,YAAsBC,KAAxB,CAFtB,IAGE,gBAAgBtD,GAAjB,IAA0B,OAAOA,GAAG,CAACsE,UAAX,KAA0B,QAHzD,EAGqE;AACnEtK,QAAAA,IAAI,CAACuI,SAAL,CAAe,6BAAf,EAA8CvC,GAA9C;AACA;AACD;;AAED,UAAIsE,UAAU,GAAGtE,GAAG,CAACsE,UAAJ,IAAkB,IAAnC,CAd8B,CAgB9B;AACA;AACA;;AACA,UAAIC,KAAK,GAAG,IAAI5K,SAAS,CAAC6K,WAAd,EAAZ;AACAD,MAAAA,KAAK,CAACE,cAAN,CAAqB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACAF,QAAAA,KAAK,CAACG,MAAN;AACA1K,QAAAA,IAAI,CAAC+F,IAAL,CAAU;AACRC,UAAAA,GAAG,EAAE,SADG;AACQ2E,UAAAA,OAAO,EAAE,CAAC3E,GAAG,CAAClD,EAAL;AADjB,SAAV;AAED,OATD,EApB8B,CA+B9B;;AACA,UAAI+E,OAAO,GAAG7H,IAAI,CAAC6D,MAAL,CAAY+G,eAAZ,CAA4B5E,GAAG,CAACqE,MAAhC,CAAd;;AACA,UAAI,CAACxC,OAAL,EAAc;AACZ7H,QAAAA,IAAI,CAAC+F,IAAL,CAAU;AACRC,UAAAA,GAAG,EAAE,QADG;AACOlD,UAAAA,EAAE,EAAEkD,GAAG,CAAClD,EADf;AAER0G,UAAAA,KAAK,EAAE,IAAIpF,MAAM,CAACV,KAAX,CAAiB,GAAjB,EAAuB,WAAUsC,GAAG,CAACqE,MAAO,aAA5C;AAFC,SAAV;AAGAE,QAAAA,KAAK,CAACM,GAAN;AACA;AACD;;AAED,UAAIC,SAAS,GAAG,UAASpG,MAAT,EAAiB;AAC/B1E,QAAAA,IAAI,CAAC+K,UAAL,CAAgBrG,MAAhB;AACD,OAFD;;AAIA,UAAIsG,UAAU,GAAG,IAAIzE,SAAS,CAAC0E,gBAAd,CAA+B;AAC9CC,QAAAA,YAAY,EAAE,KADgC;AAE9CxG,QAAAA,MAAM,EAAE1E,IAAI,CAAC0E,MAFiC;AAG9CoG,QAAAA,SAAS,EAAEA,SAHmC;AAI9C/B,QAAAA,OAAO,EAAEA,OAJqC;AAK9CoC,QAAAA,UAAU,EAAEnL,IAAI,CAACoF,gBAL6B;AAM9CkF,QAAAA,UAAU,EAAEA;AANkC,OAA/B,CAAjB;AASA,YAAMc,OAAO,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/C;AACA;AACA;AACA;AACA,YAAI1E,OAAO,CAAC,kBAAD,CAAX,EAAiC;AAC/B,cAAI4C,cAAc,GAAG5C,OAAO,CAAC,kBAAD,CAAP,CAA4B4C,cAAjD;AACA,cAAIC,gBAAgB,GAAG;AACrBhF,YAAAA,MAAM,EAAE1E,IAAI,CAAC0E,MADQ;AAErBiB,YAAAA,aAAa,EAAE3F,IAAI,CAACoF,gBAAL,CAAsBO,aAFhB;AAGrBgE,YAAAA,IAAI,EAAE,QAHe;AAIrBP,YAAAA,IAAI,EAAEpD,GAAG,CAACqE,MAJW;AAKrBT,YAAAA,YAAY,EAAE5J,IAAI,CAAC8C;AALE,WAAvB;;AAOA2G,UAAAA,cAAc,CAACI,UAAf,CAA0BH,gBAA1B;;AACA,cAAII,eAAe,GAAGL,cAAc,CAACM,MAAf,CAAsBL,gBAAtB,CAAtB;;AACA,cAAI,CAACI,eAAe,CAACE,OAArB,EAA8B;AAC5BuB,YAAAA,MAAM,CAAC,IAAInH,MAAM,CAACV,KAAX,CACL,mBADK,EAEL+F,cAAc,CAACQ,eAAf,CAA+BH,eAA/B,CAFK,EAGL;AAACI,cAAAA,WAAW,EAAEJ,eAAe,CAACI;AAA9B,aAHK,CAAD,CAAN;AAKA;AACD;AACF;;AAEDoB,QAAAA,OAAO,CAAC3L,SAAS,CAAC6L,kBAAV,CAA6BC,SAA7B,CACNlB,KADM,EAEN,MAAMmB,GAAG,CAACC,wBAAJ,CAA6BF,SAA7B,CACJT,UADI,EAEJ,MAAMY,wBAAwB,CAC5B/D,OAD4B,EACnBmD,UADmB,EACPhF,GAAG,CAACqD,MADG,EAE5B,cAAcrD,GAAG,CAACqE,MAAlB,GAA2B,GAFC,CAF1B,CAFA,CAAD,CAAP;AAUD,OApCe,CAAhB;;AAsCA,eAASwB,MAAT,GAAkB;AAChBtB,QAAAA,KAAK,CAACM,GAAN;AACA9B,QAAAA,OAAO;AACR;;AAED,YAAM+C,OAAO,GAAG;AACd9F,QAAAA,GAAG,EAAE,QADS;AAEdlD,QAAAA,EAAE,EAAEkD,GAAG,CAAClD;AAFM,OAAhB;AAKAsI,MAAAA,OAAO,CAACW,IAAR,CAAcC,MAAD,IAAY;AACvBH,QAAAA,MAAM;;AACN,YAAIG,MAAM,KAAK/K,SAAf,EAA0B;AACxB6K,UAAAA,OAAO,CAACE,MAAR,GAAiBA,MAAjB;AACD;;AACDhM,QAAAA,IAAI,CAAC+F,IAAL,CAAU+F,OAAV;AACD,OAND,EAMIG,SAAD,IAAe;AAChBJ,QAAAA,MAAM;AACNC,QAAAA,OAAO,CAACtC,KAAR,GAAgB0C,qBAAqB,CACnCD,SADmC,EAElC,0BAAyBjG,GAAG,CAACqE,MAAO,GAFF,CAArC;AAIArK,QAAAA,IAAI,CAAC+F,IAAL,CAAU+F,OAAV;AACD,OAbD;AAcD;AAtLgB,GApPO;AA6a1BK,EAAAA,QAAQ,EAAE,UAAUC,CAAV,EAAa;AACrB,QAAIpM,IAAI,GAAG,IAAX;;AACAI,IAAAA,CAAC,CAACK,IAAF,CAAOT,IAAI,CAACwE,UAAZ,EAAwB4H,CAAxB;;AACAhM,IAAAA,CAAC,CAACK,IAAF,CAAOT,IAAI,CAACyE,cAAZ,EAA4B2H,CAA5B;AACD,GAjbyB;AAmb1BC,EAAAA,oBAAoB,EAAE,UAAUC,SAAV,EAAqB;AACzC,QAAItM,IAAI,GAAG,IAAX;AACAwC,IAAAA,YAAY,CAACC,WAAb,CAAyB6J,SAAzB,EAAoCtM,IAAI,CAAC2E,eAAzC,EAA0D;AACxDjC,MAAAA,IAAI,EAAE,UAAUT,cAAV,EAA0BsK,SAA1B,EAAqCC,UAArC,EAAiD;AACrDA,QAAAA,UAAU,CAAClK,IAAX,CAAgBiK,SAAhB;AACD,OAHuD;AAIxD1J,MAAAA,SAAS,EAAE,UAAUZ,cAAV,EAA0BuK,UAA1B,EAAsC;AAC/CpM,QAAAA,CAAC,CAACK,IAAF,CAAO+L,UAAU,CAACrK,SAAlB,EAA6B,UAAUqB,OAAV,EAAmBV,EAAnB,EAAuB;AAClD9C,UAAAA,IAAI,CAACoH,SAAL,CAAenF,cAAf,EAA+Ba,EAA/B,EAAmCU,OAAO,CAACjD,SAAR,EAAnC;AACD,SAFD;AAGD,OARuD;AASxD0C,MAAAA,QAAQ,EAAE,UAAUhB,cAAV,EAA0BsK,SAA1B,EAAqC;AAC7CnM,QAAAA,CAAC,CAACK,IAAF,CAAO8L,SAAS,CAACpK,SAAjB,EAA4B,UAAUsK,GAAV,EAAe3J,EAAf,EAAmB;AAC7C9C,UAAAA,IAAI,CAACuH,WAAL,CAAiBtF,cAAjB,EAAiCa,EAAjC;AACD,SAFD;AAGD;AAbuD,KAA1D;AAeD,GApcyB;AAsc1B;AACA;AACAiI,EAAAA,UAAU,EAAE,UAASrG,MAAT,EAAiB;AAC3B,QAAI1E,IAAI,GAAG,IAAX;AAEA,QAAI0E,MAAM,KAAK,IAAX,IAAmB,OAAOA,MAAP,KAAkB,QAAzC,EACE,MAAM,IAAIhB,KAAJ,CAAU,qDACA,OAAOgB,MADjB,CAAN,CAJyB,CAO3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA1E,IAAAA,IAAI,CAAC6E,0BAAL,GAAkC,IAAlC,CAf2B,CAiB3B;AACA;;AACA7E,IAAAA,IAAI,CAACmM,QAAL,CAAc,UAAUhD,GAAV,EAAe;AAC3BA,MAAAA,GAAG,CAACuD,WAAJ;AACD,KAFD,EAnB2B,CAuB3B;AACA;AACA;;;AACA1M,IAAAA,IAAI,CAAC4E,UAAL,GAAkB,KAAlB;AACA,QAAI0H,SAAS,GAAGtM,IAAI,CAAC2E,eAArB;AACA3E,IAAAA,IAAI,CAAC2E,eAAL,GAAuB,EAAvB;AACA3E,IAAAA,IAAI,CAAC0E,MAAL,GAAcA,MAAd,CA7B2B,CA+B3B;AACA;AACA;AACA;;AACAgH,IAAAA,GAAG,CAACC,wBAAJ,CAA6BF,SAA7B,CAAuCxK,SAAvC,EAAkD,YAAY;AAC5D;AACA,UAAI0L,YAAY,GAAG3M,IAAI,CAACwE,UAAxB;AACAxE,MAAAA,IAAI,CAACwE,UAAL,GAAkB,EAAlB;AACAxE,MAAAA,IAAI,CAACyE,cAAL,GAAsB,EAAtB;;AAEArE,MAAAA,CAAC,CAACK,IAAF,CAAOkM,YAAP,EAAqB,UAAUxD,GAAV,EAAehC,cAAf,EAA+B;AAClDnH,QAAAA,IAAI,CAACwE,UAAL,CAAgB2C,cAAhB,IAAkCgC,GAAG,CAACyD,SAAJ,EAAlC,CADkD,CAElD;AACA;;AACA5M,QAAAA,IAAI,CAACwE,UAAL,CAAgB2C,cAAhB,EAAgC0F,WAAhC;AACD,OALD,EAN4D,CAa5D;AACA;AACA;;;AACA7M,MAAAA,IAAI,CAAC6E,0BAAL,GAAkC,KAAlC;AACA7E,MAAAA,IAAI,CAACkG,kBAAL;AACD,KAlBD,EAnC2B,CAuD3B;AACA;AACA;;;AACA9B,IAAAA,MAAM,CAAC0I,gBAAP,CAAwB,YAAY;AAClC9M,MAAAA,IAAI,CAAC4E,UAAL,GAAkB,IAAlB;;AACA5E,MAAAA,IAAI,CAACqM,oBAAL,CAA0BC,SAA1B;;AACA,UAAI,CAAClM,CAAC,CAACkB,OAAF,CAAUtB,IAAI,CAAC8E,aAAf,CAAL,EAAoC;AAClC9E,QAAAA,IAAI,CAACgH,SAAL,CAAehH,IAAI,CAAC8E,aAApB;AACA9E,QAAAA,IAAI,CAAC8E,aAAL,GAAqB,EAArB;AACD;AACF,KAPD;AAQD,GA1gByB;AA4gB1BgD,EAAAA,kBAAkB,EAAE,UAAUD,OAAV,EAAmBkF,KAAnB,EAA0B1D,MAA1B,EAAkCD,IAAlC,EAAwC;AAC1D,QAAIpJ,IAAI,GAAG,IAAX;AAEA,QAAImJ,GAAG,GAAG,IAAI6D,YAAJ,CACRhN,IADQ,EACF6H,OADE,EACOkF,KADP,EACc1D,MADd,EACsBD,IADtB,CAAV;AAEA,QAAI2D,KAAJ,EACE/M,IAAI,CAACwE,UAAL,CAAgBuI,KAAhB,IAAyB5D,GAAzB,CADF,KAGEnJ,IAAI,CAACyE,cAAL,CAAoB1C,IAApB,CAAyBoH,GAAzB;;AAEFA,IAAAA,GAAG,CAAC0D,WAAJ;AACD,GAvhByB;AAyhB1B;AACAzC,EAAAA,iBAAiB,EAAE,UAAU2C,KAAV,EAAiBvD,KAAjB,EAAwB;AACzC,QAAIxJ,IAAI,GAAG,IAAX;AAEA,QAAIiN,OAAO,GAAG,IAAd;;AAEA,QAAIF,KAAK,IAAI/M,IAAI,CAACwE,UAAL,CAAgBuI,KAAhB,CAAb,EAAqC;AACnCE,MAAAA,OAAO,GAAGjN,IAAI,CAACwE,UAAL,CAAgBuI,KAAhB,EAAuBG,KAAjC;;AACAlN,MAAAA,IAAI,CAACwE,UAAL,CAAgBuI,KAAhB,EAAuBI,mBAAvB;;AACAnN,MAAAA,IAAI,CAACwE,UAAL,CAAgBuI,KAAhB,EAAuBL,WAAvB;;AACA,aAAO1M,IAAI,CAACwE,UAAL,CAAgBuI,KAAhB,CAAP;AACD;;AAED,QAAIK,QAAQ,GAAG;AAACpH,MAAAA,GAAG,EAAE,OAAN;AAAelD,MAAAA,EAAE,EAAEiK;AAAnB,KAAf;;AAEA,QAAIvD,KAAJ,EAAW;AACT4D,MAAAA,QAAQ,CAAC5D,KAAT,GAAiB0C,qBAAqB,CACpC1C,KADoC,EAEpCyD,OAAO,GAAI,cAAcA,OAAd,GAAwB,MAAxB,GAAiCF,KAArC,GACF,iBAAiBA,KAHc,CAAtC;AAID;;AAED/M,IAAAA,IAAI,CAAC+F,IAAL,CAAUqH,QAAV;AACD,GAhjByB;AAkjB1B;AACA;AACAnF,EAAAA,2BAA2B,EAAE,YAAY;AACvC,QAAIjI,IAAI,GAAG,IAAX;;AAEAI,IAAAA,CAAC,CAACK,IAAF,CAAOT,IAAI,CAACwE,UAAZ,EAAwB,UAAU2E,GAAV,EAAerG,EAAf,EAAmB;AACzCqG,MAAAA,GAAG,CAACuD,WAAJ;AACD,KAFD;;AAGA1M,IAAAA,IAAI,CAACwE,UAAL,GAAkB,EAAlB;;AAEApE,IAAAA,CAAC,CAACK,IAAF,CAAOT,IAAI,CAACyE,cAAZ,EAA4B,UAAU0E,GAAV,EAAe;AACzCA,MAAAA,GAAG,CAACuD,WAAJ;AACD,KAFD;;AAGA1M,IAAAA,IAAI,CAACyE,cAAL,GAAsB,EAAtB;AACD,GAhkByB;AAkkB1B;AACA;AACA;AACAmB,EAAAA,cAAc,EAAE,YAAY;AAC1B,QAAI5F,IAAI,GAAG,IAAX,CAD0B,CAG1B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAIqN,kBAAkB,GAAGC,QAAQ,CAACC,OAAO,CAACC,GAAR,CAAY,sBAAZ,CAAD,CAAR,IAAiD,CAA1E;AAEA,QAAIH,kBAAkB,KAAK,CAA3B,EACE,OAAOrN,IAAI,CAAC+D,MAAL,CAAY0J,aAAnB;AAEF,QAAIC,YAAY,GAAG1N,IAAI,CAAC+D,MAAL,CAAY+B,OAAZ,CAAoB,iBAApB,CAAnB;AACA,QAAI,CAAE1F,CAAC,CAACuN,QAAF,CAAWD,YAAX,CAAN,EACE,OAAO,IAAP;AACFA,IAAAA,YAAY,GAAGA,YAAY,CAACE,IAAb,GAAoBC,KAApB,CAA0B,SAA1B,CAAf,CAlB0B,CAoB1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAIR,kBAAkB,GAAG,CAArB,IAA0BA,kBAAkB,GAAGK,YAAY,CAACvM,MAAhE,EACE,OAAO,IAAP;AAEF,WAAOuM,YAAY,CAACA,YAAY,CAACvM,MAAb,GAAsBkM,kBAAvB,CAAnB;AACD;AAtmByB,CAA5B;AAymBA;;AACA;;AACA;AAEA;AAEA;AACA;;AACA;;;;;;;;AAMA,IAAIL,YAAY,GAAG,UACf/G,OADe,EACN4B,OADM,EACGV,cADH,EACmBkC,MADnB,EAC2BD,IAD3B,EACiC;AAClD,MAAIpJ,IAAI,GAAG,IAAX;AACAA,EAAAA,IAAI,CAAC8N,QAAL,GAAgB7H,OAAhB,CAFkD,CAEzB;;AAEzB;;;;;;;;AAOAjG,EAAAA,IAAI,CAACmL,UAAL,GAAkBlF,OAAO,CAACb,gBAA1B,CAXkD,CAWN;;AAE5CpF,EAAAA,IAAI,CAAC+N,QAAL,GAAgBlG,OAAhB,CAbkD,CAelD;;AACA7H,EAAAA,IAAI,CAACgO,eAAL,GAAuB7G,cAAvB,CAhBkD,CAiBlD;;AACAnH,EAAAA,IAAI,CAACkN,KAAL,GAAa9D,IAAb;AAEApJ,EAAAA,IAAI,CAACiO,OAAL,GAAe5E,MAAM,IAAI,EAAzB,CApBkD,CAsBlD;AACA;AACA;;AACA,MAAIrJ,IAAI,CAACgO,eAAT,EAA0B;AACxBhO,IAAAA,IAAI,CAACkO,mBAAL,GAA2B,MAAMlO,IAAI,CAACgO,eAAtC;AACD,GAFD,MAEO;AACLhO,IAAAA,IAAI,CAACkO,mBAAL,GAA2B,MAAMjK,MAAM,CAACnB,EAAP,EAAjC;AACD,GA7BiD,CA+BlD;;;AACA9C,EAAAA,IAAI,CAACmO,YAAL,GAAoB,KAApB,CAhCkD,CAkClD;;AACAnO,EAAAA,IAAI,CAACoO,cAAL,GAAsB,EAAtB,CAnCkD,CAqClD;AACA;;AACApO,EAAAA,IAAI,CAACqO,UAAL,GAAkB,EAAlB,CAvCkD,CAyClD;;AACArO,EAAAA,IAAI,CAACsO,MAAL,GAAc,KAAd,CA1CkD,CA4ClD;;AAEA;;;;;;;;AAOAtO,EAAAA,IAAI,CAAC0E,MAAL,GAAcuB,OAAO,CAACvB,MAAtB,CArDkD,CAuDlD;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA1E,EAAAA,IAAI,CAACuO,SAAL,GAAiB;AACfC,IAAAA,WAAW,EAAEC,OAAO,CAACD,WADN;AAEfE,IAAAA,OAAO,EAAED,OAAO,CAACC;AAFF,GAAjB;AAKA7H,EAAAA,OAAO,CAAC,YAAD,CAAP,IAAyBA,OAAO,CAAC,YAAD,CAAP,CAAsBC,KAAtB,CAA4BC,mBAA5B,CACvB,UADuB,EACX,eADW,EACM,CADN,CAAzB;AAED,CAxED;;AA0EA3G,CAAC,CAACC,MAAF,CAAS2M,YAAY,CAAC1M,SAAtB,EAAiC;AAC/BuM,EAAAA,WAAW,EAAE,YAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AAEA,QAAI7M,IAAI,GAAG,IAAX;;AACA,QAAI;AACF,UAAI2O,GAAG,GAAGjD,GAAG,CAACkD,6BAAJ,CAAkCnD,SAAlC,CACRzL,IADQ,EAER,MAAM4L,wBAAwB,CAC5B5L,IAAI,CAAC+N,QADuB,EACb/N,IADa,EACPuB,KAAK,CAACI,KAAN,CAAY3B,IAAI,CAACiO,OAAjB,CADO,EAE5B;AACA;AACA;AACA,sBAAgBjO,IAAI,CAACkN,KAArB,GAA6B,GALD,CAFtB,CAAV;AAUD,KAXD,CAWE,OAAO2B,CAAP,EAAU;AACV7O,MAAAA,IAAI,CAACwJ,KAAL,CAAWqF,CAAX;AACA;AACD,KAvBsB,CAyBvB;;;AACA,QAAI7O,IAAI,CAAC8O,cAAL,EAAJ,EACE;;AAEF9O,IAAAA,IAAI,CAAC+O,qBAAL,CAA2BJ,GAA3B;AACD,GA/B8B;AAiC/BI,EAAAA,qBAAqB,EAAE,UAAUJ,GAAV,EAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAI3O,IAAI,GAAG,IAAX;;AACA,QAAIgP,QAAQ,GAAG,UAAUC,CAAV,EAAa;AAC1B,aAAOA,CAAC,IAAIA,CAAC,CAACC,cAAd;AACD,KAFD;;AAGA,QAAIF,QAAQ,CAACL,GAAD,CAAZ,EAAmB;AACjB,UAAI;AACFA,QAAAA,GAAG,CAACO,cAAJ,CAAmBlP,IAAnB;AACD,OAFD,CAEE,OAAO6O,CAAP,EAAU;AACV7O,QAAAA,IAAI,CAACwJ,KAAL,CAAWqF,CAAX;AACA;AACD,OANgB,CAOjB;AACA;;;AACA7O,MAAAA,IAAI,CAACmP,KAAL;AACD,KAVD,MAUO,IAAI/O,CAAC,CAACgP,OAAF,CAAUT,GAAV,CAAJ,EAAoB;AACzB;AACA,UAAI,CAAEvO,CAAC,CAACiP,GAAF,CAAMV,GAAN,EAAWK,QAAX,CAAN,EAA4B;AAC1BhP,QAAAA,IAAI,CAACwJ,KAAL,CAAW,IAAI9F,KAAJ,CAAU,mDAAV,CAAX;AACA;AACD,OALwB,CAMzB;AACA;AACA;;;AACA,UAAI4L,eAAe,GAAG,EAAtB;;AACA,WAAK,IAAIpO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyN,GAAG,CAACxN,MAAxB,EAAgC,EAAED,CAAlC,EAAqC;AACnC,YAAIe,cAAc,GAAG0M,GAAG,CAACzN,CAAD,CAAH,CAAOqO,kBAAP,EAArB;;AACA,YAAInP,CAAC,CAACwB,GAAF,CAAM0N,eAAN,EAAuBrN,cAAvB,CAAJ,EAA4C;AAC1CjC,UAAAA,IAAI,CAACwJ,KAAL,CAAW,IAAI9F,KAAJ,CACT,+DACEzB,cAFO,CAAX;AAGA;AACD;;AACDqN,QAAAA,eAAe,CAACrN,cAAD,CAAf,GAAkC,IAAlC;AACD;;AAAA;;AAED,UAAI;AACF7B,QAAAA,CAAC,CAACK,IAAF,CAAOkO,GAAP,EAAY,UAAUa,GAAV,EAAe;AACzBA,UAAAA,GAAG,CAACN,cAAJ,CAAmBlP,IAAnB;AACD,SAFD;AAGD,OAJD,CAIE,OAAO6O,CAAP,EAAU;AACV7O,QAAAA,IAAI,CAACwJ,KAAL,CAAWqF,CAAX;AACA;AACD;;AACD7O,MAAAA,IAAI,CAACmP,KAAL;AACD,KA9BM,MA8BA,IAAIR,GAAJ,EAAS;AACd;AACA;AACA;AACA3O,MAAAA,IAAI,CAACwJ,KAAL,CAAW,IAAI9F,KAAJ,CAAU,kDACE,qBADZ,CAAX;AAED;AACF,GAtG8B;AAwG/B;AACA;AACA;AACA;AACA;AACAgJ,EAAAA,WAAW,EAAE,YAAW;AACtB,QAAI1M,IAAI,GAAG,IAAX;AACA,QAAIA,IAAI,CAACmO,YAAT,EACE;AACFnO,IAAAA,IAAI,CAACmO,YAAL,GAAoB,IAApB;;AACAnO,IAAAA,IAAI,CAACyP,kBAAL;;AACA5I,IAAAA,OAAO,CAAC,YAAD,CAAP,IAAyBA,OAAO,CAAC,YAAD,CAAP,CAAsBC,KAAtB,CAA4BC,mBAA5B,CACvB,UADuB,EACX,eADW,EACM,CAAC,CADP,CAAzB;AAED,GArH8B;AAuH/B0I,EAAAA,kBAAkB,EAAE,YAAY;AAC9B,QAAIzP,IAAI,GAAG,IAAX,CAD8B,CAE9B;;AACA,QAAIoC,SAAS,GAAGpC,IAAI,CAACoO,cAArB;AACApO,IAAAA,IAAI,CAACoO,cAAL,GAAsB,EAAtB;;AACAhO,IAAAA,CAAC,CAACK,IAAF,CAAO2B,SAAP,EAAkB,UAAU8F,QAAV,EAAoB;AACpCA,MAAAA,QAAQ;AACT,KAFD;AAGD,GA/H8B;AAiI/B;AACAiF,EAAAA,mBAAmB,EAAE,YAAY;AAC/B,QAAInN,IAAI,GAAG,IAAX;;AACAoE,IAAAA,MAAM,CAAC0I,gBAAP,CAAwB,YAAY;AAClC1M,MAAAA,CAAC,CAACK,IAAF,CAAOT,IAAI,CAACqO,UAAZ,EAAwB,UAASqB,cAAT,EAAyBzN,cAAzB,EAAyC;AAC/D;AACA;AACA7B,QAAAA,CAAC,CAACK,IAAF,CAAOL,CAAC,CAACuP,IAAF,CAAOD,cAAP,CAAP,EAA+B,UAAUE,KAAV,EAAiB;AAC9C5P,UAAAA,IAAI,CAACmD,OAAL,CAAalB,cAAb,EAA6BjC,IAAI,CAACuO,SAAL,CAAeG,OAAf,CAAuBkB,KAAvB,CAA7B;AACD,SAFD;AAGD,OAND;AAOD,KARD;AASD,GA7I8B;AA+I/B;AACA;AACA;AACA;AACA;AACAhD,EAAAA,SAAS,EAAE,YAAY;AACrB,QAAI5M,IAAI,GAAG,IAAX;AACA,WAAO,IAAIgN,YAAJ,CACLhN,IAAI,CAAC8N,QADA,EACU9N,IAAI,CAAC+N,QADf,EACyB/N,IAAI,CAACgO,eAD9B,EAC+ChO,IAAI,CAACiO,OADpD,EAELjO,IAAI,CAACkN,KAFA,CAAP;AAGD,GAzJ8B;;AA2J/B;;;;;;;AAOA1D,EAAAA,KAAK,EAAE,UAAUA,KAAV,EAAiB;AACtB,QAAIxJ,IAAI,GAAG,IAAX;AACA,QAAIA,IAAI,CAAC8O,cAAL,EAAJ,EACE;;AACF9O,IAAAA,IAAI,CAAC8N,QAAL,CAAc1D,iBAAd,CAAgCpK,IAAI,CAACgO,eAArC,EAAsDxE,KAAtD;AACD,GAvK8B;AAyK/B;AACA;AACA;AACA;;AAEA;;;;;;AAMAzB,EAAAA,IAAI,EAAE,YAAY;AAChB,QAAI/H,IAAI,GAAG,IAAX;AACA,QAAIA,IAAI,CAAC8O,cAAL,EAAJ,EACE;;AACF9O,IAAAA,IAAI,CAAC8N,QAAL,CAAc1D,iBAAd,CAAgCpK,IAAI,CAACgO,eAArC;AACD,GAzL8B;;AA2L/B;;;;;;;AAOA6B,EAAAA,MAAM,EAAE,UAAU3H,QAAV,EAAoB;AAC1B,QAAIlI,IAAI,GAAG,IAAX;AACAkI,IAAAA,QAAQ,GAAG9D,MAAM,CAACqB,eAAP,CAAuByC,QAAvB,EAAiC,iBAAjC,EAAoDlI,IAApD,CAAX;AACA,QAAIA,IAAI,CAAC8O,cAAL,EAAJ,EACE5G,QAAQ,GADV,KAGElI,IAAI,CAACoO,cAAL,CAAoBrM,IAApB,CAAyBmG,QAAzB;AACH,GAzM8B;AA2M/B;AACA;AACA;AACA4G,EAAAA,cAAc,EAAE,YAAY;AAC1B,QAAI9O,IAAI,GAAG,IAAX;AACA,WAAOA,IAAI,CAACmO,YAAL,IAAqBnO,IAAI,CAAC8N,QAAL,CAAc3J,OAAd,KAA0B,IAAtD;AACD,GAjN8B;;AAmN/B;;;;;;;;;AASAnB,EAAAA,KAAK,EAAE,UAAUf,cAAV,EAA0Ba,EAA1B,EAA8BM,MAA9B,EAAsC;AAC3C,QAAIpD,IAAI,GAAG,IAAX;AACA,QAAIA,IAAI,CAAC8O,cAAL,EAAJ,EACE;AACFhM,IAAAA,EAAE,GAAG9C,IAAI,CAACuO,SAAL,CAAeC,WAAf,CAA2B1L,EAA3B,CAAL;AACAsB,IAAAA,MAAM,CAAC0L,OAAP,CAAe9P,IAAI,CAACqO,UAApB,EAAgCpM,cAAhC,EAAgDa,EAAhD,IAAsD,IAAtD;;AACA9C,IAAAA,IAAI,CAAC8N,QAAL,CAAc9K,KAAd,CAAoBhD,IAAI,CAACkO,mBAAzB,EAA8CjM,cAA9C,EAA8Da,EAA9D,EAAkEM,MAAlE;AACD,GAnO8B;;AAqO/B;;;;;;;;;AASAG,EAAAA,OAAO,EAAE,UAAUtB,cAAV,EAA0Ba,EAA1B,EAA8BM,MAA9B,EAAsC;AAC7C,QAAIpD,IAAI,GAAG,IAAX;AACA,QAAIA,IAAI,CAAC8O,cAAL,EAAJ,EACE;AACFhM,IAAAA,EAAE,GAAG9C,IAAI,CAACuO,SAAL,CAAeC,WAAf,CAA2B1L,EAA3B,CAAL;;AACA9C,IAAAA,IAAI,CAAC8N,QAAL,CAAcvK,OAAd,CAAsBvD,IAAI,CAACkO,mBAA3B,EAAgDjM,cAAhD,EAAgEa,EAAhE,EAAoEM,MAApE;AACD,GApP8B;;AAsP/B;;;;;;;;AAQAD,EAAAA,OAAO,EAAE,UAAUlB,cAAV,EAA0Ba,EAA1B,EAA8B;AACrC,QAAI9C,IAAI,GAAG,IAAX;AACA,QAAIA,IAAI,CAAC8O,cAAL,EAAJ,EACE;AACFhM,IAAAA,EAAE,GAAG9C,IAAI,CAACuO,SAAL,CAAeC,WAAf,CAA2B1L,EAA3B,CAAL,CAJqC,CAKrC;AACA;;AACA,WAAO9C,IAAI,CAACqO,UAAL,CAAgBpM,cAAhB,EAAgCa,EAAhC,CAAP;;AACA9C,IAAAA,IAAI,CAAC8N,QAAL,CAAc3K,OAAd,CAAsBnD,IAAI,CAACkO,mBAA3B,EAAgDjM,cAAhD,EAAgEa,EAAhE;AACD,GAvQ8B;;AAyQ/B;;;;;;AAMAqM,EAAAA,KAAK,EAAE,YAAY;AACjB,QAAInP,IAAI,GAAG,IAAX;AACA,QAAIA,IAAI,CAAC8O,cAAL,EAAJ,EACE;AACF,QAAI,CAAC9O,IAAI,CAACgO,eAAV,EACE,OALe,CAKN;;AACX,QAAI,CAAChO,IAAI,CAACsO,MAAV,EAAkB;AAChBtO,MAAAA,IAAI,CAAC8N,QAAL,CAAc9G,SAAd,CAAwB,CAAChH,IAAI,CAACgO,eAAN,CAAxB;;AACAhO,MAAAA,IAAI,CAACsO,MAAL,GAAc,IAAd;AACD;AACF;AAzR8B,CAAjC;AA4RA;;AACA;;AACA;;;AAEAyB,MAAM,GAAG,UAAU/L,OAAV,EAAmB;AAC1B,MAAIhE,IAAI,GAAG,IAAX,CAD0B,CAG1B;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,EAAAA,IAAI,CAACgE,OAAL,GAAe5D,CAAC,CAAC4P,QAAF,CAAWhM,OAAO,IAAI,EAAtB,EAA0B;AACvCoC,IAAAA,iBAAiB,EAAE,KADoB;AAEvCK,IAAAA,gBAAgB,EAAE,KAFqB;AAGvC;AACAtB,IAAAA,cAAc,EAAE;AAJuB,GAA1B,CAAf,CAV0B,CAiB1B;AACA;AACA;AACA;;AACAnF,EAAAA,IAAI,CAACiQ,gBAAL,GAAwB,IAAIC,IAAJ,CAAS;AAC/BC,IAAAA,oBAAoB,EAAE;AADS,GAAT,CAAxB,CArB0B,CAyB1B;;AACAnQ,EAAAA,IAAI,CAACgJ,aAAL,GAAqB,IAAIkH,IAAJ,CAAS;AAC5BC,IAAAA,oBAAoB,EAAE;AADM,GAAT,CAArB;AAIAnQ,EAAAA,IAAI,CAACuJ,gBAAL,GAAwB,EAAxB;AACAvJ,EAAAA,IAAI,CAAC4H,0BAAL,GAAkC,EAAlC;AAEA5H,EAAAA,IAAI,CAAC4K,eAAL,GAAuB,EAAvB;AAEA5K,EAAAA,IAAI,CAACoQ,QAAL,GAAgB,EAAhB,CAnC0B,CAmCN;;AAEpBpQ,EAAAA,IAAI,CAACqQ,aAAL,GAAqB,IAAIC,YAAJ,EAArB;AAEAtQ,EAAAA,IAAI,CAACqQ,aAAL,CAAmBE,QAAnB,CAA4B,UAAUxM,MAAV,EAAkB;AAC5C;AACAA,IAAAA,MAAM,CAACiE,cAAP,GAAwB,IAAxB;;AAEA,QAAIO,SAAS,GAAG,UAAUC,MAAV,EAAkBC,gBAAlB,EAAoC;AAClD,UAAIzC,GAAG,GAAG;AAACA,QAAAA,GAAG,EAAE,OAAN;AAAewC,QAAAA,MAAM,EAAEA;AAAvB,OAAV;AACA,UAAIC,gBAAJ,EACEzC,GAAG,CAACyC,gBAAJ,GAAuBA,gBAAvB;AACF1E,MAAAA,MAAM,CAACgC,IAAP,CAAYQ,SAAS,CAAC+B,YAAV,CAAuBtC,GAAvB,CAAZ;AACD,KALD;;AAOAjC,IAAAA,MAAM,CAACyM,EAAP,CAAU,MAAV,EAAkB,UAAUC,OAAV,EAAmB;AACnC,UAAIrM,MAAM,CAACsM,iBAAX,EAA8B;AAC5BtM,QAAAA,MAAM,CAACiE,MAAP,CAAc,cAAd,EAA8BoI,OAA9B;AACD;;AACD,UAAI;AACF,YAAI;AACF,cAAIzK,GAAG,GAAGO,SAAS,CAACoK,QAAV,CAAmBF,OAAnB,CAAV;AACD,SAFD,CAEE,OAAO9M,GAAP,EAAY;AACZ4E,UAAAA,SAAS,CAAC,aAAD,CAAT;AACA;AACD;;AACD,YAAIvC,GAAG,KAAK,IAAR,IAAgB,CAACA,GAAG,CAACA,GAAzB,EAA8B;AAC5BuC,UAAAA,SAAS,CAAC,aAAD,EAAgBvC,GAAhB,CAAT;AACA;AACD;;AAED,YAAIA,GAAG,CAACA,GAAJ,KAAY,SAAhB,EAA2B;AACzB,cAAIjC,MAAM,CAACiE,cAAX,EAA2B;AACzBO,YAAAA,SAAS,CAAC,mBAAD,EAAsBvC,GAAtB,CAAT;AACA;AACD;;AACDpG,UAAAA,KAAK,CAAC,YAAY;AAChBI,YAAAA,IAAI,CAAC4Q,cAAL,CAAoB7M,MAApB,EAA4BiC,GAA5B;AACD,WAFI,CAAL,CAEGG,GAFH;AAGA;AACD;;AAED,YAAI,CAACpC,MAAM,CAACiE,cAAZ,EAA4B;AAC1BO,UAAAA,SAAS,CAAC,oBAAD,EAAuBvC,GAAvB,CAAT;AACA;AACD;;AACDjC,QAAAA,MAAM,CAACiE,cAAP,CAAsBU,cAAtB,CAAqC1C,GAArC;AACD,OA5BD,CA4BE,OAAO6I,CAAP,EAAU;AACV;AACAzK,QAAAA,MAAM,CAACiE,MAAP,CAAc,6CAAd,EAA6DrC,GAA7D,EAAkE6I,CAAlE;AACD;AACF,KApCD;AAsCA9K,IAAAA,MAAM,CAACyM,EAAP,CAAU,OAAV,EAAmB,YAAY;AAC7B,UAAIzM,MAAM,CAACiE,cAAX,EAA2B;AACzBpI,QAAAA,KAAK,CAAC,YAAY;AAChBmE,UAAAA,MAAM,CAACiE,cAAP,CAAsB3C,KAAtB;AACD,SAFI,CAAL,CAEGc,GAFH;AAGD;AACF,KAND;AAOD,GAxDD;AAyDD,CAhGD;;AAkGA/F,CAAC,CAACC,MAAF,CAAS0P,MAAM,CAACzP,SAAhB,EAA2B;AAEzB;;;;;;;AAOAuQ,EAAAA,YAAY,EAAE,UAAUtL,EAAV,EAAc;AAC1B,QAAIvF,IAAI,GAAG,IAAX;AACA,WAAOA,IAAI,CAACiQ,gBAAL,CAAsBM,QAAtB,CAA+BhL,EAA/B,CAAP;AACD,GAZwB;;AAczB;;;;;;;AAOAuL,EAAAA,SAAS,EAAE,UAAUvL,EAAV,EAAc;AACvB,QAAIvF,IAAI,GAAG,IAAX;AACA,WAAOA,IAAI,CAACgJ,aAAL,CAAmBuH,QAAnB,CAA4BhL,EAA5B,CAAP;AACD,GAxBwB;AA0BzBqL,EAAAA,cAAc,EAAE,UAAU7M,MAAV,EAAkBiC,GAAlB,EAAuB;AACrC,QAAIhG,IAAI,GAAG,IAAX,CADqC,CAGrC;AACA;;AACA,QAAI,EAAE,OAAQgG,GAAG,CAAClC,OAAZ,KAAyB,QAAzB,IACA1D,CAAC,CAACgP,OAAF,CAAUpJ,GAAG,CAAC+K,OAAd,CADA,IAEA3Q,CAAC,CAACiP,GAAF,CAAMrJ,GAAG,CAAC+K,OAAV,EAAmB3Q,CAAC,CAACuN,QAArB,CAFA,IAGAvN,CAAC,CAAC4Q,QAAF,CAAWhL,GAAG,CAAC+K,OAAf,EAAwB/K,GAAG,CAAClC,OAA5B,CAHF,CAAJ,EAG6C;AAC3CC,MAAAA,MAAM,CAACgC,IAAP,CAAYQ,SAAS,CAAC+B,YAAV,CAAuB;AAACtC,QAAAA,GAAG,EAAE,QAAN;AACTlC,QAAAA,OAAO,EAAEyC,SAAS,CAAC0K,sBAAV,CAAiC,CAAjC;AADA,OAAvB,CAAZ;AAEAlN,MAAAA,MAAM,CAACsB,KAAP;AACA;AACD,KAboC,CAerC;AACA;;;AACA,QAAIvB,OAAO,GAAGoN,gBAAgB,CAAClL,GAAG,CAAC+K,OAAL,EAAcxK,SAAS,CAAC0K,sBAAxB,CAA9B;;AAEA,QAAIjL,GAAG,CAAClC,OAAJ,KAAgBA,OAApB,EAA6B;AAC3B;AACA;AACA;AACAC,MAAAA,MAAM,CAACgC,IAAP,CAAYQ,SAAS,CAAC+B,YAAV,CAAuB;AAACtC,QAAAA,GAAG,EAAE,QAAN;AAAgBlC,QAAAA,OAAO,EAAEA;AAAzB,OAAvB,CAAZ;AACAC,MAAAA,MAAM,CAACsB,KAAP;AACA;AACD,KA1BoC,CA4BrC;AACA;AACA;;;AACAtB,IAAAA,MAAM,CAACiE,cAAP,GAAwB,IAAIpE,OAAJ,CAAY5D,IAAZ,EAAkB8D,OAAlB,EAA2BC,MAA3B,EAAmC/D,IAAI,CAACgE,OAAxC,CAAxB;AACAhE,IAAAA,IAAI,CAACoQ,QAAL,CAAcrM,MAAM,CAACiE,cAAP,CAAsBlF,EAApC,IAA0CiB,MAAM,CAACiE,cAAjD;AACAhI,IAAAA,IAAI,CAACiQ,gBAAL,CAAsBxP,IAAtB,CAA2B,UAAUyH,QAAV,EAAoB;AAC7C,UAAInE,MAAM,CAACiE,cAAX,EACEE,QAAQ,CAACnE,MAAM,CAACiE,cAAP,CAAsB5C,gBAAvB,CAAR;AACF,aAAO,IAAP;AACD,KAJD;AAKD,GAhEwB;;AAiEzB;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;AAQA+L,EAAAA,OAAO,EAAE,UAAU/H,IAAV,EAAgBvB,OAAhB,EAAyB7D,OAAzB,EAAkC;AACzC,QAAIhE,IAAI,GAAG,IAAX;;AAEA,QAAI,CAAEI,CAAC,CAACgR,QAAF,CAAWhI,IAAX,CAAN,EAAwB;AACtBpF,MAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,UAAIoF,IAAI,IAAIA,IAAI,IAAIpJ,IAAI,CAACuJ,gBAAzB,EAA2C;AACzCnF,QAAAA,MAAM,CAACiE,MAAP,CAAc,uCAAuCe,IAAvC,GAA8C,GAA5D;;AACA;AACD;;AAED,UAAIvC,OAAO,CAACwK,WAAR,IAAuB,CAACrN,OAAO,CAACsN,OAApC,EAA6C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAI,CAACtR,IAAI,CAACuR,wBAAV,EAAoC;AAClCvR,UAAAA,IAAI,CAACuR,wBAAL,GAAgC,IAAhC;;AACAnN,UAAAA,MAAM,CAACiE,MAAP,CACN,0EACA,yEADA,GAEA,uEAFA,GAGA,yCAHA,GAIA,MAJA,GAKA,gEALA,GAMA,MANA,GAOA,oCAPA,GAQA,MARA,GASA,8EATA,GAUA,wDAXM;AAYD;AACF;;AAED,UAAIe,IAAJ,EACEpJ,IAAI,CAACuJ,gBAAL,CAAsBH,IAAtB,IAA8BvB,OAA9B,CADF,KAEK;AACH7H,QAAAA,IAAI,CAAC4H,0BAAL,CAAgC7F,IAAhC,CAAqC8F,OAArC,EADG,CAEH;AACA;AACA;;AACAzH,QAAAA,CAAC,CAACK,IAAF,CAAOT,IAAI,CAACoQ,QAAZ,EAAsB,UAAUnK,OAAV,EAAmB;AACvC,cAAI,CAACA,OAAO,CAACpB,0BAAb,EAAyC;AACvCjF,YAAAA,KAAK,CAAC,YAAW;AACfqG,cAAAA,OAAO,CAAC6B,kBAAR,CAA2BD,OAA3B;AACD,aAFI,CAAL,CAEG1B,GAFH;AAGD;AACF,SAND;AAOD;AACF,KAhDD,MAiDI;AACF/F,MAAAA,CAAC,CAACK,IAAF,CAAO2I,IAAP,EAAa,UAASxI,KAAT,EAAgBD,GAAhB,EAAqB;AAChCX,QAAAA,IAAI,CAACmR,OAAL,CAAaxQ,GAAb,EAAkBC,KAAlB,EAAyB,EAAzB;AACD,OAFD;AAGD;AACF,GAzJwB;AA2JzBuH,EAAAA,cAAc,EAAE,UAAUlC,OAAV,EAAmB;AACjC,QAAIjG,IAAI,GAAG,IAAX;;AACA,QAAIA,IAAI,CAACoQ,QAAL,CAAcnK,OAAO,CAACnD,EAAtB,CAAJ,EAA+B;AAC7B,aAAO9C,IAAI,CAACoQ,QAAL,CAAcnK,OAAO,CAACnD,EAAtB,CAAP;AACD;AACF,GAhKwB;;AAkKzB;;;;;;;AAOA6H,EAAAA,OAAO,EAAE,UAAUA,OAAV,EAAmB;AAC1B,QAAI3K,IAAI,GAAG,IAAX;;AACAI,IAAAA,CAAC,CAACK,IAAF,CAAOkK,OAAP,EAAgB,UAAU6G,IAAV,EAAgBpI,IAAhB,EAAsB;AACpC,UAAI,OAAOoI,IAAP,KAAgB,UAApB,EACE,MAAM,IAAI9N,KAAJ,CAAU,aAAa0F,IAAb,GAAoB,sBAA9B,CAAN;AACF,UAAIpJ,IAAI,CAAC4K,eAAL,CAAqBxB,IAArB,CAAJ,EACE,MAAM,IAAI1F,KAAJ,CAAU,qBAAqB0F,IAArB,GAA4B,sBAAtC,CAAN;AACFpJ,MAAAA,IAAI,CAAC4K,eAAL,CAAqBxB,IAArB,IAA6BoI,IAA7B;AACD,KAND;AAOD,GAlLwB;AAoLzBtI,EAAAA,IAAI,EAAE,UAAUE,IAAV,EAAgB,GAAGqI,IAAnB,EAAyB;AAC7B,QAAIA,IAAI,CAACtQ,MAAL,IAAe,OAAOsQ,IAAI,CAACA,IAAI,CAACtQ,MAAL,GAAc,CAAf,CAAX,KAAiC,UAApD,EAAgE;AAC9D;AACA;AACA,UAAI+G,QAAQ,GAAGuJ,IAAI,CAACC,GAAL,EAAf;AACD;;AAED,WAAO,KAAKC,KAAL,CAAWvI,IAAX,EAAiBqI,IAAjB,EAAuBvJ,QAAvB,CAAP;AACD,GA5LwB;AA8LzB;AACA0J,EAAAA,SAAS,EAAE,UAAUxI,IAAV,EAAgB,GAAGqI,IAAnB,EAAyB;AAClC,WAAO,KAAKI,UAAL,CAAgBzI,IAAhB,EAAsBqI,IAAtB,CAAP;AACD,GAjMwB;AAmMzBE,EAAAA,KAAK,EAAE,UAAUvI,IAAV,EAAgBqI,IAAhB,EAAsBzN,OAAtB,EAA+BkE,QAA/B,EAAyC;AAC9C;AACA;AACA,QAAI,CAAEA,QAAF,IAAc,OAAOlE,OAAP,KAAmB,UAArC,EAAiD;AAC/CkE,MAAAA,QAAQ,GAAGlE,OAAX;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD,KAHD,MAGO;AACLA,MAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACD;;AAED,UAAMoH,OAAO,GAAG,KAAKyG,UAAL,CAAgBzI,IAAhB,EAAsBqI,IAAtB,EAA4BzN,OAA5B,CAAhB,CAV8C,CAY9C;AACA;AACA;AACA;AACA;;AACA,QAAIkE,QAAJ,EAAc;AACZkD,MAAAA,OAAO,CAACW,IAAR,CACEC,MAAM,IAAI9D,QAAQ,CAACjH,SAAD,EAAY+K,MAAZ,CADpB,EAEEC,SAAS,IAAI/D,QAAQ,CAAC+D,SAAD,CAFvB;AAID,KALD,MAKO;AACL,aAAOb,OAAO,CAAC0G,KAAR,EAAP;AACD;AACF,GA5NwB;AA8NzB;AACAD,EAAAA,UAAU,EAAE,UAAUzI,IAAV,EAAgBqI,IAAhB,EAAsBzN,OAAtB,EAA+B;AACzC;AACA,QAAI6D,OAAO,GAAG,KAAK+C,eAAL,CAAqBxB,IAArB,CAAd;;AACA,QAAI,CAAEvB,OAAN,EAAe;AACb,aAAOwD,OAAO,CAACE,MAAR,CACL,IAAInH,MAAM,CAACV,KAAX,CAAiB,GAAjB,EAAuB,WAAU0F,IAAK,aAAtC,CADK,CAAP;AAGD,KAPwC,CASzC;AACA;AACA;;;AACA,QAAI1E,MAAM,GAAG,IAAb;;AACA,QAAIoG,SAAS,GAAG,YAAW;AACzB,YAAM,IAAIpH,KAAJ,CAAU,wDAAV,CAAN;AACD,KAFD;;AAGA,QAAIyH,UAAU,GAAG,IAAjB;;AACA,QAAI4G,uBAAuB,GAAGrG,GAAG,CAACC,wBAAJ,CAA6BqG,GAA7B,EAA9B;;AACA,QAAIC,4BAA4B,GAAGvG,GAAG,CAACkD,6BAAJ,CAAkCoD,GAAlC,EAAnC;;AACA,QAAI1H,UAAU,GAAG,IAAjB;;AACA,QAAIyH,uBAAJ,EAA6B;AAC3BrN,MAAAA,MAAM,GAAGqN,uBAAuB,CAACrN,MAAjC;;AACAoG,MAAAA,SAAS,GAAG,UAASpG,MAAT,EAAiB;AAC3BqN,QAAAA,uBAAuB,CAACjH,SAAxB,CAAkCpG,MAAlC;AACD,OAFD;;AAGAyG,MAAAA,UAAU,GAAG4G,uBAAuB,CAAC5G,UAArC;AACAb,MAAAA,UAAU,GAAG/D,SAAS,CAAC2L,WAAV,CAAsBH,uBAAtB,EAA+C3I,IAA/C,CAAb;AACD,KAPD,MAOO,IAAI6I,4BAAJ,EAAkC;AACvCvN,MAAAA,MAAM,GAAGuN,4BAA4B,CAACvN,MAAtC;;AACAoG,MAAAA,SAAS,GAAG,UAASpG,MAAT,EAAiB;AAC3BuN,QAAAA,4BAA4B,CAACnE,QAA7B,CAAsC/C,UAAtC,CAAiDrG,MAAjD;AACD,OAFD;;AAGAyG,MAAAA,UAAU,GAAG8G,4BAA4B,CAAC9G,UAA1C;AACD;;AAED,QAAIH,UAAU,GAAG,IAAIzE,SAAS,CAAC0E,gBAAd,CAA+B;AAC9CC,MAAAA,YAAY,EAAE,KADgC;AAE9CxG,MAAAA,MAF8C;AAG9CoG,MAAAA,SAH8C;AAI9CK,MAAAA,UAJ8C;AAK9Cb,MAAAA;AAL8C,KAA/B,CAAjB;AAQA,WAAO,IAAIe,OAAJ,CAAYC,OAAO,IAAIA,OAAO,CACnCI,GAAG,CAACC,wBAAJ,CAA6BF,SAA7B,CACET,UADF,EAEE,MAAMY,wBAAwB,CAC5B/D,OAD4B,EACnBmD,UADmB,EACPzJ,KAAK,CAACI,KAAN,CAAY8P,IAAZ,CADO,EAE5B,uBAAuBrI,IAAvB,GAA8B,GAFF,CAFhC,CADmC,CAA9B,EAQJ2C,IARI,CAQCxK,KAAK,CAACI,KARP,CAAP;AASD,GAnRwB;AAqRzBwQ,EAAAA,cAAc,EAAE,UAAUC,SAAV,EAAqB;AACnC,QAAIpS,IAAI,GAAG,IAAX;AACA,QAAIiG,OAAO,GAAGjG,IAAI,CAACoQ,QAAL,CAAcgC,SAAd,CAAd;AACA,QAAInM,OAAJ,EACE,OAAOA,OAAO,CAACjB,UAAf,CADF,KAGE,OAAO,IAAP;AACH;AA5RwB,CAA3B;;AA+RA,IAAIkM,gBAAgB,GAAG,UAAUmB,uBAAV,EACUC,uBADV,EACmC;AACxD,MAAIC,cAAc,GAAGnS,CAAC,CAAC0B,IAAF,CAAOuQ,uBAAP,EAAgC,UAAUvO,OAAV,EAAmB;AACtE,WAAO1D,CAAC,CAAC4Q,QAAF,CAAWsB,uBAAX,EAAoCxO,OAApC,CAAP;AACD,GAFoB,CAArB;;AAGA,MAAI,CAACyO,cAAL,EAAqB;AACnBA,IAAAA,cAAc,GAAGD,uBAAuB,CAAC,CAAD,CAAxC;AACD;;AACD,SAAOC,cAAP;AACD,CATD;;AAWA5S,SAAS,CAAC6S,iBAAV,GAA8BtB,gBAA9B,C,CAGA;AACA;;AACA,IAAIhF,qBAAqB,GAAG,UAAUD,SAAV,EAAqBwG,OAArB,EAA8B;AACxD,MAAI,CAACxG,SAAL,EAAgB,OAAOA,SAAP,CADwC,CAGxD;AACA;AACA;;AACA,MAAIA,SAAS,CAACyG,YAAd,EAA4B;AAC1B,QAAI,EAAEzG,SAAS,YAAY7H,MAAM,CAACV,KAA9B,CAAJ,EAA0C;AACxC,YAAMiP,eAAe,GAAG1G,SAAS,CAAC2G,OAAlC;AACA3G,MAAAA,SAAS,GAAG,IAAI7H,MAAM,CAACV,KAAX,CAAiBuI,SAAS,CAACzC,KAA3B,EAAkCyC,SAAS,CAACzD,MAA5C,EAAoDyD,SAAS,CAAC4G,OAA9D,CAAZ;AACA5G,MAAAA,SAAS,CAAC2G,OAAV,GAAoBD,eAApB;AACD;;AACD,WAAO1G,SAAP;AACD,GAbuD,CAexD;AACA;;;AACA,MAAI,CAACA,SAAS,CAAC6G,eAAf,EAAgC;AAC9B1O,IAAAA,MAAM,CAACiE,MAAP,CAAc,eAAeoK,OAA7B,EAAsCxG,SAAtC;;AACA,QAAIA,SAAS,CAAC8G,cAAd,EAA8B;AAC5B3O,MAAAA,MAAM,CAACiE,MAAP,CAAc,0CAAd,EAA0D4D,SAAS,CAAC8G,cAApE;;AACA3O,MAAAA,MAAM,CAACiE,MAAP;AACD;AACF,GAvBuD,CAyBxD;AACA;AACA;AACA;;;AACA,MAAI4D,SAAS,CAAC8G,cAAd,EAA8B;AAC5B,QAAI9G,SAAS,CAAC8G,cAAV,CAAyBL,YAA7B,EACE,OAAOzG,SAAS,CAAC8G,cAAjB;;AACF3O,IAAAA,MAAM,CAACiE,MAAP,CAAc,eAAeoK,OAAf,GAAyB,kCAAzB,GACA,mDADd;AAED;;AAED,SAAO,IAAIrO,MAAM,CAACV,KAAX,CAAiB,GAAjB,EAAsB,uBAAtB,CAAP;AACD,CArCD,C,CAwCA;AACA;;;AACA,IAAIkI,wBAAwB,GAAG,UAAUQ,CAAV,EAAaqG,OAAb,EAAsBhB,IAAtB,EAA4BuB,WAA5B,EAAyC;AACtEvB,EAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;;AACA,MAAI5K,OAAO,CAAC,uBAAD,CAAX,EAAsC;AACpC,WAAOoM,KAAK,CAACC,gCAAN,CACL9G,CADK,EACFqG,OADE,EACOhB,IADP,EACauB,WADb,CAAP;AAED;;AACD,SAAO5G,CAAC,CAACuF,KAAF,CAAQc,OAAR,EAAiBhB,IAAjB,CAAP;AACD,CAPD","sourcesContent":["DDPServer = {};\n\nvar Fiber = Npm.require('fibers');\n\n// This file contains classes:\n// * Session - The server's connection to a single DDP client\n// * Subscription - A single subscription for a single client\n// * Server - An entire server that may talk to > 1 client. A DDP endpoint.\n//\n// Session and Subscription are file scope. For now, until we freeze\n// the interface, Server is package scope (in the future it should be\n// exported.)\n\n// Represents a single document in a SessionCollectionView\nvar SessionDocumentView = function () {\n  var self = this;\n  self.existsIn = {}; // set of subscriptionHandle\n  self.dataByKey = {}; // key-> [ {subscriptionHandle, value} by precedence]\n};\n\nDDPServer._SessionDocumentView = SessionDocumentView;\n\n\n_.extend(SessionDocumentView.prototype, {\n\n  getFields: function () {\n    var self = this;\n    var ret = {};\n    _.each(self.dataByKey, function (precedenceList, key) {\n      ret[key] = precedenceList[0].value;\n    });\n    return ret;\n  },\n\n  clearField: function (subscriptionHandle, key, changeCollector) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\")\n      return;\n    var precedenceList = self.dataByKey[key];\n\n    // It's okay to clear fields that didn't exist. No need to throw\n    // an error.\n    if (!precedenceList)\n      return;\n\n    var removedValue = undefined;\n    for (var i = 0; i < precedenceList.length; i++) {\n      var precedence = precedenceList[i];\n      if (precedence.subscriptionHandle === subscriptionHandle) {\n        // The view's value can only change if this subscription is the one that\n        // used to have precedence.\n        if (i === 0)\n          removedValue = precedence.value;\n        precedenceList.splice(i, 1);\n        break;\n      }\n    }\n    if (_.isEmpty(precedenceList)) {\n      delete self.dataByKey[key];\n      changeCollector[key] = undefined;\n    } else if (removedValue !== undefined &&\n               !EJSON.equals(removedValue, precedenceList[0].value)) {\n      changeCollector[key] = precedenceList[0].value;\n    }\n  },\n\n  changeField: function (subscriptionHandle, key, value,\n                         changeCollector, isAdd) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\")\n      return;\n\n    // Don't share state with the data passed in by the user.\n    value = EJSON.clone(value);\n\n    if (!_.has(self.dataByKey, key)) {\n      self.dataByKey[key] = [{subscriptionHandle: subscriptionHandle,\n                              value: value}];\n      changeCollector[key] = value;\n      return;\n    }\n    var precedenceList = self.dataByKey[key];\n    var elt;\n    if (!isAdd) {\n      elt = _.find(precedenceList, function (precedence) {\n        return precedence.subscriptionHandle === subscriptionHandle;\n      });\n    }\n\n    if (elt) {\n      if (elt === precedenceList[0] && !EJSON.equals(value, elt.value)) {\n        // this subscription is changing the value of this field.\n        changeCollector[key] = value;\n      }\n      elt.value = value;\n    } else {\n      // this subscription is newly caring about this field\n      precedenceList.push({subscriptionHandle: subscriptionHandle, value: value});\n    }\n\n  }\n});\n\n/**\n * Represents a client's view of a single collection\n * @param {String} collectionName Name of the collection it represents\n * @param {Object.<String, Function>} sessionCallbacks The callbacks for added, changed, removed\n * @class SessionCollectionView\n */\nvar SessionCollectionView = function (collectionName, sessionCallbacks) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.documents = {};\n  self.callbacks = sessionCallbacks;\n};\n\nDDPServer._SessionCollectionView = SessionCollectionView;\n\n\n_.extend(SessionCollectionView.prototype, {\n\n  isEmpty: function () {\n    var self = this;\n    return _.isEmpty(self.documents);\n  },\n\n  diff: function (previous) {\n    var self = this;\n    DiffSequence.diffObjects(previous.documents, self.documents, {\n      both: _.bind(self.diffDocument, self),\n\n      rightOnly: function (id, nowDV) {\n        self.callbacks.added(self.collectionName, id, nowDV.getFields());\n      },\n\n      leftOnly: function (id, prevDV) {\n        self.callbacks.removed(self.collectionName, id);\n      }\n    });\n  },\n\n  diffDocument: function (id, prevDV, nowDV) {\n    var self = this;\n    var fields = {};\n    DiffSequence.diffObjects(prevDV.getFields(), nowDV.getFields(), {\n      both: function (key, prev, now) {\n        if (!EJSON.equals(prev, now))\n          fields[key] = now;\n      },\n      rightOnly: function (key, now) {\n        fields[key] = now;\n      },\n      leftOnly: function(key, prev) {\n        fields[key] = undefined;\n      }\n    });\n    self.callbacks.changed(self.collectionName, id, fields);\n  },\n\n  added: function (subscriptionHandle, id, fields) {\n    var self = this;\n    var docView = self.documents[id];\n    var added = false;\n    if (!docView) {\n      added = true;\n      docView = new SessionDocumentView();\n      self.documents[id] = docView;\n    }\n    docView.existsIn[subscriptionHandle] = true;\n    var changeCollector = {};\n    _.each(fields, function (value, key) {\n      docView.changeField(\n        subscriptionHandle, key, value, changeCollector, true);\n    });\n    if (added)\n      self.callbacks.added(self.collectionName, id, changeCollector);\n    else\n      self.callbacks.changed(self.collectionName, id, changeCollector);\n  },\n\n  changed: function (subscriptionHandle, id, changed) {\n    var self = this;\n    var changedResult = {};\n    var docView = self.documents[id];\n    if (!docView)\n      throw new Error(\"Could not find element with id \" + id + \" to change\");\n    _.each(changed, function (value, key) {\n      if (value === undefined)\n        docView.clearField(subscriptionHandle, key, changedResult);\n      else\n        docView.changeField(subscriptionHandle, key, value, changedResult);\n    });\n    self.callbacks.changed(self.collectionName, id, changedResult);\n  },\n\n  removed: function (subscriptionHandle, id) {\n    var self = this;\n    var docView = self.documents[id];\n    if (!docView) {\n      var err = new Error(\"Removed nonexistent document \" + id);\n      throw err;\n    }\n    delete docView.existsIn[subscriptionHandle];\n    if (_.isEmpty(docView.existsIn)) {\n      // it is gone from everyone\n      self.callbacks.removed(self.collectionName, id);\n      delete self.documents[id];\n    } else {\n      var changed = {};\n      // remove this subscription from every precedence list\n      // and record the changes\n      _.each(docView.dataByKey, function (precedenceList, key) {\n        docView.clearField(subscriptionHandle, key, changed);\n      });\n\n      self.callbacks.changed(self.collectionName, id, changed);\n    }\n  }\n});\n\n/******************************************************************************/\n/* Session                                                                    */\n/******************************************************************************/\n\nvar Session = function (server, version, socket, options) {\n  var self = this;\n  self.id = Random.id();\n\n  self.server = server;\n  self.version = version;\n\n  self.initialized = false;\n  self.socket = socket;\n\n  // set to null when the session is destroyed. multiple places below\n  // use this to determine if the session is alive or not.\n  self.inQueue = new Meteor._DoubleEndedQueue();\n\n  self.blocked = false;\n  self.workerRunning = false;\n\n  // Sub objects for active subscriptions\n  self._namedSubs = {};\n  self._universalSubs = [];\n\n  self.userId = null;\n\n  self.collectionViews = {};\n\n  // Set this to false to not send messages when collectionViews are\n  // modified. This is done when rerunning subs in _setUserId and those messages\n  // are calculated via a diff instead.\n  self._isSending = true;\n\n  // If this is true, don't start a newly-created universal publisher on this\n  // session. The session will take care of starting it when appropriate.\n  self._dontStartNewUniversalSubs = false;\n\n  // when we are rerunning subscriptions, any ready messages\n  // we want to buffer up for when we are done rerunning subscriptions\n  self._pendingReady = [];\n\n  // List of callbacks to call when this connection is closed.\n  self._closeCallbacks = [];\n\n\n  // XXX HACK: If a sockjs connection, save off the URL. This is\n  // temporary and will go away in the near future.\n  self._socketUrl = socket.url;\n\n  // Allow tests to disable responding to pings.\n  self._respondToPings = options.respondToPings;\n\n  // This object is the public interface to the session. In the public\n  // API, it is called the `connection` object.  Internally we call it\n  // a `connectionHandle` to avoid ambiguity.\n  self.connectionHandle = {\n    id: self.id,\n    close: function () {\n      self.close();\n    },\n    onClose: function (fn) {\n      var cb = Meteor.bindEnvironment(fn, \"connection onClose callback\");\n      if (self.inQueue) {\n        self._closeCallbacks.push(cb);\n      } else {\n        // if we're already closed, call the callback.\n        Meteor.defer(cb);\n      }\n    },\n    clientAddress: self._clientAddress(),\n    httpHeaders: self.socket.headers\n  };\n\n  self.send({ msg: 'connected', session: self.id });\n\n  // On initial connect, spin up all the universal publishers.\n  Fiber(function () {\n    self.startUniversalSubs();\n  }).run();\n\n  if (version !== 'pre1' && options.heartbeatInterval !== 0) {\n    // We no longer need the low level timeout because we have heartbeating.\n    socket.setWebsocketTimeout(0);\n\n    self.heartbeat = new DDPCommon.Heartbeat({\n      heartbeatInterval: options.heartbeatInterval,\n      heartbeatTimeout: options.heartbeatTimeout,\n      onTimeout: function () {\n        self.close();\n      },\n      sendPing: function () {\n        self.send({msg: 'ping'});\n      }\n    });\n    self.heartbeat.start();\n  }\n\n  Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n    \"livedata\", \"sessions\", 1);\n};\n\n_.extend(Session.prototype, {\n\n  sendReady: function (subscriptionIds) {\n    var self = this;\n    if (self._isSending)\n      self.send({msg: \"ready\", subs: subscriptionIds});\n    else {\n      _.each(subscriptionIds, function (subscriptionId) {\n        self._pendingReady.push(subscriptionId);\n      });\n    }\n  },\n\n  sendAdded: function (collectionName, id, fields) {\n    var self = this;\n    if (self._isSending)\n      self.send({msg: \"added\", collection: collectionName, id: id, fields: fields});\n  },\n\n  sendChanged: function (collectionName, id, fields) {\n    var self = this;\n    if (_.isEmpty(fields))\n      return;\n\n    if (self._isSending) {\n      self.send({\n        msg: \"changed\",\n        collection: collectionName,\n        id: id,\n        fields: fields\n      });\n    }\n  },\n\n  sendRemoved: function (collectionName, id) {\n    var self = this;\n    if (self._isSending)\n      self.send({msg: \"removed\", collection: collectionName, id: id});\n  },\n\n  getSendCallbacks: function () {\n    var self = this;\n    return {\n      added: _.bind(self.sendAdded, self),\n      changed: _.bind(self.sendChanged, self),\n      removed: _.bind(self.sendRemoved, self)\n    };\n  },\n\n  getCollectionView: function (collectionName) {\n    var self = this;\n    if (_.has(self.collectionViews, collectionName)) {\n      return self.collectionViews[collectionName];\n    }\n    var ret = new SessionCollectionView(collectionName,\n                                        self.getSendCallbacks());\n    self.collectionViews[collectionName] = ret;\n    return ret;\n  },\n\n  added: function (subscriptionHandle, collectionName, id, fields) {\n    var self = this;\n    var view = self.getCollectionView(collectionName);\n    view.added(subscriptionHandle, id, fields);\n  },\n\n  removed: function (subscriptionHandle, collectionName, id) {\n    var self = this;\n    var view = self.getCollectionView(collectionName);\n    view.removed(subscriptionHandle, id);\n    if (view.isEmpty()) {\n      delete self.collectionViews[collectionName];\n    }\n  },\n\n  changed: function (subscriptionHandle, collectionName, id, fields) {\n    var self = this;\n    var view = self.getCollectionView(collectionName);\n    view.changed(subscriptionHandle, id, fields);\n  },\n\n  startUniversalSubs: function () {\n    var self = this;\n    // Make a shallow copy of the set of universal handlers and start them. If\n    // additional universal publishers start while we're running them (due to\n    // yielding), they will run separately as part of Server.publish.\n    var handlers = _.clone(self.server.universal_publish_handlers);\n    _.each(handlers, function (handler) {\n      self._startSubscription(handler);\n    });\n  },\n\n  // Destroy this session and unregister it at the server.\n  close: function () {\n    var self = this;\n\n    // Destroy this session, even if it's not registered at the\n    // server. Stop all processing and tear everything down. If a socket\n    // was attached, close it.\n\n    // Already destroyed.\n    if (! self.inQueue)\n      return;\n\n    // Drop the merge box data immediately.\n    self.inQueue = null;\n    self.collectionViews = {};\n\n    if (self.heartbeat) {\n      self.heartbeat.stop();\n      self.heartbeat = null;\n    }\n\n    if (self.socket) {\n      self.socket.close();\n      self.socket._meteorSession = null;\n    }\n\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n      \"livedata\", \"sessions\", -1);\n\n    Meteor.defer(function () {\n      // stop callbacks can yield, so we defer this on close.\n      // sub._isDeactivated() detects that we set inQueue to null and\n      // treats it as semi-deactivated (it will ignore incoming callbacks, etc).\n      self._deactivateAllSubscriptions();\n\n      // Defer calling the close callbacks, so that the caller closing\n      // the session isn't waiting for all the callbacks to complete.\n      _.each(self._closeCallbacks, function (callback) {\n        callback();\n      });\n    });\n\n    // Unregister the session.\n    self.server._removeSession(self);\n  },\n\n  // Send a message (doing nothing if no socket is connected right now.)\n  // It should be a JSON object (it will be stringified.)\n  send: function (msg) {\n    var self = this;\n    if (self.socket) {\n      if (Meteor._printSentDDP)\n        Meteor._debug(\"Sent DDP\", DDPCommon.stringifyDDP(msg));\n      self.socket.send(DDPCommon.stringifyDDP(msg));\n    }\n  },\n\n  // Send a connection error.\n  sendError: function (reason, offendingMessage) {\n    var self = this;\n    var msg = {msg: 'error', reason: reason};\n    if (offendingMessage)\n      msg.offendingMessage = offendingMessage;\n    self.send(msg);\n  },\n\n  // Process 'msg' as an incoming message. (But as a guard against\n  // race conditions during reconnection, ignore the message if\n  // 'socket' is not the currently connected socket.)\n  //\n  // We run the messages from the client one at a time, in the order\n  // given by the client. The message handler is passed an idempotent\n  // function 'unblock' which it may call to allow other messages to\n  // begin running in parallel in another fiber (for example, a method\n  // that wants to yield.) Otherwise, it is automatically unblocked\n  // when it returns.\n  //\n  // Actually, we don't have to 'totally order' the messages in this\n  // way, but it's the easiest thing that's correct. (unsub needs to\n  // be ordered against sub, methods need to be ordered against each\n  // other.)\n  processMessage: function (msg_in) {\n    var self = this;\n    if (!self.inQueue) // we have been destroyed.\n      return;\n\n    // Respond to ping and pong messages immediately without queuing.\n    // If the negotiated DDP version is \"pre1\" which didn't support\n    // pings, preserve the \"pre1\" behavior of responding with a \"bad\n    // request\" for the unknown messages.\n    //\n    // Fibers are needed because heartbeat uses Meteor.setTimeout, which\n    // needs a Fiber. We could actually use regular setTimeout and avoid\n    // these new fibers, but it is easier to just make everything use\n    // Meteor.setTimeout and not think too hard.\n    //\n    // Any message counts as receiving a pong, as it demonstrates that\n    // the client is still alive.\n    if (self.heartbeat) {\n      Fiber(function () {\n        self.heartbeat.messageReceived();\n      }).run();\n    }\n\n    if (self.version !== 'pre1' && msg_in.msg === 'ping') {\n      if (self._respondToPings)\n        self.send({msg: \"pong\", id: msg_in.id});\n      return;\n    }\n    if (self.version !== 'pre1' && msg_in.msg === 'pong') {\n      // Since everything is a pong, nothing to do\n      return;\n    }\n\n    self.inQueue.push(msg_in);\n    if (self.workerRunning)\n      return;\n    self.workerRunning = true;\n\n    var processNext = function () {\n      var msg = self.inQueue && self.inQueue.shift();\n      if (!msg) {\n        self.workerRunning = false;\n        return;\n      }\n\n      Fiber(function () {\n        var blocked = true;\n\n        var unblock = function () {\n          if (!blocked)\n            return; // idempotent\n          blocked = false;\n          processNext();\n        };\n\n        self.server.onMessageHook.each(function (callback) {\n          callback(msg, self);\n          return true;\n        });\n\n        if (_.has(self.protocol_handlers, msg.msg))\n          self.protocol_handlers[msg.msg].call(self, msg, unblock);\n        else\n          self.sendError('Bad request', msg);\n        unblock(); // in case the handler didn't already do it\n      }).run();\n    };\n\n    processNext();\n  },\n\n  protocol_handlers: {\n    sub: function (msg) {\n      var self = this;\n\n      // reject malformed messages\n      if (typeof (msg.id) !== \"string\" ||\n          typeof (msg.name) !== \"string\" ||\n          (('params' in msg) && !(msg.params instanceof Array))) {\n        self.sendError(\"Malformed subscription\", msg);\n        return;\n      }\n\n      if (!self.server.publish_handlers[msg.name]) {\n        self.send({\n          msg: 'nosub', id: msg.id,\n          error: new Meteor.Error(404, `Subscription '${msg.name}' not found`)});\n        return;\n      }\n\n      if (_.has(self._namedSubs, msg.id))\n        // subs are idempotent, or rather, they are ignored if a sub\n        // with that id already exists. this is important during\n        // reconnect.\n        return;\n\n      // XXX It'd be much better if we had generic hooks where any package can\n      // hook into subscription handling, but in the mean while we special case\n      // ddp-rate-limiter package. This is also done for weak requirements to\n      // add the ddp-rate-limiter package in case we don't have Accounts. A\n      // user trying to use the ddp-rate-limiter must explicitly require it.\n      if (Package['ddp-rate-limiter']) {\n        var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n        var rateLimiterInput = {\n          userId: self.userId,\n          clientAddress: self.connectionHandle.clientAddress,\n          type: \"subscription\",\n          name: msg.name,\n          connectionId: self.id\n        };\n\n        DDPRateLimiter._increment(rateLimiterInput);\n        var rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n        if (!rateLimitResult.allowed) {\n          self.send({\n            msg: 'nosub', id: msg.id,\n            error: new Meteor.Error(\n              'too-many-requests',\n              DDPRateLimiter.getErrorMessage(rateLimitResult),\n              {timeToReset: rateLimitResult.timeToReset})\n          });\n          return;\n        }\n      }\n\n      var handler = self.server.publish_handlers[msg.name];\n\n      self._startSubscription(handler, msg.id, msg.params, msg.name);\n\n    },\n\n    unsub: function (msg) {\n      var self = this;\n\n      self._stopSubscription(msg.id);\n    },\n\n    method: function (msg, unblock) {\n      var self = this;\n\n      // reject malformed messages\n      // For now, we silently ignore unknown attributes,\n      // for forwards compatibility.\n      if (typeof (msg.id) !== \"string\" ||\n          typeof (msg.method) !== \"string\" ||\n          (('params' in msg) && !(msg.params instanceof Array)) ||\n          (('randomSeed' in msg) && (typeof msg.randomSeed !== \"string\"))) {\n        self.sendError(\"Malformed method invocation\", msg);\n        return;\n      }\n\n      var randomSeed = msg.randomSeed || null;\n\n      // set up to mark the method as satisfied once all observers\n      // (and subscriptions) have reacted to any writes that were\n      // done.\n      var fence = new DDPServer._WriteFence;\n      fence.onAllCommitted(function () {\n        // Retire the fence so that future writes are allowed.\n        // This means that callbacks like timers are free to use\n        // the fence, and if they fire before it's armed (for\n        // example, because the method waits for them) their\n        // writes will be included in the fence.\n        fence.retire();\n        self.send({\n          msg: 'updated', methods: [msg.id]});\n      });\n\n      // find the handler\n      var handler = self.server.method_handlers[msg.method];\n      if (!handler) {\n        self.send({\n          msg: 'result', id: msg.id,\n          error: new Meteor.Error(404, `Method '${msg.method}' not found`)});\n        fence.arm();\n        return;\n      }\n\n      var setUserId = function(userId) {\n        self._setUserId(userId);\n      };\n\n      var invocation = new DDPCommon.MethodInvocation({\n        isSimulation: false,\n        userId: self.userId,\n        setUserId: setUserId,\n        unblock: unblock,\n        connection: self.connectionHandle,\n        randomSeed: randomSeed\n      });\n\n      const promise = new Promise((resolve, reject) => {\n        // XXX It'd be better if we could hook into method handlers better but\n        // for now, we need to check if the ddp-rate-limiter exists since we\n        // have a weak requirement for the ddp-rate-limiter package to be added\n        // to our application.\n        if (Package['ddp-rate-limiter']) {\n          var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n          var rateLimiterInput = {\n            userId: self.userId,\n            clientAddress: self.connectionHandle.clientAddress,\n            type: \"method\",\n            name: msg.method,\n            connectionId: self.id\n          };\n          DDPRateLimiter._increment(rateLimiterInput);\n          var rateLimitResult = DDPRateLimiter._check(rateLimiterInput)\n          if (!rateLimitResult.allowed) {\n            reject(new Meteor.Error(\n              \"too-many-requests\",\n              DDPRateLimiter.getErrorMessage(rateLimitResult),\n              {timeToReset: rateLimitResult.timeToReset}\n            ));\n            return;\n          }\n        }\n\n        resolve(DDPServer._CurrentWriteFence.withValue(\n          fence,\n          () => DDP._CurrentMethodInvocation.withValue(\n            invocation,\n            () => maybeAuditArgumentChecks(\n              handler, invocation, msg.params,\n              \"call to '\" + msg.method + \"'\"\n            )\n          )\n        ));\n      });\n\n      function finish() {\n        fence.arm();\n        unblock();\n      }\n\n      const payload = {\n        msg: \"result\",\n        id: msg.id\n      };\n\n      promise.then((result) => {\n        finish();\n        if (result !== undefined) {\n          payload.result = result;\n        }\n        self.send(payload);\n      }, (exception) => {\n        finish();\n        payload.error = wrapInternalException(\n          exception,\n          `while invoking method '${msg.method}'`\n        );\n        self.send(payload);\n      });\n    }\n  },\n\n  _eachSub: function (f) {\n    var self = this;\n    _.each(self._namedSubs, f);\n    _.each(self._universalSubs, f);\n  },\n\n  _diffCollectionViews: function (beforeCVs) {\n    var self = this;\n    DiffSequence.diffObjects(beforeCVs, self.collectionViews, {\n      both: function (collectionName, leftValue, rightValue) {\n        rightValue.diff(leftValue);\n      },\n      rightOnly: function (collectionName, rightValue) {\n        _.each(rightValue.documents, function (docView, id) {\n          self.sendAdded(collectionName, id, docView.getFields());\n        });\n      },\n      leftOnly: function (collectionName, leftValue) {\n        _.each(leftValue.documents, function (doc, id) {\n          self.sendRemoved(collectionName, id);\n        });\n      }\n    });\n  },\n\n  // Sets the current user id in all appropriate contexts and reruns\n  // all subscriptions\n  _setUserId: function(userId) {\n    var self = this;\n\n    if (userId !== null && typeof userId !== \"string\")\n      throw new Error(\"setUserId must be called on string or null, not \" +\n                      typeof userId);\n\n    // Prevent newly-created universal subscriptions from being added to our\n    // session; they will be found below when we call startUniversalSubs.\n    //\n    // (We don't have to worry about named subscriptions, because we only add\n    // them when we process a 'sub' message. We are currently processing a\n    // 'method' message, and the method did not unblock, because it is illegal\n    // to call setUserId after unblock. Thus we cannot be concurrently adding a\n    // new named subscription.)\n    self._dontStartNewUniversalSubs = true;\n\n    // Prevent current subs from updating our collectionViews and call their\n    // stop callbacks. This may yield.\n    self._eachSub(function (sub) {\n      sub._deactivate();\n    });\n\n    // All subs should now be deactivated. Stop sending messages to the client,\n    // save the state of the published collections, reset to an empty view, and\n    // update the userId.\n    self._isSending = false;\n    var beforeCVs = self.collectionViews;\n    self.collectionViews = {};\n    self.userId = userId;\n\n    // _setUserId is normally called from a Meteor method with\n    // DDP._CurrentMethodInvocation set. But DDP._CurrentMethodInvocation is not\n    // expected to be set inside a publish function, so we temporary unset it.\n    // Inside a publish function DDP._CurrentPublicationInvocation is set.\n    DDP._CurrentMethodInvocation.withValue(undefined, function () {\n      // Save the old named subs, and reset to having no subscriptions.\n      var oldNamedSubs = self._namedSubs;\n      self._namedSubs = {};\n      self._universalSubs = [];\n\n      _.each(oldNamedSubs, function (sub, subscriptionId) {\n        self._namedSubs[subscriptionId] = sub._recreate();\n        // nb: if the handler throws or calls this.error(), it will in fact\n        // immediately send its 'nosub'. This is OK, though.\n        self._namedSubs[subscriptionId]._runHandler();\n      });\n\n      // Allow newly-created universal subs to be started on our connection in\n      // parallel with the ones we're spinning up here, and spin up universal\n      // subs.\n      self._dontStartNewUniversalSubs = false;\n      self.startUniversalSubs();\n    });\n\n    // Start sending messages again, beginning with the diff from the previous\n    // state of the world to the current state. No yields are allowed during\n    // this diff, so that other changes cannot interleave.\n    Meteor._noYieldsAllowed(function () {\n      self._isSending = true;\n      self._diffCollectionViews(beforeCVs);\n      if (!_.isEmpty(self._pendingReady)) {\n        self.sendReady(self._pendingReady);\n        self._pendingReady = [];\n      }\n    });\n  },\n\n  _startSubscription: function (handler, subId, params, name) {\n    var self = this;\n\n    var sub = new Subscription(\n      self, handler, subId, params, name);\n    if (subId)\n      self._namedSubs[subId] = sub;\n    else\n      self._universalSubs.push(sub);\n\n    sub._runHandler();\n  },\n\n  // tear down specified subscription\n  _stopSubscription: function (subId, error) {\n    var self = this;\n\n    var subName = null;\n\n    if (subId && self._namedSubs[subId]) {\n      subName = self._namedSubs[subId]._name;\n      self._namedSubs[subId]._removeAllDocuments();\n      self._namedSubs[subId]._deactivate();\n      delete self._namedSubs[subId];\n    }\n\n    var response = {msg: 'nosub', id: subId};\n\n    if (error) {\n      response.error = wrapInternalException(\n        error,\n        subName ? (\"from sub \" + subName + \" id \" + subId)\n          : (\"from sub id \" + subId));\n    }\n\n    self.send(response);\n  },\n\n  // tear down all subscriptions. Note that this does NOT send removed or nosub\n  // messages, since we assume the client is gone.\n  _deactivateAllSubscriptions: function () {\n    var self = this;\n\n    _.each(self._namedSubs, function (sub, id) {\n      sub._deactivate();\n    });\n    self._namedSubs = {};\n\n    _.each(self._universalSubs, function (sub) {\n      sub._deactivate();\n    });\n    self._universalSubs = [];\n  },\n\n  // Determine the remote client's IP address, based on the\n  // HTTP_FORWARDED_COUNT environment variable representing how many\n  // proxies the server is behind.\n  _clientAddress: function () {\n    var self = this;\n\n    // For the reported client address for a connection to be correct,\n    // the developer must set the HTTP_FORWARDED_COUNT environment\n    // variable to an integer representing the number of hops they\n    // expect in the `x-forwarded-for` header. E.g., set to \"1\" if the\n    // server is behind one proxy.\n    //\n    // This could be computed once at startup instead of every time.\n    var httpForwardedCount = parseInt(process.env['HTTP_FORWARDED_COUNT']) || 0;\n\n    if (httpForwardedCount === 0)\n      return self.socket.remoteAddress;\n\n    var forwardedFor = self.socket.headers[\"x-forwarded-for\"];\n    if (! _.isString(forwardedFor))\n      return null;\n    forwardedFor = forwardedFor.trim().split(/\\s*,\\s*/);\n\n    // Typically the first value in the `x-forwarded-for` header is\n    // the original IP address of the client connecting to the first\n    // proxy.  However, the end user can easily spoof the header, in\n    // which case the first value(s) will be the fake IP address from\n    // the user pretending to be a proxy reporting the original IP\n    // address value.  By counting HTTP_FORWARDED_COUNT back from the\n    // end of the list, we ensure that we get the IP address being\n    // reported by *our* first proxy.\n\n    if (httpForwardedCount < 0 || httpForwardedCount > forwardedFor.length)\n      return null;\n\n    return forwardedFor[forwardedFor.length - httpForwardedCount];\n  }\n});\n\n/******************************************************************************/\n/* Subscription                                                               */\n/******************************************************************************/\n\n// ctor for a sub handle: the input to each publish function\n\n// Instance name is this because it's usually referred to as this inside a\n// publish\n/**\n * @summary The server's side of a subscription\n * @class Subscription\n * @instanceName this\n * @showInstanceName true\n */\nvar Subscription = function (\n    session, handler, subscriptionId, params, name) {\n  var self = this;\n  self._session = session; // type is Session\n\n  /**\n   * @summary Access inside the publish function. The incoming [connection](#meteor_onconnection) for this subscription.\n   * @locus Server\n   * @name  connection\n   * @memberOf Subscription\n   * @instance\n   */\n  self.connection = session.connectionHandle; // public API object\n\n  self._handler = handler;\n\n  // my subscription ID (generated by client, undefined for universal subs).\n  self._subscriptionId = subscriptionId;\n  // undefined for universal subs\n  self._name = name;\n\n  self._params = params || [];\n\n  // Only named subscriptions have IDs, but we need some sort of string\n  // internally to keep track of all subscriptions inside\n  // SessionDocumentViews. We use this subscriptionHandle for that.\n  if (self._subscriptionId) {\n    self._subscriptionHandle = 'N' + self._subscriptionId;\n  } else {\n    self._subscriptionHandle = 'U' + Random.id();\n  }\n\n  // has _deactivate been called?\n  self._deactivated = false;\n\n  // stop callbacks to g/c this sub.  called w/ zero arguments.\n  self._stopCallbacks = [];\n\n  // the set of (collection, documentid) that this subscription has\n  // an opinion about\n  self._documents = {};\n\n  // remember if we are ready.\n  self._ready = false;\n\n  // Part of the public API: the user of this sub.\n\n  /**\n   * @summary Access inside the publish function. The id of the logged-in user, or `null` if no user is logged in.\n   * @locus Server\n   * @memberOf Subscription\n   * @name  userId\n   * @instance\n   */\n  self.userId = session.userId;\n\n  // For now, the id filter is going to default to\n  // the to/from DDP methods on MongoID, to\n  // specifically deal with mongo/minimongo ObjectIds.\n\n  // Later, you will be able to make this be \"raw\"\n  // if you want to publish a collection that you know\n  // just has strings for keys and no funny business, to\n  // a ddp consumer that isn't minimongo\n\n  self._idFilter = {\n    idStringify: MongoID.idStringify,\n    idParse: MongoID.idParse\n  };\n\n  Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n    \"livedata\", \"subscriptions\", 1);\n};\n\n_.extend(Subscription.prototype, {\n  _runHandler: function () {\n    // XXX should we unblock() here? Either before running the publish\n    // function, or before running _publishCursor.\n    //\n    // Right now, each publish function blocks all future publishes and\n    // methods waiting on data from Mongo (or whatever else the function\n    // blocks on). This probably slows page load in common cases.\n\n    var self = this;\n    try {\n      var res = DDP._CurrentPublicationInvocation.withValue(\n        self,\n        () => maybeAuditArgumentChecks(\n          self._handler, self, EJSON.clone(self._params),\n          // It's OK that this would look weird for universal subscriptions,\n          // because they have no arguments so there can never be an\n          // audit-argument-checks failure.\n          \"publisher '\" + self._name + \"'\"\n        )\n      );\n    } catch (e) {\n      self.error(e);\n      return;\n    }\n\n    // Did the handler call this.error or this.stop?\n    if (self._isDeactivated())\n      return;\n\n    self._publishHandlerResult(res);\n  },\n\n  _publishHandlerResult: function (res) {\n    // SPECIAL CASE: Instead of writing their own callbacks that invoke\n    // this.added/changed/ready/etc, the user can just return a collection\n    // cursor or array of cursors from the publish function; we call their\n    // _publishCursor method which starts observing the cursor and publishes the\n    // results. Note that _publishCursor does NOT call ready().\n    //\n    // XXX This uses an undocumented interface which only the Mongo cursor\n    // interface publishes. Should we make this interface public and encourage\n    // users to implement it themselves? Arguably, it's unnecessary; users can\n    // already write their own functions like\n    //   var publishMyReactiveThingy = function (name, handler) {\n    //     Meteor.publish(name, function () {\n    //       var reactiveThingy = handler();\n    //       reactiveThingy.publishMe();\n    //     });\n    //   };\n\n    var self = this;\n    var isCursor = function (c) {\n      return c && c._publishCursor;\n    };\n    if (isCursor(res)) {\n      try {\n        res._publishCursor(self);\n      } catch (e) {\n        self.error(e);\n        return;\n      }\n      // _publishCursor only returns after the initial added callbacks have run.\n      // mark subscription as ready.\n      self.ready();\n    } else if (_.isArray(res)) {\n      // check all the elements are cursors\n      if (! _.all(res, isCursor)) {\n        self.error(new Error(\"Publish function returned an array of non-Cursors\"));\n        return;\n      }\n      // find duplicate collection names\n      // XXX we should support overlapping cursors, but that would require the\n      // merge box to allow overlap within a subscription\n      var collectionNames = {};\n      for (var i = 0; i < res.length; ++i) {\n        var collectionName = res[i]._getCollectionName();\n        if (_.has(collectionNames, collectionName)) {\n          self.error(new Error(\n            \"Publish function returned multiple cursors for collection \" +\n              collectionName));\n          return;\n        }\n        collectionNames[collectionName] = true;\n      };\n\n      try {\n        _.each(res, function (cur) {\n          cur._publishCursor(self);\n        });\n      } catch (e) {\n        self.error(e);\n        return;\n      }\n      self.ready();\n    } else if (res) {\n      // truthy values other than cursors or arrays are probably a\n      // user mistake (possible returning a Mongo document via, say,\n      // `coll.findOne()`).\n      self.error(new Error(\"Publish function can only return a Cursor or \"\n                           + \"an array of Cursors\"));\n    }\n  },\n\n  // This calls all stop callbacks and prevents the handler from updating any\n  // SessionCollectionViews further. It's used when the user unsubscribes or\n  // disconnects, as well as during setUserId re-runs. It does *NOT* send\n  // removed messages for the published objects; if that is necessary, call\n  // _removeAllDocuments first.\n  _deactivate: function() {\n    var self = this;\n    if (self._deactivated)\n      return;\n    self._deactivated = true;\n    self._callStopCallbacks();\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n      \"livedata\", \"subscriptions\", -1);\n  },\n\n  _callStopCallbacks: function () {\n    var self = this;\n    // tell listeners, so they can clean up\n    var callbacks = self._stopCallbacks;\n    self._stopCallbacks = [];\n    _.each(callbacks, function (callback) {\n      callback();\n    });\n  },\n\n  // Send remove messages for every document.\n  _removeAllDocuments: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      _.each(self._documents, function(collectionDocs, collectionName) {\n        // Iterate over _.keys instead of the dictionary itself, since we'll be\n        // mutating it.\n        _.each(_.keys(collectionDocs), function (strId) {\n          self.removed(collectionName, self._idFilter.idParse(strId));\n        });\n      });\n    });\n  },\n\n  // Returns a new Subscription for the same session with the same\n  // initial creation parameters. This isn't a clone: it doesn't have\n  // the same _documents cache, stopped state or callbacks; may have a\n  // different _subscriptionHandle, and gets its userId from the\n  // session, not from this object.\n  _recreate: function () {\n    var self = this;\n    return new Subscription(\n      self._session, self._handler, self._subscriptionId, self._params,\n      self._name);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription, triggering a call on the client to the `onStop` callback passed to [`Meteor.subscribe`](#meteor_subscribe), if any. If `error` is not a [`Meteor.Error`](#meteor_error), it will be [sanitized](#meteor_error).\n   * @locus Server\n   * @param {Error} error The error to pass to the client.\n   * @instance\n   * @memberOf Subscription\n   */\n  error: function (error) {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    self._session._stopSubscription(self._subscriptionId, error);\n  },\n\n  // Note that while our DDP client will notice that you've called stop() on the\n  // server (and clean up its _subscriptions table) we don't actually provide a\n  // mechanism for an app to notice this (the subscribe onError callback only\n  // triggers if there is an error).\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription and invokes the client's `onStop` callback with no error.\n   * @locus Server\n   * @instance\n   * @memberOf Subscription\n   */\n  stop: function () {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    self._session._stopSubscription(self._subscriptionId);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Registers a callback function to run when the subscription is stopped.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {Function} func The callback function\n   */\n  onStop: function (callback) {\n    var self = this;\n    callback = Meteor.bindEnvironment(callback, 'onStop callback', self);\n    if (self._isDeactivated())\n      callback();\n    else\n      self._stopCallbacks.push(callback);\n  },\n\n  // This returns true if the sub has been deactivated, *OR* if the session was\n  // destroyed but the deferred call to _deactivateAllSubscriptions hasn't\n  // happened yet.\n  _isDeactivated: function () {\n    var self = this;\n    return self._deactivated || self._session.inQueue === null;\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been added to the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the new document.\n   * @param {String} id The new document's ID.\n   * @param {Object} fields The fields in the new document.  If `_id` is present it is ignored.\n   */\n  added: function (collectionName, id, fields) {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    id = self._idFilter.idStringify(id);\n    Meteor._ensure(self._documents, collectionName)[id] = true;\n    self._session.added(self._subscriptionHandle, collectionName, id, fields);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document in the record set has been modified.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the changed document.\n   * @param {String} id The changed document's ID.\n   * @param {Object} fields The fields in the document that have changed, together with their new values.  If a field is not present in `fields` it was left unchanged; if it is present in `fields` and has a value of `undefined` it was removed from the document.  If `_id` is present it is ignored.\n   */\n  changed: function (collectionName, id, fields) {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    id = self._idFilter.idStringify(id);\n    self._session.changed(self._subscriptionHandle, collectionName, id, fields);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been removed from the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that the document has been removed from.\n   * @param {String} id The ID of the document that has been removed.\n   */\n  removed: function (collectionName, id) {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    id = self._idFilter.idStringify(id);\n    // We don't bother to delete sets of things in a collection if the\n    // collection is empty.  It could break _removeAllDocuments.\n    delete self._documents[collectionName][id];\n    self._session.removed(self._subscriptionHandle, collectionName, id);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that an initial, complete snapshot of the record set has been sent.  This will trigger a call on the client to the `onReady` callback passed to  [`Meteor.subscribe`](#meteor_subscribe), if any.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   */\n  ready: function () {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    if (!self._subscriptionId)\n      return;  // unnecessary but ignored for universal sub\n    if (!self._ready) {\n      self._session.sendReady([self._subscriptionId]);\n      self._ready = true;\n    }\n  }\n});\n\n/******************************************************************************/\n/* Server                                                                     */\n/******************************************************************************/\n\nServer = function (options) {\n  var self = this;\n\n  // The default heartbeat interval is 30 seconds on the server and 35\n  // seconds on the client.  Since the client doesn't need to send a\n  // ping as long as it is receiving pings, this means that pings\n  // normally go from the server to the client.\n  //\n  // Note: Troposphere depends on the ability to mutate\n  // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n  self.options = _.defaults(options || {}, {\n    heartbeatInterval: 15000,\n    heartbeatTimeout: 15000,\n    // For testing, allow responding to pings to be disabled.\n    respondToPings: true\n  });\n\n  // Map of callbacks to call when a new connection comes in to the\n  // server and completes DDP version negotiation. Use an object instead\n  // of an array so we can safely remove one from the list while\n  // iterating over it.\n  self.onConnectionHook = new Hook({\n    debugPrintExceptions: \"onConnection callback\"\n  });\n\n  // Map of callbacks to call when a new message comes in.\n  self.onMessageHook = new Hook({\n    debugPrintExceptions: \"onMessage callback\"\n  });\n\n  self.publish_handlers = {};\n  self.universal_publish_handlers = [];\n\n  self.method_handlers = {};\n\n  self.sessions = {}; // map from id to session\n\n  self.stream_server = new StreamServer;\n\n  self.stream_server.register(function (socket) {\n    // socket implements the SockJSConnection interface\n    socket._meteorSession = null;\n\n    var sendError = function (reason, offendingMessage) {\n      var msg = {msg: 'error', reason: reason};\n      if (offendingMessage)\n        msg.offendingMessage = offendingMessage;\n      socket.send(DDPCommon.stringifyDDP(msg));\n    };\n\n    socket.on('data', function (raw_msg) {\n      if (Meteor._printReceivedDDP) {\n        Meteor._debug(\"Received DDP\", raw_msg);\n      }\n      try {\n        try {\n          var msg = DDPCommon.parseDDP(raw_msg);\n        } catch (err) {\n          sendError('Parse error');\n          return;\n        }\n        if (msg === null || !msg.msg) {\n          sendError('Bad request', msg);\n          return;\n        }\n\n        if (msg.msg === 'connect') {\n          if (socket._meteorSession) {\n            sendError(\"Already connected\", msg);\n            return;\n          }\n          Fiber(function () {\n            self._handleConnect(socket, msg);\n          }).run();\n          return;\n        }\n\n        if (!socket._meteorSession) {\n          sendError('Must connect first', msg);\n          return;\n        }\n        socket._meteorSession.processMessage(msg);\n      } catch (e) {\n        // XXX print stack nicely\n        Meteor._debug(\"Internal exception while processing message\", msg, e);\n      }\n    });\n\n    socket.on('close', function () {\n      if (socket._meteorSession) {\n        Fiber(function () {\n          socket._meteorSession.close();\n        }).run();\n      }\n    });\n  });\n};\n\n_.extend(Server.prototype, {\n\n  /**\n   * @summary Register a callback to be called when a new DDP connection is made to the server.\n   * @locus Server\n   * @param {function} callback The function to call when a new DDP connection is established.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  onConnection: function (fn) {\n    var self = this;\n    return self.onConnectionHook.register(fn);\n  },\n\n  /**\n   * @summary Register a callback to be called when a new DDP message is received.\n   * @locus Server\n   * @param {function} callback The function to call when a new DDP message is received.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  onMessage: function (fn) {\n    var self = this;\n    return self.onMessageHook.register(fn);\n  },\n\n  _handleConnect: function (socket, msg) {\n    var self = this;\n\n    // The connect message must specify a version and an array of supported\n    // versions, and it must claim to support what it is proposing.\n    if (!(typeof (msg.version) === 'string' &&\n          _.isArray(msg.support) &&\n          _.all(msg.support, _.isString) &&\n          _.contains(msg.support, msg.version))) {\n      socket.send(DDPCommon.stringifyDDP({msg: 'failed',\n                                version: DDPCommon.SUPPORTED_DDP_VERSIONS[0]}));\n      socket.close();\n      return;\n    }\n\n    // In the future, handle session resumption: something like:\n    //  socket._meteorSession = self.sessions[msg.session]\n    var version = calculateVersion(msg.support, DDPCommon.SUPPORTED_DDP_VERSIONS);\n\n    if (msg.version !== version) {\n      // The best version to use (according to the client's stated preferences)\n      // is not the one the client is trying to use. Inform them about the best\n      // version to use.\n      socket.send(DDPCommon.stringifyDDP({msg: 'failed', version: version}));\n      socket.close();\n      return;\n    }\n\n    // Yay, version matches! Create a new session.\n    // Note: Troposphere depends on the ability to mutate\n    // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n    socket._meteorSession = new Session(self, version, socket, self.options);\n    self.sessions[socket._meteorSession.id] = socket._meteorSession;\n    self.onConnectionHook.each(function (callback) {\n      if (socket._meteorSession)\n        callback(socket._meteorSession.connectionHandle);\n      return true;\n    });\n  },\n  /**\n   * Register a publish handler function.\n   *\n   * @param name {String} identifier for query\n   * @param handler {Function} publish handler\n   * @param options {Object}\n   *\n   * Server will call handler function on each new subscription,\n   * either when receiving DDP sub message for a named subscription, or on\n   * DDP connect for a universal subscription.\n   *\n   * If name is null, this will be a subscription that is\n   * automatically established and permanently on for all connected\n   * client, instead of a subscription that can be turned on and off\n   * with subscribe().\n   *\n   * options to contain:\n   *  - (mostly internal) is_auto: true if generated automatically\n   *    from an autopublish hook. this is for cosmetic purposes only\n   *    (it lets us determine whether to print a warning suggesting\n   *    that you turn off autopublish.)\n   */\n\n  /**\n   * @summary Publish a record set.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   * @locus Server\n   * @param {String|Object} name If String, name of the record set.  If Object, publications Dictionary of publish functions by name.  If `null`, the set has no name, and the record set is automatically sent to all connected clients.\n   * @param {Function} func Function called on the server each time a client subscribes.  Inside the function, `this` is the publish handler object, described below.  If the client passed arguments to `subscribe`, the function is called with the same arguments.\n   */\n  publish: function (name, handler, options) {\n    var self = this;\n\n    if (! _.isObject(name)) {\n      options = options || {};\n\n      if (name && name in self.publish_handlers) {\n        Meteor._debug(\"Ignoring duplicate publish named '\" + name + \"'\");\n        return;\n      }\n\n      if (Package.autopublish && !options.is_auto) {\n        // They have autopublish on, yet they're trying to manually\n        // picking stuff to publish. They probably should turn off\n        // autopublish. (This check isn't perfect -- if you create a\n        // publish before you turn on autopublish, it won't catch\n        // it. But this will definitely handle the simple case where\n        // you've added the autopublish package to your app, and are\n        // calling publish from your app code.)\n        if (!self.warned_about_autopublish) {\n          self.warned_about_autopublish = true;\n          Meteor._debug(\n    \"** You've set up some data subscriptions with Meteor.publish(), but\\n\" +\n    \"** you still have autopublish turned on. Because autopublish is still\\n\" +\n    \"** on, your Meteor.publish() calls won't have much effect. All data\\n\" +\n    \"** will still be sent to all clients.\\n\" +\n    \"**\\n\" +\n    \"** Turn off autopublish by removing the autopublish package:\\n\" +\n    \"**\\n\" +\n    \"**   $ meteor remove autopublish\\n\" +\n    \"**\\n\" +\n    \"** .. and make sure you have Meteor.publish() and Meteor.subscribe() calls\\n\" +\n    \"** for each collection that you want clients to see.\\n\");\n        }\n      }\n\n      if (name)\n        self.publish_handlers[name] = handler;\n      else {\n        self.universal_publish_handlers.push(handler);\n        // Spin up the new publisher on any existing session too. Run each\n        // session's subscription in a new Fiber, so that there's no change for\n        // self.sessions to change while we're running this loop.\n        _.each(self.sessions, function (session) {\n          if (!session._dontStartNewUniversalSubs) {\n            Fiber(function() {\n              session._startSubscription(handler);\n            }).run();\n          }\n        });\n      }\n    }\n    else{\n      _.each(name, function(value, key) {\n        self.publish(key, value, {});\n      });\n    }\n  },\n\n  _removeSession: function (session) {\n    var self = this;\n    if (self.sessions[session.id]) {\n      delete self.sessions[session.id];\n    }\n  },\n\n  /**\n   * @summary Defines functions that can be invoked over the network by clients.\n   * @locus Anywhere\n   * @param {Object} methods Dictionary whose keys are method names and values are functions.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  methods: function (methods) {\n    var self = this;\n    _.each(methods, function (func, name) {\n      if (typeof func !== 'function')\n        throw new Error(\"Method '\" + name + \"' must be a function\");\n      if (self.method_handlers[name])\n        throw new Error(\"A method named '\" + name + \"' is already defined\");\n      self.method_handlers[name] = func;\n    });\n  },\n\n  call: function (name, ...args) {\n    if (args.length && typeof args[args.length - 1] === \"function\") {\n      // If it's a function, the last argument is the result callback, not\n      // a parameter to the remote method.\n      var callback = args.pop();\n    }\n\n    return this.apply(name, args, callback);\n  },\n\n  // A version of the call method that always returns a Promise.\n  callAsync: function (name, ...args) {\n    return this.applyAsync(name, args);\n  },\n\n  apply: function (name, args, options, callback) {\n    // We were passed 3 arguments. They may be either (name, args, options)\n    // or (name, args, callback)\n    if (! callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    } else {\n      options = options || {};\n    }\n\n    const promise = this.applyAsync(name, args, options);\n\n    // Return the result in whichever way the caller asked for it. Note that we\n    // do NOT block on the write fence in an analogous way to how the client\n    // blocks on the relevant data being visible, so you are NOT guaranteed that\n    // cursor observe callbacks have fired when your callback is invoked. (We\n    // can change this if there's a real use case.)\n    if (callback) {\n      promise.then(\n        result => callback(undefined, result),\n        exception => callback(exception)\n      );\n    } else {\n      return promise.await();\n    }\n  },\n\n  // @param options {Optional Object}\n  applyAsync: function (name, args, options) {\n    // Run the handler\n    var handler = this.method_handlers[name];\n    if (! handler) {\n      return Promise.reject(\n        new Meteor.Error(404, `Method '${name}' not found`)\n      );\n    }\n\n    // If this is a method call from within another method or publish function,\n    // get the user state from the outer method or publish function, otherwise\n    // don't allow setUserId to be called\n    var userId = null;\n    var setUserId = function() {\n      throw new Error(\"Can't call setUserId on a server initiated method call\");\n    };\n    var connection = null;\n    var currentMethodInvocation = DDP._CurrentMethodInvocation.get();\n    var currentPublicationInvocation = DDP._CurrentPublicationInvocation.get();\n    var randomSeed = null;\n    if (currentMethodInvocation) {\n      userId = currentMethodInvocation.userId;\n      setUserId = function(userId) {\n        currentMethodInvocation.setUserId(userId);\n      };\n      connection = currentMethodInvocation.connection;\n      randomSeed = DDPCommon.makeRpcSeed(currentMethodInvocation, name);\n    } else if (currentPublicationInvocation) {\n      userId = currentPublicationInvocation.userId;\n      setUserId = function(userId) {\n        currentPublicationInvocation._session._setUserId(userId);\n      };\n      connection = currentPublicationInvocation.connection;\n    }\n\n    var invocation = new DDPCommon.MethodInvocation({\n      isSimulation: false,\n      userId,\n      setUserId,\n      connection,\n      randomSeed\n    });\n\n    return new Promise(resolve => resolve(\n      DDP._CurrentMethodInvocation.withValue(\n        invocation,\n        () => maybeAuditArgumentChecks(\n          handler, invocation, EJSON.clone(args),\n          \"internal call to '\" + name + \"'\"\n        )\n      )\n    )).then(EJSON.clone);\n  },\n\n  _urlForSession: function (sessionId) {\n    var self = this;\n    var session = self.sessions[sessionId];\n    if (session)\n      return session._socketUrl;\n    else\n      return null;\n  }\n});\n\nvar calculateVersion = function (clientSupportedVersions,\n                                 serverSupportedVersions) {\n  var correctVersion = _.find(clientSupportedVersions, function (version) {\n    return _.contains(serverSupportedVersions, version);\n  });\n  if (!correctVersion) {\n    correctVersion = serverSupportedVersions[0];\n  }\n  return correctVersion;\n};\n\nDDPServer._calculateVersion = calculateVersion;\n\n\n// \"blind\" exceptions other than those that were deliberately thrown to signal\n// errors to the client\nvar wrapInternalException = function (exception, context) {\n  if (!exception) return exception;\n\n  // To allow packages to throw errors intended for the client but not have to\n  // depend on the Meteor.Error class, `isClientSafe` can be set to true on any\n  // error before it is thrown.\n  if (exception.isClientSafe) {\n    if (!(exception instanceof Meteor.Error)) {\n      const originalMessage = exception.message;\n      exception = new Meteor.Error(exception.error, exception.reason, exception.details);\n      exception.message = originalMessage;\n    }\n    return exception;\n  }\n\n  // Tests can set the '_expectedByTest' flag on an exception so it won't go to\n  // the server log.\n  if (!exception._expectedByTest) {\n    Meteor._debug(\"Exception \" + context, exception);\n    if (exception.sanitizedError) {\n      Meteor._debug(\"Sanitized and reported to the client as:\", exception.sanitizedError);\n      Meteor._debug();\n    }\n  }\n\n  // Did the error contain more details that could have been useful if caught in\n  // server code (or if thrown from non-client-originated code), but also\n  // provided a \"sanitized\" version with more context than 500 Internal server\n  // error? Use that.\n  if (exception.sanitizedError) {\n    if (exception.sanitizedError.isClientSafe)\n      return exception.sanitizedError;\n    Meteor._debug(\"Exception \" + context + \" provides a sanitizedError that \" +\n                  \"does not have isClientSafe property set; ignoring\");\n  }\n\n  return new Meteor.Error(500, \"Internal server error\");\n};\n\n\n// Audit argument checks, if the audit-argument-checks package exists (it is a\n// weak dependency of this package).\nvar maybeAuditArgumentChecks = function (f, context, args, description) {\n  args = args || [];\n  if (Package['audit-argument-checks']) {\n    return Match._failIfArgumentsAreNotAllChecked(\n      f, context, args, description);\n  }\n  return f.apply(context, args);\n};\n"]},"sourceType":"script","hash":"f387078902b9ea896d1a5fa9efdcdb83156d6280"}
