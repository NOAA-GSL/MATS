{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/lib/plot_util.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/randyp:mats-common/lib/plot_util.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/lib/plot_util.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/lib/plot_util.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/randyp:mats-common/lib/plot_util.js"}},"code":"let matsCollections;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsCollections(v) {\n    matsCollections = v;\n  }\n\n}, 0);\nlet matsParamUtils;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsParamUtils(v) {\n    matsParamUtils = v;\n  }\n\n}, 1);\nlet matsTypes;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsTypes(v) {\n    matsTypes = v;\n  }\n\n}, 2);\n\n// determine the axisText (used in scatter_axis.js for example)\n// according to the Scatter Axis Text Patterns Pattern defined in\n// ScatterAxisTextPatterns according to plotType - and derived from\n// currently selected inputs in the document.\nconst getAxisText = function (plotType) {\n  var scatterAxisTextPattern = matsCollections.ScatterAxisTextPattern.findOne({\n    plotType: getPlotType()\n  });\n  var textPattern = scatterAxisTextPattern ? matsCollections.ScatterAxisTextPattern.findOne({\n    plotType: getPlotType()\n  }).textPattern : undefined;\n\n  if (scatterAxisTextPattern === undefined) {\n    return \"\";\n  }\n\n  var text = \"\";\n\n  for (var i = 0; i < scatterAxisTextPattern.length; i++) {\n    var pName = scatterAxisTextPattern[i][0];\n    var delimiter = scatterAxisTextPattern[i][1];\n    var value = matsParamUtils.getValueForParamName(pName);\n    text += value += delimiter;\n  }\n\n  return text;\n}; // determine the curveText (used in curveItem for example) for a given curve (from Session.get('curves'))\n// that has already been added\n\n\nconst getCurveText = function (plotType, curve) {\n  var curveTextPattern = matsCollections.CurveTextPatterns.findOne({\n    plotType: plotType\n  }).textPattern;\n  var text = \"\";\n\n  for (var i = 0; i < curveTextPattern.length; i++) {\n    var a = curveTextPattern[i];\n\n    if (a === undefined || a === null || curve[a[1]] === undefined) {\n      continue;\n    }\n\n    text += a[0];\n\n    if (curve[a[1]] instanceof Array && curve[a[1]].length > 2) {\n      text += curve[a[1]][0] + \"..\" + curve[a[1]][curve[a[1]].length - 1];\n    } else {\n      text += curve[a[1]];\n    }\n\n    text += a[2];\n  }\n\n  return text;\n}; // determine which plotType radio button is checked\n\n\nconst getPlotType = function () {\n  var buttons = document.getElementsByName('plot-type');\n\n  for (var i = 0, len = buttons.length; i < len; i++) {\n    if (buttons[i].checked) {\n      return buttons[i].value;\n    }\n  }\n\n  return \"\"; // error condition actually - shouldn't ever happen\n}; // determine which plotFormat radio button is checked\n\n\nconst getPlotFormat = function () {\n  var buttons = document.getElementsByName('plotFormat');\n\n  if (buttons === undefined) {\n    return \"\"; // app may not have plotFormat?\n  }\n\n  var plotFormatParam = matsCollections.PlotParams.findOne({\n    name: 'plotFormat'\n  });\n\n  if (plotFormatParam === undefined) {\n    return \"\"; // app may not have plotFormat?\n  }\n\n  var optionsMap = plotFormatParam.optionsMap;\n\n  for (var i = 0, len = buttons.length; i < len; i++) {\n    if (buttons[i].checked) {\n      return buttons[i].value;\n    }\n  }\n\n  return \"\"; // error condition actually - shouldn't ever happen\n}; // Determine which BestFit radio button is checked\n\n\nconst getBestFit = function () {\n  var buttons = document.getElementsByName('Fit Type');\n  var optionsMap = matsCollections.PlotParams.findOne({\n    name: 'bestFit'\n  }).optionsMap;\n\n  for (var i = 0, len = buttons.length; i < len; i++) {\n    if (buttons[i].checked) {\n      return buttons[i].value;\n    }\n  }\n\n  return \"\"; // error condition actually - shouldn't ever happen\n};\n\nconst containsPoint = function (pointArray, point) {\n  var lat = point[0];\n  var lon = point[1];\n\n  for (var i = 0; i < pointArray.length; i++) {\n    var pLat = pointArray[i][0];\n    var pLon = pointArray[i][1];\n\n    if (lat === pLat && lon === pLon) {\n      return true;\n    }\n  }\n\n  return false;\n}; // disable the action buttons while the query and plot routines are processing, then re-enable them afterwards\n\n\nconst disableActionButtons = function () {\n  document.getElementById('plotMatched').disabled = true;\n  document.getElementById('plotUnmatched').disabled = true;\n  document.getElementById('add').disabled = true;\n  document.getElementById('remove-all').disabled = true;\n};\n\nconst enableActionButtons = function () {\n  document.getElementById('plotMatched').disabled = false;\n  document.getElementById('plotUnmatched').disabled = false;\n  document.getElementById('add').disabled = false;\n  document.getElementById('remove-all').disabled = false;\n};\n\nmodule.exportDefault(matsPlotUtils = {\n  getAxisText: getAxisText,\n  getCurveText: getCurveText,\n  getPlotType: getPlotType,\n  getPlotFormat: getPlotFormat,\n  getBestFit: getBestFit,\n  containsPoint: containsPoint,\n  disableActionButtons: disableActionButtons,\n  enableActionButtons: enableActionButtons\n});","map":{"version":3,"sources":["packages/randyp:mats-common/lib/plot_util.js"],"names":["matsCollections","module","link","v","matsParamUtils","matsTypes","getAxisText","plotType","scatterAxisTextPattern","ScatterAxisTextPattern","findOne","getPlotType","textPattern","undefined","text","i","length","pName","delimiter","value","getValueForParamName","getCurveText","curve","curveTextPattern","CurveTextPatterns","a","Array","buttons","document","getElementsByName","len","checked","getPlotFormat","plotFormatParam","PlotParams","name","optionsMap","getBestFit","containsPoint","pointArray","point","lat","lon","pLat","pLon","disableActionButtons","getElementById","disabled","enableActionButtons","exportDefault","matsPlotUtils"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2019 Colorado State University and Regents of the University of Colorado. All rights reserved.\n */\n\nimport {matsCollections} from 'meteor/randyp:mats-common';\nimport {matsParamUtils} from 'meteor/randyp:mats-common';\nimport {matsTypes} from 'meteor/randyp:mats-common';\n\n// determine the axisText (used in scatter_axis.js for example)\n// according to the Scatter Axis Text Patterns Pattern defined in\n// ScatterAxisTextPatterns according to plotType - and derived from\n// currently selected inputs in the document.\nconst getAxisText = function (plotType) {\n    var scatterAxisTextPattern = matsCollections.ScatterAxisTextPattern.findOne({plotType: getPlotType()});\n    var textPattern = scatterAxisTextPattern ? matsCollections.ScatterAxisTextPattern.findOne({plotType: getPlotType()}).textPattern : undefined;\n    if (scatterAxisTextPattern === undefined) {\n        return \"\";\n    }\n    var text = \"\";\n    for (var i = 0; i < scatterAxisTextPattern.length; i++) {\n        var pName = scatterAxisTextPattern[i][0];\n        var delimiter = scatterAxisTextPattern[i][1];\n        var value = matsParamUtils.getValueForParamName(pName);\n        text += value += delimiter;\n    }\n    return text;\n};\n\n// determine the curveText (used in curveItem for example) for a given curve (from Session.get('curves'))\n// that has already been added\nconst getCurveText = function (plotType, curve) {\n    var curveTextPattern = matsCollections.CurveTextPatterns.findOne({plotType: plotType}).textPattern;\n    var text = \"\";\n\n    for (var i = 0; i < curveTextPattern.length; i++) {\n        var a = curveTextPattern[i];\n        if (a === undefined || a === null || curve[a[1]] === undefined) {\n            continue;\n        }\n        text += a[0];\n        if (curve[a[1]] instanceof Array && (curve[a[1]].length > 2)) {\n            text += curve[a[1]][0] + \"..\" + curve[a[1]][curve[a[1]].length - 1];\n        } else {\n            text += curve[a[1]];\n        }\n        text += a[2];\n    }\n    return text;\n};\n\n// determine which plotType radio button is checked\nconst getPlotType = function () {\n    var buttons = document.getElementsByName('plot-type');\n    for (var i = 0, len = buttons.length; i < len; i++) {\n        if (buttons[i].checked) {\n            return buttons[i].value;\n        }\n    }\n    return \"\";    // error condition actually - shouldn't ever happen\n};\n\n// determine which plotFormat radio button is checked\nconst getPlotFormat = function () {\n    var buttons = document.getElementsByName('plotFormat');\n    if (buttons === undefined) {\n        return \"\"; // app may not have plotFormat?\n    }\n    var plotFormatParam = matsCollections.PlotParams.findOne({name: 'plotFormat'});\n    if (plotFormatParam === undefined) {\n        return \"\"; // app may not have plotFormat?\n    }\n    var optionsMap = plotFormatParam.optionsMap;\n    for (var i = 0, len = buttons.length; i < len; i++) {\n        if (buttons[i].checked) {\n            return buttons[i].value;\n        }\n    }\n    return \"\";  // error condition actually - shouldn't ever happen\n};\n\n// Determine which BestFit radio button is checked\nconst getBestFit = function () {\n    var buttons = document.getElementsByName('Fit Type');\n    var optionsMap = matsCollections.PlotParams.findOne({name: 'bestFit'}).optionsMap;\n    for (var i = 0, len = buttons.length; i < len; i++) {\n        if (buttons[i].checked) {\n            return buttons[i].value;\n        }\n    }\n    return \"\";  // error condition actually - shouldn't ever happen\n};\n\nconst containsPoint = function (pointArray, point) {\n    var lat = point[0];\n    var lon = point[1];\n    for (var i = 0; i < pointArray.length; i++) {\n        var pLat = pointArray[i][0];\n        var pLon = pointArray[i][1];\n        if (lat === pLat && lon === pLon) {\n            return true\n        }\n    }\n    return false;\n};\n\n// disable the action buttons while the query and plot routines are processing, then re-enable them afterwards\nconst disableActionButtons = function () {\n    document.getElementById('plotMatched').disabled = true;\n    document.getElementById('plotUnmatched').disabled = true;\n    document.getElementById('add').disabled = true;\n    document.getElementById('remove-all').disabled = true;\n};\nconst enableActionButtons = function () {\n    document.getElementById('plotMatched').disabled = false;\n    document.getElementById('plotUnmatched').disabled = false;\n    document.getElementById('add').disabled = false;\n    document.getElementById('remove-all').disabled = false;\n};\n\nexport default matsPlotUtils = {\n    getAxisText: getAxisText,\n    getCurveText: getCurveText,\n    getPlotType: getPlotType,\n    getPlotFormat: getPlotFormat,\n    getBestFit: getBestFit,\n    containsPoint: containsPoint,\n    disableActionButtons: disableActionButtons,\n    enableActionButtons: enableActionButtons\n};"]},"sourceType":"script","hash":"b97fbaee311a8360e4a69bec43d0dc8fb63df27d"}
