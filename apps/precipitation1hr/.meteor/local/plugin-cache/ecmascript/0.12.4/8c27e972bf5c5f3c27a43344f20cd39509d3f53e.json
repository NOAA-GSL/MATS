{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/server/main.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"server/main.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/server/main.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/server/main.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/main.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet mysql;\nmodule.link(\"meteor/pcel:mysql\", {\n  mysql(v) {\n    mysql = v;\n  }\n\n}, 1);\nlet matsTypes;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsTypes(v) {\n    matsTypes = v;\n  }\n\n}, 2);\nlet matsCollections;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsCollections(v) {\n    matsCollections = v;\n  }\n\n}, 3);\nlet matsDataUtils;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsDataUtils(v) {\n    matsDataUtils = v;\n  }\n\n}, 4);\nlet matsDataQueryUtils;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsDataQueryUtils(v) {\n    matsDataQueryUtils = v;\n  }\n\n}, 5);\nlet matsParamUtils;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsParamUtils(v) {\n    matsParamUtils = v;\n  }\n\n}, 6);\n// determined in doCurveParanms\nvar minDate;\nvar maxDate;\nvar dstr;\n\nconst doPlotParams = function () {\n  if (matsCollections.Settings.findOne({}) === undefined || matsCollections.Settings.findOne({}).resetFromCode === undefined || matsCollections.Settings.findOne({}).resetFromCode == true) {\n    matsCollections.PlotParams.remove({});\n  }\n\n  if (matsCollections.PlotParams.find().count() == 0) {\n    matsCollections.PlotParams.insert({\n      name: 'dates',\n      type: matsTypes.InputTypes.dateRange,\n      options: [''],\n      startDate: minDate,\n      stopDate: maxDate,\n      superiorNames: ['data-source'],\n      controlButtonCovered: true,\n      default: dstr,\n      controlButtonVisibility: 'block',\n      displayOrder: 1,\n      displayPriority: 1,\n      displayGroup: 1,\n      help: \"dateHelp.html\"\n    });\n    var plotFormats = {};\n    plotFormats[matsTypes.PlotFormats.matching] = 'show matching diffs';\n    plotFormats[matsTypes.PlotFormats.pairwise] = 'pairwise diffs';\n    plotFormats[matsTypes.PlotFormats.none] = 'no diffs';\n    matsCollections.PlotParams.insert({\n      name: 'plotFormat',\n      type: matsTypes.InputTypes.radioGroup,\n      optionsMap: plotFormats,\n      options: [matsTypes.PlotFormats.matching, matsTypes.PlotFormats.pairwise, matsTypes.PlotFormats.none],\n      default: matsTypes.PlotFormats.none,\n      controlButtonCovered: false,\n      controlButtonVisibility: 'block',\n      displayOrder: 1,\n      displayPriority: 1,\n      displayGroup: 3\n    });\n    var yAxisOptionsMap = {\n      \"Number\": [\"number\"],\n      \"Relative frequency\": [\"relFreq\"]\n    };\n    matsCollections.PlotParams.insert({\n      name: 'histogram-yaxis-controls',\n      type: matsTypes.InputTypes.select,\n      optionsMap: yAxisOptionsMap,\n      options: Object.keys(yAxisOptionsMap),\n      default: Object.keys(yAxisOptionsMap)[0],\n      controlButtonCovered: true,\n      controlButtonText: 'Y-axis mode',\n      displayOrder: 1,\n      displayPriority: 1,\n      displayGroup: 2\n    });\n    var binOptionsMap = {\n      \"Default bins\": [\"default\"],\n      \"Set number of bins\": [\"binNumber\"],\n      \"Make zero a bin bound\": [\"zeroBound\"],\n      \"Choose a bin bound\": [\"chooseBound\"],\n      \"Set number of bins and make zero a bin bound\": [\"binNumberWithZero\"],\n      \"Set number of bins and choose a bin bound\": [\"binNumberWithChosen\"],\n      \"Manual bins\": [\"manual\"],\n      \"Manual bin start, number, and stride\": [\"manualStride\"]\n    };\n    matsCollections.PlotParams.insert({\n      name: 'histogram-bin-controls',\n      type: matsTypes.InputTypes.select,\n      optionsMap: binOptionsMap,\n      options: Object.keys(binOptionsMap),\n      hideOtherFor: {\n        'bin-number': [\"Default bins\", \"Make zero a bin bound\", \"Manual bins\", \"Choose a bin bound\"],\n        'bin-pivot': [\"Default bins\", \"Set number of bins\", \"Make zero a bin bound\", \"Set number of bins and make zero a bin bound\", \"Manual bins\", \"Manual bin start, number, and stride\"],\n        'bin-start': [\"Default bins\", \"Set number of bins\", \"Make zero a bin bound\", \"Choose a bin bound\", \"Set number of bins and make zero a bin bound\", \"Set number of bins and choose a bin bound\", \"Manual bins\"],\n        'bin-stride': [\"Default bins\", \"Set number of bins\", \"Make zero a bin bound\", \"Choose a bin bound\", \"Set number of bins and make zero a bin bound\", \"Set number of bins and choose a bin bound\", \"Manual bins\"],\n        'bin-bounds': [\"Default bins\", \"Set number of bins\", \"Make zero a bin bound\", \"Choose a bin bound\", \"Set number of bins and make zero a bin bound\", \"Set number of bins and choose a bin bound\", \"Manual bin start, number, and stride\"]\n      },\n      default: Object.keys(binOptionsMap)[0],\n      controlButtonCovered: true,\n      controlButtonText: 'customize bins',\n      displayOrder: 2,\n      displayPriority: 1,\n      displayGroup: 2\n    });\n    matsCollections.PlotParams.insert({\n      name: 'bin-number',\n      type: matsTypes.InputTypes.numberSpinner,\n      optionsMap: {},\n      options: [],\n      // convenience\n      min: '2',\n      max: '100',\n      step: 'any',\n      default: '12',\n      controlButtonCovered: true,\n      controlButtonText: \"number of bins\",\n      displayOrder: 3,\n      displayPriority: 1,\n      displayGroup: 2\n    });\n    matsCollections.PlotParams.insert({\n      name: 'bin-pivot',\n      type: matsTypes.InputTypes.numberSpinner,\n      optionsMap: {},\n      options: [],\n      // convenience\n      min: '-10000',\n      max: '10000',\n      step: 'any',\n      default: '0',\n      controlButtonCovered: true,\n      controlButtonText: \"bin pivot value\",\n      displayOrder: 4,\n      displayPriority: 1,\n      displayGroup: 2\n    });\n    matsCollections.PlotParams.insert({\n      name: 'bin-start',\n      type: matsTypes.InputTypes.numberSpinner,\n      optionsMap: {},\n      options: [],\n      // convenience\n      min: '-10000',\n      max: '10000',\n      step: 'any',\n      default: '0',\n      controlButtonCovered: true,\n      controlButtonText: \"bin start\",\n      displayOrder: 5,\n      displayPriority: 1,\n      displayGroup: 2\n    });\n    matsCollections.PlotParams.insert({\n      name: 'bin-stride',\n      type: matsTypes.InputTypes.numberSpinner,\n      optionsMap: {},\n      options: [],\n      // convenience\n      min: '-10000',\n      max: '10000',\n      step: 'any',\n      default: '0',\n      controlButtonCovered: true,\n      controlButtonText: \"bin stride\",\n      displayOrder: 6,\n      displayPriority: 1,\n      displayGroup: 2\n    });\n    matsCollections.PlotParams.insert({\n      name: 'bin-bounds',\n      type: matsTypes.InputTypes.textInput,\n      optionsMap: {},\n      options: [],\n      // convenience\n      default: ' ',\n      controlButtonCovered: true,\n      controlButtonText: \"bin bounds (enter numbers separated by commas)\",\n      displayOrder: 7,\n      displayPriority: 1,\n      displayGroup: 2\n    });\n  } else {\n    // need to update the dates selector if the metadata has changed\n    var currentParam = matsCollections.PlotParams.findOne({\n      name: 'dates'\n    });\n\n    if (!matsDataUtils.areObjectsEqual(currentParam.startDate, minDate) || !matsDataUtils.areObjectsEqual(currentParam.stopDate, maxDate) || !matsDataUtils.areObjectsEqual(currentParam.default, dstr)) {\n      // have to reload model data\n      matsCollections.PlotParams.update({\n        name: 'dates'\n      }, {\n        $set: {\n          startDate: minDate,\n          stopDate: maxDate,\n          default: dstr\n        }\n      });\n    }\n  }\n};\n\nconst doCurveParams = function () {\n  if (matsCollections.Settings.findOne({}) === undefined || matsCollections.Settings.findOne({}).resetFromCode === undefined || matsCollections.Settings.findOne({}).resetFromCode == true) {\n    matsCollections.CurveParams.remove({});\n  }\n\n  var modelOptionsMap = {};\n  var modelDateRangeMap = {};\n  var regionModelOptionsMap = {};\n  var forecastLengthOptionsMap = {};\n  var thresholdsModelOptionsMap = {};\n  var scaleModelOptionsMap = {};\n  var sourceOptionsMap = {};\n  var masterRegionValuesMap = {};\n  var masterThresholdValuesMap = {};\n  var masterScaleValuesMap = {};\n\n  try {\n    const rows = matsDataQueryUtils.simplePoolQueryWrapSynchronous(metadataPool, \"SELECT short_name,description FROM region_descriptions;\");\n    var masterRegDescription;\n    var masterShortName;\n\n    for (var j = 0; j < rows.length; j++) {\n      masterRegDescription = rows[j].description.trim();\n      masterShortName = rows[j].short_name.trim();\n      masterRegionValuesMap[masterShortName] = masterRegDescription;\n    }\n  } catch (err) {\n    console.log(err.message);\n  }\n\n  try {\n    const rows = matsDataQueryUtils.simplePoolQueryWrapSynchronous(sumPool, \"SELECT trsh,description FROM threshold_descriptions;\");\n    var masterDescription;\n    var masterTrsh;\n\n    for (var j = 0; j < rows.length; j++) {\n      masterDescription = rows[j].description.trim();\n      masterTrsh = rows[j].trsh.trim();\n      masterThresholdValuesMap[masterTrsh] = masterDescription;\n    }\n  } catch (err) {\n    console.log(err.message);\n  }\n\n  try {\n    const rows = matsDataQueryUtils.simplePoolQueryWrapSynchronous(sumPool, \"SELECT scle,description FROM scale_descriptions;\");\n    var masterScaleDescription;\n    var masterScale;\n\n    for (var j = 0; j < rows.length; j++) {\n      masterScaleDescription = rows[j].description.trim();\n      masterScale = rows[j].scle.trim();\n      masterScaleValuesMap[masterScale] = masterScaleDescription;\n    }\n  } catch (err) {\n    console.log(err.message);\n  }\n\n  try {\n    const rows = matsDataQueryUtils.simplePoolQueryWrapSynchronous(sumPool, \"select model,regions,sources,display_text,fcst_lens,trsh,mindate,maxdate from regions_per_model_mats_all_categories order by display_category, display_order;\");\n\n    for (var i = 0; i < rows.length; i++) {\n      var model_value = rows[i].model.trim();\n      var model = rows[i].display_text.trim();\n      modelOptionsMap[model] = [model_value];\n      var rowMinDate = moment.utc(rows[i].mindate * 1000).format(\"MM/DD/YYYY HH:mm\");\n      var rowMaxDate = moment.utc(rows[i].maxdate * 1000).format(\"MM/DD/YYYY HH:mm\");\n      modelDateRangeMap[model] = {\n        minDate: rowMinDate,\n        maxDate: rowMaxDate\n      };\n      var sources = rows[i].sources;\n      var sourceArr = sources.split(',').map(Function.prototype.call, String.prototype.trim);\n\n      for (var j = 0; j < sourceArr.length; j++) {\n        sourceArr[j] = sourceArr[j].replace(/'|\\[|\\]/g, \"\");\n      }\n\n      sourceOptionsMap[model] = sourceArr;\n      var forecastLengths = rows[i].fcst_lens;\n      var forecastLengthArr = forecastLengths.split(',').map(Function.prototype.call, String.prototype.trim);\n\n      for (var j = 0; j < forecastLengthArr.length; j++) {\n        forecastLengthArr[j] = forecastLengthArr[j].replace(/'|\\[|\\]/g, \"\");\n      }\n\n      forecastLengthOptionsMap[model] = forecastLengthArr;\n      var thresholds = rows[i].trsh;\n      var thresholdsArrRaw = thresholds.split(',').map(Function.prototype.call, String.prototype.trim);\n      var thresholdsArr = [];\n      var dummyThresh;\n\n      for (var j = 0; j < thresholdsArrRaw.length; j++) {\n        dummyThresh = thresholdsArrRaw[j].replace(/'|\\[|\\]/g, \"\");\n        thresholdsArr.push(masterThresholdValuesMap[dummyThresh]);\n      }\n\n      thresholdsModelOptionsMap[model] = thresholdsArr;\n      var regions = rows[i].regions;\n      var regionsArrRaw = regions.split(',').map(Function.prototype.call, String.prototype.trim);\n      var regionsArr = [];\n      var dummyRegion;\n\n      for (var j = 0; j < regionsArrRaw.length; j++) {\n        dummyRegion = regionsArrRaw[j].replace(/'|\\[|\\]/g, \"\");\n        regionsArr.push(masterRegionValuesMap[dummyRegion]);\n      }\n\n      regionModelOptionsMap[model] = regionsArr;\n      var scales = rows[i].scle;\n      var scalesArrRaw = scales.split(',').map(Function.prototype.call, String.prototype.trim);\n      var scalesArr = [];\n      var dummyScale;\n\n      for (var j = 0; j < scalesArrRaw.length; j++) {\n        dummyScale = scalesArrRaw[j].replace(/'|\\[|\\]/g, \"\");\n        scalesArr.push(masterScaleValuesMap[dummyScale]);\n      }\n\n      scaleModelOptionsMap[model] = scalesArr;\n    }\n  } catch (err) {\n    console.log(err.message);\n  }\n\n  if (matsCollections.CurveParams.find({\n    name: 'label'\n  }).count() == 0) {\n    matsCollections.CurveParams.insert({\n      name: 'label',\n      type: matsTypes.InputTypes.textInput,\n      optionsMap: {},\n      options: [],\n      // convenience\n      controlButtonCovered: true,\n      default: '',\n      unique: true,\n      controlButtonVisibility: 'block',\n      displayOrder: 1,\n      displayPriority: 1,\n      displayGroup: 1,\n      help: 'label.html'\n    });\n  }\n\n  if (matsCollections.CurveParams.find({\n    name: 'data-source'\n  }).count() == 0) {\n    matsCollections.CurveParams.insert({\n      name: 'data-source',\n      type: matsTypes.InputTypes.select,\n      optionsMap: modelOptionsMap,\n      dates: modelDateRangeMap,\n      options: Object.keys(modelOptionsMap),\n      // convenience\n      dependentNames: [\"region\", \"forecast-length\", \"threshold\", \"scale\", \"truth\", \"dates\", \"curve-dates\"],\n      controlButtonCovered: true,\n      default: Object.keys(modelOptionsMap)[0],\n      unique: false,\n      controlButtonVisibility: 'block',\n      displayOrder: 2,\n      displayPriority: 1,\n      displayGroup: 1\n    });\n  } else {\n    // it is defined but check for necessary update\n    var currentParam = matsCollections.CurveParams.findOne({\n      name: 'data-source'\n    });\n\n    if (!matsDataUtils.areObjectsEqual(currentParam.optionsMap, modelOptionsMap) || !matsDataUtils.areObjectsEqual(currentParam.dates, modelDateRangeMap)) {\n      // have to reload model data\n      matsCollections.CurveParams.update({\n        name: 'data-source'\n      }, {\n        $set: {\n          optionsMap: modelOptionsMap,\n          dates: modelDateRangeMap,\n          options: Object.keys(modelOptionsMap),\n          default: Object.keys(modelOptionsMap)[0]\n        }\n      });\n    }\n  }\n\n  if (matsCollections.CurveParams.find({\n    name: 'region'\n  }).count() == 0) {\n    matsCollections.CurveParams.insert({\n      name: 'region',\n      type: matsTypes.InputTypes.select,\n      optionsMap: regionModelOptionsMap,\n      options: regionModelOptionsMap[Object.keys(regionModelOptionsMap)[0]],\n      // convenience\n      valuesMap: masterRegionValuesMap,\n      superiorNames: ['data-source'],\n      controlButtonCovered: true,\n      unique: false,\n      default: regionModelOptionsMap[Object.keys(regionModelOptionsMap)[0]][0],\n      controlButtonVisibility: 'block',\n      displayOrder: 3,\n      displayPriority: 1,\n      displayGroup: 1\n    });\n  } else {\n    // it is defined but check for necessary update\n    var currentParam = matsCollections.CurveParams.findOne({\n      name: 'region'\n    });\n\n    if (!matsDataUtils.areObjectsEqual(currentParam.optionsMap, regionModelOptionsMap) || !matsDataUtils.areObjectsEqual(currentParam.valuesMap, masterRegionValuesMap)) {\n      // have to reload model data\n      matsCollections.CurveParams.update({\n        name: 'region'\n      }, {\n        $set: {\n          optionsMap: regionModelOptionsMap,\n          valuesMap: masterRegionValuesMap,\n          options: regionModelOptionsMap[Object.keys(regionModelOptionsMap)[0]],\n          default: regionModelOptionsMap[Object.keys(regionModelOptionsMap)[0]][0]\n        }\n      });\n    }\n  }\n\n  if (matsCollections.CurveParams.find({\n    name: 'statistic'\n  }).count() == 0) {\n    var optionsMap = {\n      'TSS (True Skill Score)': ['((sum(m0.hit)*sum(m0.cn) - sum(m0.fa)*sum(m0.miss))/((sum(m0.hit)+sum(m0.miss))*(sum(m0.fa)+sum(m0.cn)))) * 100 as stat, group_concat(((m0.hit*m0.cn - m0.fa*m0.miss)/((m0.hit+m0.miss)*(m0.fa+m0.cn))) * 100, \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.hit) as N0', 'x100', 100],\n      'PODy (POD of precip > threshold)': ['((sum(m0.hit)+0.00)/sum(m0.hit+m0.miss)) * 100 as stat, group_concat(((m0.hit)/(m0.hit+m0.miss)) * 100, \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.hit) as N0', 'x100', 100],\n      'PODn (POD of precip < threshold)': ['((sum(m0.cn)+0.00)/sum(m0.cn+m0.fa)) * 100 as stat, group_concat(((m0.cn)/(m0.cn+m0.fa)) * 100, \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.hit) as N0', 'x100', 100],\n      'FAR (False Alarm Ratio)': ['((sum(m0.fa)+0.00)/sum(m0.fa+m0.hit)) * 100 as stat, group_concat(((m0.fa)/(m0.fa+m0.hit)) * 100, \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.hit) as N0', 'x100', 0],\n      'Bias (forecast/actual)': ['((sum(m0.hit+m0.fa)+0.00)/sum(m0.hit+m0.miss)) as stat, group_concat(((m0.hit+m0.fa)/(m0.hit+m0.miss)), \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.hit) as N0', 'Ratio', 1],\n      'CSI (Critical Success Index)': ['((sum(m0.hit)+0.00)/sum(m0.hit+m0.miss+m0.fa)) * 100 as stat, group_concat(((m0.hit)/(m0.hit+m0.miss+m0.fa)) * 100, \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.hit) as N0', 'x100', 100],\n      'HSS (Heidke Skill Score)': ['(2*(sum(m0.cn+0.00)*sum(m0.hit)-sum(m0.miss)*sum(m0.fa))/((sum(m0.cn+0.00)+sum(m0.fa))*(sum(m0.fa)+sum(m0.hit))+(sum(m0.cn+0.00)+sum(m0.miss))*(sum(m0.miss)+sum(m0.hit)))) * 100 as stat, group_concat((2*(m0.cn*m0.hit - m0.miss*m0.fa) / ((m0.cn+m0.fa)*(m0.fa+m0.hit) + (m0.cn+m0.miss)*(m0.miss+m0.hit))) * 100, \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.hit) as N0', 'x100', 100],\n      'ETS (Equitable Threat Score)': ['(sum(m0.hit)-(sum(m0.hit+m0.fa)*sum(m0.hit+m0.miss)/sum(m0.hit+m0.fa+m0.miss+m0.cn)))/(sum(m0.hit+m0.fa+m0.miss)-(sum(m0.hit+m0.fa)*sum(m0.hit+m0.miss)/sum(m0.hit+m0.fa+m0.miss+m0.cn))) * 100 as stat, group_concat((m0.hit-((m0.hit+m0.fa)*(m0.hit+m0.miss)/(m0.hit+m0.fa+m0.miss+m0.cn)))/((m0.hit+m0.fa+m0.miss)-((m0.hit+m0.fa)*(m0.hit+m0.miss)/(m0.hit+m0.fa+m0.miss+m0.cn))) * 100, \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.hit) as N0', 'x100', 100],\n      'Nlow (obs < threshold, avg per hr)': ['avg(m0.cn+m0.fa+0.000) as stat, group_concat((m0.cn+m0.fa), \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.cn) as N0', 'Number', null],\n      'Nhigh (obs > threshold, avg per hr)': ['avg(m0.hit+m0.miss+0.000) as stat, group_concat((m0.hit+m0.miss), \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.hit) as N0', 'Number', null],\n      'Ntot (total obs, avg per hr)': ['avg(m0.hit+m0.fa+m0.miss+m0.cn+0.000) as stat, group_concat((m0.hit+m0.fa+m0.miss+m0.cn), \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.hit) as N0', 'Number', null],\n      'Ratio (Nlow / Ntot)': ['(sum(m0.cn+m0.fa+0.000)/sum(m0.hit+m0.fa+m0.miss+m0.cn+0.000)) as stat, group_concat(((m0.cn+m0.fa)/(m0.hit+m0.fa+m0.miss+m0.cn)), \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.cn) as N0', 'Ratio', null],\n      'Ratio (Nhigh / Ntot)': ['(sum(m0.hit+m0.miss+0.000)/sum(m0.hit+m0.fa+m0.miss+m0.cn+0.000)) as stat, group_concat(((m0.hit+m0.miss)/(m0.hit+m0.fa+m0.miss+m0.cn)), \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.hit) as N0', 'Ratio', null],\n      'N in average (to nearest 100)': ['sum(m0.hit+m0.miss+m0.fa+m0.cn+0.000) as stat, group_concat((m0.hit+m0.miss+m0.fa+m0.cn), \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.hit) as N0', 'Number', null]\n    };\n    matsCollections.CurveParams.insert({\n      name: 'statistic',\n      type: matsTypes.InputTypes.select,\n      optionsMap: optionsMap,\n      options: Object.keys(optionsMap),\n      // convenience\n      controlButtonCovered: true,\n      unique: false,\n      default: Object.keys(optionsMap)[0],\n      controlButtonVisibility: 'block',\n      displayOrder: 1,\n      displayPriority: 1,\n      displayGroup: 2\n    });\n  }\n\n  if (matsCollections.CurveParams.find({\n    name: 'threshold'\n  }).count() == 0) {\n    matsCollections.CurveParams.insert({\n      name: 'threshold',\n      type: matsTypes.InputTypes.select,\n      optionsMap: thresholdsModelOptionsMap,\n      options: thresholdsModelOptionsMap[Object.keys(thresholdsModelOptionsMap)[0]],\n      // convenience\n      valuesMap: masterThresholdValuesMap,\n      superiorNames: ['data-source'],\n      controlButtonCovered: true,\n      unique: false,\n      default: thresholdsModelOptionsMap[Object.keys(thresholdsModelOptionsMap)[0]][0],\n      controlButtonVisibility: 'block',\n      displayOrder: 2,\n      displayPriority: 1,\n      displayGroup: 2\n    });\n  } else {\n    // it is defined but check for necessary update\n    var currentParam = matsCollections.CurveParams.findOne({\n      name: 'threshold'\n    });\n\n    if (!matsDataUtils.areObjectsEqual(currentParam.optionsMap, thresholdsModelOptionsMap) || !matsDataUtils.areObjectsEqual(currentParam.valuesMap, masterThresholdValuesMap)) {\n      // have to reload model data\n      matsCollections.CurveParams.update({\n        name: 'threshold'\n      }, {\n        $set: {\n          optionsMap: thresholdsModelOptionsMap,\n          valuesMap: masterThresholdValuesMap,\n          options: thresholdsModelOptionsMap[Object.keys(thresholdsModelOptionsMap)[0]],\n          default: thresholdsModelOptionsMap[Object.keys(thresholdsModelOptionsMap)[0]][0]\n        }\n      });\n    }\n  }\n\n  if (matsCollections.CurveParams.find({\n    name: 'average'\n  }).count() == 0) {\n    optionsMap = {\n      'None': ['m0.valid_time'],\n      '3hr': ['ceil(10800*floor(m0.valid_time/10800)+10800/2)'],\n      '6hr': ['ceil(21600*floor(m0.valid_time/21600)+21600/2)'],\n      '12hr': ['ceil(43200*floor(m0.valid_time/43200)+43200/2)'],\n      '1D': ['ceil(86400*floor(m0.valid_time/86400)+86400/2)'],\n      '3D': ['ceil(259200*floor(m0.valid_time/259200)+259200/2)'],\n      '7D': ['ceil(604800*floor(m0.valid_time/604800)+604800/2)'],\n      '30D': ['ceil(2592000*floor(m0.valid_time/2592000)+2592000/2)'],\n      '60D': ['ceil(5184000*floor(m0.valid_time/5184000)+5184000/2)']\n    };\n    matsCollections.CurveParams.insert({\n      name: 'average',\n      type: matsTypes.InputTypes.select,\n      optionsMap: optionsMap,\n      options: Object.keys(optionsMap),\n      // convenience\n      controlButtonCovered: true,\n      unique: false,\n      selected: 'None',\n      default: 'None',\n      controlButtonVisibility: 'block',\n      displayOrder: 1,\n      displayPriority: 1,\n      displayGroup: 3\n    });\n  }\n\n  if (matsCollections.CurveParams.find({\n    name: 'forecast-length'\n  }).count() == 0) {\n    matsCollections.CurveParams.insert({\n      name: 'forecast-length',\n      type: matsTypes.InputTypes.select,\n      optionsMap: forecastLengthOptionsMap,\n      options: forecastLengthOptionsMap[Object.keys(forecastLengthOptionsMap)[0]],\n      // convenience\n      superiorNames: ['data-source'],\n      selected: '',\n      controlButtonCovered: true,\n      unique: false,\n      default: 6,\n      controlButtonVisibility: 'block',\n      controlButtonText: \"forecast lead time\",\n      displayOrder: 2,\n      displayPriority: 1,\n      displayGroup: 3\n    });\n  } else {\n    // it is defined but check for necessary update\n    var currentParam = matsCollections.CurveParams.findOne({\n      name: 'forecast-length'\n    });\n\n    if (!matsDataUtils.areObjectsEqual(currentParam.optionsMap, forecastLengthOptionsMap)) {\n      // have to reload model data\n      matsCollections.CurveParams.update({\n        name: 'forecast-length'\n      }, {\n        $set: {\n          optionsMap: forecastLengthOptionsMap,\n          options: forecastLengthOptionsMap[Object.keys(forecastLengthOptionsMap)[0]]\n        }\n      });\n    }\n  }\n\n  if (matsCollections.CurveParams.find({\n    name: 'dieoff-type'\n  }).count() == 0) {\n    var dieoffOptionsMap = {\n      \"Dieoff\": [matsTypes.ForecastTypes.dieoff],\n      \"Dieoff for a specified UTC cycle init hour\": [matsTypes.ForecastTypes.utcCycle],\n      \"Single cycle forecast (uses first date in range)\": [matsTypes.ForecastTypes.singleCycle]\n    };\n    matsCollections.CurveParams.insert({\n      name: 'dieoff-type',\n      type: matsTypes.InputTypes.select,\n      optionsMap: dieoffOptionsMap,\n      options: Object.keys(dieoffOptionsMap),\n      hideOtherFor: {\n        'valid-time': [\"Dieoff for a specified UTC cycle init hour\", \"Single cycle forecast (uses first date in range)\"],\n        'utc-cycle-start': [\"Dieoff\", \"Single cycle forecast (uses first date in range)\"]\n      },\n      selected: '',\n      controlButtonCovered: true,\n      unique: false,\n      default: Object.keys(dieoffOptionsMap)[0],\n      controlButtonVisibility: 'block',\n      controlButtonText: 'dieoff type',\n      displayOrder: 2,\n      displayPriority: 1,\n      displayGroup: 3\n    });\n  }\n\n  if (matsCollections.CurveParams.find({\n    name: 'valid-time'\n  }).count() == 0) {\n    matsCollections.CurveParams.insert({\n      name: 'valid-time',\n      type: matsTypes.InputTypes.select,\n      options: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23'],\n      selected: [],\n      controlButtonCovered: true,\n      unique: false,\n      default: matsTypes.InputTypes.unused,\n      controlButtonVisibility: 'block',\n      controlButtonText: \"valid utc hour\",\n      displayOrder: 3,\n      displayPriority: 1,\n      displayGroup: 3,\n      multiple: true\n    });\n  }\n\n  if (matsCollections.CurveParams.find({\n    name: 'utc-cycle-start'\n  }).count() == 0) {\n    const optionsArr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23'];\n    matsCollections.CurveParams.insert({\n      name: 'utc-cycle-start',\n      type: matsTypes.InputTypes.select,\n      options: optionsArr,\n      selected: '',\n      controlButtonCovered: true,\n      unique: false,\n      default: optionsArr[12],\n      controlButtonVisibility: 'block',\n      controlButtonText: \"utc cycle init hour\",\n      displayOrder: 3,\n      displayPriority: 1,\n      displayGroup: 3\n    });\n  }\n\n  if (matsCollections.CurveParams.find({\n    name: 'truth'\n  }).count() == 0) {\n    matsCollections.CurveParams.insert({\n      name: 'truth',\n      type: matsTypes.InputTypes.select,\n      optionsMap: sourceOptionsMap,\n      options: sourceOptionsMap[Object.keys(sourceOptionsMap)[0]],\n      superiorNames: ['data-source'],\n      controlButtonCovered: true,\n      unique: false,\n      default: sourceOptionsMap[Object.keys(sourceOptionsMap)[0]][0],\n      controlButtonVisibility: 'block',\n      displayOrder: 1,\n      displayPriority: 1,\n      displayGroup: 4\n    });\n  } else {\n    // it is defined but check for necessary update\n    var currentParam = matsCollections.CurveParams.findOne({\n      name: 'truth'\n    });\n\n    if (!matsDataUtils.areObjectsEqual(currentParam.optionsMap, sourceOptionsMap)) {\n      // have to reload model data\n      matsCollections.CurveParams.update({\n        name: 'truth'\n      }, {\n        $set: {\n          optionsMap: sourceOptionsMap,\n          options: sourceOptionsMap[Object.keys(sourceOptionsMap)[0]],\n          default: sourceOptionsMap[Object.keys(sourceOptionsMap)[0]][0]\n        }\n      });\n    }\n  }\n\n  if (matsCollections.CurveParams.find({\n    name: 'scale'\n  }).count() == 0) {\n    matsCollections.CurveParams.insert({\n      // bias and model average are a different formula for wind (element 0 differs from element 1)\n      // but stays the same (element 0 and element 1 are the same) otherwise.\n      // When plotting profiles we append element 2 to whichever element was chosen (for wind variable). For\n      // time series we never append element 2. Element 3 is used to give us error values for error bars.\n      name: 'scale',\n      type: matsTypes.InputTypes.select,\n      optionsMap: scaleModelOptionsMap,\n      options: scaleModelOptionsMap[Object.keys(scaleModelOptionsMap)[0]],\n      // convenience\n      valuesMap: masterScaleValuesMap,\n      superiorNames: ['data-source'],\n      controlButtonCovered: true,\n      unique: false,\n      default: scaleModelOptionsMap[Object.keys(scaleModelOptionsMap)[0]][0],\n      controlButtonVisibility: 'block',\n      displayOrder: 3,\n      displayPriority: 1,\n      displayGroup: 3\n    });\n  } else {\n    // it is defined but check for necessary update\n    var currentParam = matsCollections.CurveParams.findOne({\n      name: 'scale'\n    });\n\n    if (!matsDataUtils.areObjectsEqual(currentParam.optionsMap, scaleModelOptionsMap) || !matsDataUtils.areObjectsEqual(currentParam.valuesMap, masterScaleValuesMap)) {\n      // have to reload model data\n      matsCollections.CurveParams.update({\n        name: 'scale'\n      }, {\n        $set: {\n          optionsMap: scaleModelOptionsMap,\n          valuesMap: masterScaleValuesMap,\n          options: scaleModelOptionsMap[Object.keys(scaleModelOptionsMap)[0]],\n          default: scaleModelOptionsMap[Object.keys(scaleModelOptionsMap)[0]][0]\n        }\n      });\n    }\n  }\n\n  if (matsCollections.CurveParams.find({\n    name: 'x-axis-parameter'\n  }).count() == 0) {\n    const optionsMap = {\n      'Fcst lead time': \"select m0.fcst_len as xVal, \",\n      'Threshold': \"select m0.thresh/100 as xVal, \",\n      'Valid UTC hour': \"select m0.valid_time%(24*3600)/3600 as xVal, \",\n      'Init UTC hour': \"select (m0.valid_time-m0.fcst_len*3600)%(24*3600)/3600 as xVal, \",\n      'Valid Date': \"select m0.valid_time as xVal, \",\n      'Init Date': \"select m0.valid_time-m0.fcst_len*3600 as xVal, \"\n    };\n    matsCollections.CurveParams.insert({\n      name: 'x-axis-parameter',\n      type: matsTypes.InputTypes.select,\n      options: Object.keys(optionsMap),\n      optionsMap: optionsMap,\n      // hideOtherFor: {\n      //     'forecast-length': [\"Fcst lead time\"],\n      //     'valid-time': [\"Valid UTC hour\"],\n      //     'pres-level': [\"Pressure level\"],\n      // },\n      selected: '',\n      controlButtonCovered: true,\n      unique: false,\n      default: Object.keys(optionsMap)[2],\n      controlButtonVisibility: 'block',\n      displayOrder: 1,\n      displayPriority: 1,\n      displayGroup: 5\n    });\n  }\n\n  if (matsCollections.CurveParams.find({\n    name: 'y-axis-parameter'\n  }).count() == 0) {\n    const optionsMap = {\n      'Fcst lead time': \"m0.fcst_len as yVal, \",\n      'Threshold': \"m0.thresh/100 as yVal, \",\n      'Valid UTC hour': \"m0.valid_time%(24*3600)/3600 as yVal, \",\n      'Init UTC hour': \"(m0.valid_time-m0.fcst_len*3600)%(24*3600)/3600 as yVal, \",\n      'Valid Date': \"m0.valid_time as yVal, \",\n      'Init Date': \"m0.valid_time-m0.fcst_len*3600 as yVal, \"\n    };\n    matsCollections.CurveParams.insert({\n      name: 'y-axis-parameter',\n      type: matsTypes.InputTypes.select,\n      options: Object.keys(optionsMap),\n      optionsMap: optionsMap,\n      // hideOtherFor: {\n      //     'forecast-length': [\"Fcst lead time\"],\n      //     'valid-time': [\"Valid UTC hour\"],\n      //     'pres-level': [\"Pressure level\"],\n      // },\n      selected: '',\n      controlButtonCovered: true,\n      unique: false,\n      default: Object.keys(optionsMap)[0],\n      controlButtonVisibility: 'block',\n      displayOrder: 2,\n      displayPriority: 1,\n      displayGroup: 5\n    });\n  } // determine date defaults for dates and curveDates\n\n\n  var defaultDataSource = matsCollections.CurveParams.findOne({\n    name: \"data-source\"\n  }, {\n    default: 1\n  }).default;\n  modelDateRangeMap = matsCollections.CurveParams.findOne({\n    name: \"data-source\"\n  }, {\n    dates: 1\n  }).dates;\n  minDate = modelDateRangeMap[defaultDataSource].minDate;\n  maxDate = modelDateRangeMap[defaultDataSource].maxDate;\n  var minusMonthMinDate = matsParamUtils.getMinMaxDates(minDate, maxDate).minDate;\n  dstr = minusMonthMinDate + ' - ' + maxDate;\n\n  if (matsCollections.CurveParams.find({\n    name: 'curve-dates'\n  }).count() == 0) {\n    optionsMap = {\n      '1 day': ['1 day'],\n      '3 days': ['3 days'],\n      '7 days': ['7 days'],\n      '31 days': ['31 days'],\n      '90 days': ['90 days'],\n      '180 days': ['180 days'],\n      '365 days': ['365 days']\n    };\n    matsCollections.CurveParams.insert({\n      name: 'curve-dates',\n      type: matsTypes.InputTypes.dateRange,\n      optionsMap: optionsMap,\n      options: Object.keys(optionsMap).sort(),\n      startDate: minDate,\n      stopDate: maxDate,\n      superiorNames: ['data-source'],\n      controlButtonCovered: true,\n      unique: false,\n      default: dstr,\n      controlButtonVisibility: 'block',\n      displayOrder: 1,\n      displayPriority: 1,\n      displayGroup: 6,\n      help: \"dateHelp.html\"\n    });\n  } else {\n    // it is defined but check for necessary update\n    var currentParam = matsCollections.CurveParams.findOne({\n      name: 'curve-dates'\n    });\n\n    if (!matsDataUtils.areObjectsEqual(currentParam.startDate, minDate) || !matsDataUtils.areObjectsEqual(currentParam.stopDate, maxDate) || !matsDataUtils.areObjectsEqual(currentParam.default, dstr)) {\n      // have to reload model data\n      matsCollections.CurveParams.update({\n        name: 'curve-dates'\n      }, {\n        $set: {\n          startDate: minDate,\n          stopDate: maxDate,\n          default: dstr\n        }\n      });\n    }\n  }\n};\n/* The format of a curveTextPattern is an array of arrays, each sub array has\n [labelString, localVariableName, delimiterString]  any of which can be null.\n Each sub array will be joined (the localVariableName is always dereferenced first)\n and then the sub arrays will be joined maintaining order.\n\n The curveTextPattern is found by its name which must match the corresponding PlotGraphFunctions.PlotType value.\n See curve_item.js and standAlone.js.\n */\n\n\nconst doCurveTextPatterns = function () {\n  if (matsCollections.Settings.findOne({}) === undefined || matsCollections.Settings.findOne({}).resetFromCode === undefined || matsCollections.Settings.findOne({}).resetFromCode == true) {\n    matsCollections.CurveTextPatterns.remove({});\n  }\n\n  if (matsCollections.CurveTextPatterns.find().count() == 0) {\n    matsCollections.CurveTextPatterns.insert({\n      plotType: matsTypes.PlotTypes.timeSeries,\n      textPattern: [['', 'label', ': '], ['', 'data-source', ' in '], ['', 'region', ', '], ['', 'threshold', ' '], ['', 'scale', ', '], ['', 'statistic', ', '], ['fcst_len: ', 'forecast-length', 'h, '], ['valid-time: ', 'valid-time', ', '], ['avg: ', 'average', ', '], ['', 'truth', ' ']],\n      displayParams: [\"label\", \"data-source\", \"region\", \"statistic\", \"threshold\", \"scale\", \"average\", \"forecast-length\", \"valid-time\", \"truth\"],\n      groupSize: 6\n    });\n    matsCollections.CurveTextPatterns.insert({\n      plotType: matsTypes.PlotTypes.dieoff,\n      textPattern: [['', 'label', ': '], ['', 'data-source', ' in '], ['', 'region', ', '], ['', 'threshold', ' '], ['', 'scale', ', '], ['', 'statistic', ', '], ['', 'dieoff-type', ', '], ['valid-time: ', 'valid-time', ', '], ['start utc: ', 'utc-cycle-start', ', '], ['', 'truth', ', '], ['', 'curve-dates', '']],\n      displayParams: [\"label\", \"data-source\", \"region\", \"statistic\", \"threshold\", \"scale\", \"dieoff-type\", \"valid-time\", \"utc-cycle-start\", \"truth\", \"curve-dates\"],\n      groupSize: 6\n    });\n    matsCollections.CurveTextPatterns.insert({\n      plotType: matsTypes.PlotTypes.threshold,\n      textPattern: [['', 'label', ': '], ['', 'data-source', ' in '], ['', 'region', ', '], ['', 'scale', ', '], ['', 'statistic', ', '], ['fcst_len: ', 'forecast-length', 'h, '], ['valid-time: ', 'valid-time', ', '], ['', 'truth', ', '], ['', 'curve-dates', '']],\n      displayParams: [\"label\", \"data-source\", \"region\", \"statistic\", \"scale\", \"forecast-length\", \"valid-time\", \"truth\", \"curve-dates\"],\n      groupSize: 6\n    });\n    matsCollections.CurveTextPatterns.insert({\n      plotType: matsTypes.PlotTypes.validtime,\n      textPattern: [['', 'label', ': '], ['', 'data-source', ' in '], ['', 'region', ', '], ['', 'threshold', ' '], ['', 'scale', ', '], ['', 'statistic', ', '], ['fcst_len: ', 'forecast-length', 'h, '], ['', 'truth', ', '], ['', 'curve-dates', '']],\n      displayParams: [\"label\", \"data-source\", \"region\", \"statistic\", \"threshold\", \"scale\", \"forecast-length\", \"truth\", \"curve-dates\"],\n      groupSize: 6\n    });\n    matsCollections.CurveTextPatterns.insert({\n      plotType: matsTypes.PlotTypes.dailyModelCycle,\n      textPattern: [['', 'label', ': '], ['', 'data-source', ' in '], ['', 'region', ', '], ['', 'threshold', ' '], ['', 'scale', ', '], ['', 'statistic', ', '], ['start utc: ', 'utc-cycle-start', ', '], ['', 'truth', ' ']],\n      displayParams: [\"label\", \"data-source\", \"region\", \"statistic\", \"threshold\", \"scale\", \"utc-cycle-start\", \"truth\"],\n      groupSize: 6\n    });\n    matsCollections.CurveTextPatterns.insert({\n      plotType: matsTypes.PlotTypes.histogram,\n      textPattern: [['', 'label', ': '], ['', 'data-source', ' in '], ['', 'region', ', '], ['', 'threshold', ' '], ['', 'scale', ', '], ['', 'statistic', ', '], ['fcst_len: ', 'forecast-length', 'h, '], ['valid-time: ', 'valid-time', ', '], ['', 'truth', ', '], ['', 'curve-dates', '']],\n      displayParams: [\"label\", \"data-source\", \"region\", \"statistic\", \"threshold\", \"scale\", \"forecast-length\", \"valid-time\", \"truth\", \"curve-dates\"],\n      groupSize: 6\n    });\n    matsCollections.CurveTextPatterns.insert({\n      plotType: matsTypes.PlotTypes.contour,\n      textPattern: [['', 'label', ': '], ['', 'data-source', ' in '], ['', 'region', ', '], ['', 'threshold', ' '], ['', 'scale', ', '], ['', 'statistic', ', '], ['fcst_len: ', 'forecast-length', 'h, '], ['valid-time: ', 'valid-time', ', '], ['', 'truth', ', '], ['x-axis: ', 'x-axis-parameter', ', '], ['y-axis: ', 'y-axis-parameter', '']],\n      displayParams: [\"label\", \"data-source\", \"region\", \"statistic\", \"threshold\", \"scale\", \"forecast-length\", \"valid-time\", \"truth\", \"x-axis-parameter\", \"y-axis-parameter\"],\n      groupSize: 6\n    });\n    matsCollections.CurveTextPatterns.insert({\n      plotType: matsTypes.PlotTypes.contourDiff,\n      textPattern: [['', 'label', ': '], ['', 'data-source', ' in '], ['', 'region', ', '], ['', 'threshold', ' '], ['', 'scale', ', '], ['', 'statistic', ', '], ['fcst_len: ', 'forecast-length', 'h, '], ['valid-time: ', 'valid-time', ', '], ['', 'truth', ', '], ['x-axis: ', 'x-axis-parameter', ', '], ['y-axis: ', 'y-axis-parameter', '']],\n      displayParams: [\"label\", \"data-source\", \"region\", \"statistic\", \"threshold\", \"scale\", \"forecast-length\", \"valid-time\", \"truth\", \"x-axis-parameter\", \"y-axis-parameter\"],\n      groupSize: 6\n    });\n  }\n};\n\nconst doSavedCurveParams = function () {\n  if (matsCollections.Settings.findOne({}) === undefined || matsCollections.Settings.findOne({}).resetFromCode === undefined || matsCollections.Settings.findOne({}).resetFromCode == true) {\n    matsCollections.SavedCurveParams.remove({});\n  }\n\n  if (matsCollections.SavedCurveParams.find().count() == 0) {\n    matsCollections.SavedCurveParams.insert({\n      clName: 'changeList',\n      changeList: []\n    });\n  }\n};\n\nconst doPlotGraph = function () {\n  if (matsCollections.Settings.findOne({}) === undefined || matsCollections.Settings.findOne({}).resetFromCode === undefined || matsCollections.Settings.findOne({}).resetFromCode == true) {\n    matsCollections.PlotGraphFunctions.remove({});\n  }\n\n  if (matsCollections.PlotGraphFunctions.find().count() == 0) {\n    matsCollections.PlotGraphFunctions.insert({\n      plotType: matsTypes.PlotTypes.timeSeries,\n      graphFunction: \"graphPlotly\",\n      dataFunction: \"dataSeries\",\n      checked: true\n    });\n    matsCollections.PlotGraphFunctions.insert({\n      plotType: matsTypes.PlotTypes.dieoff,\n      graphFunction: \"graphPlotly\",\n      dataFunction: \"dataDieOff\",\n      checked: false\n    });\n    matsCollections.PlotGraphFunctions.insert({\n      plotType: matsTypes.PlotTypes.threshold,\n      graphFunction: \"graphPlotly\",\n      dataFunction: \"dataThreshold\",\n      checked: false\n    });\n    matsCollections.PlotGraphFunctions.insert({\n      plotType: matsTypes.PlotTypes.validtime,\n      graphFunction: \"graphPlotly\",\n      dataFunction: \"dataValidTime\",\n      checked: false\n    });\n    matsCollections.PlotGraphFunctions.insert({\n      plotType: matsTypes.PlotTypes.dailyModelCycle,\n      graphFunction: \"graphPlotly\",\n      dataFunction: \"dataDailyModelCycle\",\n      checked: false\n    });\n    matsCollections.PlotGraphFunctions.insert({\n      plotType: matsTypes.PlotTypes.histogram,\n      graphFunction: \"graphPlotly\",\n      dataFunction: \"dataHistogram\",\n      checked: false\n    });\n    matsCollections.PlotGraphFunctions.insert({\n      plotType: matsTypes.PlotTypes.contour,\n      graphFunction: \"graphPlotly\",\n      dataFunction: \"dataContour\",\n      checked: false\n    });\n    matsCollections.PlotGraphFunctions.insert({\n      plotType: matsTypes.PlotTypes.contourDiff,\n      graphFunction: \"graphPlotly\",\n      dataFunction: \"dataContourDiff\",\n      checked: false\n    });\n  }\n};\n\nMeteor.startup(function () {\n  matsCollections.Databases.remove({});\n\n  if (matsCollections.Databases.find().count() == 0) {\n    matsCollections.Databases.insert({\n      role: matsTypes.DatabaseRoles.SUMS_DATA,\n      status: \"active\",\n      host: 'wolphin.fsl.noaa.gov',\n      user: 'readonly',\n      password: 'ReadOnly@2016!',\n      database: 'precip_new',\n      connectionLimit: 10\n    });\n    matsCollections.Databases.insert({\n      role: matsTypes.DatabaseRoles.META_DATA,\n      status: \"active\",\n      host: 'wolphin.fsl.noaa.gov',\n      user: 'readonly',\n      password: 'ReadOnly@2016!',\n      database: 'mats_common',\n      connectionLimit: 10\n    });\n  }\n\n  const sumSettings = matsCollections.Databases.findOne({\n    role: matsTypes.DatabaseRoles.SUMS_DATA,\n    status: \"active\"\n  }, {\n    host: 1,\n    user: 1,\n    password: 1,\n    database: 1,\n    connectionLimit: 1\n  }); // the pool is intended to be global\n\n  sumPool = mysql.createPool(sumSettings);\n  sumPool.on('connection', function (connection) {\n    connection.query('set group_concat_max_len = 4294967295');\n  });\n  const metadataSettings = matsCollections.Databases.findOne({\n    role: matsTypes.DatabaseRoles.META_DATA,\n    status: \"active\"\n  }, {\n    host: 1,\n    user: 1,\n    password: 1,\n    database: 1,\n    connectionLimit: 1\n  }); // the pool is intended to be global\n\n  metadataPool = mysql.createPool(metadataSettings);\n  const mdr = new matsTypes.MetaDataDBRecord(\"sumPool\", \"precip_new\", ['regions_per_model_mats_all_categories', 'threshold_descriptions', 'scale_descriptions']);\n  mdr.addRecord(\"metadataPool\", \"mats_common\", ['region_descriptions']);\n  matsMethods.resetApp({\n    appMdr: mdr,\n    appType: matsTypes.AppTypes.mats,\n    app: 'precipitation1hr'\n  });\n}); // this object is global so that the reset code can get to it\n// These are application specific mongo data - like curve params\n// The appSpecificResetRoutines object is a special name,\n// as is doCurveParams. The refreshMetaData mechanism depends on them being named that way.\n\nappSpecificResetRoutines = [doPlotGraph, doCurveParams, doSavedCurveParams, doPlotParams, doCurveTextPatterns];","map":{"version":3,"sources":["server/main.js"],"names":["Meteor","module","link","v","mysql","matsTypes","matsCollections","matsDataUtils","matsDataQueryUtils","matsParamUtils","minDate","maxDate","dstr","doPlotParams","Settings","findOne","undefined","resetFromCode","PlotParams","remove","find","count","insert","name","type","InputTypes","dateRange","options","startDate","stopDate","superiorNames","controlButtonCovered","default","controlButtonVisibility","displayOrder","displayPriority","displayGroup","help","plotFormats","PlotFormats","matching","pairwise","none","radioGroup","optionsMap","yAxisOptionsMap","select","Object","keys","controlButtonText","binOptionsMap","hideOtherFor","numberSpinner","min","max","step","textInput","currentParam","areObjectsEqual","update","$set","doCurveParams","CurveParams","modelOptionsMap","modelDateRangeMap","regionModelOptionsMap","forecastLengthOptionsMap","thresholdsModelOptionsMap","scaleModelOptionsMap","sourceOptionsMap","masterRegionValuesMap","masterThresholdValuesMap","masterScaleValuesMap","rows","simplePoolQueryWrapSynchronous","metadataPool","masterRegDescription","masterShortName","j","length","description","trim","short_name","err","console","log","message","sumPool","masterDescription","masterTrsh","trsh","masterScaleDescription","masterScale","scle","i","model_value","model","display_text","rowMinDate","moment","utc","mindate","format","rowMaxDate","maxdate","sources","sourceArr","split","map","Function","prototype","call","String","replace","forecastLengths","fcst_lens","forecastLengthArr","thresholds","thresholdsArrRaw","thresholdsArr","dummyThresh","push","regions","regionsArrRaw","regionsArr","dummyRegion","scales","scalesArrRaw","scalesArr","dummyScale","unique","dates","dependentNames","valuesMap","selected","dieoffOptionsMap","ForecastTypes","dieoff","utcCycle","singleCycle","unused","multiple","optionsArr","defaultDataSource","minusMonthMinDate","getMinMaxDates","sort","doCurveTextPatterns","CurveTextPatterns","plotType","PlotTypes","timeSeries","textPattern","displayParams","groupSize","threshold","validtime","dailyModelCycle","histogram","contour","contourDiff","doSavedCurveParams","SavedCurveParams","clName","changeList","doPlotGraph","PlotGraphFunctions","graphFunction","dataFunction","checked","startup","Databases","role","DatabaseRoles","SUMS_DATA","status","host","user","password","database","connectionLimit","META_DATA","sumSettings","createPool","on","connection","query","metadataSettings","mdr","MetaDataDBRecord","addRecord","matsMethods","resetApp","appMdr","appType","AppTypes","mats","app","appSpecificResetRoutines"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2019 Colorado State University and Regents of the University of Colorado. All rights reserved.\n */\n\nimport {Meteor} from 'meteor/meteor';\nimport {mysql} from 'meteor/pcel:mysql';\nimport {matsTypes} from 'meteor/randyp:mats-common';\nimport {matsCollections} from 'meteor/randyp:mats-common';\nimport {matsDataUtils} from 'meteor/randyp:mats-common';\nimport {matsDataQueryUtils} from 'meteor/randyp:mats-common';\nimport {matsParamUtils} from 'meteor/randyp:mats-common';\n\n// determined in doCurveParanms\nvar minDate;\nvar maxDate;\nvar dstr;\n\nconst doPlotParams = function () {\n    if (matsCollections.Settings.findOne({}) === undefined || matsCollections.Settings.findOne({}).resetFromCode === undefined || matsCollections.Settings.findOne({}).resetFromCode == true) {\n        matsCollections.PlotParams.remove({});\n    }\n    if (matsCollections.PlotParams.find().count() == 0) {\n        matsCollections.PlotParams.insert(\n            {\n                name: 'dates',\n                type: matsTypes.InputTypes.dateRange,\n                options: [''],\n                startDate: minDate,\n                stopDate: maxDate,\n                superiorNames: ['data-source'],\n                controlButtonCovered: true,\n                default: dstr,\n                controlButtonVisibility: 'block',\n                displayOrder: 1,\n                displayPriority: 1,\n                displayGroup: 1,\n                help: \"dateHelp.html\"\n            });\n\n        var plotFormats = {};\n        plotFormats[matsTypes.PlotFormats.matching] = 'show matching diffs';\n        plotFormats[matsTypes.PlotFormats.pairwise] = 'pairwise diffs';\n        plotFormats[matsTypes.PlotFormats.none] = 'no diffs';\n        matsCollections.PlotParams.insert(\n            {\n                name: 'plotFormat',\n                type: matsTypes.InputTypes.radioGroup,\n                optionsMap: plotFormats,\n                options: [matsTypes.PlotFormats.matching, matsTypes.PlotFormats.pairwise, matsTypes.PlotFormats.none],\n                default: matsTypes.PlotFormats.none,\n                controlButtonCovered: false,\n                controlButtonVisibility: 'block',\n                displayOrder: 1,\n                displayPriority: 1,\n                displayGroup: 3\n            });\n\n        var yAxisOptionsMap = {\n            \"Number\": [\"number\"],\n            \"Relative frequency\": [\"relFreq\"]\n        };\n        matsCollections.PlotParams.insert(\n            {\n                name: 'histogram-yaxis-controls',\n                type: matsTypes.InputTypes.select,\n                optionsMap: yAxisOptionsMap,\n                options: Object.keys(yAxisOptionsMap),\n                default: Object.keys(yAxisOptionsMap)[0],\n                controlButtonCovered: true,\n                controlButtonText: 'Y-axis mode',\n                displayOrder: 1,\n                displayPriority: 1,\n                displayGroup: 2\n            });\n\n        var binOptionsMap = {\n            \"Default bins\": [\"default\"],\n            \"Set number of bins\": [\"binNumber\"],\n            \"Make zero a bin bound\": [\"zeroBound\"],\n            \"Choose a bin bound\": [\"chooseBound\"],\n            \"Set number of bins and make zero a bin bound\": [\"binNumberWithZero\"],\n            \"Set number of bins and choose a bin bound\": [\"binNumberWithChosen\"],\n            \"Manual bins\": [\"manual\"],\n            \"Manual bin start, number, and stride\": [\"manualStride\"]\n        };\n        matsCollections.PlotParams.insert(\n            {\n                name: 'histogram-bin-controls',\n                type: matsTypes.InputTypes.select,\n                optionsMap: binOptionsMap,\n                options: Object.keys(binOptionsMap),\n                hideOtherFor: {\n                    'bin-number': [\"Default bins\", \"Make zero a bin bound\", \"Manual bins\", \"Choose a bin bound\"],\n                    'bin-pivot': [\"Default bins\", \"Set number of bins\", \"Make zero a bin bound\", \"Set number of bins and make zero a bin bound\", \"Manual bins\", \"Manual bin start, number, and stride\"],\n                    'bin-start': [\"Default bins\", \"Set number of bins\", \"Make zero a bin bound\", \"Choose a bin bound\", \"Set number of bins and make zero a bin bound\", \"Set number of bins and choose a bin bound\", \"Manual bins\"],\n                    'bin-stride': [\"Default bins\", \"Set number of bins\", \"Make zero a bin bound\", \"Choose a bin bound\", \"Set number of bins and make zero a bin bound\", \"Set number of bins and choose a bin bound\", \"Manual bins\"],\n                    'bin-bounds': [\"Default bins\", \"Set number of bins\", \"Make zero a bin bound\", \"Choose a bin bound\", \"Set number of bins and make zero a bin bound\", \"Set number of bins and choose a bin bound\", \"Manual bin start, number, and stride\"],\n                },\n                default: Object.keys(binOptionsMap)[0],\n                controlButtonCovered: true,\n                controlButtonText: 'customize bins',\n                displayOrder: 2,\n                displayPriority: 1,\n                displayGroup: 2\n            });\n\n        matsCollections.PlotParams.insert(\n            {\n                name: 'bin-number',\n                type: matsTypes.InputTypes.numberSpinner,\n                optionsMap: {},\n                options: [],   // convenience\n                min: '2',\n                max: '100',\n                step: 'any',\n                default: '12',\n                controlButtonCovered: true,\n                controlButtonText: \"number of bins\",\n                displayOrder: 3,\n                displayPriority: 1,\n                displayGroup: 2\n            });\n\n        matsCollections.PlotParams.insert(\n            {\n                name: 'bin-pivot',\n                type: matsTypes.InputTypes.numberSpinner,\n                optionsMap: {},\n                options: [],   // convenience\n                min: '-10000',\n                max: '10000',\n                step: 'any',\n                default: '0',\n                controlButtonCovered: true,\n                controlButtonText: \"bin pivot value\",\n                displayOrder: 4,\n                displayPriority: 1,\n                displayGroup: 2\n            });\n\n        matsCollections.PlotParams.insert(\n            {\n                name: 'bin-start',\n                type: matsTypes.InputTypes.numberSpinner,\n                optionsMap: {},\n                options: [],   // convenience\n                min: '-10000',\n                max: '10000',\n                step: 'any',\n                default: '0',\n                controlButtonCovered: true,\n                controlButtonText: \"bin start\",\n                displayOrder: 5,\n                displayPriority: 1,\n                displayGroup: 2\n            });\n\n        matsCollections.PlotParams.insert(\n            {\n                name: 'bin-stride',\n                type: matsTypes.InputTypes.numberSpinner,\n                optionsMap: {},\n                options: [],   // convenience\n                min: '-10000',\n                max: '10000',\n                step: 'any',\n                default: '0',\n                controlButtonCovered: true,\n                controlButtonText: \"bin stride\",\n                displayOrder: 6,\n                displayPriority: 1,\n                displayGroup: 2\n            });\n\n        matsCollections.PlotParams.insert(\n            {\n                name: 'bin-bounds',\n                type: matsTypes.InputTypes.textInput,\n                optionsMap: {},\n                options: [],   // convenience\n                default: ' ',\n                controlButtonCovered: true,\n                controlButtonText: \"bin bounds (enter numbers separated by commas)\",\n                displayOrder: 7,\n                displayPriority: 1,\n                displayGroup: 2\n            });\n    } else {\n        // need to update the dates selector if the metadata has changed\n        var currentParam = matsCollections.PlotParams.findOne({name: 'dates'});\n        if ((!matsDataUtils.areObjectsEqual(currentParam.startDate, minDate)) ||\n            (!matsDataUtils.areObjectsEqual(currentParam.stopDate, maxDate)) ||\n            (!matsDataUtils.areObjectsEqual(currentParam.default, dstr))) {\n            // have to reload model data\n            matsCollections.PlotParams.update({name: 'dates'}, {\n                $set: {\n                    startDate: minDate,\n                    stopDate: maxDate,\n                    default: dstr\n                }\n            });\n        }\n    }\n};\n\nconst doCurveParams = function () {\n    if (matsCollections.Settings.findOne({}) === undefined || matsCollections.Settings.findOne({}).resetFromCode === undefined || matsCollections.Settings.findOne({}).resetFromCode == true) {\n        matsCollections.CurveParams.remove({});\n    }\n    var modelOptionsMap = {};\n    var modelDateRangeMap = {};\n    var regionModelOptionsMap = {};\n    var forecastLengthOptionsMap = {};\n    var thresholdsModelOptionsMap = {};\n    var scaleModelOptionsMap = {};\n    var sourceOptionsMap = {};\n    var masterRegionValuesMap = {};\n    var masterThresholdValuesMap = {};\n    var masterScaleValuesMap = {};\n\n    try {\n        const rows = matsDataQueryUtils.simplePoolQueryWrapSynchronous(metadataPool, \"SELECT short_name,description FROM region_descriptions;\");\n        var masterRegDescription;\n        var masterShortName;\n        for (var j = 0; j < rows.length; j++) {\n            masterRegDescription = rows[j].description.trim();\n            masterShortName = rows[j].short_name.trim();\n            masterRegionValuesMap[masterShortName] = masterRegDescription;\n        }\n    } catch (err) {\n        console.log(err.message);\n    }\n\n    try {\n        const rows = matsDataQueryUtils.simplePoolQueryWrapSynchronous(sumPool, \"SELECT trsh,description FROM threshold_descriptions;\");\n        var masterDescription;\n        var masterTrsh;\n        for (var j = 0; j < rows.length; j++) {\n            masterDescription = rows[j].description.trim();\n            masterTrsh = rows[j].trsh.trim();\n            masterThresholdValuesMap[masterTrsh] = masterDescription;\n        }\n    } catch (err) {\n        console.log(err.message);\n    }\n\n    try {\n        const rows = matsDataQueryUtils.simplePoolQueryWrapSynchronous(sumPool, \"SELECT scle,description FROM scale_descriptions;\");\n        var masterScaleDescription;\n        var masterScale;\n        for (var j = 0; j < rows.length; j++) {\n            masterScaleDescription = rows[j].description.trim();\n            masterScale = rows[j].scle.trim();\n            masterScaleValuesMap[masterScale] = masterScaleDescription;\n        }\n    } catch (err) {\n        console.log(err.message);\n    }\n\n    try {\n        const rows = matsDataQueryUtils.simplePoolQueryWrapSynchronous(sumPool, \"select model,regions,sources,display_text,fcst_lens,trsh,mindate,maxdate from regions_per_model_mats_all_categories order by display_category, display_order;\");\n        for (var i = 0; i < rows.length; i++) {\n\n            var model_value = rows[i].model.trim();\n            var model = rows[i].display_text.trim();\n            modelOptionsMap[model] = [model_value];\n\n            var rowMinDate = moment.utc(rows[i].mindate * 1000).format(\"MM/DD/YYYY HH:mm\");\n            var rowMaxDate = moment.utc(rows[i].maxdate * 1000).format(\"MM/DD/YYYY HH:mm\");\n            modelDateRangeMap[model] = {minDate: rowMinDate, maxDate: rowMaxDate};\n\n            var sources = rows[i].sources;\n            var sourceArr = sources.split(',').map(Function.prototype.call, String.prototype.trim);\n            for (var j = 0; j < sourceArr.length; j++) {\n                sourceArr[j] = sourceArr[j].replace(/'|\\[|\\]/g, \"\");\n            }\n            sourceOptionsMap[model] = sourceArr;\n\n            var forecastLengths = rows[i].fcst_lens;\n            var forecastLengthArr = forecastLengths.split(',').map(Function.prototype.call, String.prototype.trim);\n            for (var j = 0; j < forecastLengthArr.length; j++) {\n                forecastLengthArr[j] = forecastLengthArr[j].replace(/'|\\[|\\]/g, \"\");\n            }\n            forecastLengthOptionsMap[model] = forecastLengthArr;\n\n            var thresholds = rows[i].trsh;\n            var thresholdsArrRaw = thresholds.split(',').map(Function.prototype.call, String.prototype.trim);\n            var thresholdsArr = [];\n            var dummyThresh;\n            for (var j = 0; j < thresholdsArrRaw.length; j++) {\n                dummyThresh = thresholdsArrRaw[j].replace(/'|\\[|\\]/g, \"\");\n                thresholdsArr.push(masterThresholdValuesMap[dummyThresh]);\n            }\n            thresholdsModelOptionsMap[model] = thresholdsArr;\n\n            var regions = rows[i].regions;\n            var regionsArrRaw = regions.split(',').map(Function.prototype.call, String.prototype.trim);\n            var regionsArr = [];\n            var dummyRegion;\n            for (var j = 0; j < regionsArrRaw.length; j++) {\n                dummyRegion = regionsArrRaw[j].replace(/'|\\[|\\]/g, \"\");\n                regionsArr.push(masterRegionValuesMap[dummyRegion]);\n            }\n            regionModelOptionsMap[model] = regionsArr;\n\n            var scales = rows[i].scle;\n            var scalesArrRaw = scales.split(',').map(Function.prototype.call, String.prototype.trim);\n            var scalesArr = [];\n            var dummyScale;\n            for (var j = 0; j < scalesArrRaw.length; j++) {\n                dummyScale = scalesArrRaw[j].replace(/'|\\[|\\]/g, \"\");\n                scalesArr.push(masterScaleValuesMap[dummyScale]);\n            }\n            scaleModelOptionsMap[model] = scalesArr;\n        }\n\n    } catch (err) {\n        console.log(err.message);\n    }\n\n    if (matsCollections.CurveParams.find({name: 'label'}).count() == 0) {\n        matsCollections.CurveParams.insert(\n            {\n                name: 'label',\n                type: matsTypes.InputTypes.textInput,\n                optionsMap: {},\n                options: [],   // convenience\n                controlButtonCovered: true,\n                default: '',\n                unique: true,\n                controlButtonVisibility: 'block',\n                displayOrder: 1,\n                displayPriority: 1,\n                displayGroup: 1,\n                help: 'label.html'\n            }\n        );\n    }\n\n    if (matsCollections.CurveParams.find({name: 'data-source'}).count() == 0) {\n        matsCollections.CurveParams.insert(\n            {\n                name: 'data-source',\n                type: matsTypes.InputTypes.select,\n                optionsMap: modelOptionsMap,\n                dates: modelDateRangeMap,\n                options: Object.keys(modelOptionsMap),   // convenience\n                dependentNames: [\"region\", \"forecast-length\", \"threshold\", \"scale\", \"truth\", \"dates\", \"curve-dates\"],\n                controlButtonCovered: true,\n                default: Object.keys(modelOptionsMap)[0],\n                unique: false,\n                controlButtonVisibility: 'block',\n                displayOrder: 2,\n                displayPriority: 1,\n                displayGroup: 1\n            });\n    } else {\n        // it is defined but check for necessary update\n        var currentParam = matsCollections.CurveParams.findOne({name: 'data-source'});\n        if (!matsDataUtils.areObjectsEqual(currentParam.optionsMap, modelOptionsMap) ||\n            (!matsDataUtils.areObjectsEqual(currentParam.dates, modelDateRangeMap))) {\n            // have to reload model data\n            matsCollections.CurveParams.update({name: 'data-source'}, {\n                $set: {\n                    optionsMap: modelOptionsMap,\n                    dates: modelDateRangeMap,\n                    options: Object.keys(modelOptionsMap),\n                    default: Object.keys(modelOptionsMap)[0]\n                }\n            });\n        }\n    }\n\n    if (matsCollections.CurveParams.find({name: 'region'}).count() == 0) {\n        matsCollections.CurveParams.insert(\n            {\n                name: 'region',\n                type: matsTypes.InputTypes.select,\n                optionsMap: regionModelOptionsMap,\n                options: regionModelOptionsMap[Object.keys(regionModelOptionsMap)[0]],   // convenience\n                valuesMap: masterRegionValuesMap,\n                superiorNames: ['data-source'],\n                controlButtonCovered: true,\n                unique: false,\n                default: regionModelOptionsMap[Object.keys(regionModelOptionsMap)[0]][0],\n                controlButtonVisibility: 'block',\n                displayOrder: 3,\n                displayPriority: 1,\n                displayGroup: 1\n            });\n    } else {\n        // it is defined but check for necessary update\n        var currentParam = matsCollections.CurveParams.findOne({name: 'region'});\n        if ((!matsDataUtils.areObjectsEqual(currentParam.optionsMap, regionModelOptionsMap)) ||\n            (!matsDataUtils.areObjectsEqual(currentParam.valuesMap, masterRegionValuesMap))) {\n            // have to reload model data\n            matsCollections.CurveParams.update({name: 'region'}, {\n                $set: {\n                    optionsMap: regionModelOptionsMap,\n                    valuesMap: masterRegionValuesMap,\n                    options: regionModelOptionsMap[Object.keys(regionModelOptionsMap)[0]],\n                    default: regionModelOptionsMap[Object.keys(regionModelOptionsMap)[0]][0]\n                }\n            });\n        }\n    }\n\n    if (matsCollections.CurveParams.find({name: 'statistic'}).count() == 0) {\n        var optionsMap = {\n            'TSS (True Skill Score)': ['((sum(m0.hit)*sum(m0.cn) - sum(m0.fa)*sum(m0.miss))/((sum(m0.hit)+sum(m0.miss))*(sum(m0.fa)+sum(m0.cn)))) * 100 as stat, group_concat(((m0.hit*m0.cn - m0.fa*m0.miss)/((m0.hit+m0.miss)*(m0.fa+m0.cn))) * 100, \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.hit) as N0', 'x100', 100],\n\n            'PODy (POD of precip > threshold)': ['((sum(m0.hit)+0.00)/sum(m0.hit+m0.miss)) * 100 as stat, group_concat(((m0.hit)/(m0.hit+m0.miss)) * 100, \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.hit) as N0', 'x100', 100],\n\n            'PODn (POD of precip < threshold)': ['((sum(m0.cn)+0.00)/sum(m0.cn+m0.fa)) * 100 as stat, group_concat(((m0.cn)/(m0.cn+m0.fa)) * 100, \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.hit) as N0', 'x100', 100],\n\n            'FAR (False Alarm Ratio)': ['((sum(m0.fa)+0.00)/sum(m0.fa+m0.hit)) * 100 as stat, group_concat(((m0.fa)/(m0.fa+m0.hit)) * 100, \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.hit) as N0', 'x100', 0],\n\n            'Bias (forecast/actual)': ['((sum(m0.hit+m0.fa)+0.00)/sum(m0.hit+m0.miss)) as stat, group_concat(((m0.hit+m0.fa)/(m0.hit+m0.miss)), \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.hit) as N0', 'Ratio', 1],\n\n            'CSI (Critical Success Index)': ['((sum(m0.hit)+0.00)/sum(m0.hit+m0.miss+m0.fa)) * 100 as stat, group_concat(((m0.hit)/(m0.hit+m0.miss+m0.fa)) * 100, \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.hit) as N0', 'x100', 100],\n\n            'HSS (Heidke Skill Score)': ['(2*(sum(m0.cn+0.00)*sum(m0.hit)-sum(m0.miss)*sum(m0.fa))/((sum(m0.cn+0.00)+sum(m0.fa))*(sum(m0.fa)+sum(m0.hit))+(sum(m0.cn+0.00)+sum(m0.miss))*(sum(m0.miss)+sum(m0.hit)))) * 100 as stat, group_concat((2*(m0.cn*m0.hit - m0.miss*m0.fa) / ((m0.cn+m0.fa)*(m0.fa+m0.hit) + (m0.cn+m0.miss)*(m0.miss+m0.hit))) * 100, \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.hit) as N0', 'x100', 100],\n\n            'ETS (Equitable Threat Score)': ['(sum(m0.hit)-(sum(m0.hit+m0.fa)*sum(m0.hit+m0.miss)/sum(m0.hit+m0.fa+m0.miss+m0.cn)))/(sum(m0.hit+m0.fa+m0.miss)-(sum(m0.hit+m0.fa)*sum(m0.hit+m0.miss)/sum(m0.hit+m0.fa+m0.miss+m0.cn))) * 100 as stat, group_concat((m0.hit-((m0.hit+m0.fa)*(m0.hit+m0.miss)/(m0.hit+m0.fa+m0.miss+m0.cn)))/((m0.hit+m0.fa+m0.miss)-((m0.hit+m0.fa)*(m0.hit+m0.miss)/(m0.hit+m0.fa+m0.miss+m0.cn))) * 100, \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.hit) as N0', 'x100', 100],\n\n            'Nlow (obs < threshold, avg per hr)': ['avg(m0.cn+m0.fa+0.000) as stat, group_concat((m0.cn+m0.fa), \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.cn) as N0', 'Number', null],\n\n            'Nhigh (obs > threshold, avg per hr)': ['avg(m0.hit+m0.miss+0.000) as stat, group_concat((m0.hit+m0.miss), \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.hit) as N0', 'Number', null],\n\n            'Ntot (total obs, avg per hr)': ['avg(m0.hit+m0.fa+m0.miss+m0.cn+0.000) as stat, group_concat((m0.hit+m0.fa+m0.miss+m0.cn), \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.hit) as N0', 'Number', null],\n\n            'Ratio (Nlow / Ntot)': ['(sum(m0.cn+m0.fa+0.000)/sum(m0.hit+m0.fa+m0.miss+m0.cn+0.000)) as stat, group_concat(((m0.cn+m0.fa)/(m0.hit+m0.fa+m0.miss+m0.cn)), \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.cn) as N0', 'Ratio', null],\n\n            'Ratio (Nhigh / Ntot)': ['(sum(m0.hit+m0.miss+0.000)/sum(m0.hit+m0.fa+m0.miss+m0.cn+0.000)) as stat, group_concat(((m0.hit+m0.miss)/(m0.hit+m0.fa+m0.miss+m0.cn)), \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.hit) as N0', 'Ratio', null],\n\n            'N in average (to nearest 100)': ['sum(m0.hit+m0.miss+m0.fa+m0.cn+0.000) as stat, group_concat((m0.hit+m0.miss+m0.fa+m0.cn), \";\", m0.valid_time order by m0.valid_time) as sub_data, count(m0.hit) as N0', 'Number', null]\n        };\n        matsCollections.CurveParams.insert(\n            {\n                name: 'statistic',\n                type: matsTypes.InputTypes.select,\n                optionsMap: optionsMap,\n                options: Object.keys(optionsMap),   // convenience\n                controlButtonCovered: true,\n                unique: false,\n                default: Object.keys(optionsMap)[0],\n                controlButtonVisibility: 'block',\n                displayOrder: 1,\n                displayPriority: 1,\n                displayGroup: 2\n            });\n    }\n\n    if (matsCollections.CurveParams.find({name: 'threshold'}).count() == 0) {\n        matsCollections.CurveParams.insert(\n            {\n                name: 'threshold',\n                type: matsTypes.InputTypes.select,\n                optionsMap: thresholdsModelOptionsMap,\n                options: thresholdsModelOptionsMap[Object.keys(thresholdsModelOptionsMap)[0]],   // convenience\n                valuesMap: masterThresholdValuesMap,\n                superiorNames: ['data-source'],\n                controlButtonCovered: true,\n                unique: false,\n                default: thresholdsModelOptionsMap[Object.keys(thresholdsModelOptionsMap)[0]][0],\n                controlButtonVisibility: 'block',\n                displayOrder: 2,\n                displayPriority: 1,\n                displayGroup: 2\n            });\n    } else {\n        // it is defined but check for necessary update\n        var currentParam = matsCollections.CurveParams.findOne({name: 'threshold'});\n        if ((!matsDataUtils.areObjectsEqual(currentParam.optionsMap, thresholdsModelOptionsMap)) ||\n            (!matsDataUtils.areObjectsEqual(currentParam.valuesMap, masterThresholdValuesMap))) {\n            // have to reload model data\n            matsCollections.CurveParams.update({name: 'threshold'}, {\n                $set: {\n                    optionsMap: thresholdsModelOptionsMap,\n                    valuesMap: masterThresholdValuesMap,\n                    options: thresholdsModelOptionsMap[Object.keys(thresholdsModelOptionsMap)[0]],\n                    default: thresholdsModelOptionsMap[Object.keys(thresholdsModelOptionsMap)[0]][0]\n                }\n            });\n        }\n    }\n\n    if (matsCollections.CurveParams.find({name: 'average'}).count() == 0) {\n        optionsMap = {\n            'None': ['m0.valid_time'],\n            '3hr': ['ceil(10800*floor(m0.valid_time/10800)+10800/2)'],\n            '6hr': ['ceil(21600*floor(m0.valid_time/21600)+21600/2)'],\n            '12hr': ['ceil(43200*floor(m0.valid_time/43200)+43200/2)'],\n            '1D': ['ceil(86400*floor(m0.valid_time/86400)+86400/2)'],\n            '3D': ['ceil(259200*floor(m0.valid_time/259200)+259200/2)'],\n            '7D': ['ceil(604800*floor(m0.valid_time/604800)+604800/2)'],\n            '30D': ['ceil(2592000*floor(m0.valid_time/2592000)+2592000/2)'],\n            '60D': ['ceil(5184000*floor(m0.valid_time/5184000)+5184000/2)']\n        };\n\n        matsCollections.CurveParams.insert(\n            {\n                name: 'average',\n                type: matsTypes.InputTypes.select,\n                optionsMap: optionsMap,\n                options: Object.keys(optionsMap),   // convenience\n                controlButtonCovered: true,\n                unique: false,\n                selected: 'None',\n                default: 'None',\n                controlButtonVisibility: 'block',\n                displayOrder: 1,\n                displayPriority: 1,\n                displayGroup: 3\n            });\n    }\n\n    if (matsCollections.CurveParams.find({name: 'forecast-length'}).count() == 0) {\n        matsCollections.CurveParams.insert(\n            {\n                name: 'forecast-length',\n                type: matsTypes.InputTypes.select,\n                optionsMap: forecastLengthOptionsMap,\n                options: forecastLengthOptionsMap[Object.keys(forecastLengthOptionsMap)[0]],   // convenience\n                superiorNames: ['data-source'],\n                selected: '',\n                controlButtonCovered: true,\n                unique: false,\n                default: 6,\n                controlButtonVisibility: 'block',\n                controlButtonText: \"forecast lead time\",\n                displayOrder: 2,\n                displayPriority: 1,\n                displayGroup: 3\n            });\n    } else {\n        // it is defined but check for necessary update\n        var currentParam = matsCollections.CurveParams.findOne({name: 'forecast-length'});\n        if (!matsDataUtils.areObjectsEqual(currentParam.optionsMap, forecastLengthOptionsMap)) {\n            // have to reload model data\n            matsCollections.CurveParams.update({name: 'forecast-length'}, {\n                $set: {\n                    optionsMap: forecastLengthOptionsMap,\n                    options: forecastLengthOptionsMap[Object.keys(forecastLengthOptionsMap)[0]]\n                }\n            });\n        }\n    }\n\n    if (matsCollections.CurveParams.find({name: 'dieoff-type'}).count() == 0) {\n        var dieoffOptionsMap = {\n            \"Dieoff\": [matsTypes.ForecastTypes.dieoff],\n            \"Dieoff for a specified UTC cycle init hour\": [matsTypes.ForecastTypes.utcCycle],\n            \"Single cycle forecast (uses first date in range)\": [matsTypes.ForecastTypes.singleCycle]\n        };\n        matsCollections.CurveParams.insert(\n            {\n                name: 'dieoff-type',\n                type: matsTypes.InputTypes.select,\n                optionsMap: dieoffOptionsMap,\n                options: Object.keys(dieoffOptionsMap),\n                hideOtherFor: {\n                    'valid-time': [\"Dieoff for a specified UTC cycle init hour\", \"Single cycle forecast (uses first date in range)\"],\n                    'utc-cycle-start': [\"Dieoff\", \"Single cycle forecast (uses first date in range)\"],\n                },\n                selected: '',\n                controlButtonCovered: true,\n                unique: false,\n                default: Object.keys(dieoffOptionsMap)[0],\n                controlButtonVisibility: 'block',\n                controlButtonText: 'dieoff type',\n                displayOrder: 2,\n                displayPriority: 1,\n                displayGroup: 3\n            });\n    }\n\n    if (matsCollections.CurveParams.find({name: 'valid-time'}).count() == 0) {\n        matsCollections.CurveParams.insert(\n            {\n                name: 'valid-time',\n                type: matsTypes.InputTypes.select,\n                options: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23'],\n                selected: [],\n                controlButtonCovered: true,\n                unique: false,\n                default: matsTypes.InputTypes.unused,\n                controlButtonVisibility: 'block',\n                controlButtonText: \"valid utc hour\",\n                displayOrder: 3,\n                displayPriority: 1,\n                displayGroup: 3,\n                multiple: true\n            });\n    }\n\n    if (matsCollections.CurveParams.find({name: 'utc-cycle-start'}).count() == 0) {\n\n        const optionsArr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23'];\n\n        matsCollections.CurveParams.insert(\n            {\n                name: 'utc-cycle-start',\n                type: matsTypes.InputTypes.select,\n                options: optionsArr,\n                selected: '',\n                controlButtonCovered: true,\n                unique: false,\n                default: optionsArr[12],\n                controlButtonVisibility: 'block',\n                controlButtonText: \"utc cycle init hour\",\n                displayOrder: 3,\n                displayPriority: 1,\n                displayGroup: 3,\n            });\n    }\n\n    if (matsCollections.CurveParams.find({name: 'truth'}).count() == 0) {\n        matsCollections.CurveParams.insert(\n            {\n                name: 'truth',\n                type: matsTypes.InputTypes.select,\n                optionsMap: sourceOptionsMap,\n                options: sourceOptionsMap[Object.keys(sourceOptionsMap)[0]],\n                superiorNames: ['data-source'],\n                controlButtonCovered: true,\n                unique: false,\n                default: sourceOptionsMap[Object.keys(sourceOptionsMap)[0]][0],\n                controlButtonVisibility: 'block',\n                displayOrder: 1,\n                displayPriority: 1,\n                displayGroup: 4\n            });\n    } else {\n        // it is defined but check for necessary update\n        var currentParam = matsCollections.CurveParams.findOne({name: 'truth'});\n        if (!matsDataUtils.areObjectsEqual(currentParam.optionsMap, sourceOptionsMap)) {\n            // have to reload model data\n            matsCollections.CurveParams.update({name: 'truth'}, {\n                $set: {\n                    optionsMap: sourceOptionsMap,\n                    options: sourceOptionsMap[Object.keys(sourceOptionsMap)[0]],\n                    default: sourceOptionsMap[Object.keys(sourceOptionsMap)[0]][0]\n                }\n            });\n        }\n    }\n\n    if (matsCollections.CurveParams.find({name: 'scale'}).count() == 0) {\n        matsCollections.CurveParams.insert(\n            {// bias and model average are a different formula for wind (element 0 differs from element 1)\n                // but stays the same (element 0 and element 1 are the same) otherwise.\n                // When plotting profiles we append element 2 to whichever element was chosen (for wind variable). For\n                // time series we never append element 2. Element 3 is used to give us error values for error bars.\n                name: 'scale',\n                type: matsTypes.InputTypes.select,\n                optionsMap: scaleModelOptionsMap,\n                options: scaleModelOptionsMap[Object.keys(scaleModelOptionsMap)[0]],   // convenience\n                valuesMap: masterScaleValuesMap,\n                superiorNames: ['data-source'],\n                controlButtonCovered: true,\n                unique: false,\n                default: scaleModelOptionsMap[Object.keys(scaleModelOptionsMap)[0]][0],\n                controlButtonVisibility: 'block',\n                displayOrder: 3,\n                displayPriority: 1,\n                displayGroup: 3\n            });\n    } else {\n        // it is defined but check for necessary update\n        var currentParam = matsCollections.CurveParams.findOne({name: 'scale'});\n        if ((!matsDataUtils.areObjectsEqual(currentParam.optionsMap, scaleModelOptionsMap)) ||\n            (!matsDataUtils.areObjectsEqual(currentParam.valuesMap, masterScaleValuesMap))) {\n            // have to reload model data\n            matsCollections.CurveParams.update({name: 'scale'}, {\n                $set: {\n                    optionsMap: scaleModelOptionsMap,\n                    valuesMap: masterScaleValuesMap,\n                    options: scaleModelOptionsMap[Object.keys(scaleModelOptionsMap)[0]],\n                    default: scaleModelOptionsMap[Object.keys(scaleModelOptionsMap)[0]][0]\n                }\n            });\n        }\n\n    }\n\n    if (matsCollections.CurveParams.find({name: 'x-axis-parameter'}).count() == 0) {\n\n        const optionsMap = {\n            'Fcst lead time': \"select m0.fcst_len as xVal, \",\n            'Threshold': \"select m0.thresh/100 as xVal, \",\n            'Valid UTC hour': \"select m0.valid_time%(24*3600)/3600 as xVal, \",\n            'Init UTC hour': \"select (m0.valid_time-m0.fcst_len*3600)%(24*3600)/3600 as xVal, \",\n            'Valid Date': \"select m0.valid_time as xVal, \",\n            'Init Date': \"select m0.valid_time-m0.fcst_len*3600 as xVal, \"\n        };\n\n        matsCollections.CurveParams.insert(\n            {\n                name: 'x-axis-parameter',\n                type: matsTypes.InputTypes.select,\n                options: Object.keys(optionsMap),\n                optionsMap: optionsMap,\n                // hideOtherFor: {\n                //     'forecast-length': [\"Fcst lead time\"],\n                //     'valid-time': [\"Valid UTC hour\"],\n                //     'pres-level': [\"Pressure level\"],\n                // },\n                selected: '',\n                controlButtonCovered: true,\n                unique: false,\n                default: Object.keys(optionsMap)[2],\n                controlButtonVisibility: 'block',\n                displayOrder: 1,\n                displayPriority: 1,\n                displayGroup: 5,\n            });\n    }\n\n    if (matsCollections.CurveParams.find({name: 'y-axis-parameter'}).count() == 0) {\n\n        const optionsMap = {\n            'Fcst lead time': \"m0.fcst_len as yVal, \",\n            'Threshold': \"m0.thresh/100 as yVal, \",\n            'Valid UTC hour': \"m0.valid_time%(24*3600)/3600 as yVal, \",\n            'Init UTC hour': \"(m0.valid_time-m0.fcst_len*3600)%(24*3600)/3600 as yVal, \",\n            'Valid Date': \"m0.valid_time as yVal, \",\n            'Init Date': \"m0.valid_time-m0.fcst_len*3600 as yVal, \"\n        };\n\n        matsCollections.CurveParams.insert(\n            {\n                name: 'y-axis-parameter',\n                type: matsTypes.InputTypes.select,\n                options: Object.keys(optionsMap),\n                optionsMap: optionsMap,\n                // hideOtherFor: {\n                //     'forecast-length': [\"Fcst lead time\"],\n                //     'valid-time': [\"Valid UTC hour\"],\n                //     'pres-level': [\"Pressure level\"],\n                // },\n                selected: '',\n                controlButtonCovered: true,\n                unique: false,\n                default: Object.keys(optionsMap)[0],\n                controlButtonVisibility: 'block',\n                displayOrder: 2,\n                displayPriority: 1,\n                displayGroup: 5,\n            });\n    }\n\n    // determine date defaults for dates and curveDates\n    var defaultDataSource = matsCollections.CurveParams.findOne({name:\"data-source\"},{default:1}).default;\n    modelDateRangeMap = matsCollections.CurveParams.findOne({name:\"data-source\"},{dates:1}).dates;\n    minDate = modelDateRangeMap[defaultDataSource].minDate;\n    maxDate = modelDateRangeMap[defaultDataSource].maxDate;\n    var minusMonthMinDate = matsParamUtils.getMinMaxDates(minDate, maxDate).minDate;\n    dstr = minusMonthMinDate + ' - ' + maxDate;\n\n    if (matsCollections.CurveParams.find({name: 'curve-dates'}).count() == 0) {\n        optionsMap = {\n            '1 day': ['1 day'],\n            '3 days': ['3 days'],\n            '7 days': ['7 days'],\n            '31 days': ['31 days'],\n            '90 days': ['90 days'],\n            '180 days': ['180 days'],\n            '365 days': ['365 days']\n        };\n        matsCollections.CurveParams.insert(\n            {\n                name: 'curve-dates',\n                type: matsTypes.InputTypes.dateRange,\n                optionsMap: optionsMap,\n                options: Object.keys(optionsMap).sort(),\n                startDate: minDate,\n                stopDate: maxDate,\n                superiorNames: ['data-source'],\n                controlButtonCovered: true,\n                unique: false,\n                default: dstr,\n                controlButtonVisibility: 'block',\n                displayOrder: 1,\n                displayPriority: 1,\n                displayGroup: 6,\n                help: \"dateHelp.html\"\n            });\n    } else {\n        // it is defined but check for necessary update\n        var currentParam = matsCollections.CurveParams.findOne({name: 'curve-dates'});\n        if ((!matsDataUtils.areObjectsEqual(currentParam.startDate, minDate)) ||\n            (!matsDataUtils.areObjectsEqual(currentParam.stopDate, maxDate)) ||\n            (!matsDataUtils.areObjectsEqual(currentParam.default, dstr))) {\n            // have to reload model data\n            matsCollections.CurveParams.update({name: 'curve-dates'}, {\n                $set: {\n                    startDate: minDate,\n                    stopDate: maxDate,\n                    default: dstr\n                }\n            });\n        }\n    }\n};\n\n/* The format of a curveTextPattern is an array of arrays, each sub array has\n [labelString, localVariableName, delimiterString]  any of which can be null.\n Each sub array will be joined (the localVariableName is always dereferenced first)\n and then the sub arrays will be joined maintaining order.\n\n The curveTextPattern is found by its name which must match the corresponding PlotGraphFunctions.PlotType value.\n See curve_item.js and standAlone.js.\n */\nconst doCurveTextPatterns = function () {\n    if (matsCollections.Settings.findOne({}) === undefined || matsCollections.Settings.findOne({}).resetFromCode === undefined || matsCollections.Settings.findOne({}).resetFromCode == true) {\n        matsCollections.CurveTextPatterns.remove({});\n    }\n    if (matsCollections.CurveTextPatterns.find().count() == 0) {\n        matsCollections.CurveTextPatterns.insert({\n            plotType: matsTypes.PlotTypes.timeSeries,\n            textPattern: [\n                ['', 'label', ': '],\n                ['', 'data-source', ' in '],\n                ['', 'region', ', '],\n                ['', 'threshold', ' '],\n                ['', 'scale', ', '],\n                ['', 'statistic', ', '],\n                ['fcst_len: ', 'forecast-length', 'h, '],\n                ['valid-time: ', 'valid-time', ', '],\n                ['avg: ', 'average', ', '],\n                ['', 'truth', ' ']\n            ],\n            displayParams: [\n                \"label\", \"data-source\", \"region\", \"statistic\", \"threshold\", \"scale\", \"average\", \"forecast-length\", \"valid-time\", \"truth\"\n            ],\n            groupSize: 6\n\n        });\n        matsCollections.CurveTextPatterns.insert({\n            plotType: matsTypes.PlotTypes.dieoff,\n            textPattern: [\n                ['', 'label', ': '],\n                ['', 'data-source', ' in '],\n                ['', 'region', ', '],\n                ['', 'threshold', ' '],\n                ['', 'scale', ', '],\n                ['', 'statistic', ', '],\n                ['', 'dieoff-type', ', '],\n                ['valid-time: ', 'valid-time', ', '],\n                ['start utc: ', 'utc-cycle-start', ', '],\n                ['', 'truth', ', '],\n                ['', 'curve-dates', '']\n            ],\n            displayParams: [\n                \"label\", \"data-source\", \"region\", \"statistic\", \"threshold\", \"scale\", \"dieoff-type\", \"valid-time\", \"utc-cycle-start\", \"truth\", \"curve-dates\"\n            ],\n            groupSize: 6\n        });\n        matsCollections.CurveTextPatterns.insert({\n            plotType: matsTypes.PlotTypes.threshold,\n            textPattern: [\n                ['', 'label', ': '],\n                ['', 'data-source', ' in '],\n                ['', 'region', ', '],\n                ['', 'scale', ', '],\n                ['', 'statistic', ', '],\n                ['fcst_len: ', 'forecast-length', 'h, '],\n                ['valid-time: ', 'valid-time', ', '],\n                ['', 'truth', ', '],\n                ['', 'curve-dates', '']\n            ],\n            displayParams: [\n                \"label\", \"data-source\", \"region\", \"statistic\", \"scale\", \"forecast-length\", \"valid-time\", \"truth\", \"curve-dates\"\n            ],\n            groupSize: 6\n        });\n        matsCollections.CurveTextPatterns.insert({\n            plotType: matsTypes.PlotTypes.validtime,\n            textPattern: [\n                ['', 'label', ': '],\n                ['', 'data-source', ' in '],\n                ['', 'region', ', '],\n                ['', 'threshold', ' '],\n                ['', 'scale', ', '],\n                ['', 'statistic', ', '],\n                ['fcst_len: ', 'forecast-length', 'h, '],\n                ['', 'truth', ', '],\n                ['', 'curve-dates', '']\n            ],\n            displayParams: [\n                \"label\", \"data-source\", \"region\", \"statistic\", \"threshold\", \"scale\", \"forecast-length\", \"truth\", \"curve-dates\"\n            ],\n            groupSize: 6\n        });\n        matsCollections.CurveTextPatterns.insert({\n            plotType: matsTypes.PlotTypes.dailyModelCycle,\n            textPattern: [\n                ['', 'label', ': '],\n                ['', 'data-source', ' in '],\n                ['', 'region', ', '],\n                ['', 'threshold', ' '],\n                ['', 'scale', ', '],\n                ['', 'statistic', ', '],\n                ['start utc: ', 'utc-cycle-start', ', '],\n                ['', 'truth', ' ']\n            ],\n            displayParams: [\n                \"label\", \"data-source\", \"region\", \"statistic\", \"threshold\", \"scale\", \"utc-cycle-start\", \"truth\"\n            ],\n            groupSize: 6\n        });\n        matsCollections.CurveTextPatterns.insert({\n            plotType: matsTypes.PlotTypes.histogram,\n            textPattern: [\n                ['', 'label', ': '],\n                ['', 'data-source', ' in '],\n                ['', 'region', ', '],\n                ['', 'threshold', ' '],\n                ['', 'scale', ', '],\n                ['', 'statistic', ', '],\n                ['fcst_len: ', 'forecast-length', 'h, '],\n                ['valid-time: ', 'valid-time', ', '],\n                ['', 'truth', ', '],\n                ['', 'curve-dates', '']\n            ],\n            displayParams: [\n                \"label\", \"data-source\", \"region\", \"statistic\", \"threshold\", \"scale\", \"forecast-length\", \"valid-time\", \"truth\", \"curve-dates\"\n            ],\n            groupSize: 6\n        });\n        matsCollections.CurveTextPatterns.insert({\n            plotType: matsTypes.PlotTypes.contour,\n            textPattern: [\n                ['', 'label', ': '],\n                ['', 'data-source', ' in '],\n                ['', 'region', ', '],\n                ['', 'threshold', ' '],\n                ['', 'scale', ', '],\n                ['', 'statistic', ', '],\n                ['fcst_len: ', 'forecast-length', 'h, '],\n                ['valid-time: ', 'valid-time', ', '],\n                ['', 'truth', ', '],\n                ['x-axis: ', 'x-axis-parameter', ', '],\n                ['y-axis: ', 'y-axis-parameter', '']\n\n            ],\n            displayParams: [\n                \"label\", \"data-source\", \"region\", \"statistic\", \"threshold\", \"scale\", \"forecast-length\", \"valid-time\", \"truth\", \"x-axis-parameter\", \"y-axis-parameter\"\n            ],\n            groupSize: 6\n\n        });\n        matsCollections.CurveTextPatterns.insert({\n            plotType: matsTypes.PlotTypes.contourDiff,\n            textPattern: [\n                ['', 'label', ': '],\n                ['', 'data-source', ' in '],\n                ['', 'region', ', '],\n                ['', 'threshold', ' '],\n                ['', 'scale', ', '],\n                ['', 'statistic', ', '],\n                ['fcst_len: ', 'forecast-length', 'h, '],\n                ['valid-time: ', 'valid-time', ', '],\n                ['', 'truth', ', '],\n                ['x-axis: ', 'x-axis-parameter', ', '],\n                ['y-axis: ', 'y-axis-parameter', '']\n\n            ],\n            displayParams: [\n                \"label\", \"data-source\", \"region\", \"statistic\", \"threshold\", \"scale\", \"forecast-length\", \"valid-time\", \"truth\", \"x-axis-parameter\", \"y-axis-parameter\"\n            ],\n            groupSize: 6\n\n        });\n    }\n};\n\nconst doSavedCurveParams = function () {\n    if (matsCollections.Settings.findOne({}) === undefined || matsCollections.Settings.findOne({}).resetFromCode === undefined || matsCollections.Settings.findOne({}).resetFromCode == true) {\n        matsCollections.SavedCurveParams.remove({});\n    }\n    if (matsCollections.SavedCurveParams.find().count() == 0) {\n        matsCollections.SavedCurveParams.insert({clName: 'changeList', changeList: []});\n    }\n};\n\nconst doPlotGraph = function () {\n    if (matsCollections.Settings.findOne({}) === undefined || matsCollections.Settings.findOne({}).resetFromCode === undefined || matsCollections.Settings.findOne({}).resetFromCode == true) {\n        matsCollections.PlotGraphFunctions.remove({});\n    }\n    if (matsCollections.PlotGraphFunctions.find().count() == 0) {\n        matsCollections.PlotGraphFunctions.insert({\n            plotType: matsTypes.PlotTypes.timeSeries,\n            graphFunction: \"graphPlotly\",\n            dataFunction: \"dataSeries\",\n            checked: true\n        });\n        matsCollections.PlotGraphFunctions.insert({\n            plotType: matsTypes.PlotTypes.dieoff,\n            graphFunction: \"graphPlotly\",\n            dataFunction: \"dataDieOff\",\n            checked: false\n        });\n        matsCollections.PlotGraphFunctions.insert({\n            plotType: matsTypes.PlotTypes.threshold,\n            graphFunction: \"graphPlotly\",\n            dataFunction: \"dataThreshold\",\n            checked: false\n        });\n        matsCollections.PlotGraphFunctions.insert({\n            plotType: matsTypes.PlotTypes.validtime,\n            graphFunction: \"graphPlotly\",\n            dataFunction: \"dataValidTime\",\n            checked: false\n        });\n        matsCollections.PlotGraphFunctions.insert({\n            plotType: matsTypes.PlotTypes.dailyModelCycle,\n            graphFunction: \"graphPlotly\",\n            dataFunction: \"dataDailyModelCycle\",\n            checked: false\n        });\n        matsCollections.PlotGraphFunctions.insert({\n            plotType: matsTypes.PlotTypes.histogram,\n            graphFunction: \"graphPlotly\",\n            dataFunction: \"dataHistogram\",\n            checked: false\n        });\n        matsCollections.PlotGraphFunctions.insert({\n            plotType: matsTypes.PlotTypes.contour,\n            graphFunction: \"graphPlotly\",\n            dataFunction: \"dataContour\",\n            checked: false\n        });\n        matsCollections.PlotGraphFunctions.insert({\n            plotType: matsTypes.PlotTypes.contourDiff,\n            graphFunction: \"graphPlotly\",\n            dataFunction: \"dataContourDiff\",\n            checked: false\n        });\n    }\n};\n\nMeteor.startup(function () {\n    matsCollections.Databases.remove({});\n    if (matsCollections.Databases.find().count() == 0) {\n        matsCollections.Databases.insert({\n            role: matsTypes.DatabaseRoles.SUMS_DATA,\n            status: \"active\",\n            host: 'wolphin.fsl.noaa.gov',\n            user: 'readonly',\n            password: 'ReadOnly@2016!',\n            database: 'precip_new',\n            connectionLimit: 10\n        });\n\n        matsCollections.Databases.insert({\n            role: matsTypes.DatabaseRoles.META_DATA,\n            status: \"active\",\n            host: 'wolphin.fsl.noaa.gov',\n            user: 'readonly',\n            password: 'ReadOnly@2016!',\n            database: 'mats_common',\n            connectionLimit: 10\n        });\n    }\n\n    const sumSettings = matsCollections.Databases.findOne({role: matsTypes.DatabaseRoles.SUMS_DATA, status: \"active\"}, {\n        host: 1,\n        user: 1,\n        password: 1,\n        database: 1,\n        connectionLimit: 1\n    });\n    // the pool is intended to be global\n    sumPool = mysql.createPool(sumSettings);\n    sumPool.on('connection', function (connection) {\n        connection.query('set group_concat_max_len = 4294967295')\n    });\n\n    const metadataSettings = matsCollections.Databases.findOne({role: matsTypes.DatabaseRoles.META_DATA, status: \"active\"}, {\n        host: 1,\n        user: 1,\n        password: 1,\n        database: 1,\n        connectionLimit: 1\n    });\n// the pool is intended to be global\n    metadataPool = mysql.createPool(metadataSettings);\n\n\n    const mdr = new matsTypes.MetaDataDBRecord(\"sumPool\", \"precip_new\", ['regions_per_model_mats_all_categories', 'threshold_descriptions', 'scale_descriptions']);\n    mdr.addRecord(\"metadataPool\", \"mats_common\", ['region_descriptions']);\n    matsMethods.resetApp({appMdr:mdr, appType:matsTypes.AppTypes.mats, app:'precipitation1hr'});\n});\n\n// this object is global so that the reset code can get to it\n// These are application specific mongo data - like curve params\n// The appSpecificResetRoutines object is a special name,\n// as is doCurveParams. The refreshMetaData mechanism depends on them being named that way.\nappSpecificResetRoutines = [\n    doPlotGraph,\n    doCurveParams,\n    doSavedCurveParams,\n    doPlotParams,\n    doCurveTextPatterns\n];\n"]},"sourceType":"script","hash":"8c27e972bf5c5f3c27a43344f20cd39509d3f53e"}
