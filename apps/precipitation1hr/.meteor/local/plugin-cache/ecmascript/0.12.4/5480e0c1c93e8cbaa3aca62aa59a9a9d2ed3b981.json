{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/templates/common/date_range.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/randyp:mats-common/templates/common/date_range.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/templates/common/date_range.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/templates/common/date_range.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/randyp:mats-common/templates/common/date_range.js"}},"code":"var matsCollections, matsCurveUtils, matsParamUtils, matsTypes;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsCollections: function (v) {\n    matsCollections = v;\n  },\n  matsCurveUtils: function (v) {\n    matsCurveUtils = v;\n  },\n  matsParamUtils: function (v) {\n    matsParamUtils = v;\n  },\n  matsTypes: function (v) {\n    matsTypes = v;\n  }\n}, 0);\nTemplate.dateRange.onRendered(function () {\n  //NOTE: Date fields are special in that they are qualified by plotType.\n  //TimeSeries and Scatter plots have a common date range\n  // but profile plots have a date range for each curve.\n  // The decision to hide or show a dataRange is made here in the dateRange template\n  // it seems that when the page is first rendered the checkbox might be yet defined (especially in safari).\n  // in that event we test for undefined and block the curve-dates-item anyway\n  if (document.getElementById('plot-type-' + matsTypes.PlotTypes.timeSeries) == undefined || document.getElementById('plot-type-' + matsTypes.PlotTypes.timeSeries).checked === true || document.getElementById('plot-type-' + matsTypes.PlotTypes.dailyModelCycle) == undefined || document.getElementById('plot-type-' + matsTypes.PlotTypes.dailyModelCycle).checked === true || document.getElementById('plot-type-' + matsTypes.PlotTypes.scatter2d) == undefined || document.getElementById('plot-type-' + matsTypes.PlotTypes.scatter2d).checked === true) {\n    if (document.getElementById('curve-dates-item')) {\n      document.getElementById('curve-dates-item').style.display = \"none\";\n    }\n\n    if (document.getElementById('dates-item')) {\n      document.getElementById('dates-item').style.display = \"block\";\n    }\n  } else {\n    if (document.getElementById('curve-dates-item')) {\n      document.getElementById('curve-dates-item').style.display = \"block\";\n    }\n\n    if (document.getElementById('dates-item')) {\n      document.getElementById('dates-item').style.display = \"none\";\n    }\n  }\n\n  var name = this.data.name;\n  var idref = name + \"-item\";\n  var elem = document.getElementById('element-' + name);\n  var superiorNames = this.data.superiorNames;\n  var defaultDateRange = matsParamUtils.getDefaultDateRange(name);\n  var startInit = defaultDateRange.startDate;\n  var stopInit = defaultDateRange.stopDate;\n  var dstr = defaultDateRange.dstr;\n  $(function () {\n    $('#' + idref).daterangepicker({\n      \"autoApply\": true,\n      \"parentEL\": $('#' + idref),\n      \"timePicker\": true,\n      \"timePicker24Hour\": true,\n      \"timePickerIncrement\": 1,\n      \"startDate\": startInit,\n      \"endDate\": stopInit,\n      \"showDropdowns\": true,\n      \"drops\": \"up\",\n      locale: {\n        format: 'MM/DD/YYYY HH:mm'\n      },\n      ranges: {\n        'Today': [moment().startOf('day'), moment().endOf('day')],\n        'Yesterday': [moment().subtract(1, 'days').startOf('day'), moment().subtract(1, 'days').endOf('day')],\n        'Last 7 Full Days': [moment().subtract(7, 'days').startOf('day'), moment().startOf('day')],\n        'Last 30 Full Days': [moment().subtract(30, 'days').startOf('day'), moment().startOf('day')],\n        'Last 60 Full Days': [moment().subtract(60, 'days').startOf('day'), moment().startOf('day')],\n        'Last 90 Full Days': [moment().subtract(90, 'days').startOf('day'), moment().startOf('day')],\n        'Last 180 Full Days': [moment().subtract(180, 'days').startOf('day'), moment().startOf('day')]\n      },\n      \"alwaysShowCalendars\": true\n    });\n    matsParamUtils.setValueTextForParamName(name, dstr);\n  });\n  $('#' + idref).on('apply.daterangepicker', function (ev, picker) {\n    if (picker.startDate.toString() == picker.endDate.toString()) {\n      setError(new Error(\"date_range error:  Your start and end dates coincide, you must select a range! This is \" + \"because METARs and other obs can come in at slightly different times, so selecting only one time might \" + \"leave you with very few (or no) valid obs. Instead, try using a small range. For example, if you're \" + \"targeting the top-of-the-hour METARs at 2:00 am, set your time range from 1:45 am to 2:00 am, because \" + \"METARs often come in early.\"));\n      return false;\n    }\n\n    var valStr = picker.startDate.format('MM/DD/YYYY H:mm') + ' - ' + picker.endDate.format('MM/DD/YYYY H:mm');\n    matsParamUtils.setValueTextForParamName(name, valStr);\n    elem.style.display = \"none\";\n    var curveItem = Session.get(\"editMode\") === undefined && Session.get(\"editMode\") === \"\" ? undefined : document.getElementById(\"curveItem-\" + Session.get(\"editMode\"));\n\n    if (curveItem) {\n      $('#save').trigger('click');\n    }\n  });\n  $('#' + idref).on('cancel.daterangepicker', function () {\n    elem.style.display = \"none\";\n  });\n\n  var refresh = function () {\n    try {\n      // get the current values from the element and check for invalid\n      var curVals = matsParamUtils.getValueForParamName(name).split(\" - \"); // it is a date object values are \"someFromDate - someToDate\"\n\n      var startDsr = moment(curVals[0], \"MM/DD/YYYY HH:mm\");\n      var endDsr = moment(curVals[1], \"MM/DD/YYYY HH:mm\");\n\n      if (!startDsr.isValid()) {\n        // error\n        setError(\"date_range refresh error: Your date range selector has an invalid start date-time: \" + curVals[0]);\n        return false;\n      }\n\n      if (!endDsr.isValid()) {\n        // error\n        setError(\"date_range refresh error: Your date range selector has an invalid end date-time:\" + curVals[1]);\n        return false;\n      }\n\n      if (startDsr.isAfter(endDsr)) {\n        // error\n        setError(\"date_range refresh error: Your date range selector has a start date/time that is later than the end date-time \" + startDsr.toString() + \" is not prior to \" + endDsr.toString());\n        return false;\n      } // get superior values and check for errors\n\n\n      var superiorVals = [];\n\n      if (superiorNames !== undefined) {\n        var superiorDimensionality = superiorNames !== null && superiorNames.length > 0 && Array.isArray(superiorNames[0]) ? superiorNames.length : 1;\n\n        for (var si = 0; si < superiorDimensionality; si++) {\n          var superiors = [];\n\n          if (superiorDimensionality === 1) {\n            superiors = superiorNames;\n          } else {\n            superiors = superiorNames[si];\n          }\n\n          var datesMap = undefined;\n\n          for (var si2 = 0; si2 < superiors.length; si2++) {\n            var thisSuperior = superiors[si2];\n            datesMap = datesMap === undefined ? matsCollections.CurveParams.findOne({\n              name: thisSuperior\n            }).dates : datesMap;\n            var sval = matsParamUtils.getInputElementForParamName(thisSuperior).options[matsParamUtils.getInputElementForParamName(thisSuperior).selectedIndex].text;\n\n            if (sval === matsTypes.InputTypes.unused || sval === null || datesMap === undefined || matsParamUtils.getInputElementForParamName(thisSuperior) === undefined || isNaN(matsParamUtils.getInputElementForParamName(thisSuperior).selectedIndex) || matsParamUtils.getInputElementForParamName(thisSuperior).selectedIndex === -1) {\n              // skip this superior - it isn't being used right now\n              continue;\n            }\n\n            datesMap = datesMap[sval];\n          }\n\n          var superiorMinimumDateStr = datesMap.minDate;\n          var superiorMinimumMoment = moment(superiorMinimumDateStr, \"MM/DD/YYYY HH:mm\");\n\n          if (superiorMinimumMoment.isValid()) {\n            superiorVals[si] = superiorVals[si] === undefined ? {} : superiorVals[si];\n            superiorVals[si].min = superiorMinimumMoment;\n          } else {\n            setError(\"date_range refresh error: The end date for the superiors: \" + superiors + \" is invalid: \" + superiorMinimumDateStr);\n            return false;\n          }\n\n          var superiorMaximumDateStr = datesMap.maxDate;\n          var superiorMaximumMoment = moment(superiorMaximumDateStr, \"MM/DD/YYYY HH:mm\");\n\n          if (superiorMaximumMoment.isValid()) {\n            superiorVals[si] = superiorVals[si] === undefined ? {} : superiorVals[si];\n            superiorVals[si].max = superiorMaximumMoment;\n          } else {\n            setError(\"date_range refresh error: The end date for the superiors: \" + superiors + \" is invalid: \" + superiorMaximumDateStr);\n            return false;\n          }\n\n          if (superiorVals[si].min.isAfter(superiorVals[si].max)) {\n            // error\n            setError(\"date_range refresh error: The date range for the superiors: \" + superiors + \" is invalid. It has a start date/time that is later than the end date/time - \" + superiorVals[si].min.toString() + \" is after \" + superiorVals[si].max.toString());\n            return false;\n          }\n        }\n      } // get data range from superiors\n\n\n      if (superiorVals.length === 0) {\n        // no superiors involved - just leave the DSR alone\n        return false;\n      } // these need to be the values for the superiors as they will be not as they are\n\n\n      var dataStart = superiorVals[0].min;\n      var dataEnd = superiorVals[0].max;\n\n      if (superiorVals.length > 1) {\n        for (si = 1; si < superiorVals.length; si++) {\n          var tStart = superiorVals[si].min;\n          var tEnd = superiorVals[si].max;\n\n          if (dataEnd.isBefore(tStart)) {\n            // NCD not coincindebtal data?\n            setInfo(\"You do not have any coincidental data with these two selections: The valid date ranges do not overlap - \" + dataStart.toString() + \" to \" + dataEnd.toString() + \" and \" + tStart.toString() + \" to \" + tEnd.toString());\n            return false;\n          } else if (tEnd.isBefore(dataStart)) {\n            // NCD not coincindebtal data?\n            setInfo(\"You do not have any coincidental data with these two selections: The valid date ranges do not overlap - \" + dataStart.toString() + \" to \" + dataEnd.toString() + \" and \" + tStart.toString() + \" to \" + tEnd.toString());\n            return false;\n          } else {\n            // overlapping data\n            if (tStart.isAfter(dataStart)) {\n              dataStart = tStart;\n            }\n\n            if (tEnd.isBefore(dataEnd)) {\n              dataEnd = tEnd;\n            }\n          }\n        }\n      } // now we have a normalized date range for the selected superiors.\n      // evaluate DRS\n\n\n      if (dataEnd.isBefore(startDsr) || dataStart.isAfter(endDsr)) {\n        // the current user setting and the valid range do not overlap so just set the DSR to the most recent 30 days of the valid range\n        endDsr = dataEnd; // set startDsr to the endDsr less 30 days or less the startDsr whichever is later\n\n        var endDsrLess30 = moment(endDsr).subtract(30, \"days\");\n\n        if (endDsrLess30.isAfter(dataStart)) {\n          startDsr = endDsrLess30;\n        } else {\n          startDsr = dataStart;\n        }\n      } else {\n        // the current user setting and the valid range overlap\n        if (startDsr.isBefore(dataStart)) {\n          startDsr = dataStart;\n        }\n\n        if (endDsr.isAfter(dataEnd)) {\n          endDsr = dataEnd;\n        }\n      } // now reset the DSR with the evaluated date range\n\n\n      var jqIdRef = \"#\" + idref;\n      $(jqIdRef).data('daterangepicker').setStartDate(startDsr);\n      $(jqIdRef).data('daterangepicker').setStartDate(endDsr);\n      var newDateStr = startDsr.format('MM/DD/YYYY HH:mm') + ' - ' + endDsr.format('MM/DD/YYYY HH:mm');\n      matsParamUtils.setValueTextForParamName(name, newDateStr);\n    } catch (error) {\n      console.log(\"Error in date_range.js.refresh : \" + error.message);\n    }\n  }; // register refresh event for superior to use to enforce a refresh of the options list\n\n\n  elem.addEventListener('refresh', function (e) {\n    refresh();\n  });\n  refresh(); // initial value based on what is in the superior\n});","map":{"version":3,"sources":["packages/randyp:mats-common/templates/common/date_range.js"],"names":["matsCollections","matsCurveUtils","matsParamUtils","matsTypes","module","link","v","Template","dateRange","onRendered","document","getElementById","PlotTypes","timeSeries","undefined","checked","dailyModelCycle","scatter2d","style","display","name","data","idref","elem","superiorNames","defaultDateRange","getDefaultDateRange","startInit","startDate","stopInit","stopDate","dstr","$","daterangepicker","locale","format","ranges","moment","startOf","endOf","subtract","setValueTextForParamName","on","ev","picker","toString","endDate","setError","Error","valStr","curveItem","Session","get","trigger","refresh","curVals","getValueForParamName","split","startDsr","endDsr","isValid","isAfter","superiorVals","superiorDimensionality","length","Array","isArray","si","superiors","datesMap","si2","thisSuperior","CurveParams","findOne","dates","sval","getInputElementForParamName","options","selectedIndex","text","InputTypes","unused","isNaN","superiorMinimumDateStr","minDate","superiorMinimumMoment","min","superiorMaximumDateStr","maxDate","superiorMaximumMoment","max","dataStart","dataEnd","tStart","tEnd","isBefore","setInfo","endDsrLess30","jqIdRef","setStartDate","newDateStr","error","console","log","message","addEventListener","e"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2019 Colorado State University and Regents of the University of Colorado. All rights reserved.\n */\n\nimport {matsCollections, matsCurveUtils, matsParamUtils, matsTypes} from 'meteor/randyp:mats-common';\n\nTemplate.dateRange.onRendered(function () {\n    //NOTE: Date fields are special in that they are qualified by plotType.\n    //TimeSeries and Scatter plots have a common date range\n    // but profile plots have a date range for each curve.\n    // The decision to hide or show a dataRange is made here in the dateRange template\n\n    // it seems that when the page is first rendered the checkbox might be yet defined (especially in safari).\n    // in that event we test for undefined and block the curve-dates-item anyway\n    if ((document.getElementById('plot-type-' + matsTypes.PlotTypes.timeSeries) == undefined || document.getElementById('plot-type-' + matsTypes.PlotTypes.timeSeries).checked === true) ||\n        (document.getElementById('plot-type-' + matsTypes.PlotTypes.dailyModelCycle) == undefined || document.getElementById('plot-type-' + matsTypes.PlotTypes.dailyModelCycle).checked === true) ||\n        (document.getElementById('plot-type-' + matsTypes.PlotTypes.scatter2d) == undefined || document.getElementById('plot-type-' + matsTypes.PlotTypes.scatter2d).checked === true)) {\n        if (document.getElementById('curve-dates-item')) {\n            document.getElementById('curve-dates-item').style.display = \"none\";\n        }\n        if (document.getElementById('dates-item')) {\n            document.getElementById('dates-item').style.display = \"block\";\n        }\n    } else {\n        if (document.getElementById('curve-dates-item')) {\n            document.getElementById('curve-dates-item').style.display = \"block\";\n        }\n        if (document.getElementById('dates-item')) {\n            document.getElementById('dates-item').style.display = \"none\";\n        }\n    }\n\n    const name = this.data.name;\n    const idref = name + \"-item\";\n    const elem = document.getElementById('element-' + name);\n    const superiorNames = this.data.superiorNames;\n    const defaultDateRange = matsParamUtils.getDefaultDateRange(name);\n    const startInit = defaultDateRange.startDate;\n    const stopInit = defaultDateRange.stopDate;\n    const dstr = defaultDateRange.dstr;\n\n        $(function () {\n        $('#' + idref).daterangepicker({\n            \"autoApply\": true,\n            \"parentEL\": $('#' + idref),\n            \"timePicker\": true,\n            \"timePicker24Hour\": true,\n            \"timePickerIncrement\": 1,\n            \"startDate\": startInit,\n            \"endDate\": stopInit,\n            \"showDropdowns\": true,\n            \"drops\": \"up\",\n\n            locale: {\n                format: 'MM/DD/YYYY HH:mm'\n            },\n            ranges: {\n                'Today': [moment().startOf('day'), moment().endOf('day')],\n                'Yesterday': [moment().subtract(1, 'days').startOf('day'), moment().subtract(1, 'days').endOf('day')],\n                'Last 7 Full Days': [moment().subtract(7, 'days').startOf('day'), moment().startOf('day')],\n                'Last 30 Full Days': [moment().subtract(30, 'days').startOf('day'), moment().startOf('day')],\n                'Last 60 Full Days': [moment().subtract(60, 'days').startOf('day'), moment().startOf('day')],\n                'Last 90 Full Days': [moment().subtract(90, 'days').startOf('day'), moment().startOf('day')],\n                'Last 180 Full Days': [moment().subtract(180, 'days').startOf('day'), moment().startOf('day')],\n            }, \"alwaysShowCalendars\": true,\n        });\n        matsParamUtils.setValueTextForParamName(name, dstr);\n    });\n\n    $('#' + idref).on('apply.daterangepicker', function (ev, picker) {\n        if (picker.startDate.toString() == picker.endDate.toString()) {\n            setError(new Error(\"date_range error:  Your start and end dates coincide, you must select a range! This is \" +\n                \"because METARs and other obs can come in at slightly different times, so selecting only one time might \" +\n                \"leave you with very few (or no) valid obs. Instead, try using a small range. For example, if you're \" +\n                \"targeting the top-of-the-hour METARs at 2:00 am, set your time range from 1:45 am to 2:00 am, because \" +\n                \"METARs often come in early.\"));\n            return false;\n        }\n        const valStr = picker.startDate.format('MM/DD/YYYY H:mm') + ' - ' + picker.endDate.format('MM/DD/YYYY H:mm');\n        matsParamUtils.setValueTextForParamName(name, valStr);\n        elem.style.display = \"none\";\n        const curveItem = (Session.get(\"editMode\") === undefined && Session.get(\"editMode\") === \"\") ? undefined : document.getElementById(\"curveItem-\" + Session.get(\"editMode\"));\n        if (curveItem) {\n            $('#save').trigger('click');\n        }\n    });\n    $('#' + idref).on('cancel.daterangepicker', function () {\n        elem.style.display = \"none\";\n    });\n\n    const refresh = function () {\n        try {\n            // get the current values from the element and check for invalid\n            const curVals = matsParamUtils.getValueForParamName(name).split(\" - \"); // it is a date object values are \"someFromDate - someToDate\"\n            var startDsr = moment(curVals[0], \"MM/DD/YYYY HH:mm\");\n            var endDsr = moment(curVals[1], \"MM/DD/YYYY HH:mm\");\n            if (!startDsr.isValid()) {\n                // error\n                setError(\"date_range refresh error: Your date range selector has an invalid start date-time: \" + curVals[0]);\n                return false;\n            }\n            if (!endDsr.isValid()) {\n                // error\n                setError(\"date_range refresh error: Your date range selector has an invalid end date-time:\" + curVals[1]);\n                return false;\n            }\n            if (startDsr.isAfter(endDsr)) {\n                // error\n                setError(\"date_range refresh error: Your date range selector has a start date/time that is later than the end date-time \" + startDsr.toString() + \" is not prior to \" + endDsr.toString());\n                return false;\n            }\n            // get superior values and check for errors\n            var superiorVals = [];\n            if (superiorNames !== undefined) {\n                const superiorDimensionality = superiorNames !== null && superiorNames.length > 0 && Array.isArray(superiorNames[0]) ? superiorNames.length : 1;\n                for (var si = 0; si < superiorDimensionality; si++) {\n                    var superiors = [];\n                    if (superiorDimensionality === 1) {\n                        superiors = superiorNames;\n                    } else {\n                        superiors = superiorNames[si];\n                    }\n                    var datesMap = undefined;\n                    for (var si2 = 0; si2 < superiors.length; si2++) {\n                        const thisSuperior = superiors[si2];\n                        datesMap = datesMap === undefined ? matsCollections.CurveParams.findOne({name: thisSuperior}).dates : datesMap;\n                        const sval = matsParamUtils.getInputElementForParamName(thisSuperior).options[matsParamUtils.getInputElementForParamName(thisSuperior).selectedIndex].text;\n                        if (sval === matsTypes.InputTypes.unused ||\n                            sval === null ||\n                            datesMap === undefined ||\n                            matsParamUtils.getInputElementForParamName(thisSuperior) === undefined ||\n                            isNaN(matsParamUtils.getInputElementForParamName(thisSuperior).selectedIndex) ||\n                            matsParamUtils.getInputElementForParamName(thisSuperior).selectedIndex === -1) {\n                            // skip this superior - it isn't being used right now\n                            continue;\n                        }\n                        datesMap = datesMap[sval];\n                    }\n                    const superiorMinimumDateStr = datesMap.minDate;\n                    const superiorMinimumMoment = moment(superiorMinimumDateStr, \"MM/DD/YYYY HH:mm\");\n                    if (superiorMinimumMoment.isValid()) {\n                        superiorVals[si] = superiorVals[si] === undefined ? {} : superiorVals[si];\n                        superiorVals[si].min = superiorMinimumMoment;\n                    } else {\n                        setError(\"date_range refresh error: The end date for the superiors: \" + superiors + \" is invalid: \" + superiorMinimumDateStr);\n                        return false;\n                    }\n                    const superiorMaximumDateStr = datesMap.maxDate;\n                    const superiorMaximumMoment = moment(superiorMaximumDateStr, \"MM/DD/YYYY HH:mm\");\n                    if (superiorMaximumMoment.isValid()) {\n                        superiorVals[si] = superiorVals[si] === undefined ? {} : superiorVals[si];\n                        superiorVals[si].max = superiorMaximumMoment;\n                    } else {\n                        setError(\"date_range refresh error: The end date for the superiors: \" + superiors + \" is invalid: \" + superiorMaximumDateStr);\n                        return false;\n                    }\n                    if ((superiorVals[si].min).isAfter(superiorVals[si].max)) {\n                        // error\n                        setError(\"date_range refresh error: The date range for the superiors: \" + superiors + \" is invalid. It has a start date/time that is later than the end date/time - \" + superiorVals[si].min.toString() + \" is after \" + superiorVals[si].max.toString());\n                        return false;\n                    }\n                }\n            }\n            // get data range from superiors\n            if (superiorVals.length === 0) {\n                // no superiors involved - just leave the DSR alone\n                return false;\n            }\n\n            // these need to be the values for the superiors as they will be not as they are\n            var dataStart = superiorVals[0].min;\n            var dataEnd = superiorVals[0].max;\n\n            if (superiorVals.length > 1) {\n                for (si = 1; si < superiorVals.length; si++) {\n                    const tStart = superiorVals[si].min;\n                    const tEnd = superiorVals[si].max;\n                    if (dataEnd.isBefore(tStart)) {\n                        // NCD not coincindebtal data?\n                        setInfo(\"You do not have any coincidental data with these two selections: The valid date ranges do not overlap - \" +\n                            dataStart.toString() + \" to \" + dataEnd.toString() + \" and \" + tStart.toString() + \" to \" + tEnd.toString());\n                        return false;\n                    } else if (tEnd.isBefore(dataStart)) {\n                        // NCD not coincindebtal data?\n                        setInfo(\"You do not have any coincidental data with these two selections: The valid date ranges do not overlap - \" +\n                            dataStart.toString() + \" to \" + dataEnd.toString() + \" and \" + tStart.toString() + \" to \" + tEnd.toString());\n                        return false;\n                    } else {\n                        // overlapping data\n                        if (tStart.isAfter(dataStart)) {\n                            dataStart = tStart;\n                        }\n                        if (tEnd.isBefore(dataEnd)) {\n                            dataEnd = tEnd;\n                        }\n                    }\n                }\n            }\n            // now we have a normalized date range for the selected superiors.\n            // evaluate DRS\n            if ((dataEnd.isBefore(startDsr) || (dataStart.isAfter(endDsr)))) {\n                // the current user setting and the valid range do not overlap so just set the DSR to the most recent 30 days of the valid range\n                endDsr = dataEnd;\n                // set startDsr to the endDsr less 30 days or less the startDsr whichever is later\n                var endDsrLess30 = moment(endDsr).subtract(30, \"days\");\n                if (endDsrLess30.isAfter(dataStart)) {\n                    startDsr = endDsrLess30;\n                } else {\n                    startDsr = dataStart;\n                }\n            } else {\n                // the current user setting and the valid range overlap\n                if (startDsr.isBefore(dataStart)) {\n                    startDsr = dataStart;\n                }\n                if (endDsr.isAfter(dataEnd)) {\n                    endDsr = dataEnd;\n                }\n            }\n            // now reset the DSR with the evaluated date range\n            const jqIdRef = \"#\" + idref;\n            $(jqIdRef).data('daterangepicker').setStartDate(startDsr);\n            $(jqIdRef).data('daterangepicker').setStartDate(endDsr);\n            const newDateStr = startDsr.format('MM/DD/YYYY HH:mm') + ' - ' + endDsr.format('MM/DD/YYYY HH:mm');\n            matsParamUtils.setValueTextForParamName(name, newDateStr);\n        } catch (error) {\n            console.log(\"Error in date_range.js.refresh : \" + error.message);\n        }\n    };\n\n// register refresh event for superior to use to enforce a refresh of the options list\n    elem.addEventListener('refresh', function (e) {\n        refresh();\n    });\n    refresh();   // initial value based on what is in the superior\n});\n"]},"sourceType":"script","hash":"5480e0c1c93e8cbaa3aca62aa59a9a9d2ed3b981"}
