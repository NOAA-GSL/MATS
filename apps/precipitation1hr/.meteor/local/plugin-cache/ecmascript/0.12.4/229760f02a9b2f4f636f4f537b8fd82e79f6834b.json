{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/ddp-server/crossbar.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/ddp-server/crossbar.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/ddp-server/crossbar.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/ddp-server/crossbar.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/ddp-server/crossbar.js"}},"code":"// A \"crossbar\" is a class that provides structured notification registration.\n// See _match for the definition of how a notification matches a trigger.\n// All notifications and triggers must have a string key named 'collection'.\nDDPServer._Crossbar = function (options) {\n  var self = this;\n  options = options || {};\n  self.nextId = 1; // map from collection name (string) -> listener id -> object. each object has\n  // keys 'trigger', 'callback'.  As a hack, the empty string means \"no\n  // collection\".\n\n  self.listenersByCollection = {};\n  self.listenersByCollectionCount = {};\n  self.factPackage = options.factPackage || \"livedata\";\n  self.factName = options.factName || null;\n};\n\n_.extend(DDPServer._Crossbar.prototype, {\n  // msg is a trigger or a notification\n  _collectionForMessage: function (msg) {\n    var self = this;\n\n    if (!_.has(msg, 'collection')) {\n      return '';\n    } else if (typeof msg.collection === 'string') {\n      if (msg.collection === '') throw Error(\"Message has empty collection!\");\n      return msg.collection;\n    } else {\n      throw Error(\"Message has non-string collection!\");\n    }\n  },\n  // Listen for notification that match 'trigger'. A notification\n  // matches if it has the key-value pairs in trigger as a\n  // subset. When a notification matches, call 'callback', passing\n  // the actual notification.\n  //\n  // Returns a listen handle, which is an object with a method\n  // stop(). Call stop() to stop listening.\n  //\n  // XXX It should be legal to call fire() from inside a listen()\n  // callback?\n  listen: function (trigger, callback) {\n    var self = this;\n    var id = self.nextId++;\n\n    var collection = self._collectionForMessage(trigger);\n\n    var record = {\n      trigger: EJSON.clone(trigger),\n      callback: callback\n    };\n\n    if (!_.has(self.listenersByCollection, collection)) {\n      self.listenersByCollection[collection] = {};\n      self.listenersByCollectionCount[collection] = 0;\n    }\n\n    self.listenersByCollection[collection][id] = record;\n    self.listenersByCollectionCount[collection]++;\n\n    if (self.factName && Package['facts-base']) {\n      Package['facts-base'].Facts.incrementServerFact(self.factPackage, self.factName, 1);\n    }\n\n    return {\n      stop: function () {\n        if (self.factName && Package['facts-base']) {\n          Package['facts-base'].Facts.incrementServerFact(self.factPackage, self.factName, -1);\n        }\n\n        delete self.listenersByCollection[collection][id];\n        self.listenersByCollectionCount[collection]--;\n\n        if (self.listenersByCollectionCount[collection] === 0) {\n          delete self.listenersByCollection[collection];\n          delete self.listenersByCollectionCount[collection];\n        }\n      }\n    };\n  },\n  // Fire the provided 'notification' (an object whose attribute\n  // values are all JSON-compatibile) -- inform all matching listeners\n  // (registered with listen()).\n  //\n  // If fire() is called inside a write fence, then each of the\n  // listener callbacks will be called inside the write fence as well.\n  //\n  // The listeners may be invoked in parallel, rather than serially.\n  fire: function (notification) {\n    var self = this;\n\n    var collection = self._collectionForMessage(notification);\n\n    if (!_.has(self.listenersByCollection, collection)) {\n      return;\n    }\n\n    var listenersForCollection = self.listenersByCollection[collection];\n    var callbackIds = [];\n\n    _.each(listenersForCollection, function (l, id) {\n      if (self._matches(notification, l.trigger)) {\n        callbackIds.push(id);\n      }\n    }); // Listener callbacks can yield, so we need to first find all the ones that\n    // match in a single iteration over self.listenersByCollection (which can't\n    // be mutated during this iteration), and then invoke the matching\n    // callbacks, checking before each call to ensure they haven't stopped.\n    // Note that we don't have to check that\n    // self.listenersByCollection[collection] still === listenersForCollection,\n    // because the only way that stops being true is if listenersForCollection\n    // first gets reduced down to the empty object (and then never gets\n    // increased again).\n\n\n    _.each(callbackIds, function (id) {\n      if (_.has(listenersForCollection, id)) {\n        listenersForCollection[id].callback(notification);\n      }\n    });\n  },\n  // A notification matches a trigger if all keys that exist in both are equal.\n  //\n  // Examples:\n  //  N:{collection: \"C\"} matches T:{collection: \"C\"}\n  //    (a non-targeted write to a collection matches a\n  //     non-targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\"}\n  //    (a targeted write to a collection matches a non-targeted query)\n  //  N:{collection: \"C\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a non-targeted write to a collection matches a\n  //     targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a targeted write to a collection matches a targeted query targeted\n  //     at the same document)\n  //  N:{collection: \"C\", id: \"X\"} does not match T:{collection: \"C\", id: \"Y\"}\n  //    (a targeted write to a collection does not match a targeted query\n  //     targeted at a different document)\n  _matches: function (notification, trigger) {\n    // Most notifications that use the crossbar have a string `collection` and\n    // maybe an `id` that is a string or ObjectID. We're already dividing up\n    // triggers by collection, but let's fast-track \"nope, different ID\" (and\n    // avoid the overly generic EJSON.equals). This makes a noticeable\n    // performance difference; see https://github.com/meteor/meteor/pull/3697\n    if (typeof notification.id === 'string' && typeof trigger.id === 'string' && notification.id !== trigger.id) {\n      return false;\n    }\n\n    if (notification.id instanceof MongoID.ObjectID && trigger.id instanceof MongoID.ObjectID && !notification.id.equals(trigger.id)) {\n      return false;\n    }\n\n    return _.all(trigger, function (triggerValue, key) {\n      return !_.has(notification, key) || EJSON.equals(triggerValue, notification[key]);\n    });\n  }\n}); // The \"invalidation crossbar\" is a specific instance used by the DDP server to\n// implement write fence notifications. Listener callbacks on this crossbar\n// should call beginWrite on the current write fence before they return, if they\n// want to delay the write fence from firing (ie, the DDP method-data-updated\n// message from being sent).\n\n\nDDPServer._InvalidationCrossbar = new DDPServer._Crossbar({\n  factName: \"invalidation-crossbar-listeners\"\n});","map":{"version":3,"sources":["packages/ddp-server/crossbar.js"],"names":["DDPServer","_Crossbar","options","self","nextId","listenersByCollection","listenersByCollectionCount","factPackage","factName","_","extend","prototype","_collectionForMessage","msg","has","collection","Error","listen","trigger","callback","id","record","EJSON","clone","Package","Facts","incrementServerFact","stop","fire","notification","listenersForCollection","callbackIds","each","l","_matches","push","MongoID","ObjectID","equals","all","triggerValue","key","_InvalidationCrossbar"],"mappings":"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","sourcesContent":["// A \"crossbar\" is a class that provides structured notification registration.\n// See _match for the definition of how a notification matches a trigger.\n// All notifications and triggers must have a string key named 'collection'.\n\nDDPServer._Crossbar = function (options) {\n  var self = this;\n  options = options || {};\n\n  self.nextId = 1;\n  // map from collection name (string) -> listener id -> object. each object has\n  // keys 'trigger', 'callback'.  As a hack, the empty string means \"no\n  // collection\".\n  self.listenersByCollection = {};\n  self.listenersByCollectionCount = {};\n  self.factPackage = options.factPackage || \"livedata\";\n  self.factName = options.factName || null;\n};\n\n_.extend(DDPServer._Crossbar.prototype, {\n  // msg is a trigger or a notification\n  _collectionForMessage: function (msg) {\n    var self = this;\n    if (! _.has(msg, 'collection')) {\n      return '';\n    } else if (typeof(msg.collection) === 'string') {\n      if (msg.collection === '')\n        throw Error(\"Message has empty collection!\");\n      return msg.collection;\n    } else {\n      throw Error(\"Message has non-string collection!\");\n    }\n  },\n\n  // Listen for notification that match 'trigger'. A notification\n  // matches if it has the key-value pairs in trigger as a\n  // subset. When a notification matches, call 'callback', passing\n  // the actual notification.\n  //\n  // Returns a listen handle, which is an object with a method\n  // stop(). Call stop() to stop listening.\n  //\n  // XXX It should be legal to call fire() from inside a listen()\n  // callback?\n  listen: function (trigger, callback) {\n    var self = this;\n    var id = self.nextId++;\n\n    var collection = self._collectionForMessage(trigger);\n    var record = {trigger: EJSON.clone(trigger), callback: callback};\n    if (! _.has(self.listenersByCollection, collection)) {\n      self.listenersByCollection[collection] = {};\n      self.listenersByCollectionCount[collection] = 0;\n    }\n    self.listenersByCollection[collection][id] = record;\n    self.listenersByCollectionCount[collection]++;\n\n    if (self.factName && Package['facts-base']) {\n      Package['facts-base'].Facts.incrementServerFact(\n        self.factPackage, self.factName, 1);\n    }\n\n    return {\n      stop: function () {\n        if (self.factName && Package['facts-base']) {\n          Package['facts-base'].Facts.incrementServerFact(\n            self.factPackage, self.factName, -1);\n        }\n        delete self.listenersByCollection[collection][id];\n        self.listenersByCollectionCount[collection]--;\n        if (self.listenersByCollectionCount[collection] === 0) {\n          delete self.listenersByCollection[collection];\n          delete self.listenersByCollectionCount[collection];\n        }\n      }\n    };\n  },\n\n  // Fire the provided 'notification' (an object whose attribute\n  // values are all JSON-compatibile) -- inform all matching listeners\n  // (registered with listen()).\n  //\n  // If fire() is called inside a write fence, then each of the\n  // listener callbacks will be called inside the write fence as well.\n  //\n  // The listeners may be invoked in parallel, rather than serially.\n  fire: function (notification) {\n    var self = this;\n\n    var collection = self._collectionForMessage(notification);\n\n    if (! _.has(self.listenersByCollection, collection)) {\n      return;\n    }\n\n    var listenersForCollection = self.listenersByCollection[collection];\n    var callbackIds = [];\n    _.each(listenersForCollection, function (l, id) {\n      if (self._matches(notification, l.trigger)) {\n        callbackIds.push(id);\n      }\n    });\n\n    // Listener callbacks can yield, so we need to first find all the ones that\n    // match in a single iteration over self.listenersByCollection (which can't\n    // be mutated during this iteration), and then invoke the matching\n    // callbacks, checking before each call to ensure they haven't stopped.\n    // Note that we don't have to check that\n    // self.listenersByCollection[collection] still === listenersForCollection,\n    // because the only way that stops being true is if listenersForCollection\n    // first gets reduced down to the empty object (and then never gets\n    // increased again).\n    _.each(callbackIds, function (id) {\n      if (_.has(listenersForCollection, id)) {\n        listenersForCollection[id].callback(notification);\n      }\n    });\n  },\n\n  // A notification matches a trigger if all keys that exist in both are equal.\n  //\n  // Examples:\n  //  N:{collection: \"C\"} matches T:{collection: \"C\"}\n  //    (a non-targeted write to a collection matches a\n  //     non-targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\"}\n  //    (a targeted write to a collection matches a non-targeted query)\n  //  N:{collection: \"C\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a non-targeted write to a collection matches a\n  //     targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a targeted write to a collection matches a targeted query targeted\n  //     at the same document)\n  //  N:{collection: \"C\", id: \"X\"} does not match T:{collection: \"C\", id: \"Y\"}\n  //    (a targeted write to a collection does not match a targeted query\n  //     targeted at a different document)\n  _matches: function (notification, trigger) {\n    // Most notifications that use the crossbar have a string `collection` and\n    // maybe an `id` that is a string or ObjectID. We're already dividing up\n    // triggers by collection, but let's fast-track \"nope, different ID\" (and\n    // avoid the overly generic EJSON.equals). This makes a noticeable\n    // performance difference; see https://github.com/meteor/meteor/pull/3697\n    if (typeof(notification.id) === 'string' &&\n        typeof(trigger.id) === 'string' &&\n        notification.id !== trigger.id) {\n      return false;\n    }\n    if (notification.id instanceof MongoID.ObjectID &&\n        trigger.id instanceof MongoID.ObjectID &&\n        ! notification.id.equals(trigger.id)) {\n      return false;\n    }\n\n    return _.all(trigger, function (triggerValue, key) {\n      return !_.has(notification, key) ||\n        EJSON.equals(triggerValue, notification[key]);\n    });\n  }\n});\n\n// The \"invalidation crossbar\" is a specific instance used by the DDP server to\n// implement write fence notifications. Listener callbacks on this crossbar\n// should call beginWrite on the current write fence before they return, if they\n// want to delay the write fence from firing (ie, the DDP method-data-updated\n// message from being sent).\nDDPServer._InvalidationCrossbar = new DDPServer._Crossbar({\n  factName: \"invalidation-crossbar-listeners\"\n});\n"]},"sourceType":"script","hash":"229760f02a9b2f4f636f4f537b8fd82e79f6834b"}
