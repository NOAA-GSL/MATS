{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/templates/graph/text_output.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/randyp:mats-common/templates/graph/text_output.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/templates/graph/text_output.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/templates/graph/text_output.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/randyp:mats-common/templates/graph/text_output.js"}},"code":"let matsCollections, matsCurveUtils, matsPlotUtils, matsTypes;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsCollections(v) {\n    matsCollections = v;\n  },\n\n  matsCurveUtils(v) {\n    matsCurveUtils = v;\n  },\n\n  matsPlotUtils(v) {\n    matsPlotUtils = v;\n  },\n\n  matsTypes(v) {\n    matsTypes = v;\n  }\n\n}, 0);\nlet moment;\nmodule.link(\"meteor/momentjs:moment\", {\n  moment(v) {\n    moment = v;\n  }\n\n}, 1);\n\n/*\nReferring to the Session variable plotResultKey here causes the html template to get re-rendered with the current graph data\n(which is in the Results collection).\n */\nvar fillStr = \"---\";\nvar times = []; // I don't think this is used anymore, but I'm not certain, so I'm leaving it here for now.\n\nconst getDataForTime = function (data, time) {\n  if (data === undefined) {\n    return undefined;\n  }\n\n  for (var i = 0; i < data.length; i++) {\n    if (data[i][0] == Number(time)) {\n      return data[i] === null ? undefined : data[i];\n    }\n  }\n\n  return undefined;\n}; // fetches the data back from where the query routine stored it.\n\n\nconst getDataForCurve = function (curve) {\n  if (Session.get(\"plotResultKey\") == undefined || matsCurveUtils.getPlotResultData() === undefined) {\n    return undefined;\n  }\n\n  if (matsCurveUtils.getPlotResultData() === null) {\n    return [];\n  }\n\n  if (Session.get(\"plotType\") === matsTypes.PlotTypes.scatter2d) {\n    return matsCurveUtils.getPlotResultData()[curve.label];\n  } else {\n    return matsCurveUtils.getPlotResultData().data[curve.label];\n  }\n};\n\nTemplate.textOutput.onRendered(function () {\n  const settings = matsCollections.Settings.findOne({}, {\n    fields: {\n      NullFillString: 1\n    }\n  });\n\n  if (settings === undefined) {\n    fillStr = \"---\";\n  } else {\n    fillStr = settings.NullFillString;\n  }\n});\nTemplate.textOutput.helpers({\n  notScatter: function () {\n    return Session.get(\"plotType\") !== matsTypes.PlotTypes.scatter2d;\n  },\n  // get the table header for the summary stats at the top of the text page\n  statHeaders: function () {\n    var header = \"\";\n\n    switch (Session.get('plotType')) {\n      case matsTypes.PlotTypes.timeSeries:\n      case matsTypes.PlotTypes.dailyModelCycle:\n      case matsTypes.PlotTypes.profile:\n        header += \"<th>label</th>\\\n                    <th>mean</th>\\\n                    <th>standard deviation</th>\\\n                    <th>n</th>\\\n                    <th>standard error</th>\\\n                    <th>lag1</th>\\\n                    <th>minimum</th>\\\n                    <th>maximum</th>\";\n        break;\n\n      case matsTypes.PlotTypes.dieoff:\n      case matsTypes.PlotTypes.threshold:\n      case matsTypes.PlotTypes.validtime:\n        header += \"<th>label</th>\\\n                    <th>mean</th>\\\n                    <th>standard deviation</th>\\\n                    <th>n</th>\\\n                    <th>minimum</th>\\\n                    <th>maximum</th>\";\n        break;\n\n      case matsTypes.PlotTypes.reliability:\n        header += \"<th>label</th>\\\n                    <th>sample climatology</th>\";\n        break;\n\n      case matsTypes.PlotTypes.map:\n        header += \"<th>label</th>\\\n                    <th>mean</th>\\\n                    <th>standard deviation</th>\\\n                    <th>n</th>\\\n                    <th>minimum time</th>\\\n                    <th>maximum time</th>\";\n        break;\n\n      case matsTypes.PlotTypes.histogram:\n        header += \"<th>label</th>\\\n                    <th>mean</th>\\\n                    <th>standard deviation</th>\\\n                    <th>n</th>\\\n                    <th>minimum</th>\\\n                    <th>maximum</th>\";\n        break;\n\n      case matsTypes.PlotTypes.contour:\n      case matsTypes.PlotTypes.contourDiff:\n        header += \"<th>label</th>\\\n                    <th>mean stat</th>\\\n                    <th>n</th>\\\n                    <th>minimum time</th>\\\n                    <th>maximum time</th>\";\n        break;\n\n      case matsTypes.PlotTypes.scatter2d:\n        // no stat for scatter\n        break;\n\n      default:\n        break;\n    }\n\n    return header;\n  },\n  // get the table header for each curve's data\n  elementHeaders: function (curve) {\n    var header = \"\";\n\n    switch (Session.get('plotType')) {\n      case matsTypes.PlotTypes.timeSeries:\n        header += \"<th>\" + curve.label + \" time</th>\\\n                        <th>raw stat from query</th>\\\n                        <th>plotted stat</th>\\\n                        <th>std dev</th>\\\n                        <th>std error</th>\\\n                        <th>lag1</th>\\\n                        <th>n</th>\";\n        break;\n\n      case matsTypes.PlotTypes.dailyModelCycle:\n        header += \"<th>\" + curve.label + \" time</th>\\\n                        <th>raw stat from query</th>\\\n                        <th>plotted stat</th>\\\n                        <th>std dev</th>\\\n                        <th>n</th>\";\n        break;\n\n      case matsTypes.PlotTypes.profile:\n        header += \"<th>\" + curve.label + \" level</th>\\\n                        <th>raw stat from query</th>\\\n                        <th>plotted stat</th>\\\n                        <th>std dev</th>\\\n                        <th>std error</th>\\\n                        <th>lag1</th>\\\n                        <th>n</th>\";\n        break;\n\n      case matsTypes.PlotTypes.dieoff:\n        header += \"<th>\" + curve.label + \" forecast lead time</th>\\\n                        <th>raw stat from query</th>\\\n                        <th>plotted stat</th>\\\n                        <th>std dev</th>\\\n                        <th>n</th>\";\n        break;\n\n      case matsTypes.PlotTypes.threshold:\n        header += \"<th>\" + curve.label + \" threshold (in)</th>\\\n                        <th>raw stat from query</th>\\\n                        <th>plotted stat</th>\\\n                        <th>std dev</th>\\\n                        <th>n</th>\";\n        break;\n\n      case matsTypes.PlotTypes.validtime:\n        header += \"<th>\" + curve.label + \" hour of day</th>\\\n                        <th>raw stat from query</th>\\\n                        <th>plotted stat</th>\\\n                        <th>std dev</th>\\\n                        <th>n</th>\";\n        break;\n\n      case matsTypes.PlotTypes.reliability:\n        header += \"<th>\" + curve.label + \" probability bin</th>\\\n                        <th>hit rate</th>\\\n                        <th>oy</th>\\\n                        <th>on</th>\";\n        break;\n\n      case matsTypes.PlotTypes.map:\n        header += \"<th>Site Name</th>\\\n                        <th>Number of Times</th>\\\n                        <th>Start Date</th>\\\n                        <th>End Date</th>\\\n                        <th>Average Difference</th>\";\n        break;\n\n      case matsTypes.PlotTypes.histogram:\n        header += \"<th>\" + curve.label + \"  bin range</th>\\\n                        <th>bin n</th>\\\n                        <th>bin rel freq</th>\\\n                        <th>bin lower bound</th>\\\n                        <th>bin upper bound</th>\\\n                        <th>bin mean</th>\\\n                        <th>bin std dev</th>\";\n        break;\n\n      case matsTypes.PlotTypes.contour:\n      case matsTypes.PlotTypes.contourDiff:\n        header += \"<th>X Value</th>\\\n                        <th>Y Value</th>\\\n                        <th>Stat</th>\\\n                        <th>Number</th>\\\n                        <th>Start Date</th>\\\n                        <th>End Date</th>\";\n        break;\n\n      case matsTypes.PlotTypes.scatter2d:\n        header += \"<th>\" + curve.label + \" x axis</th>\\\n                        <th>\" + curve.label + \" y axis</th>\\\n                        <th>best fit</th>\";\n        break;\n\n      default:\n        break;\n    }\n\n    return header;\n  },\n  elements: function (curve) {\n    Session.get('textLoaded'); // monitor for data changres like previous / next\n\n    return getDataForCurve(curve);\n  },\n  curves: function () {\n    Session.get('textLoaded');\n    Session.get(\"plotResultKey\"); // make sure we re-render when data changes\n\n    return Session.get('Curves');\n  },\n  curveLabel: function (curve) {\n    switch (Session.get('plotType')) {\n      case matsTypes.PlotTypes.timeSeries:\n        return curve.label + \" time\";\n        break;\n\n      case matsTypes.PlotTypes.profile:\n        return curve.label + \" level\";\n        break;\n\n      case matsTypes.PlotTypes.dieoff:\n        return curve.label + \" forecast lead time\";\n\n      default:\n        return curve.label;\n        break;\n    }\n  },\n  curveText: function () {\n    const text = matsPlotUtils.getCurveText(matsPlotUtils.getPlotType(), this);\n    return text;\n  },\n  // get the table row values for each curve's data\n  elementHtml: function (element) {\n    var labelKey = Template.parentData().label;\n    var elementLabel = \"\";\n    var line = \"\";\n\n    switch (Session.get('plotType')) {\n      case matsTypes.PlotTypes.timeSeries:\n        line += \"<td>\" + element[labelKey += \" time\"] + \"</td>\" + \"<td>\" + (element['raw stat from query'] != undefined && element['raw stat from query'] !== null ? element['raw stat from query'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + (element['plotted stat'] != undefined && element['plotted stat'] !== null ? element['plotted stat'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + (element['std dev'] != undefined && element['std dev'] !== null ? element['std dev'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + (element['std error'] != undefined && element['std error'] !== null ? element['std error'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + (element['lag1'] != undefined && element['lag1'] !== null ? element['lag1'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + ('n' in element && element['n'] ? element['n'] : fillStr) + \"</td>\";\n        break;\n\n      case matsTypes.PlotTypes.profile:\n        line += \"<td>\" + element[labelKey += \" level\"] + \"</td>\" + \"<td>\" + (element['raw stat from query'] != undefined && element['raw stat from query'] !== null ? element['raw stat from query'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + (element['plotted stat'] != undefined && element['plotted stat'] !== null ? element['plotted stat'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + (element['std dev'] != undefined && element['std dev'] !== null ? element['std dev'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + (element['std error'] != undefined && element['std error'] !== null ? element['std error'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + (element['lag1'] != undefined && element['lag1'] !== null ? element['lag1'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + ('n' in element ? element['n'] : fillStr) + \"</td>\";\n        break;\n\n      case matsTypes.PlotTypes.dieoff:\n        line += \"<td>\" + element[labelKey += \" forecast lead time\"] + \"</td>\" + \"<td>\" + (element['raw stat from query'] != undefined && element['raw stat from query'] !== null ? element['raw stat from query'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + (element['plotted stat'] != undefined && element['plotted stat'] !== null ? element['plotted stat'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + (element['std dev'] != undefined && element['std dev'] !== null ? element['std dev'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + ('n' in element ? element['n'] : fillStr) + \"</td>\";\n        break;\n\n      case matsTypes.PlotTypes.threshold:\n        line += \"<td>\" + element[labelKey += \" threshold (in)\"] + \"</td>\" + \"<td>\" + (element['raw stat from query'] != undefined && element['raw stat from query'] !== null ? element['raw stat from query'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + (element['plotted stat'] != undefined && element['plotted stat'] !== null ? element['plotted stat'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + (element['std dev'] != undefined && element['std dev'] !== null ? element['std dev'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + ('n' in element ? element['n'] : fillStr) + \"</td>\";\n        break;\n\n      case matsTypes.PlotTypes.validtime:\n        line += \"<td>\" + element[labelKey += \" hour of day\"] + \"</td>\" + \"<td>\" + (element['raw stat from query'] != undefined && element['raw stat from query'] !== null ? element['raw stat from query'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + (element['plotted stat'] != undefined && element['plotted stat'] !== null ? element['plotted stat'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + (element['std dev'] != undefined && element['std dev'] !== null ? element['std dev'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + ('n' in element ? element['n'] : fillStr) + \"</td>\";\n        break;\n\n      case matsTypes.PlotTypes.dailyModelCycle:\n        line += \"<td>\" + element[labelKey += \" time\"] + \"</td>\" + \"<td>\" + (element['raw stat from query'] != undefined && element['raw stat from query'] !== null ? element['raw stat from query'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + (element['plotted stat'] != undefined && element['plotted stat'] !== null ? element['plotted stat'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + (element['std dev'] != undefined && element['std dev'] !== null ? element['std dev'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + ('n' in element ? element['n'] : fillStr) + \"</td>\";\n        break;\n\n      case matsTypes.PlotTypes.reliability:\n        line += \"<td>\" + element[labelKey += \" probability bin\"] + \"</td>\" + \"<td>\" + (element['hit rate'] != undefined && element['hit rate'] !== null ? element['hit rate'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + (element['oy'] != undefined && element['oy'] !== null ? element['oy'] : fillStr) + \"</td>\" + \"<td>\" + (element['on'] != undefined && element['on'] !== null ? element['on'] : fillStr) + \"</td>\";\n        break;\n\n      case matsTypes.PlotTypes.map:\n        line += \"<td>\" + element[\"Site Name\"] + \"</td>\" + \"<td>\" + (element['Number of Times'] != undefined && element['Number of Times'] !== null ? element['Number of Times'] : fillStr) + \"</td>\" + \"<td>\" + (element['Start Date'] != undefined && element['Start Date'] !== null ? element['Start Date'] : fillStr) + \"</td>\" + \"<td>\" + (element['End Date'] != undefined && element['End Date'] !== null ? element['End Date'] : fillStr) + \"</td>\" + \"<td>\" + (element['Average Difference'] != undefined && element['Average Difference'] !== null ? element['Average Difference'] : fillStr) + \"</td>\";\n        break;\n\n      case matsTypes.PlotTypes.histogram:\n        line += \"<td>\" + element[labelKey += \" bin range\"] + \"</td>\" + \"<td>\" + ('n' in element ? element['n'] : fillStr) + \"</td>\" + \"<td>\" + (element['bin rel freq'] != undefined && element['bin rel freq'] !== null ? element['bin rel freq'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + (element['bin lower bound'] != undefined && element['bin lower bound'] !== null ? element['bin lower bound'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + (element['bin upper bound'] != undefined && element['bin upper bound'] !== null ? element['bin upper bound'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + (element['bin mean'] != undefined && element['bin mean'] !== null ? element['bin mean'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + (element['bin std dev'] != undefined && element['bin std dev'] !== null ? element['bin std dev'].toPrecision(4) : fillStr) + \"</td>\";\n        break;\n\n      case matsTypes.PlotTypes.contour:\n      case matsTypes.PlotTypes.contourDiff:\n        line += \"<td>\" + element[\"xVal\"] + \"</td>\" + \"<td>\" + element[\"yVal\"] + \"</td>\" + \"<td>\" + (element['stat'] != undefined && element['stat'] !== null ? element['stat'] : fillStr) + \"</td>\" + \"<td>\" + (element['N'] != undefined && element['N'] !== null ? element['N'] : fillStr) + \"</td>\" + \"<td>\" + (element['Start Date'] != undefined && element['Start Date'] !== null ? element['Start Date'] : fillStr) + \"</td>\" + \"<td>\" + (element['End Date'] != undefined && element['End Date'] !== null ? element['End Date'] : fillStr) + \"</td>\";\n        break;\n\n      case matsTypes.PlotTypes.scatter2d:\n        line += \"<td>\" + (element['xAxis'] != undefined && element['xAxis'] !== null ? element['xAxis'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + (element['yAxis'] != undefined && element['yAxis'] !== null ? element['yAxis'].toPrecision(4) : fillStr) + \"</td>\" + \"<td>\" + (element['best fit'] != undefined && element['best fit'] !== null ? element['best fit'] : fillStr) + \"</td>\";\n        break;\n\n      default:\n        break;\n    }\n\n    return line;\n  },\n  // get the table row values for the summary stats at the top of the text page\n  stats: function (curve) {\n    if (Session.get(\"plotResultKey\") === undefined) {\n      return [];\n    }\n\n    var curves = Session.get('Curves');\n\n    if (curves === undefined || curves.length == 0) {\n      return [];\n    }\n\n    var cindex;\n\n    for (cindex = 0; cindex < curves.length; cindex++) {\n      if (curves[cindex].label == curve.label) {\n        break;\n      }\n    }\n\n    if (matsCurveUtils.getPlotResultData() === null || matsCurveUtils.getPlotResultData() === undefined || matsCurveUtils.getPlotResultData().stats === undefined || matsCurveUtils.getPlotResultData().stats[curves[cindex].label] === undefined) {\n      return \"\";\n    }\n\n    const stats = matsCurveUtils.getPlotResultData().stats[curves[cindex].label];\n    var line = \"\";\n\n    switch (Session.get('plotType')) {\n      case matsTypes.PlotTypes.timeSeries:\n      case matsTypes.PlotTypes.profile:\n      case matsTypes.PlotTypes.dailyModelCycle:\n        line += \"<td>\" + curve['label'] + \"</td>\" + \"<td>\" + (stats['mean'] != undefined && stats['mean'] !== null ? stats['mean'].toPrecision(4) : \"undefined\").toString() + \"</td>\" + \"<td>\" + (stats['standard deviation'] != undefined && stats['standard deviation'] !== null ? stats['standard deviation'].toPrecision(4) : \"undefined\").toString() + \"</td>\" + \"<td>\" + stats['n'].toString() + \"</td>\" + \"<td>\" + (stats['standard error'] != undefined && stats['standard error'] != null ? stats['standard error'].toPrecision(4) : \"undefined\").toString() + \"</td>\" + \"<td>\" + (stats['lag1'] != undefined && stats['lag1'] != null ? stats['lag1'].toPrecision(4) : \"undefined\").toString() + \"</td>\" + \"<td>\" + (stats['minimum'] != undefined && stats['minimum'] != null ? stats['minimum'].toPrecision(4) : \"undefined\").toString() + \"</td>\" + \"<td>\" + (stats['maximum'] != undefined && stats['maximum'] != null ? stats['maximum'].toPrecision(4) : \"undefined\").toString() + \"</td>\";\n        break;\n\n      case matsTypes.PlotTypes.dieoff:\n      case matsTypes.PlotTypes.threshold:\n      case matsTypes.PlotTypes.validtime:\n        line += \"<td>\" + curve['label'] + \"</td>\" + \"<td>\" + (stats['mean'] != undefined && stats['mean'] !== null ? stats['mean'].toPrecision(4) : \"undefined\").toString() + \"</td>\" + \"<td>\" + (stats['standard deviation'] != undefined && stats['standard deviation'] !== null ? stats['standard deviation'].toPrecision(4) : \"undefined\").toString() + \"</td>\" + \"<td>\" + stats['n'].toString() + \"</td>\" + \"<td>\" + (stats['minimum'] != undefined && stats['minimum'] != null ? stats['minimum'].toPrecision(4) : \"undefined\").toString() + \"</td>\" + \"<td>\" + (stats['maximum'] != undefined && stats['maximum'] != null ? stats['maximum'].toPrecision(4) : \"undefined\").toString() + \"</td>\";\n        break;\n\n      case matsTypes.PlotTypes.reliability:\n        line += \"<td>\" + curve['label'] + \"</td>\" + \"<td>\" + (stats['sample climo'] != undefined && stats['sample climo'] !== null ? stats['sample climo'].toPrecision(4) : \"undefined\").toString() + \"</td>\";\n        break;\n\n      case matsTypes.PlotTypes.map:\n        line += \"<td>\" + curve['label'] + \"</td>\" + \"<td>\" + (stats['mean difference'] != undefined && stats['mean difference'] !== null ? stats['mean difference'].toPrecision(4) : \"undefined\").toString() + \"</td>\" + \"<td>\" + (stats['standard deviation'] != undefined && stats['standard deviation'] !== null ? stats['standard deviation'].toPrecision(4) : \"undefined\").toString() + \"</td>\" + \"<td>\" + (stats['total number of obs'] != undefined && stats['total number of obs'] !== null ? stats['total number of obs'] : \"undefined\").toString() + \"</td>\" + \"<td>\" + (stats['minimum time'] != undefined && stats['minimum time'] != null ? stats['minimum time'] : \"undefined\").toString() + \"</td>\" + \"<td>\" + (stats['maximum time'] != undefined && stats['maximum time'] != null ? stats['maximum time'] : \"undefined\").toString() + \"</td>\";\n        break;\n\n      case matsTypes.PlotTypes.histogram:\n        line += \"<td>\" + curve['label'] + \"</td>\" + \"<td>\" + (stats['mean'] != undefined && stats['mean'] !== null ? stats['mean'].toPrecision(4) : \"undefined\").toString() + \"</td>\" + \"<td>\" + (stats['standard deviation'] != undefined && stats['standard deviation'] != null ? stats['standard deviation'].toPrecision(4) : \"undefined\").toString() + \"</td>\" + \"<td>\" + stats['n'].toString() + \"</td>\" + \"<td>\" + (stats['minimum'] != undefined && stats['minimum'] != null ? stats['minimum'].toPrecision(4) : \"undefined\").toString() + \"</td>\" + \"<td>\" + (stats['maximum'] != undefined && stats['maximum'] != null ? stats['maximum'].toPrecision(4) : \"undefined\").toString() + \"</td>\";\n        break;\n\n      case matsTypes.PlotTypes.contour:\n      case matsTypes.PlotTypes.contourDiff:\n        line += \"<td>\" + curve['label'] + \"</td>\" + \"<td>\" + (stats['mean stat'] != undefined && stats['mean stat'] !== null ? stats['mean stat'].toPrecision(4) : \"undefined\").toString() + \"</td>\" + \"<td>\" + (stats['total number of points'] != undefined && stats['total number of points'] !== null ? stats['total number of points'] : \"undefined\").toString() + \"</td>\" + \"<td>\" + (stats['minimum time'] != undefined && stats['minimum time'] != null ? stats['minimum time'] : \"undefined\").toString() + \"</td>\" + \"<td>\" + (stats['maximum time'] != undefined && stats['maximum time'] != null ? stats['maximum time'] : \"undefined\").toString() + \"</td>\";\n        break;\n\n      case matsTypes.PlotTypes.scatter2d:\n        line += \"<td>\" + curve['label'] + \"</td>\" + \"<td>\" + (stats['mean'] != undefined && stats['mean'] !== null ? stats['mean'].toPrecision(4) : \"undefined\").toString() + \"</td>\" + \"<td>\" + (stats['standard deviation'] != undefined && stats['standard deviation'] !== null ? stats['standard deviation'].toPrecision(4) : \"undefined\").toString() + \"</td>\" + \"<td>\" + stats['n'].toString() + \"</td>\" + \"<td>\" + (stats['standard error'] != undefined && stats['standard error'] != null ? stats['standard error'].toPrecision(4) : \"undefined\").toString() + \"</td>\" + \"<td>\" + (stats['lag1'] != undefined && stats['lag1'] != null ? stats['lag1'].toPrecision(4) : \"undefined\").toString() + \"</td>\" + \"<td>\" + (stats['minimum'] != undefined && stats['minimum'] != null ? stats['minimum'].toPrecision(4) : \"undefined\").toString() + \"</td>\" + \"<td>\" + (stats['maximum'] != undefined && stats['maximum'] != null ? stats['maximum'].toPrecision(4) : \"undefined\").toString() + \"</td>\";\n        break;\n\n      default:\n        break;\n    }\n\n    return line;\n  }\n});\nTemplate.textOutput.events({\n  'click .export': function () {\n    var plotType = Session.get('plotType');\n    var key = Session.get('plotResultKey'); // open a new window with\n\n    window.open(window.location + \"/CSV/\" + Session.get(\"graphFunction\") + \"/\" + Session.get(\"plotResultKey\") + \"/\" + Session.get('plotParameter') + \"/\" + matsCollections.Settings.findOne({}, {\n      fields: {\n        Title: 1\n      }\n    }).Title);\n  }\n});","map":{"version":3,"sources":["packages/randyp:mats-common/templates/graph/text_output.js"],"names":["matsCollections","matsCurveUtils","matsPlotUtils","matsTypes","module","link","v","moment","fillStr","times","getDataForTime","data","time","undefined","i","length","Number","getDataForCurve","curve","Session","get","getPlotResultData","PlotTypes","scatter2d","label","Template","textOutput","onRendered","settings","Settings","findOne","fields","NullFillString","helpers","notScatter","statHeaders","header","timeSeries","dailyModelCycle","profile","dieoff","threshold","validtime","reliability","map","histogram","contour","contourDiff","elementHeaders","elements","curves","curveLabel","curveText","text","getCurveText","getPlotType","elementHtml","element","labelKey","parentData","elementLabel","line","toPrecision","stats","cindex","toString","events","plotType","key","window","open","location","Title"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2019 Colorado State University and Regents of the University of Colorado. All rights reserved.\n */\n\nimport {matsCollections, matsCurveUtils, matsPlotUtils, matsTypes} from 'meteor/randyp:mats-common';\nimport {moment} from 'meteor/momentjs:moment';\n/*\nReferring to the Session variable plotResultKey here causes the html template to get re-rendered with the current graph data\n(which is in the Results collection).\n */\nvar fillStr = \"---\";\n\nvar times = [];\n\n// I don't think this is used anymore, but I'm not certain, so I'm leaving it here for now.\nconst getDataForTime = function (data, time) {\n    if (data === undefined) {\n        return undefined;\n    }\n    for (var i = 0; i < data.length; i++) {\n        if (data[i][0] == Number(time)) {\n            return data[i] === null ? undefined : data[i];\n        }\n    }\n    return undefined;\n};\n\n// fetches the data back from where the query routine stored it.\nconst getDataForCurve = function (curve) {\n    if (Session.get(\"plotResultKey\") == undefined || matsCurveUtils.getPlotResultData() === undefined) {\n        return undefined;\n    }\n    if (matsCurveUtils.getPlotResultData() === null) {\n        return [];\n    }\n    if (Session.get(\"plotType\") === matsTypes.PlotTypes.scatter2d) {\n        return matsCurveUtils.getPlotResultData()[curve.label];\n    } else {\n        return matsCurveUtils.getPlotResultData().data[curve.label];\n    }\n};\n\nTemplate.textOutput.onRendered(function () {\n    const settings = matsCollections.Settings.findOne({}, {fields: {NullFillString: 1}});\n    if (settings === undefined) {\n        fillStr = \"---\";\n    } else {\n        fillStr = settings.NullFillString;\n    }\n});\n\nTemplate.textOutput.helpers({\n    notScatter: function () {\n        return Session.get(\"plotType\") !== matsTypes.PlotTypes.scatter2d;\n    },\n\n    // get the table header for the summary stats at the top of the text page\n    statHeaders: function () {\n        var header = \"\";\n        switch (Session.get('plotType')) {\n            case matsTypes.PlotTypes.timeSeries:\n            case matsTypes.PlotTypes.dailyModelCycle:\n            case matsTypes.PlotTypes.profile:\n                header += \"<th>label</th>\\\n                    <th>mean</th>\\\n                    <th>standard deviation</th>\\\n                    <th>n</th>\\\n                    <th>standard error</th>\\\n                    <th>lag1</th>\\\n                    <th>minimum</th>\\\n                    <th>maximum</th>\";\n                break;\n            case matsTypes.PlotTypes.dieoff:\n            case matsTypes.PlotTypes.threshold:\n            case matsTypes.PlotTypes.validtime:\n                header += \"<th>label</th>\\\n                    <th>mean</th>\\\n                    <th>standard deviation</th>\\\n                    <th>n</th>\\\n                    <th>minimum</th>\\\n                    <th>maximum</th>\";\n                break;\n            case matsTypes.PlotTypes.reliability:\n                header += \"<th>label</th>\\\n                    <th>sample climatology</th>\";\n                break;\n            case matsTypes.PlotTypes.map:\n                header += \"<th>label</th>\\\n                    <th>mean</th>\\\n                    <th>standard deviation</th>\\\n                    <th>n</th>\\\n                    <th>minimum time</th>\\\n                    <th>maximum time</th>\";\n                break;\n            case matsTypes.PlotTypes.histogram:\n                header += \"<th>label</th>\\\n                    <th>mean</th>\\\n                    <th>standard deviation</th>\\\n                    <th>n</th>\\\n                    <th>minimum</th>\\\n                    <th>maximum</th>\";\n                break;\n            case matsTypes.PlotTypes.contour:\n            case matsTypes.PlotTypes.contourDiff:\n                header += \"<th>label</th>\\\n                    <th>mean stat</th>\\\n                    <th>n</th>\\\n                    <th>minimum time</th>\\\n                    <th>maximum time</th>\";\n                break;\n            case matsTypes.PlotTypes.scatter2d:\n                // no stat for scatter\n                break;\n            default:\n                break;\n        }\n        return header;\n    },\n\n    // get the table header for each curve's data\n    elementHeaders: function (curve) {\n        var header = \"\";\n        switch (Session.get('plotType')) {\n            case matsTypes.PlotTypes.timeSeries:\n                header += \"<th>\" + curve.label + \" time</th>\\\n                        <th>raw stat from query</th>\\\n                        <th>plotted stat</th>\\\n                        <th>std dev</th>\\\n                        <th>std error</th>\\\n                        <th>lag1</th>\\\n                        <th>n</th>\";\n                break;\n            case matsTypes.PlotTypes.dailyModelCycle:\n                header += \"<th>\" + curve.label + \" time</th>\\\n                        <th>raw stat from query</th>\\\n                        <th>plotted stat</th>\\\n                        <th>std dev</th>\\\n                        <th>n</th>\";\n                break;\n            case matsTypes.PlotTypes.profile:\n                header += \"<th>\" + curve.label + \" level</th>\\\n                        <th>raw stat from query</th>\\\n                        <th>plotted stat</th>\\\n                        <th>std dev</th>\\\n                        <th>std error</th>\\\n                        <th>lag1</th>\\\n                        <th>n</th>\";\n                break;\n            case matsTypes.PlotTypes.dieoff:\n                header += \"<th>\" + curve.label + \" forecast lead time</th>\\\n                        <th>raw stat from query</th>\\\n                        <th>plotted stat</th>\\\n                        <th>std dev</th>\\\n                        <th>n</th>\";\n                break;\n            case matsTypes.PlotTypes.threshold:\n                header += \"<th>\" + curve.label + \" threshold (in)</th>\\\n                        <th>raw stat from query</th>\\\n                        <th>plotted stat</th>\\\n                        <th>std dev</th>\\\n                        <th>n</th>\";\n                break;\n            case matsTypes.PlotTypes.validtime:\n                header += \"<th>\" + curve.label + \" hour of day</th>\\\n                        <th>raw stat from query</th>\\\n                        <th>plotted stat</th>\\\n                        <th>std dev</th>\\\n                        <th>n</th>\";\n                break;\n            case matsTypes.PlotTypes.reliability:\n                header += \"<th>\" + curve.label + \" probability bin</th>\\\n                        <th>hit rate</th>\\\n                        <th>oy</th>\\\n                        <th>on</th>\";\n                break;\n            case matsTypes.PlotTypes.map:\n                header += \"<th>Site Name</th>\\\n                        <th>Number of Times</th>\\\n                        <th>Start Date</th>\\\n                        <th>End Date</th>\\\n                        <th>Average Difference</th>\";\n                break;\n            case matsTypes.PlotTypes.histogram:\n                header += \"<th>\" + curve.label + \"  bin range</th>\\\n                        <th>bin n</th>\\\n                        <th>bin rel freq</th>\\\n                        <th>bin lower bound</th>\\\n                        <th>bin upper bound</th>\\\n                        <th>bin mean</th>\\\n                        <th>bin std dev</th>\";\n                break;\n            case matsTypes.PlotTypes.contour:\n            case matsTypes.PlotTypes.contourDiff:\n                header += \"<th>X Value</th>\\\n                        <th>Y Value</th>\\\n                        <th>Stat</th>\\\n                        <th>Number</th>\\\n                        <th>Start Date</th>\\\n                        <th>End Date</th>\";\n                break;\n            case matsTypes.PlotTypes.scatter2d:\n                header += \"<th>\" + curve.label + \" x axis</th>\\\n                        <th>\" + curve.label + \" y axis</th>\\\n                        <th>best fit</th>\";\n                break;\n            default:\n                break;\n        }\n        return header;\n    },\n    elements: function (curve) {\n        Session.get('textLoaded'); // monitor for data changres like previous / next\n        return getDataForCurve(curve);\n    },\n    curves: function () {\n        Session.get('textLoaded');\n        Session.get(\"plotResultKey\"); // make sure we re-render when data changes\n        return Session.get('Curves');\n    },\n    curveLabel: function (curve) {\n        switch (Session.get('plotType')) {\n            case matsTypes.PlotTypes.timeSeries:\n                return curve.label + \" time\";\n                break;\n            case matsTypes.PlotTypes.profile:\n                return curve.label + \" level\";\n                break;\n            case matsTypes.PlotTypes.dieoff:\n                return curve.label + \" forecast lead time\";\n            default:\n                return curve.label;\n                break;\n        }\n    },\n    curveText: function () {\n        const text = matsPlotUtils.getCurveText(matsPlotUtils.getPlotType(), this);\n        return text;\n    },\n\n    // get the table row values for each curve's data\n    elementHtml: function (element) {\n        var labelKey = Template.parentData().label;\n        var elementLabel = \"\";\n        var line = \"\";\n        switch (Session.get('plotType')) {\n            case matsTypes.PlotTypes.timeSeries:\n                line += \"<td>\" + element[labelKey += \" time\"] + \"</td>\" +\n                    \"<td>\" + (element['raw stat from query'] != undefined && element['raw stat from query'] !== null ? element['raw stat from query'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['plotted stat'] != undefined && element['plotted stat'] !== null ? element['plotted stat'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['std dev'] != undefined && element['std dev'] !== null ? element['std dev'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['std error'] != undefined && element['std error'] !== null ? element['std error'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['lag1'] != undefined && element['lag1'] !== null ? element['lag1'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (('n' in element) && element['n'] ? element['n'] : fillStr) + \"</td>\";\n                break;\n            case matsTypes.PlotTypes.profile:\n                line += \"<td>\" + element[labelKey += \" level\"] + \"</td>\" +\n                    \"<td>\" + (element['raw stat from query'] != undefined && element['raw stat from query'] !== null ? element['raw stat from query'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['plotted stat'] != undefined && element['plotted stat'] !== null ? element['plotted stat'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['std dev'] != undefined && element['std dev'] !== null ? element['std dev'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['std error'] != undefined && element['std error'] !== null ? element['std error'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['lag1'] != undefined && element['lag1'] !== null ? element['lag1'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (('n' in element) ? element['n'] : fillStr) + \"</td>\";\n                break;\n            case matsTypes.PlotTypes.dieoff:\n                line += \"<td>\" + element[labelKey += \" forecast lead time\"] + \"</td>\" +\n                    \"<td>\" + (element['raw stat from query'] != undefined && element['raw stat from query'] !== null ? element['raw stat from query'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['plotted stat'] != undefined && element['plotted stat'] !== null ? element['plotted stat'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['std dev'] != undefined && element['std dev'] !== null ? element['std dev'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (('n' in element) ? element['n'] : fillStr) + \"</td>\";\n                break;\n            case matsTypes.PlotTypes.threshold:\n                line += \"<td>\" + element[labelKey += \" threshold (in)\"] + \"</td>\" +\n                    \"<td>\" + (element['raw stat from query'] != undefined && element['raw stat from query'] !== null ? element['raw stat from query'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['plotted stat'] != undefined && element['plotted stat'] !== null ? element['plotted stat'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['std dev'] != undefined && element['std dev'] !== null ? element['std dev'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (('n' in element) ? element['n'] : fillStr) + \"</td>\";\n                break;\n            case matsTypes.PlotTypes.validtime:\n                line += \"<td>\" + element[labelKey += \" hour of day\"] + \"</td>\" +\n                    \"<td>\" + (element['raw stat from query'] != undefined && element['raw stat from query'] !== null ? element['raw stat from query'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['plotted stat'] != undefined && element['plotted stat'] !== null ? element['plotted stat'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['std dev'] != undefined && element['std dev'] !== null ? element['std dev'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (('n' in element) ? element['n'] : fillStr) + \"</td>\";\n                break;\n            case matsTypes.PlotTypes.dailyModelCycle:\n                line += \"<td>\" + element[labelKey += \" time\"] + \"</td>\" +\n                    \"<td>\" + (element['raw stat from query'] != undefined && element['raw stat from query'] !== null ? element['raw stat from query'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['plotted stat'] != undefined && element['plotted stat'] !== null ? element['plotted stat'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['std dev'] != undefined && element['std dev'] !== null ? element['std dev'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (('n' in element) ? element['n'] : fillStr) + \"</td>\";\n                break;\n            case matsTypes.PlotTypes.reliability:\n                line += \"<td>\" + element[labelKey += \" probability bin\"] + \"</td>\" +\n                    \"<td>\" + (element['hit rate'] != undefined && element['hit rate'] !== null ? element['hit rate'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['oy'] != undefined && element['oy'] !== null ? element['oy'] : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['on'] != undefined && element['on'] !== null ? element['on'] : fillStr) + \"</td>\";\n                break;\n            case matsTypes.PlotTypes.map:\n                line += \"<td>\" + element[\"Site Name\"] + \"</td>\" +\n                    \"<td>\" + (element['Number of Times'] != undefined && element['Number of Times'] !== null ? element['Number of Times'] : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['Start Date'] != undefined && element['Start Date'] !== null ? element['Start Date'] : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['End Date'] != undefined && element['End Date'] !== null ? element['End Date'] : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['Average Difference'] != undefined && element['Average Difference'] !== null ? element['Average Difference'] : fillStr) + \"</td>\";\n                break;\n            case matsTypes.PlotTypes.histogram:\n                line += \"<td>\" + element[labelKey += \" bin range\"] + \"</td>\" +\n                    \"<td>\" + (('n' in element) ? element['n'] : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['bin rel freq'] != undefined && element['bin rel freq'] !== null ? element['bin rel freq'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['bin lower bound'] != undefined && element['bin lower bound'] !== null ? element['bin lower bound'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['bin upper bound'] != undefined && element['bin upper bound'] !== null ? element['bin upper bound'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['bin mean'] != undefined && element['bin mean'] !== null ? element['bin mean'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['bin std dev'] != undefined && element['bin std dev'] !== null ? element['bin std dev'].toPrecision(4) : fillStr) + \"</td>\";\n                break;\n            case matsTypes.PlotTypes.contour:\n            case matsTypes.PlotTypes.contourDiff:\n                line += \"<td>\" + element[\"xVal\"] + \"</td>\" +\n                    \"<td>\" + element[\"yVal\"] + \"</td>\" +\n                    \"<td>\" + (element['stat'] != undefined && element['stat'] !== null ? element['stat'] : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['N'] != undefined && element['N'] !== null ? element['N'] : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['Start Date'] != undefined && element['Start Date'] !== null ? element['Start Date'] : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['End Date'] != undefined && element['End Date'] !== null ? element['End Date'] : fillStr) + \"</td>\";\n                break;\n            case matsTypes.PlotTypes.scatter2d:\n                line += \"<td>\" + (element['xAxis'] != undefined && element['xAxis'] !== null ? element['xAxis'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['yAxis'] != undefined && element['yAxis'] !== null ? element['yAxis'].toPrecision(4) : fillStr) + \"</td>\" +\n                    \"<td>\" + (element['best fit'] != undefined && element['best fit'] !== null ? element['best fit'] : fillStr) + \"</td>\";\n                break;\n            default:\n                break;\n        }\n        return line;\n    },\n\n    // get the table row values for the summary stats at the top of the text page\n    stats: function (curve) {\n        if (Session.get(\"plotResultKey\") === undefined) {\n            return [];\n        }\n        var curves = Session.get('Curves');\n        if (curves === undefined || curves.length == 0) {\n            return [];\n        }\n        var cindex;\n        for (cindex = 0; cindex < curves.length; cindex++) {\n            if (curves[cindex].label == curve.label) {\n                break;\n            }\n        }\n        if (matsCurveUtils.getPlotResultData() === null ||\n            matsCurveUtils.getPlotResultData() === undefined ||\n            matsCurveUtils.getPlotResultData().stats === undefined ||\n            matsCurveUtils.getPlotResultData().stats[curves[cindex].label] === undefined) {\n            return \"\";\n        }\n        const stats = matsCurveUtils.getPlotResultData().stats[curves[cindex].label];\n\n        var line = \"\";\n        switch (Session.get('plotType')) {\n            case matsTypes.PlotTypes.timeSeries:\n            case matsTypes.PlotTypes.profile:\n            case matsTypes.PlotTypes.dailyModelCycle:\n                line += \"<td>\" + curve['label'] + \"</td>\" +\n                    \"<td>\" + (stats['mean'] != undefined && stats['mean'] !== null ? stats['mean'].toPrecision(4) : \"undefined\").toString() + \"</td>\" +\n                    \"<td>\" + (stats['standard deviation'] != undefined && stats['standard deviation'] !== null ? stats['standard deviation'].toPrecision(4) : \"undefined\").toString() + \"</td>\" +\n                    \"<td>\" + (stats['n']).toString() + \"</td>\" +\n                    \"<td>\" + (stats['standard error'] != undefined && stats['standard error'] != null ? stats['standard error'].toPrecision(4) : \"undefined\").toString() + \"</td>\" +\n                    \"<td>\" + (stats['lag1'] != undefined && stats['lag1'] != null ? stats['lag1'].toPrecision(4) : \"undefined\").toString() + \"</td>\" +\n                    \"<td>\" + (stats['minimum'] != undefined && stats['minimum'] != null ? stats['minimum'].toPrecision(4) : \"undefined\").toString() + \"</td>\" +\n                    \"<td>\" + (stats['maximum'] != undefined && stats['maximum'] != null ? stats['maximum'].toPrecision(4) : \"undefined\").toString() + \"</td>\";\n                break;\n            case matsTypes.PlotTypes.dieoff:\n            case matsTypes.PlotTypes.threshold:\n            case matsTypes.PlotTypes.validtime:\n                line += \"<td>\" + curve['label'] + \"</td>\" +\n                    \"<td>\" + (stats['mean'] != undefined && stats['mean'] !== null ? stats['mean'].toPrecision(4) : \"undefined\").toString() + \"</td>\" +\n                    \"<td>\" + (stats['standard deviation'] != undefined && stats['standard deviation'] !== null ? stats['standard deviation'].toPrecision(4) : \"undefined\").toString() + \"</td>\" +\n                    \"<td>\" + (stats['n']).toString() + \"</td>\" +\n                    \"<td>\" + (stats['minimum'] != undefined && stats['minimum'] != null ? stats['minimum'].toPrecision(4) : \"undefined\").toString() + \"</td>\" +\n                    \"<td>\" + (stats['maximum'] != undefined && stats['maximum'] != null ? stats['maximum'].toPrecision(4) : \"undefined\").toString() + \"</td>\";\n                break;\n            case matsTypes.PlotTypes.reliability:\n                line += \"<td>\" + curve['label'] + \"</td>\" +\n                    \"<td>\" + (stats['sample climo'] != undefined && stats['sample climo'] !== null ? stats['sample climo'].toPrecision(4) : \"undefined\").toString() + \"</td>\";\n                break;\n            case matsTypes.PlotTypes.map:\n                line += \"<td>\" + curve['label'] + \"</td>\" +\n                    \"<td>\" + (stats['mean difference'] != undefined && stats['mean difference'] !== null ? stats['mean difference'].toPrecision(4) : \"undefined\").toString() + \"</td>\" +\n                    \"<td>\" + (stats['standard deviation'] != undefined && stats['standard deviation'] !== null ? stats['standard deviation'].toPrecision(4) : \"undefined\").toString() + \"</td>\" +\n                    \"<td>\" + (stats['total number of obs'] != undefined && stats['total number of obs'] !== null ? stats['total number of obs'] : \"undefined\").toString() + \"</td>\" +\n                    \"<td>\" + (stats['minimum time'] != undefined && stats['minimum time'] != null ? stats['minimum time'] : \"undefined\").toString() + \"</td>\" +\n                    \"<td>\" + (stats['maximum time'] != undefined && stats['maximum time'] != null ? stats['maximum time'] : \"undefined\").toString() + \"</td>\";\n                break;\n            case matsTypes.PlotTypes.histogram:\n                line += \"<td>\" + curve['label'] + \"</td>\" +\n                    \"<td>\" + (stats['mean'] != undefined && stats['mean'] !== null ? stats['mean'].toPrecision(4) : \"undefined\").toString() + \"</td>\" +\n                    \"<td>\" + (stats['standard deviation'] != undefined && stats['standard deviation'] != null ? stats['standard deviation'].toPrecision(4) : \"undefined\").toString() + \"</td>\" +\n                    \"<td>\" + (stats['n']).toString() + \"</td>\" +\n                    \"<td>\" + (stats['minimum'] != undefined && stats['minimum'] != null ? stats['minimum'].toPrecision(4) : \"undefined\").toString() + \"</td>\" +\n                    \"<td>\" + (stats['maximum'] != undefined && stats['maximum'] != null ? stats['maximum'].toPrecision(4) : \"undefined\").toString() + \"</td>\";\n                break;\n            case matsTypes.PlotTypes.contour:\n            case matsTypes.PlotTypes.contourDiff:\n                line += \"<td>\" + curve['label'] + \"</td>\" +\n                    \"<td>\" + (stats['mean stat'] != undefined && stats['mean stat'] !== null ? stats['mean stat'].toPrecision(4) : \"undefined\").toString() + \"</td>\" +\n                    \"<td>\" + (stats['total number of points'] != undefined && stats['total number of points'] !== null ? stats['total number of points'] : \"undefined\").toString() + \"</td>\" +\n                    \"<td>\" + (stats['minimum time'] != undefined && stats['minimum time'] != null ? stats['minimum time'] : \"undefined\").toString() + \"</td>\" +\n                    \"<td>\" + (stats['maximum time'] != undefined && stats['maximum time'] != null ? stats['maximum time'] : \"undefined\").toString() + \"</td>\";\n                break;\n            case matsTypes.PlotTypes.scatter2d:\n                line += \"<td>\" + curve['label'] + \"</td>\" +\n                    \"<td>\" + (stats['mean'] != undefined && stats['mean'] !== null ? stats['mean'].toPrecision(4) : \"undefined\").toString() + \"</td>\" +\n                    \"<td>\" + (stats['standard deviation'] != undefined && stats['standard deviation'] !== null ? stats['standard deviation'].toPrecision(4) : \"undefined\").toString() + \"</td>\" +\n                    \"<td>\" + (stats['n']).toString() + \"</td>\" +\n                    \"<td>\" + (stats['standard error'] != undefined && stats['standard error'] != null ? stats['standard error'].toPrecision(4) : \"undefined\").toString() + \"</td>\" +\n                    \"<td>\" + (stats['lag1'] != undefined && stats['lag1'] != null ? stats['lag1'].toPrecision(4) : \"undefined\").toString() + \"</td>\" +\n                    \"<td>\" + (stats['minimum'] != undefined && stats['minimum'] != null ? stats['minimum'].toPrecision(4) : \"undefined\").toString() + \"</td>\" +\n                    \"<td>\" + (stats['maximum'] != undefined && stats['maximum'] != null ? stats['maximum'].toPrecision(4) : \"undefined\").toString() + \"</td>\";\n                break;\n            default:\n                break;\n        }\n        return line;\n    }\n});\n\nTemplate.textOutput.events({\n    'click .export': function () {\n        var plotType = Session.get('plotType');\n        var key = Session.get('plotResultKey');\n        // open a new window with\n        window.open(window.location + \"/CSV/\" + Session.get(\"graphFunction\") + \"/\" + Session.get(\"plotResultKey\") + \"/\" + Session.get('plotParameter') + \"/\" + matsCollections.Settings.findOne({}, {fields: {Title: 1}}).Title);\n    }\n});\n"]},"sourceType":"script","hash":"5e6e4a03d6e7ddce6d234b9f5254d22312d1bc4d"}
