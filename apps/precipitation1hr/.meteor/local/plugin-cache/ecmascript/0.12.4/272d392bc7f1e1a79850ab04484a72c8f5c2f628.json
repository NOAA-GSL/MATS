{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/accounts-ui-unstyled/login_buttons_dropdown.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/accounts-ui-unstyled/login_buttons_dropdown.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/accounts-ui-unstyled/login_buttons_dropdown.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/accounts-ui-unstyled/login_buttons_dropdown.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/accounts-ui-unstyled/login_buttons_dropdown.js"}},"code":"let passwordSignupFields;\nmodule.link(\"./accounts_ui.js\", {\n  passwordSignupFields(v) {\n    passwordSignupFields = v;\n  }\n\n}, 0);\nlet displayName, getLoginServices, hasPasswordService, validateUsername, validateEmail, validatePassword;\nmodule.link(\"./login_buttons.js\", {\n  displayName(v) {\n    displayName = v;\n  },\n\n  getLoginServices(v) {\n    getLoginServices = v;\n  },\n\n  hasPasswordService(v) {\n    hasPasswordService = v;\n  },\n\n  validateUsername(v) {\n    validateUsername = v;\n  },\n\n  validateEmail(v) {\n    validateEmail = v;\n  },\n\n  validatePassword(v) {\n    validatePassword = v;\n  }\n\n}, 1);\n// for convenience\nconst loginButtonsSession = Accounts._loginButtonsSession; //\n// helpers\n//\n\nconst elementValueById = id => {\n  const element = document.getElementById(id);\n  if (!element) return null;else return element.value;\n};\n\nconst trimmedElementValueById = id => {\n  const element = document.getElementById(id);\n  if (!element) return null;else return element.value.replace(/^\\s*|\\s*$/g, \"\"); // trim() doesn't work on IE8;\n};\n\nconst loginOrSignup = () => {\n  if (loginButtonsSession.get('inSignupFlow')) signup();else login();\n};\n\nconst login = () => {\n  loginButtonsSession.resetMessages();\n  const username = trimmedElementValueById('login-username');\n  const email = trimmedElementValueById('login-email');\n  const usernameOrEmail = trimmedElementValueById('login-username-or-email'); // notably not trimmed. a password could (?) start or end with a space\n\n  const password = elementValueById('login-password');\n  let loginSelector;\n\n  if (username !== null) {\n    if (!validateUsername(username)) return;else loginSelector = {\n      username: username\n    };\n  } else if (email !== null) {\n    if (!validateEmail(email)) return;else loginSelector = {\n      email: email\n    };\n  } else if (usernameOrEmail !== null) {\n    // XXX not sure how we should validate this. but this seems good enough (for now),\n    // since an email must have at least 3 characters anyways\n    if (!validateUsername(usernameOrEmail)) return;else loginSelector = usernameOrEmail;\n  } else {\n    throw new Error(\"Unexpected -- no element to use as a login user selector\");\n  }\n\n  Meteor.loginWithPassword(loginSelector, password, (error, result) => {\n    if (error) {\n      loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n    } else {\n      loginButtonsSession.closeDropdown();\n    }\n  });\n};\n\nconst signup = () => {\n  loginButtonsSession.resetMessages();\n  const options = {}; // to be passed to Accounts.createUser\n\n  const username = trimmedElementValueById('login-username');\n\n  if (username !== null) {\n    if (!validateUsername(username)) return;else options.username = username;\n  }\n\n  const email = trimmedElementValueById('login-email');\n\n  if (email !== null) {\n    if (!validateEmail(email)) return;else options.email = email;\n  } // notably not trimmed. a password could (?) start or end with a space\n\n\n  const password = elementValueById('login-password');\n  if (!validatePassword(password)) return;else options.password = password;\n  if (!matchPasswordAgainIfPresent()) return;\n  Accounts.createUser(options, error => {\n    if (error) {\n      loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n    } else {\n      loginButtonsSession.closeDropdown();\n    }\n  });\n};\n\nconst forgotPassword = () => {\n  loginButtonsSession.resetMessages();\n  const email = trimmedElementValueById(\"forgot-password-email\");\n\n  if (email.includes('@')) {\n    Accounts.forgotPassword({\n      email: email\n    }, error => {\n      if (error) loginButtonsSession.errorMessage(error.reason || \"Unknown error\");else loginButtonsSession.infoMessage(\"Email sent\");\n    });\n  } else {\n    loginButtonsSession.errorMessage(\"Invalid email\");\n  }\n};\n\nconst changePassword = () => {\n  loginButtonsSession.resetMessages(); // notably not trimmed. a password could (?) start or end with a space\n\n  const oldPassword = elementValueById('login-old-password'); // notably not trimmed. a password could (?) start or end with a space\n\n  const password = elementValueById('login-password');\n  if (!validatePassword(password)) return;\n  if (!matchPasswordAgainIfPresent()) return;\n  Accounts.changePassword(oldPassword, password, error => {\n    if (error) {\n      loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n    } else {\n      loginButtonsSession.set('inChangePasswordFlow', false);\n      loginButtonsSession.set('inMessageOnlyFlow', true);\n      loginButtonsSession.infoMessage(\"Password changed\");\n    }\n  });\n};\n\nconst matchPasswordAgainIfPresent = () => {\n  // notably not trimmed. a password could (?) start or end with a space\n  const passwordAgain = elementValueById('login-password-again');\n\n  if (passwordAgain !== null) {\n    // notably not trimmed. a password could (?) start or end with a space\n    const password = elementValueById('login-password');\n\n    if (password !== passwordAgain) {\n      loginButtonsSession.errorMessage(\"Passwords don't match\");\n      return false;\n    }\n  }\n\n  return true;\n}; // Utility containment function that works with both arrays and single values\n\n\nconst isInPasswordSignupFields = fieldOrFields => {\n  const signupFields = passwordSignupFields();\n\n  if (Array.isArray(fieldOrFields)) {\n    return signupFields.reduce((prev, field) => prev && fieldOrFields.includes(field), true);\n  }\n\n  return signupFields.includes(fieldOrFields);\n}; // events shared between loginButtonsLoggedOutDropdown and\n// loginButtonsLoggedInDropdown\n\n\nTemplate.loginButtons.events({\n  'click #login-name-link, click #login-sign-in-link': () => loginButtonsSession.set('dropdownVisible', true),\n  'click .login-close-text': loginButtonsSession.closeDropdown\n}); //\n// loginButtonsLoggedInDropdown template and related\n//\n\nTemplate._loginButtonsLoggedInDropdown.events({\n  'click #login-buttons-open-change-password': () => {\n    loginButtonsSession.resetMessages();\n    loginButtonsSession.set('inChangePasswordFlow', true);\n  }\n});\n\nTemplate._loginButtonsLoggedInDropdown.helpers({\n  displayName,\n  inChangePasswordFlow: () => loginButtonsSession.get('inChangePasswordFlow'),\n  inMessageOnlyFlow: () => loginButtonsSession.get('inMessageOnlyFlow'),\n  dropdownVisible: () => loginButtonsSession.get('dropdownVisible')\n});\n\nTemplate._loginButtonsLoggedInDropdownActions.helpers({\n  allowChangingPassword: () => {\n    // it would be more correct to check whether the user has a password set,\n    // but in order to do that we'd have to send more data down to the client,\n    // and it'd be preferable not to send down the entire service.password document.\n    //\n    // instead we use the heuristic: if the user has a username or email set.\n    const user = Meteor.user();\n    return user.username || user.emails && user.emails[0] && user.emails[0].address;\n  }\n}); //\n// loginButtonsLoggedOutDropdown template and related\n//\n\n\nTemplate._loginButtonsLoggedOutDropdown.events({\n  'click #login-buttons-password': event => {\n    event.preventDefault();\n    loginOrSignup();\n  },\n  'keypress #forgot-password-email': event => {\n    if (event.keyCode === 13) forgotPassword();\n  },\n  'click #login-buttons-forgot-password': forgotPassword,\n  'click #signup-link': () => {\n    loginButtonsSession.resetMessages(); // store values of fields before swtiching to the signup form\n\n    const username = trimmedElementValueById('login-username');\n    const email = trimmedElementValueById('login-email');\n    const usernameOrEmail = trimmedElementValueById('login-username-or-email'); // notably not trimmed. a password could (?) start or end with a space\n\n    const password = elementValueById('login-password');\n    loginButtonsSession.set('inSignupFlow', true);\n    loginButtonsSession.set('inForgotPasswordFlow', false); // force the ui to update so that we have the approprate fields to fill in\n\n    Tracker.flush(); // update new fields with appropriate defaults\n\n    if (username !== null) document.getElementById('login-username').value = username;else if (email !== null) document.getElementById('login-email').value = email;else if (usernameOrEmail !== null) if (!usernameOrEmail.includes('@')) document.getElementById('login-username').value = usernameOrEmail;else document.getElementById('login-email').value = usernameOrEmail;\n    if (password !== null) document.getElementById('login-password').value = password; // Force redrawing the `login-dropdown-list` element because of\n    // a bizarre Chrome bug in which part of the DIV is not redrawn\n    // in case you had tried to unsuccessfully log in before\n    // switching to the signup form.\n    //\n    // Found tip on how to force a redraw on\n    // http://stackoverflow.com/questions/3485365/how-can-i-force-webkit-to-redraw-repaint-to-propagate-style-changes/3485654#3485654\n\n    const redraw = document.getElementById('login-dropdown-list');\n    redraw.style.display = 'none';\n    redraw.offsetHeight; // it seems that this line does nothing but is necessary for the redraw to work\n\n    redraw.style.display = 'block';\n  },\n  'click #forgot-password-link': () => {\n    loginButtonsSession.resetMessages(); // store values of fields before swtiching to the signup form\n\n    const email = trimmedElementValueById('login-email');\n    const usernameOrEmail = trimmedElementValueById('login-username-or-email');\n    loginButtonsSession.set('inSignupFlow', false);\n    loginButtonsSession.set('inForgotPasswordFlow', true); // force the ui to update so that we have the approprate fields to fill in\n\n    Tracker.flush(); // update new fields with appropriate defaults\n\n    if (email !== null) document.getElementById('forgot-password-email').value = email;else if (usernameOrEmail !== null) if (usernameOrEmail.includes('@')) document.getElementById('forgot-password-email').value = usernameOrEmail;\n  },\n  'click #back-to-login-link': () => {\n    loginButtonsSession.resetMessages();\n    const username = trimmedElementValueById('login-username');\n    const email = trimmedElementValueById('login-email') || trimmedElementValueById('forgot-password-email'); // Ughh. Standardize on names?\n    // notably not trimmed. a password could (?) start or end with a space\n\n    const password = elementValueById('login-password');\n    loginButtonsSession.set('inSignupFlow', false);\n    loginButtonsSession.set('inForgotPasswordFlow', false); // force the ui to update so that we have the approprate fields to fill in\n\n    Tracker.flush();\n    if (document.getElementById('login-username') && username !== null) document.getElementById('login-username').value = username;\n    if (document.getElementById('login-email') && email !== null) document.getElementById('login-email').value = email;\n    const usernameOrEmailInput = document.getElementById('login-username-or-email');\n\n    if (usernameOrEmailInput) {\n      if (email !== null) usernameOrEmailInput.value = email;\n      if (username !== null) usernameOrEmailInput.value = username;\n    }\n\n    if (password !== null) document.getElementById('login-password').value = password;\n  },\n  'keypress #login-username, keypress #login-email, keypress #login-username-or-email, keypress #login-password, keypress #login-password-again': event => {\n    if (event.keyCode === 13) loginOrSignup();\n  }\n});\n\nTemplate._loginButtonsLoggedOutDropdown.helpers({\n  // additional classes that can be helpful in styling the dropdown\n  additionalClasses: () => {\n    if (!hasPasswordService()) {\n      return false;\n    } else {\n      if (loginButtonsSession.get('inSignupFlow')) {\n        return 'login-form-create-account';\n      } else if (loginButtonsSession.get('inForgotPasswordFlow')) {\n        return 'login-form-forgot-password';\n      } else {\n        return 'login-form-sign-in';\n      }\n    }\n  },\n  dropdownVisible: () => loginButtonsSession.get('dropdownVisible'),\n  hasPasswordService\n}); // return all login services, with password last\n\n\nTemplate._loginButtonsLoggedOutAllServices.helpers({\n  services: getLoginServices,\n  isPasswordService: function () {\n    return this.name === 'password';\n  },\n  hasOtherServices: () => getLoginServices().length > 1,\n  hasPasswordService\n});\n\nTemplate._loginButtonsLoggedOutPasswordService.helpers({\n  fields: () => {\n    const loginFields = [{\n      fieldName: 'username-or-email',\n      fieldLabel: 'Username or Email',\n      autocomplete: 'username email',\n      visible: () => isInPasswordSignupFields([\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\"])\n    }, {\n      fieldName: 'username',\n      fieldLabel: 'Username',\n      autocomplete: 'username',\n      visible: () => isInPasswordSignupFields(\"USERNAME_ONLY\")\n    }, {\n      fieldName: 'email',\n      fieldLabel: 'Email',\n      inputType: 'email',\n      autocomplete: 'email',\n      visible: () => isInPasswordSignupFields(\"EMAIL_ONLY\")\n    }, {\n      fieldName: 'password',\n      fieldLabel: 'Password',\n      inputType: 'password',\n      autocomplete: 'current-password',\n      visible: () => true\n    }];\n    const signupFields = [{\n      fieldName: 'username',\n      fieldLabel: 'Username',\n      autocomplete: 'username',\n      visible: () => isInPasswordSignupFields([\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\"])\n    }, {\n      fieldName: 'email',\n      fieldLabel: 'Email',\n      inputType: 'email',\n      autocomplete: 'email',\n      visible: () => isInPasswordSignupFields([\"USERNAME_AND_EMAIL\", \"EMAIL_ONLY\"])\n    }, {\n      fieldName: 'email',\n      fieldLabel: 'Email (optional)',\n      inputType: 'email',\n      autocomplete: 'email',\n      visible: () => isInPasswordSignupFields(\"USERNAME_AND_OPTIONAL_EMAIL\")\n    }, {\n      fieldName: 'password',\n      fieldLabel: 'Password',\n      inputType: 'password',\n      autocomplete: 'new-password',\n      visible: () => true\n    }, {\n      fieldName: 'password-again',\n      fieldLabel: 'Password (again)',\n      inputType: 'password',\n      autocomplete: 'new-password',\n      // No need to make users double-enter their password if\n      // they'll necessarily have an email set, since they can use\n      // the \"forgot password\" flow.\n      visible: () => isInPasswordSignupFields([\"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\"])\n    }];\n    return loginButtonsSession.get('inSignupFlow') ? signupFields : loginFields;\n  },\n  inForgotPasswordFlow: () => loginButtonsSession.get('inForgotPasswordFlow'),\n  inLoginFlow: () => !loginButtonsSession.get('inSignupFlow') && !loginButtonsSession.get('inForgotPasswordFlow'),\n  inSignupFlow: () => loginButtonsSession.get('inSignupFlow'),\n  showCreateAccountLink: () => !Accounts._options.forbidClientAccountCreation,\n  showForgotPasswordLink: () => isInPasswordSignupFields([\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"EMAIL_ONLY\"])\n});\n\nTemplate._loginButtonsFormField.helpers({\n  inputType: function () {\n    return this.inputType || \"text\";\n  }\n}); //\n// loginButtonsChangePassword template\n//\n\n\nTemplate._loginButtonsChangePassword.events({\n  'keypress #login-old-password, keypress #login-password, keypress #login-password-again': event => {\n    if (event.keyCode === 13) changePassword();\n  },\n  'click #login-buttons-do-change-password': changePassword\n});\n\nTemplate._loginButtonsChangePassword.helpers({\n  fields: () => {\n    const {\n      username,\n      emails\n    } = Meteor.user();\n    let email;\n\n    if (emails) {\n      email = emails[0].address;\n    }\n\n    return [// The username and email fields are included here to address an\n    // accessibility warning in Chrome, but the fields don't actually display.\n    // The warning states that there should be an optionally hidden\n    // username/email field on password forms.\n    // XXX I think we should not use a CSS class here because this is the\n    // `unstyled` package. So instead we apply an inline style.\n    {\n      fieldName: 'username',\n      fieldLabel: 'Username',\n      autocomplete: 'username',\n      fieldStyle: 'display: none;',\n      fieldValue: username,\n      visible: () => isInPasswordSignupFields([\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\"])\n    }, {\n      fieldName: 'email',\n      fieldLabel: 'Email',\n      inputType: 'email',\n      autocomplete: 'email',\n      fieldStyle: 'display: none;',\n      fieldValue: email,\n      visible: () => isInPasswordSignupFields([\"USERNAME_AND_EMAIL\", \"EMAIL_ONLY\"])\n    }, {\n      fieldName: 'old-password',\n      fieldLabel: 'Current Password',\n      inputType: 'password',\n      autocomplete: 'current-password',\n      visible: () => true\n    }, {\n      fieldName: 'password',\n      fieldLabel: 'New Password',\n      inputType: 'password',\n      autocomplete: 'new-password',\n      visible: () => true\n    }, {\n      fieldName: 'password-again',\n      fieldLabel: 'New Password (again)',\n      inputType: 'password',\n      autocomplete: 'new-password',\n      // No need to make users double-enter their password if\n      // they'll necessarily have an email set, since they can use\n      // the \"forgot password\" flow.\n      visible: () => isInPasswordSignupFields([\"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\"])\n    }];\n  }\n});","map":{"version":3,"sources":["packages/accounts-ui-unstyled/login_buttons_dropdown.js"],"names":["passwordSignupFields","module","link","v","displayName","getLoginServices","hasPasswordService","validateUsername","validateEmail","validatePassword","loginButtonsSession","Accounts","_loginButtonsSession","elementValueById","id","element","document","getElementById","value","trimmedElementValueById","replace","loginOrSignup","get","signup","login","resetMessages","username","email","usernameOrEmail","password","loginSelector","Error","Meteor","loginWithPassword","error","result","errorMessage","reason","closeDropdown","options","matchPasswordAgainIfPresent","createUser","forgotPassword","includes","infoMessage","changePassword","oldPassword","set","passwordAgain","isInPasswordSignupFields","fieldOrFields","signupFields","Array","isArray","reduce","prev","field","Template","loginButtons","events","_loginButtonsLoggedInDropdown","helpers","inChangePasswordFlow","inMessageOnlyFlow","dropdownVisible","_loginButtonsLoggedInDropdownActions","allowChangingPassword","user","emails","address","_loginButtonsLoggedOutDropdown","event","preventDefault","keyCode","Tracker","flush","redraw","style","display","offsetHeight","usernameOrEmailInput","additionalClasses","_loginButtonsLoggedOutAllServices","services","isPasswordService","name","hasOtherServices","length","_loginButtonsLoggedOutPasswordService","fields","loginFields","fieldName","fieldLabel","autocomplete","visible","inputType","inForgotPasswordFlow","inLoginFlow","inSignupFlow","showCreateAccountLink","_options","forbidClientAccountCreation","showForgotPasswordLink","_loginButtonsFormField","_loginButtonsChangePassword","fieldStyle","fieldValue"],"mappings":"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","sourcesContent":["import { passwordSignupFields } from './accounts_ui.js';\nimport {\n  displayName,\n  getLoginServices,\n  hasPasswordService,\n  validateUsername,\n  validateEmail,\n  validatePassword,\n} from './login_buttons.js';\n\n// for convenience\nconst loginButtonsSession = Accounts._loginButtonsSession;\n\n//\n// helpers\n//\n\nconst elementValueById = id => {\n  const element = document.getElementById(id);\n  if (!element)\n    return null;\n  else\n    return element.value;\n};\n\nconst trimmedElementValueById = id => {\n  const element = document.getElementById(id);\n  if (!element)\n    return null;\n  else\n    return element.value.replace(/^\\s*|\\s*$/g, \"\"); // trim() doesn't work on IE8;\n};\n\nconst loginOrSignup = () => {\n  if (loginButtonsSession.get('inSignupFlow'))\n    signup();\n  else\n    login();\n};\n\nconst login = () => {\n  loginButtonsSession.resetMessages();\n\n  const username = trimmedElementValueById('login-username');\n  const email = trimmedElementValueById('login-email');\n  const usernameOrEmail = trimmedElementValueById('login-username-or-email');\n  // notably not trimmed. a password could (?) start or end with a space\n  const password = elementValueById('login-password');\n\n  let loginSelector;\n  if (username !== null) {\n    if (!validateUsername(username))\n      return;\n    else\n      loginSelector = {username: username};\n  } else if (email !== null) {\n    if (!validateEmail(email))\n      return;\n    else\n      loginSelector = {email: email};\n  } else if (usernameOrEmail !== null) {\n    // XXX not sure how we should validate this. but this seems good enough (for now),\n    // since an email must have at least 3 characters anyways\n    if (!validateUsername(usernameOrEmail))\n      return;\n    else\n      loginSelector = usernameOrEmail;\n  } else {\n    throw new Error(\"Unexpected -- no element to use as a login user selector\");\n  }\n\n  Meteor.loginWithPassword(loginSelector, password, (error, result) => {\n    if (error) {\n      loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n    } else {\n      loginButtonsSession.closeDropdown();\n    }\n  });\n};\n\nconst signup = () => {\n  loginButtonsSession.resetMessages();\n\n  const options = {}; // to be passed to Accounts.createUser\n\n  const username = trimmedElementValueById('login-username');\n  if (username !== null) {\n    if (!validateUsername(username))\n      return;\n    else\n      options.username = username;\n  }\n\n  const email = trimmedElementValueById('login-email');\n  if (email !== null) {\n    if (!validateEmail(email))\n      return;\n    else\n      options.email = email;\n  }\n\n  // notably not trimmed. a password could (?) start or end with a space\n  const password = elementValueById('login-password');\n  if (!validatePassword(password))\n    return;\n  else\n    options.password = password;\n\n  if (!matchPasswordAgainIfPresent())\n    return;\n\n  Accounts.createUser(options, error => {\n    if (error) {\n      loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n    } else {\n      loginButtonsSession.closeDropdown();\n    }\n  });\n};\n\nconst forgotPassword = () => {\n  loginButtonsSession.resetMessages();\n\n  const email = trimmedElementValueById(\"forgot-password-email\");\n  if (email.includes('@')) {\n    Accounts.forgotPassword({email: email}, error => {\n      if (error)\n        loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n      else\n        loginButtonsSession.infoMessage(\"Email sent\");\n    });\n  } else {\n    loginButtonsSession.errorMessage(\"Invalid email\");\n  }\n};\n\nconst changePassword = () => {\n  loginButtonsSession.resetMessages();\n\n  // notably not trimmed. a password could (?) start or end with a space\n  const oldPassword = elementValueById('login-old-password');\n\n  // notably not trimmed. a password could (?) start or end with a space\n  const password = elementValueById('login-password');\n  if (!validatePassword(password))\n    return;\n\n  if (!matchPasswordAgainIfPresent())\n    return;\n\n  Accounts.changePassword(oldPassword, password, error => {\n    if (error) {\n      loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n    } else {\n      loginButtonsSession.set('inChangePasswordFlow', false);\n      loginButtonsSession.set('inMessageOnlyFlow', true);\n      loginButtonsSession.infoMessage(\"Password changed\");\n    }\n  });\n};\n\nconst matchPasswordAgainIfPresent = () => {\n  // notably not trimmed. a password could (?) start or end with a space\n  const passwordAgain = elementValueById('login-password-again');\n  if (passwordAgain !== null) {\n    // notably not trimmed. a password could (?) start or end with a space\n    const password = elementValueById('login-password');\n    if (password !== passwordAgain) {\n      loginButtonsSession.errorMessage(\"Passwords don't match\");\n      return false;\n    }\n  }\n  return true;\n};\n\n// Utility containment function that works with both arrays and single values\nconst isInPasswordSignupFields = (fieldOrFields) => {\n  const signupFields = passwordSignupFields();\n\n  if (Array.isArray(fieldOrFields)) {\n    return signupFields.reduce(\n      (prev, field) => prev && fieldOrFields.includes(field),\n      true,\n    )\n  }\n\n  return signupFields.includes(fieldOrFields);\n};\n\n// events shared between loginButtonsLoggedOutDropdown and\n// loginButtonsLoggedInDropdown\nTemplate.loginButtons.events({\n  'click #login-name-link, click #login-sign-in-link': () =>\n    loginButtonsSession.set('dropdownVisible', true),\n  'click .login-close-text': loginButtonsSession.closeDropdown,\n});\n\n\n//\n// loginButtonsLoggedInDropdown template and related\n//\n\nTemplate._loginButtonsLoggedInDropdown.events({\n  'click #login-buttons-open-change-password': () => {\n    loginButtonsSession.resetMessages();\n    loginButtonsSession.set('inChangePasswordFlow', true);\n  }\n});\n\nTemplate._loginButtonsLoggedInDropdown.helpers({\n  displayName,\n  inChangePasswordFlow: () => loginButtonsSession.get('inChangePasswordFlow'),\n  inMessageOnlyFlow: () => loginButtonsSession.get('inMessageOnlyFlow'),\n  dropdownVisible: () => loginButtonsSession.get('dropdownVisible'),\n});\n\nTemplate._loginButtonsLoggedInDropdownActions.helpers({\n  allowChangingPassword: () => {\n    // it would be more correct to check whether the user has a password set,\n    // but in order to do that we'd have to send more data down to the client,\n    // and it'd be preferable not to send down the entire service.password document.\n    //\n    // instead we use the heuristic: if the user has a username or email set.\n    const user = Meteor.user();\n    return user.username || (user.emails && user.emails[0] && user.emails[0].address);\n  }\n});\n\n\n//\n// loginButtonsLoggedOutDropdown template and related\n//\n\nTemplate._loginButtonsLoggedOutDropdown.events({\n  'click #login-buttons-password': event => {\n    event.preventDefault();\n    loginOrSignup();\n  },\n\n  'keypress #forgot-password-email': event => {\n    if (event.keyCode === 13)\n      forgotPassword();\n  },\n\n  'click #login-buttons-forgot-password': forgotPassword,\n\n  'click #signup-link': () => {\n    loginButtonsSession.resetMessages();\n\n    // store values of fields before swtiching to the signup form\n    const username = trimmedElementValueById('login-username');\n    const email = trimmedElementValueById('login-email');\n    const usernameOrEmail = trimmedElementValueById('login-username-or-email');\n    // notably not trimmed. a password could (?) start or end with a space\n    const password = elementValueById('login-password');\n\n    loginButtonsSession.set('inSignupFlow', true);\n    loginButtonsSession.set('inForgotPasswordFlow', false);\n    // force the ui to update so that we have the approprate fields to fill in\n    Tracker.flush();\n\n    // update new fields with appropriate defaults\n    if (username !== null)\n      document.getElementById('login-username').value = username;\n    else if (email !== null)\n      document.getElementById('login-email').value = email;\n    else if (usernameOrEmail !== null)\n      if (!usernameOrEmail.includes('@'))\n        document.getElementById('login-username').value = usernameOrEmail;\n    else\n      document.getElementById('login-email').value = usernameOrEmail;\n\n    if (password !== null)\n      document.getElementById('login-password').value = password;\n\n    // Force redrawing the `login-dropdown-list` element because of\n    // a bizarre Chrome bug in which part of the DIV is not redrawn\n    // in case you had tried to unsuccessfully log in before\n    // switching to the signup form.\n    //\n    // Found tip on how to force a redraw on\n    // http://stackoverflow.com/questions/3485365/how-can-i-force-webkit-to-redraw-repaint-to-propagate-style-changes/3485654#3485654\n    const redraw = document.getElementById('login-dropdown-list');\n    redraw.style.display = 'none';\n    redraw.offsetHeight; // it seems that this line does nothing but is necessary for the redraw to work\n    redraw.style.display = 'block';\n  },\n  'click #forgot-password-link': () => {\n    loginButtonsSession.resetMessages();\n\n    // store values of fields before swtiching to the signup form\n    const email = trimmedElementValueById('login-email');\n    const usernameOrEmail = trimmedElementValueById('login-username-or-email');\n\n    loginButtonsSession.set('inSignupFlow', false);\n    loginButtonsSession.set('inForgotPasswordFlow', true);\n    // force the ui to update so that we have the approprate fields to fill in\n    Tracker.flush();\n\n    // update new fields with appropriate defaults\n    if (email !== null)\n      document.getElementById('forgot-password-email').value = email;\n    else if (usernameOrEmail !== null)\n      if (usernameOrEmail.includes('@'))\n        document.getElementById('forgot-password-email').value = usernameOrEmail;\n\n  },\n  'click #back-to-login-link': () => {\n    loginButtonsSession.resetMessages();\n\n    const username = trimmedElementValueById('login-username');\n    const email = trimmedElementValueById('login-email')\n          || trimmedElementValueById('forgot-password-email'); // Ughh. Standardize on names?\n    // notably not trimmed. a password could (?) start or end with a space\n    const password = elementValueById('login-password');\n\n    loginButtonsSession.set('inSignupFlow', false);\n    loginButtonsSession.set('inForgotPasswordFlow', false);\n    // force the ui to update so that we have the approprate fields to fill in\n    Tracker.flush();\n\n    if (document.getElementById('login-username') && username !== null)\n      document.getElementById('login-username').value = username;\n    if (document.getElementById('login-email') && email !== null)\n      document.getElementById('login-email').value = email;\n\n    const usernameOrEmailInput = document.getElementById('login-username-or-email');\n    if (usernameOrEmailInput) {\n      if (email !== null)\n        usernameOrEmailInput.value = email;\n      if (username !== null)\n        usernameOrEmailInput.value = username;\n    }\n\n    if (password !== null)\n      document.getElementById('login-password').value = password;\n  },\n  'keypress #login-username, keypress #login-email, keypress #login-username-or-email, keypress #login-password, keypress #login-password-again': event => {\n    if (event.keyCode === 13)\n      loginOrSignup();\n  }\n});\n\nTemplate._loginButtonsLoggedOutDropdown.helpers({\n  // additional classes that can be helpful in styling the dropdown\n  additionalClasses: () => {\n    if (!hasPasswordService()) {\n      return false;\n    } else {\n      if (loginButtonsSession.get('inSignupFlow')) {\n        return 'login-form-create-account';\n      } else if (loginButtonsSession.get('inForgotPasswordFlow')) {\n        return 'login-form-forgot-password';\n      } else {\n        return 'login-form-sign-in';\n      }\n    }\n  },\n\n  dropdownVisible: () => loginButtonsSession.get('dropdownVisible'),\n\n  hasPasswordService,\n});\n\n// return all login services, with password last\nTemplate._loginButtonsLoggedOutAllServices.helpers({\n  services: getLoginServices,\n  isPasswordService: function () {\n    return this.name === 'password';\n  },\n  hasOtherServices: () => getLoginServices().length > 1,\n  hasPasswordService,\n});\n\nTemplate._loginButtonsLoggedOutPasswordService.helpers({\n  fields: () => {\n    const loginFields = [\n      {fieldName: 'username-or-email', fieldLabel: 'Username or Email',\n        autocomplete: 'username email',\n        visible: () => isInPasswordSignupFields(\n          [\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\"]\n        ),\n      },\n      {fieldName: 'username', fieldLabel: 'Username', autocomplete: 'username',\n        visible: () => isInPasswordSignupFields(\"USERNAME_ONLY\"),\n      },\n      {fieldName: 'email', fieldLabel: 'Email', inputType: 'email',\n        autocomplete: 'email',\n        visible: () => isInPasswordSignupFields(\"EMAIL_ONLY\"),\n      },\n      {fieldName: 'password', fieldLabel: 'Password', inputType: 'password',\n        autocomplete: 'current-password',\n        visible: () => true,\n      }\n    ];\n\n    const signupFields = [\n      {fieldName: 'username', fieldLabel: 'Username', autocomplete: 'username',\n        visible: () => isInPasswordSignupFields([\n          \"USERNAME_AND_EMAIL\",\n          \"USERNAME_AND_OPTIONAL_EMAIL\",\n          \"USERNAME_ONLY\",\n        ]),\n      },\n      {fieldName: 'email', fieldLabel: 'Email', inputType: 'email',\n        autocomplete: 'email',\n        visible: () => isInPasswordSignupFields(\n          [\"USERNAME_AND_EMAIL\", \"EMAIL_ONLY\"]\n        ),\n      },\n      {fieldName: 'email', fieldLabel: 'Email (optional)', inputType: 'email',\n        autocomplete: 'email',\n        visible: () => isInPasswordSignupFields(\"USERNAME_AND_OPTIONAL_EMAIL\"),\n      },\n      {fieldName: 'password', fieldLabel: 'Password', inputType: 'password',\n        autocomplete: 'new-password',\n        visible: () => true,\n      },\n      {fieldName: 'password-again', fieldLabel: 'Password (again)',\n       inputType: 'password', autocomplete: 'new-password',\n        // No need to make users double-enter their password if\n        // they'll necessarily have an email set, since they can use\n        // the \"forgot password\" flow.\n        visible: () => isInPasswordSignupFields(\n          [\"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\"]\n        ),\n      },\n    ];\n\n    return loginButtonsSession.get('inSignupFlow') ? signupFields : loginFields;\n  },\n\n  inForgotPasswordFlow: () => loginButtonsSession.get('inForgotPasswordFlow'),\n\n  inLoginFlow: () =>\n    !loginButtonsSession.get('inSignupFlow') &&\n    !loginButtonsSession.get('inForgotPasswordFlow'),\n\n  inSignupFlow: () => loginButtonsSession.get('inSignupFlow'),\n\n  showCreateAccountLink: () => !Accounts._options.forbidClientAccountCreation,\n\n  showForgotPasswordLink: () => isInPasswordSignupFields(\n    [\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"EMAIL_ONLY\"]\n  ),\n});\n\nTemplate._loginButtonsFormField.helpers({\n  inputType: function () {\n    return this.inputType || \"text\"\n  }\n});\n\n\n//\n// loginButtonsChangePassword template\n//\n\nTemplate._loginButtonsChangePassword.events({\n  'keypress #login-old-password, keypress #login-password, keypress #login-password-again': event => {\n    if (event.keyCode === 13)\n      changePassword();\n  },\n  'click #login-buttons-do-change-password': changePassword,\n});\n\nTemplate._loginButtonsChangePassword.helpers({\n  fields: () => {\n    const { username, emails } = Meteor.user()\n    let email;\n    if (emails) {\n      email = emails[0].address;\n    }\n    return [\n      // The username and email fields are included here to address an\n      // accessibility warning in Chrome, but the fields don't actually display.\n      // The warning states that there should be an optionally hidden\n      // username/email field on password forms.\n      // XXX I think we should not use a CSS class here because this is the\n      // `unstyled` package. So instead we apply an inline style.\n      {fieldName: 'username', fieldLabel: 'Username', autocomplete: 'username',\n        fieldStyle: 'display: none;', fieldValue: username,\n        visible: () => isInPasswordSignupFields([\n          \"USERNAME_AND_EMAIL\",\n          \"USERNAME_AND_OPTIONAL_EMAIL\",\n          \"USERNAME_ONLY\",\n        ]),\n      },\n      {fieldName: 'email', fieldLabel: 'Email', inputType: 'email',\n        autocomplete: 'email', fieldStyle: 'display: none;', fieldValue: email,\n        visible: () => isInPasswordSignupFields(\n          [\"USERNAME_AND_EMAIL\", \"EMAIL_ONLY\"]\n        ),\n      },\n      {fieldName: 'old-password', fieldLabel: 'Current Password', inputType: 'password',\n        autocomplete: 'current-password', visible: () => true,\n      },\n      {fieldName: 'password', fieldLabel: 'New Password', inputType: 'password',\n        autocomplete: 'new-password', visible: () => true,\n      },\n      {fieldName: 'password-again', fieldLabel: 'New Password (again)',\n        inputType: 'password', autocomplete: 'new-password',\n        // No need to make users double-enter their password if\n        // they'll necessarily have an email set, since they can use\n        // the \"forgot password\" flow.\n        visible: () => isInPasswordSignupFields(\n          [\"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\"]\n        ),\n      },\n    ];\n  }\n});\n"]},"sourceType":"script","hash":"272d392bc7f1e1a79850ab04484a72c8f5c2f628"}
