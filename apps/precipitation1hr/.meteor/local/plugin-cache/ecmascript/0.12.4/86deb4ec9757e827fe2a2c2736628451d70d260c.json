{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/templates/administration/curveParams.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/randyp:mats-common/templates/administration/curveParams.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/templates/administration/curveParams.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/templates/administration/curveParams.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/randyp:mats-common/templates/administration/curveParams.js"}},"code":"var Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar matsCollections;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsCollections: function (v) {\n    matsCollections = v;\n  }\n}, 1);\nvar matsTypes;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsTypes: function (v) {\n    matsTypes = v;\n  }\n}, 2);\n\n/**\n * Created by pierce on 8/13/15.\n */\nTemplate.curveParams.onRendered(function () {\n  reset();\n});\nTemplate.curveParams.helpers({\n  curveParams: function () {\n    if (Session.get('params') === undefined) {\n      var params = matsCollections.CurveParams.find({}, {\n        sort: {\n          displayOrder: 1\n        }\n      }).fetch();\n      Session.set('params', params);\n    }\n\n    return Session.get('params');\n  },\n  optionRows: function () {\n    var rows = \"\"; // find the object in the session that is associated with the currently selected name\n\n    var params = Session.get('params');\n\n    if (params == undefined) {\n      return \"\";\n    }\n\n    if (!document.getElementById('curveParams-selection') || document.getElementById('curveParams-selection') == \"\") {\n      return \"\";\n    }\n\n    var paramSelectedName = document.getElementById('curveParams-selection').value;\n    var param = params.filter(function (obj) {\n      return obj.name === paramSelectedName;\n    })[0];\n\n    if (param == undefined) {\n      return;\n    }\n\n    var optionsMap = param.optionsMap;\n\n    if (optionsMap == undefined) {\n      return \"\";\n    } // create the options table rows\n\n\n    var optionKeys = Object.keys(optionsMap);\n    param.options = optionKeys;\n\n    for (var i = 0; i < optionKeys.length; i++) {\n      var optionList = optionsMap[optionKeys[i]];\n      rows += '<tr><td contentEditable width=\"10%\" style=\"min-width:3em;\"><input data-field=\"optionsMap.' + optionKeys[i] + \"_\" + i + '\" id=\"curveParams-option-' + i + '\" class=\"form-control data-input textInput\" type=\"text\" value=\"' + optionKeys[i] + '\"/></td>';\n\n      for (var oli = 0; oli < optionList.length; oli++) {\n        rows += '<td contentEditable><textarea data-field=\"optionsMap.' + optionKeys[i] + '_' + i + '[' + oli + ']' + '\" id=\"curveParams-optionList-' + i + '-' + oli + '\" class=\"form-control data-input optionsTable\"' + '<span style=\"font-size:x-small\">' + optionList[oli] + '</textarea></td>';\n      }\n\n      rows += '<td><span><button id=\"curveParams-option-field-add-' + optionKeys[i] + '\" class=\"option-field-add btn btn-xs btn-success fa fa-plus\"/>';\n      rows += '<button id=\"curveParams-option-field-del-' + optionKeys[i] + '\" class=\"option-field-del btn btn-xs btn-danger fa fa-minus\"/></span></td>';\n      rows += \"</tr>\";\n    }\n\n    Session.set('params', params);\n    return rows;\n  },\n  \"default\": function () {\n    try {\n      var cname = document.getElementById(\"curveParams-selection\").value;\n      var c = Session.get('params').filter(function (obj) {\n        return obj.name == cname;\n      });\n\n      if (c) {\n        return c.default;\n      } else {\n        return \"\";\n      }\n    } catch (Exception) {\n      return \"\";\n    }\n  },\n  displayOrder: function () {\n    try {\n      var cname = document.getElementById(\"curveParams-selection\").value;\n      var c = Session.get('params').filter(function (obj) {\n        return obj.name == cname;\n      });\n\n      if (c) {\n        return c.displayOrder;\n      } else {\n        return 1;\n      }\n    } catch (Exception) {\n      return 1;\n    }\n  },\n  displayPriority: function () {\n    try {\n      var cname = document.getElementById(\"curveParams-selection\").value;\n      var c = Session.get('params').filter(function (obj) {\n        return obj.name == cname;\n      });\n\n      if (c) {\n        return c.displayPriority;\n      } else {\n        return 1;\n      }\n    } catch (Exception) {\n      return 1;\n    }\n  },\n  displayGroup: function () {\n    try {\n      var cname = document.getElementById(\"curveParams-selection\").value;\n      var c = Session.get('params').filter(function (obj) {\n        return obj.name == cname;\n      });\n\n      if (c) {\n        return c.displayGroup;\n      } else {\n        return 1;\n      }\n    } catch (Exception) {\n      return 1;\n    }\n  },\n  types: function () {\n    return Object.keys(matsTypes.InputTypes);\n  },\n  errorMessage: function () {\n    return Session.get(\"curveParamsErrorMessage\");\n  },\n  errorTypeIs: function (errType) {\n    return Session.get(\"curveParamsErrorType\") === errType;\n  },\n  restoreDates: function () {\n    try {\n      var scp = matsCollections.SavedCurveParams.findOne({\n        'clName': 'changeList'\n      });\n      var cl = scp.changeList;\n      var dates = [];\n\n      for (var i = 0; i < cl.length; i++) {\n        var utcSeconds = cl[i].savedAt;\n        var comment = \"<textarea id='ta-\" + utcSeconds + \"' style='display:none'>\" + cl[i].comment + \"</textarea>\";\n        var userName = cl[i].user.split('@')[0].replace('.', ' ');\n        var user = \"<button id='btnUser-\" + utcSeconds + \"' class='btnUser btn  btn-info'>\" + userName + \"</button>\";\n        var d = new Date(0);\n        d.setUTCSeconds(utcSeconds);\n        var mo = d.getMonth();\n        var day = d.getDate();\n        var yr = d.getFullYear();\n        var hr = d.getHours();\n        var mn = d.getMinutes();\n        var sec = d.getSeconds();\n        var dStr = mo + \"-\" + day + \"-\" + yr + \"-\" + hr + \":\" + mn + \":\" + sec;\n        dates.push({\n          second: utcSeconds,\n          date: dStr,\n          user: user,\n          userName: userName,\n          commentStr: cl[i].comment,\n          comment: comment\n        });\n      }\n\n      return dates;\n    } catch (e) {\n      return [];\n    }\n  },\n  restoreDate: function () {\n    try {\n      var scp = matsCollections.SavedCurveParams.findOne({\n        'clName': 'changeList'\n      });\n      var cl = scp.changeList;\n      var utcSeconds = cl[cl.length - 1].savedAt;\n      var user = cl[cl.length - 1].user.split('@')[0].replace('.', ' ');\n      var comment = cl[cl.length - 1].comment;\n      var d = new Date(0);\n      d.setUTCSeconds(utcSeconds);\n      var mo = d.getMonth();\n      var day = d.getDate();\n      var yr = d.getFullYear();\n      var hr = d.getHours();\n      var mn = d.getMinutes();\n      var sec = d.getSeconds();\n      return mo + \"-\" + day + \"-\" + yr + \"-\" + hr + \":\" + mn + \":\" + sec + \" \" + user + \" ... \" + comment;\n    } catch (e) {\n      return \"\";\n    }\n  }\n});\n\nvar reset = function () {\n  document.getElementById(\"curveParams-name\").value = \"\";\n  document.getElementById(\"curveParams-type\").value = \"\";\n  document.getElementById(\"curveParams-controlButtonCovered-true\").checked = true;\n  document.getElementById(\"curveParams-controlButtonCovered-false\").checked = false;\n  document.getElementById(\"curveParams-controlButtonVisibility-block\").checked = true;\n  document.getElementById(\"curveParams-controlButtonVisibility-none\").checked = false;\n  document.getElementById(\"curveParams-unique-true\").checked = false;\n  document.getElementById(\"curveParams-unique-false\").checked = true;\n  document.getElementById(\"curveParams-default\").value = \"\";\n  document.getElementById(\"curveParams-displayOrder\").value = 1;\n  document.getElementById(\"curveParams-displayPriority\").value = 1;\n  document.getElementById(\"curveParams-displayGroup\").value = 1;\n  resetError();\n};\n\nvar resetError = function () {\n  errorMessage = \"\";\n  Session.set(\"curveParamsErrorMessage\", \"\");\n  Session.set(\"curveParamsErrorType\", \"\");\n\n  if (document.getElementById(\"errorMessage\")) {\n    document.getElementById(\"errorMessage\").style.display = \"none\";\n  }\n};\n\nvar setError = function (type, message) {\n  Session.set(\"curveParamsErrorMessage\", message);\n  Session.set(\"curveParamsErrorType\", type);\n  document.getElementById(\"errorMessage\").style.display = \"block\";\n};\n\nTemplate.curveParams.events({\n  'click .curveParams-selection': function () {\n    event.preventDefault();\n\n    try {\n      resetError();\n      var cname = document.getElementById(\"curveParams-selection\").value;\n      reset();\n      var params = Session.get('params');\n      var c = params.filter(function (obj) {\n        return obj.name == cname;\n      })[0]; // want the first one - like collection.findOne({name:cname})\n\n      if (!c) {\n        return false;\n      }\n\n      document.getElementById(\"curveParams-name\").value = c.name;\n      document.getElementById(\"curveParams-type\").value = c.type;\n\n      if (c.controlButtonCovered) {\n        document.getElementById(\"curveParams-controlButtonCovered-true\").checked = true;\n        document.getElementById(\"curveParams-controlButtonCovered-false\").checked = false;\n      } else {\n        document.getElementById(\"curveParams-controlButtonCovered-true\").checked = false;\n        document.getElementById(\"curveParams-controlButtonCovered-false\").checked = true;\n      }\n\n      if (c.controlButtonVisibility == \"block\") {\n        document.getElementById(\"curveParams-controlButtonVisibility-block\").checked = true;\n        document.getElementById(\"curveParams-controlButtonVisibility-none\").checked = false;\n      } else {\n        document.getElementById(\"curveParams-controlButtonVisibility-block\").checked = false;\n        document.getElementById(\"curveParams-controlButtonVisibility-none\").checked = true;\n      }\n\n      document.getElementById(\"curveParams-default\").value = c.default;\n      document.getElementById(\"curveParams-displayOrder\").value = c.displayOrder;\n      document.getElementById(\"curveParams-displayPriority\").value = c.displayPriority;\n      document.getElementById(\"curveParams-displayGroup\").value = c.displayGroup;\n      Session.set('lastUpdate', Date.now()); // force re-render to get the optionMap\n    } catch (Exception) {\n      console.log(Exception);\n    }\n\n    return false;\n  },\n  'click .curveParams-selection-add': function () {\n    event.preventDefault();\n    var dispOrder = 1;\n    var dispPri = 1;\n    var dispGroup = 1;\n    var seconds = new Date() / 1000 | 0;\n    var params = Session.get('params');\n    var optionsMap = {};\n    params.push({\n      name: 'New-' + seconds,\n      type: matsTypes.InputTypes.textInput,\n      optionsMap: optionsMap,\n      options: Object.keys(optionsMap),\n      // convenience\n      controlButtonCovered: true,\n      \"default\": '',\n      unique: false,\n      controlButtonVisibility: 'block',\n      displayOrder: dispOrder,\n      displayPriority: dispPri,\n      displayGroup: dispGroup\n    });\n    Session.set('params', params);\n    return false;\n  },\n  'click .curveParams-selection-remove': function () {\n    event.preventDefault();\n    var removeName = document.getElementById(\"curveParams-selection\").value;\n    var params = Session.get('params');\n    var newParams = params.filter(function (value) {\n      return value.name != removeName;\n    });\n    Session.set('params', newParams);\n    reset();\n    return false;\n  },\n  'click .curveParams-option-add': function (event) {\n    event.preventDefault();\n\n    try {\n      var params = Session.get('params'); // find the object in the session that is associated with the currently selected name\n\n      var paramSelectedName = document.getElementById('curveParams-selection').value;\n      var param = params.filter(function (obj) {\n        return obj.name === paramSelectedName;\n      })[0];\n      var optionsMap = param.optionsMap;\n      var seconds = new Date() / 1000 | 0;\n      optionsMap['new-' + seconds] = [];\n      param.optionsMap = optionsMap;\n      param.options = Object.keys(optionsMap);\n      params[paramSelectedName] = param;\n      Session.set('params', params);\n    } catch (Exception) {\n      console.log(Exception);\n    }\n\n    return false;\n  },\n  'click .curveParams-option-remove': function (event) {\n    event.preventDefault();\n\n    try {\n      var params = Session.get('params'); // find the object in the session that is associated with the currently selected name\n\n      var paramSelectedName = document.getElementById('curveParams-selection').value;\n      var param = params.filter(function (obj) {\n        return obj.name === paramSelectedName;\n      })[0];\n      var optionsMap = param.optionsMap;\n      var optionSelected = Session.get('optionSelected');\n      var selectedKey = \"\";\n\n      if (optionSelected) {\n        selectedKey = optionSelected.key;\n      } else {\n        var keys = Object.keys(optionsMap);\n        selectedKey = keys[keys.length - 1];\n      }\n\n      param.optionsMap = _.omit(optionsMap, selectedKey);\n      param.options = Object.keys(optionsMap);\n      params[paramSelectedName] = param;\n      Session.set('params', params);\n      Session.set('optionSelected', \"\");\n    } catch (Exception) {\n      console.log(Exception);\n    }\n\n    return false;\n  },\n  'click .option-field-add': function (event) {\n    event.preventDefault();\n\n    try {\n      var params = Session.get('params'); // find the object in the session that is associated with the currently selected name\n\n      var paramSelectedName = document.getElementById('curveParams-selection').value;\n      var param = params.filter(function (obj) {\n        return obj.name === paramSelectedName;\n      })[0];\n      var options = param.optionsMap;\n      var optionSelected = Session.get('optionSelected');\n      var selectedKey = undefined;\n\n      if (optionSelected) {\n        selectedKey = Session.get('optionSelected').key;\n      }\n\n      if (selectedKey === undefined || selectedKey === \"\") {\n        selectedKey = event.target.id.replace('curveParams-option-field-add-', '');\n      }\n\n      options[selectedKey].push('');\n      param.optionsMap = options;\n      params[paramSelectedName] = param;\n      Session.set('params', params);\n    } catch (Exception) {\n      console.log(Exception);\n    }\n\n    return false;\n  },\n  'click .option-field-del': function () {\n    event.preventDefault();\n    var params = Session.get('params'); // find the object in the session that is associated with the currently selected name\n\n    var paramSelectedName = document.getElementById('curveParams-selection').value;\n    var param = params.filter(function (obj) {\n      return obj.name === paramSelectedName;\n    })[0];\n    var options = param.optionsMap;\n    var optionSelected = Session.get('optionSelected');\n    var selectedKey = \"\";\n    var listIndex = -1;\n\n    if (optionSelected) {\n      selectedKey = optionSelected.key;\n      listIndex = optionSelected.listIndex;\n    } else {\n      var targetId = event.target.id;\n      selectedKey = targetId.replace('curveParams-option-field-del-', '');\n    }\n\n    if (options[selectedKey] && options[selectedKey].length > 0) {\n      if (listIndex == -1) {\n        options[selectedKey] = [];\n      } else {\n        options[selectedKey].splice(listIndex, 1);\n      }\n    }\n\n    param.optionsMap = options;\n    params[paramSelectedName] = param;\n    Session.set('params', params);\n    Session.set('optionSelected', \"\");\n    return false;\n  },\n  'click .optionsTable': function (event) {\n    event.preventDefault();\n    var targetId = event.target.id;\n\n    if (targetId.indexOf('curveParams-option-') === 0) {\n      var key = document.getElementById(event.target.id).value;\n      var rowIndex = targetId.replace('curveParams-option-', '');\n      Session.set('optionSelected', {\n        key: key,\n        rowIndex: rowIndex,\n        listIndex: -1\n      });\n    } else if (targetId.indexOf('curveParams-optionList-') === 0) {\n      var indexStr = targetId.replace('curveParams-optionList-', '');\n      var indexes = indexStr.split('-');\n      var rowIndex = indexes[0];\n      var listIndex = indexes[1];\n      var key = document.getElementById('curveParams-option-' + rowIndex).value;\n      Session.set('optionSelected', {\n        key: key,\n        rowIndex: rowIndex,\n        listIndex: listIndex\n      });\n    }\n\n    return false;\n  },\n  'click .applyCurveParamsWithComment': function () {\n    // actually do the apply\n    event.preventDefault(); // first backup the existing parameters\n\n    Meteor.call('getUserAddress', function (error, result) {\n      if (error !== undefined) {\n        setError(new Error(error.message));\n        return false;\n      }\n\n      var emailAddress = result; // save the current settings and mark comment as prior to\n\n      var saveSecond = new Date() / 1000 | 0;\n      var comment = document.getElementById('applyCurveParamsComment').value;\n      var paramsCursor = matsCollections.CurveParams.find({});\n      var cl = matsCollections.SavedCurveParams.findOne({\n        'clName': 'changeList'\n      }, {\n        _id: 1\n      });\n\n      if (cl === undefined) {\n        matsCollections.SavedCurveParams.insert({\n          clName: 'changeList',\n          changeList: []\n        });\n        cl = matsCollections.SavedCurveParams.findOne({\n          'clName': 'changeList'\n        }, {\n          _id: 1\n        });\n      }\n\n      var id = cl._id;\n      matsCollections.SavedCurveParams.update({\n        _id: id\n      }, {\n        $push: {\n          changeList: {\n            user: emailAddress,\n            comment: \"prior to ...\" + comment,\n            savedAt: saveSecond\n          }\n        }\n      });\n      paramsCursor.forEach(function (doc) {\n        delete doc._id;\n        doc.savedSecond = saveSecond;\n        matsCollections.SavedCurveParams.insert(doc);\n      }); // now reconcile the session values and the CurveParams collection\n\n      resetError();\n      var params = Session.get('params');\n      var curveParams = matsCollections.CurveParams.find({}).fetch();\n\n      var paramNames = _.pluck(params, 'name');\n\n      var curveParamNames = _.pluck(curveParams, 'name'); // find any superfluous params in CurveParams (this is a remove) and remove them from collection\n\n\n      var namesToRemoveFromCollection = paramNames.filter(function (el) {\n        return curveParamNames.indexOf(el) < 0;\n      });\n\n      for (var i = 0; i < namesToRemoveFromCollection.length; i++) {\n        var rName = namesToRemoveFromCollection[i];\n        var cParam = matsCollections.CurveParams.findOne({\n          name: rName\n        });\n        var cid = cParam._id;\n        matsCollections.CurveParams.remove({\n          _id: cid\n        });\n      } // iterate all the params in the session and overwrite/insert them\n\n\n      for (var pi = 0; pi < paramNames.length; pi++) {\n        var paramName = paramNames[pi];\n        var param = params.filter(function (obj) {\n          return obj.name === paramName;\n        })[0];\n        var curveParam = matsCollections.CurveParams.findOne({\n          name: paramName\n        });\n\n        if (curveParam) {\n          // update\n          var cid = curveParam._id;\n          delete param._id;\n          matsCollections.CurveParams.update({\n            _id: cid\n          }, {\n            $set: param\n          });\n        } else {\n          //insert\n          matsCollections.CurveParams.insert(param);\n        }\n      } // now save the settings after modification\n\n\n      saveSecond = saveSecond + 1;\n      paramsCursor = matsCollections.CurveParams.find({});\n      cl = matsCollections.SavedCurveParams.findOne({\n        'clName': 'changeList'\n      }, {\n        _id: 1\n      });\n      id = cl._id;\n      matsCollections.SavedCurveParams.update({\n        _id: id\n      }, {\n        $push: {\n          changeList: {\n            user: emailAddress,\n            comment: \"post ...\" + comment,\n            savedAt: saveSecond\n          }\n        }\n      });\n      paramsCursor.forEach(function (doc) {\n        delete doc._id;\n        doc.savedSecond = saveSecond;\n        matsCollections.SavedCurveParams.insert(doc);\n      });\n      reset(); // read the params back out from the DB and set them into the Session (resets the form)\n\n      params = matsCollections.CurveParams.find({}, {\n        sort: {\n          displayOrder: 1\n        }\n      }).fetch();\n      Session.set('params', params);\n      Session.set('lastUpdate', Date.now()); // force re-render to get the optionMap\n\n      $(\"#applyCurveParamsModal\").modal('hide');\n    });\n    return false;\n  },\n  'click .cancel-curveParams': function () {\n    event.preventDefault();\n    reset();\n    var params = matsCollections.CurveParams.find({}, {\n      sort: {\n        displayOrder: 1\n      }\n    }).fetch();\n    Session.set('params', params);\n    document.getElementById(\"curveParams-selection\").value = \"\";\n    Session.set('lastUpdate', Date.now()); // force re-render to get the optionMap\n\n    return false;\n  },\n  'click .applyCurveParams': function () {\n    // show the apply modal dialogue\n    event.preventDefault();\n    $(\"#applyCurveParamsModal\").modal('show');\n    return false;\n  },\n  'click .restoreCurveParams': function () {\n    event.preventDefault();\n    $(\"#restoreCurveParamsModal\").modal('show');\n    return false;\n  },\n  'click .btnUser': function (event) {\n    event.preventDefault();\n    var targetId = event.target.id;\n    var taId = targetId.replace('btnUser-', 'ta-');\n\n    if (document.getElementById(taId).style.display == 'block') {\n      document.getElementById(taId).style.display = 'none';\n    } else {\n      document.getElementById(taId).style.display = 'block';\n    }\n\n    return false;\n  },\n  'click .restoreCurveParamsDate': function (event) {\n    //populate input restoreFromSeconds input box with selected value and data attributes\n    event.preventDefault();\n    var targetId = event.target.id;\n    var elem = document.getElementById(targetId);\n    var second = elem.getAttribute('data-second');\n    var date = elem.getAttribute('data-date');\n    var user = elem.getAttribute('data-user');\n    var comment = elem.getAttribute('data-comment');\n    var rfd = document.getElementById('restoreFromSeconds');\n    rfd.setAttribute('data-second', second);\n    rfd.setAttribute('data-date', date);\n    rfd.setAttribute('data-user', user);\n    rfd.setAttribute('data-comment', comment);\n    rfd.value = date + \" \" + user + \" ... \" + comment;\n    document.getElementById(\"restore-choose-date-toggle\").click();\n    return false;\n  },\n  'click .restoreCurveParamsFromDate': function (event) {\n    // copy all dated elements with the selected savedSecond back to curveParams\n    event.preventDefault();\n    var restoreFromSeconds = document.getElementById(\"restoreFromSeconds\");\n    var savedSecond = restoreFromSeconds.getAttribute('data-second');\n    var savedParams = matsCollections.SavedCurveParams.find({\n      'savedSecond': Number(savedSecond)\n    });\n    savedParams.forEach(function (doc) {\n      delete doc._id;\n      delete doc.savedSecond;\n      var name = doc.name;\n      var curveParam = matsCollections.CurveParams.findOne({\n        name: name\n      });\n      var id = curveParam._id;\n      matsCollections.CurveParams.update({\n        _id: id\n      }, {\n        $set: doc\n      });\n    });\n    Session.set('lastUpdate', Date.now()); // force re-render\n\n    $(\"#restoreCurveParamsModal\").modal('hide');\n    return false;\n  },\n  'click .cancel-restoreCurveParamsFromDate': function (event) {\n    // copy all dated elements with the selected savedSecond back to curveParams\n    event.preventDefault();\n    $(\"#restoreCurveParamsModal\").modal('hide');\n    return false;\n  },\n  'change': function (event) {\n    // should catch all the widgets whenever a change happens.\n    // This is where we capture changes and move them to the session.\n    // When the apply is hit a different event listener will migrate the modified\n    // session settings to the collection.\n    event.preventDefault();\n    var params = Session.get('params');\n    var targetId = event.target.id;\n\n    if (targetId == \"curveParams-selection\") {\n      // ignore changes to the main selector\n      return false;\n    }\n\n    var elem = document.getElementById(targetId);\n    var value = elem.value; // find the object in the session that is associated with the currently selected name\n\n    var paramSelectedName = document.getElementById('curveParams-selection').value;\n    var param = params.filter(function (obj) {\n      return obj.name === paramSelectedName;\n    })[0]; // each curveParameter is made up of several fields...\n    // the name, type, optionsMap, options (is derived from optionsMap), controlButtonCovered, unique, default, controlButtonVisibility, displayOrder, displayPriority, and displayGroup\n    // Which of these is captured by an element is set in the data-field attribute.\n\n    var dataField = elem.getAttribute('data-field');\n\n    if (!dataField) {\n      return false;\n    }\n\n    if (dataField.indexOf('optionsMap') == 0) {\n      // For an optionsMap the dataField is a cell in the optionsMap table.\n      // If it is the first column it is something like optionsMap.RH_n   i.e. RH is the value of the leftmost cell\n      // and RH is also a key of the params.optionsMap object. n is the row that the key is in.\n      // If it is the second column it is something like optionsMap.RH_n[0].\n      // That is because the in memory representation (params.optionsMap object) uses the value of the first column to\n      // denote a hashmap key, and the rest of the columns are contained in a list starting\n      // with index 0 at the left of the table.\n      // like .. key:[col2,col3,....coln], so it might be...\n      // optionsMap.RH:[0,1..n] to denote the rest of a row.\n      //NOTE: we trim the keys but not the other cell values - they might contain necessary white space.\n      var keyParts = dataField.replace('optionsMap.', '').split('_');\n      var key = keyParts[0];\n      var optionsMap = param.optionsMap;\n\n      if (keyParts[1].indexOf('[') !== -1) {\n        // this is a key and list index\n        var index = keyParts[1].split('[')[1].replace(']', '');\n        optionsMap[key][index] = value;\n      } else {\n        //  we are essentially renaming the key to new value and deleting the old key\n        value = value.trim(); // trim the whitespace from both ends\n\n        if (key != value) {\n          // don't do it if it is somehow the same.\n          Object.defineProperty(optionsMap, value, Object.getOwnPropertyDescriptor(optionsMap, key));\n          delete optionsMap[key];\n        }\n      } // optionsMap has been changed...\n\n\n      param.optionsMap = optionsMap;\n      param.options = Object.keys(optionsMap);\n    } else {\n      // regular field - just set the value\n      param.field = value;\n    } //console.log (\"change:  value:\" + value + \"\\n  field: \" + dataField + \"\\n  paramSelectedName \" + paramSelectedName + \"  \\n param: \\n\" + JSON.stringify(param));\n\n\n    Session.set('params', params);\n    Session.set('lastUpdate', Date.now()); // force re-render to get the optionMap\n\n    return false;\n  }\n});","map":{"version":3,"sources":["packages/randyp:mats-common/templates/administration/curveParams.js"],"names":["Meteor","module","link","v","matsCollections","matsTypes","Template","curveParams","onRendered","reset","helpers","Session","get","undefined","params","CurveParams","find","sort","displayOrder","fetch","set","optionRows","rows","document","getElementById","paramSelectedName","value","param","filter","obj","name","optionsMap","optionKeys","Object","keys","options","i","length","optionList","oli","cname","c","default","Exception","displayPriority","displayGroup","types","InputTypes","errorMessage","errorTypeIs","errType","restoreDates","scp","SavedCurveParams","findOne","cl","changeList","dates","utcSeconds","savedAt","comment","userName","user","split","replace","d","Date","setUTCSeconds","mo","getMonth","day","getDate","yr","getFullYear","hr","getHours","mn","getMinutes","sec","getSeconds","dStr","push","second","date","commentStr","e","restoreDate","checked","resetError","style","display","setError","type","message","events","event","preventDefault","controlButtonCovered","controlButtonVisibility","now","console","log","dispOrder","dispPri","dispGroup","seconds","textInput","unique","removeName","newParams","optionSelected","selectedKey","key","_","omit","target","id","listIndex","targetId","splice","indexOf","rowIndex","indexStr","indexes","call","error","result","Error","emailAddress","saveSecond","paramsCursor","_id","insert","clName","update","$push","forEach","doc","savedSecond","paramNames","pluck","curveParamNames","namesToRemoveFromCollection","el","rName","cParam","cid","remove","pi","paramName","curveParam","$set","$","modal","taId","elem","getAttribute","rfd","setAttribute","click","restoreFromSeconds","savedParams","Number","dataField","keyParts","index","trim","defineProperty","getOwnPropertyDescriptor","field"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2019 Colorado State University and Regents of the University of Colorado. All rights reserved.\n */\n\nimport { Meteor } from 'meteor/meteor';\nimport {matsCollections} from 'meteor/randyp:mats-common';\nimport {matsTypes} from 'meteor/randyp:mats-common';\n/**\n * Created by pierce on 8/13/15.\n */\nTemplate.curveParams.onRendered(function () {\n    reset();\n});\n\nTemplate.curveParams.helpers({\n    curveParams : function() {\n        if (Session.get('params') === undefined) {\n            var params = matsCollections.CurveParams.find({}, {sort: {displayOrder:1}}).fetch();\n            Session.set('params',params);\n        }\n        return Session.get('params');\n    },\n    optionRows: function() {\n        var rows = \"\";\n        // find the object in the session that is associated with the currently selected name\n        var params = Session.get('params');\n        if (params == undefined) {\n            return \"\";\n        }\n        if (!document.getElementById('curveParams-selection') || document.getElementById('curveParams-selection') == \"\") {\n            return \"\";\n        }\n        var paramSelectedName = document.getElementById('curveParams-selection').value;\n        var param = params.filter(function ( obj ) {\n            return obj.name === paramSelectedName;\n        })[0];\n        if (param == undefined) {\n            return;\n        }\n        var optionsMap = param.optionsMap;\n        if (optionsMap == undefined) {\n            return \"\";\n        }\n\n        // create the options table rows\n        var optionKeys = Object.keys(optionsMap);\n        param.options = optionKeys;\n        for (var i=0; i< optionKeys.length;i++){\n            var optionList = optionsMap[optionKeys[i]];\n            rows += '<tr><td contentEditable width=\"10%\" style=\"min-width:3em;\"><input data-field=\"optionsMap.' + optionKeys[i] + \"_\" + i + '\" id=\"curveParams-option-' + i + '\" class=\"form-control data-input textInput\" type=\"text\" value=\"' + optionKeys[i] + '\"/></td>';\n            for (var oli=0; oli<optionList.length;oli++) {\n                rows += '<td contentEditable><textarea data-field=\"optionsMap.' + optionKeys[i]  + '_' + i + '['+ oli +']' + '\" id=\"curveParams-optionList-' + i + '-' + oli + '\" class=\"form-control data-input optionsTable\"' + '<span style=\"font-size:x-small\">' + optionList[oli] + '</textarea></td>';\n            }\n            rows += '<td><span><button id=\"curveParams-option-field-add-' + optionKeys[i] + '\" class=\"option-field-add btn btn-xs btn-success fa fa-plus\"/>';\n            rows += '<button id=\"curveParams-option-field-del-' + optionKeys[i] + '\" class=\"option-field-del btn btn-xs btn-danger fa fa-minus\"/></span></td>';\n            rows += \"</tr>\";\n        }\n        Session.set('params',params);\n        return rows;\n    },\n    default: function() {\n        try {\n            var cname = document.getElementById(\"curveParams-selection\").value;\n\n            var c = Session.get('params').filter(function (obj) {\n                return obj.name == cname;\n            });\n            if (c) {\n                return c.default;\n            }\n            else {\n                return \"\";\n            }\n        } catch(Exception) {\n            return \"\";\n        }\n    },\n    displayOrder: function() {\n        try {\n            var cname = document.getElementById(\"curveParams-selection\").value;\n            var c = Session.get('params').filter(function (obj) {\n                return obj.name == cname;\n            });\n\n            if (c) {\n                return c.displayOrder;\n            }\n            else {\n                return 1;\n            }\n        } catch (Exception) {\n            return 1;\n        }\n    },\n    displayPriority:function() {\n        try {\n            var cname = document.getElementById(\"curveParams-selection\").value;\n            var c = Session.get('params').filter(function( obj ) {\n                return obj.name == cname;\n            });\n\n            if (c) { return c.displayPriority; }\n            else { return 1;}\n        } catch (Exception) {\n            return 1;\n        }\n\n    },\n    displayGroup:function() {\n    try {\n        var cname = document.getElementById(\"curveParams-selection\").value;\n\n        var c = Session.get('params').filter(function( obj ) {\n            return obj.name == cname;\n        });\n\n        if (c) { return c.displayGroup; }\n        else { return 1;}\n    } catch (Exception) {\n        return 1;\n    }\n\n    },\n    types: function() {\n        return Object.keys(matsTypes.InputTypes);\n    },\n    errorMessage: function() {\n        return Session.get(\"curveParamsErrorMessage\");\n    },\n    errorTypeIs: function(errType) {\n        return Session.get(\"curveParamsErrorType\") === errType;\n    },\n    restoreDates: function() {\n        try {\n            var scp = matsCollections.SavedCurveParams.findOne({'clName': 'changeList'});\n            var cl = scp.changeList;\n            var dates = [];\n            for (var i = 0; i < cl.length; i++) {\n                var utcSeconds = cl[i].savedAt;\n                var comment = \"<textarea id='ta-\" + utcSeconds + \"' style='display:none'>\" + cl[i].comment + \"</textarea>\";\n                var userName = cl[i].user.split('@')[0].replace('.',' ');\n                var user = \"<button id='btnUser-\" + utcSeconds + \"' class='btnUser btn  btn-info'>\"+ userName + \"</button>\";\n                var d = new Date(0);\n                d.setUTCSeconds(utcSeconds);\n                var mo = d.getMonth();\n                var day = d.getDate();\n                var yr = d.getFullYear();\n                var hr = d.getHours();\n                var mn = d.getMinutes();\n                var sec = d.getSeconds();\n                var dStr = mo + \"-\" + day + \"-\" + yr + \"-\" + hr + \":\" + mn + \":\" + sec;\n                dates.push({second:utcSeconds, date:dStr, user:user, userName:userName, commentStr:cl[i].comment, comment:comment});\n            }\n            return dates;\n        } catch (e) {\n            return [];\n        }\n    },\n    restoreDate: function() {\n        try {\n            var scp = matsCollections.SavedCurveParams.findOne({'clName': 'changeList'});\n            var cl = scp.changeList;\n            var utcSeconds = cl[cl.length - 1].savedAt;\n            var user = cl[cl.length - 1].user.split('@')[0].replace('.', ' ');\n            var comment = cl[cl.length - 1].comment;\n            var d = new Date(0);\n            d.setUTCSeconds(utcSeconds);\n            var mo = d.getMonth();\n            var day = d.getDate();\n            var yr = d.getFullYear();\n            var hr = d.getHours();\n            var mn = d.getMinutes();\n            var sec = d.getSeconds();\n            return mo + \"-\" + day + \"-\" + yr + \"-\" + hr + \":\" + mn + \":\" + sec + \" \" + user + \" ... \" + comment;\n        } catch (e){\n            return \"\";\n        }\n    }\n});\n\nvar reset = function(){\n    document.getElementById(\"curveParams-name\").value = \"\";\n    document.getElementById(\"curveParams-type\").value = \"\";\n    document.getElementById(\"curveParams-controlButtonCovered-true\").checked=true;\n    document.getElementById(\"curveParams-controlButtonCovered-false\").checked=false;\n    document.getElementById(\"curveParams-controlButtonVisibility-block\").checked=true;\n    document.getElementById(\"curveParams-controlButtonVisibility-none\").checked=false;\n    document.getElementById(\"curveParams-unique-true\").checked=false;\n    document.getElementById(\"curveParams-unique-false\").checked=true;\n    document.getElementById(\"curveParams-default\").value = \"\";\n    document.getElementById(\"curveParams-displayOrder\").value = 1;\n    document.getElementById(\"curveParams-displayPriority\").value = 1;\n    document.getElementById(\"curveParams-displayGroup\").value = 1;\n    resetError();\n};\nvar resetError = function() {\n    errorMessage = \"\";\n    Session.set(\"curveParamsErrorMessage\",\"\");\n    Session.set(\"curveParamsErrorType\",\"\");\n    if (document.getElementById(\"errorMessage\")) {\n        document.getElementById(\"errorMessage\").style.display = \"none\";\n    }\n};\nvar setError = function(type,message) {\n    Session.set(\"curveParamsErrorMessage\", message);\n    Session.set(\"curveParamsErrorType\", type);\n    document.getElementById(\"errorMessage\").style.display = \"block\";\n};\n\nTemplate.curveParams.events({\n    'click .curveParams-selection': function () {\n        event.preventDefault();\n        try {\n            resetError();\n            var cname = document.getElementById(\"curveParams-selection\").value;\n            reset();\n            var params = Session.get('params');\n            var c = params.filter(function (obj) {\n                return obj.name == cname;\n            })[0];  // want the first one - like collection.findOne({name:cname})\n            if (!c) {\n                return false;\n            }\n            document.getElementById(\"curveParams-name\").value = c.name;\n            document.getElementById(\"curveParams-type\").value = c.type;\n            if (c.controlButtonCovered) {\n                document.getElementById(\"curveParams-controlButtonCovered-true\").checked = true;\n                document.getElementById(\"curveParams-controlButtonCovered-false\").checked = false;\n            } else {\n                document.getElementById(\"curveParams-controlButtonCovered-true\").checked = false;\n                document.getElementById(\"curveParams-controlButtonCovered-false\").checked = true;\n            }\n            if (c.controlButtonVisibility == \"block\") {\n                document.getElementById(\"curveParams-controlButtonVisibility-block\").checked = true;\n                document.getElementById(\"curveParams-controlButtonVisibility-none\").checked = false;\n            } else {\n                document.getElementById(\"curveParams-controlButtonVisibility-block\").checked = false;\n                document.getElementById(\"curveParams-controlButtonVisibility-none\").checked = true;\n            }\n            document.getElementById(\"curveParams-default\").value = c.default;\n            document.getElementById(\"curveParams-displayOrder\").value = c.displayOrder;\n            document.getElementById(\"curveParams-displayPriority\").value = c.displayPriority;\n            document.getElementById(\"curveParams-displayGroup\").value = c.displayGroup;\n            Session.set('lastUpdate', Date.now());// force re-render to get the optionMap\n        } catch (Exception) {console.log(Exception);}\n        return false;\n    },\n    'click .curveParams-selection-add': function () {\n        event.preventDefault();\n        var dispOrder = 1;\n        var dispPri = 1;\n        var dispGroup = 1;\n        var seconds = new Date() / 1000 | 0;\n        var params = Session.get('params');\n        var optionsMap = {};\n        params.push({\n            name: 'New-' + seconds,\n            type: matsTypes.InputTypes.textInput,\n            optionsMap: optionsMap,\n            options: Object.keys(optionsMap),   // convenience\n            controlButtonCovered: true,\n            default: '',\n            unique: false,\n            controlButtonVisibility: 'block',\n            displayOrder: dispOrder,\n            displayPriority: dispPri,\n            displayGroup: dispGroup\n        });\n        Session.set('params', params);\n        return false;\n    },\n    'click .curveParams-selection-remove': function () {\n        event.preventDefault();\n        var removeName = document.getElementById(\"curveParams-selection\").value;\n        var params = Session.get('params');\n        var newParams = params.filter(function (value) {\n            return value.name != removeName\n        });\n        Session.set('params', newParams);\n        reset();\n        return false;\n    },\n    'click .curveParams-option-add': function (event) {\n        event.preventDefault();\n        try {\n            var params = Session.get('params');\n            // find the object in the session that is associated with the currently selected name\n            var paramSelectedName = document.getElementById('curveParams-selection').value;\n            var param = params.filter(function ( obj ) {\n                return obj.name === paramSelectedName;\n            })[0];\n            var optionsMap = param.optionsMap;\n            var seconds = new Date() / 1000 | 0;\n            optionsMap['new-' + seconds] = [];\n            param.optionsMap = optionsMap;\n            param.options = Object.keys(optionsMap);\n            params[paramSelectedName] = param;\n            Session.set('params',params);\n        } catch (Exception){console.log(Exception);}\n        return false;\n    },\n    'click .curveParams-option-remove': function (event) {\n        event.preventDefault();\n        try {\n            var params = Session.get('params');\n            // find the object in the session that is associated with the currently selected name\n            var paramSelectedName = document.getElementById('curveParams-selection').value;\n            var param = params.filter(function ( obj ) {\n                return obj.name === paramSelectedName;\n            })[0];\n            var optionsMap = param.optionsMap;\n            var optionSelected = Session.get('optionSelected');\n            var selectedKey = \"\";\n            if (optionSelected) {\n                selectedKey = optionSelected.key;\n            } else {\n                var keys = Object.keys(optionsMap);\n                selectedKey = keys[keys.length -1];\n            }\n            param.optionsMap = _.omit(optionsMap, selectedKey);\n            param.options = Object.keys(optionsMap);\n            params[paramSelectedName] = param;\n            Session.set('params',params);\n            Session.set('optionSelected',\"\");\n        } catch (Exception){console.log(Exception);}\n        return false;\n    },\n    'click .option-field-add': function (event) {\n        event.preventDefault();\n        try {\n            var params = Session.get('params');\n            // find the object in the session that is associated with the currently selected name\n            var paramSelectedName = document.getElementById('curveParams-selection').value;\n            var param = params.filter(function ( obj ) {\n                return obj.name === paramSelectedName;\n            })[0];\n            var options = param.optionsMap;\n            var optionSelected = Session.get('optionSelected');\n            var selectedKey = undefined;\n            if (optionSelected) {\n                selectedKey = Session.get('optionSelected').key;\n            }\n\n            if (selectedKey === undefined || selectedKey === \"\") {\n                selectedKey = event.target.id.replace('curveParams-option-field-add-','');\n            }\n            options[selectedKey].push('');\n            param.optionsMap = options;\n            params[paramSelectedName] = param;\n            Session.set('params',params);\n        } catch (Exception){console.log(Exception);}\n        return false;\n    },\n    'click .option-field-del': function () {\n        event.preventDefault();\n        var params = Session.get('params');\n        // find the object in the session that is associated with the currently selected name\n        var paramSelectedName = document.getElementById('curveParams-selection').value;\n        var param = params.filter(function ( obj ) {\n            return obj.name === paramSelectedName;\n        })[0];\n        var options = param.optionsMap;\n        var optionSelected = Session.get('optionSelected');\n        var selectedKey = \"\";\n        var listIndex = -1;\n        if (optionSelected) {\n            selectedKey = optionSelected.key;\n            listIndex = optionSelected.listIndex;\n        } else {\n            var targetId = event.target.id;\n            selectedKey = targetId.replace('curveParams-option-field-del-','');\n        }\n        if (options[selectedKey] && options[selectedKey].length > 0) {\n            if (listIndex == -1) {\n                options[selectedKey] = [];\n            } else {\n                options[selectedKey].splice(listIndex, 1);\n            }\n        }\n        param.optionsMap = options;\n        params[paramSelectedName] = param;\n        Session.set('params',params);\n        Session.set('optionSelected',\"\");\n        return false;\n    },\n    'click .optionsTable' : function(event) {\n      event.preventDefault();\n      var targetId = event.target.id;\n      if (targetId.indexOf('curveParams-option-') === 0) {\n          var key = document.getElementById(event.target.id).value;\n          var rowIndex = targetId.replace('curveParams-option-','');\n          Session.set('optionSelected',{key:key,rowIndex:rowIndex,listIndex:-1});\n      } else if (targetId.indexOf('curveParams-optionList-') === 0) {\n          var indexStr = targetId.replace('curveParams-optionList-','');\n          var indexes = indexStr.split('-');\n          var rowIndex = indexes[0];\n          var listIndex = indexes[1];\n          var key = document.getElementById('curveParams-option-' + rowIndex).value;\n          Session.set('optionSelected',{key:key,rowIndex:rowIndex,listIndex:listIndex});\n        }\n        return false;\n    },\n    'click .applyCurveParamsWithComment': function () {\n        // actually do the apply\n        event.preventDefault();\n        // first backup the existing parameters\n        Meteor.call('getUserAddress', function (error, result) {\n            if (error !== undefined) {\n                setError(new Error(error.message));\n                return false;\n            }\n\n            var emailAddress = result;\n            // save the current settings and mark comment as prior to\n            var saveSecond = new Date() / 1000 | 0;\n            var comment = document.getElementById('applyCurveParamsComment').value;\n            var paramsCursor = matsCollections.CurveParams.find({});\n            var cl = matsCollections.SavedCurveParams.findOne({'clName':'changeList'},{_id:1});\n            if (cl === undefined) {\n                matsCollections.SavedCurveParams.insert({clName: 'changeList', changeList:[]});\n                cl = matsCollections.SavedCurveParams.findOne({'clName':'changeList'},{_id:1});\n            }\n            var id = cl._id;\n            matsCollections.SavedCurveParams.update({_id:id},{$push:{changeList:{user: emailAddress, comment: \"prior to ...\" + comment, savedAt: saveSecond}} });\n            paramsCursor.forEach(function(doc) {\n                delete doc._id;\n                doc.savedSecond = saveSecond;\n                matsCollections.SavedCurveParams.insert(doc);\n            });\n\n            // now reconcile the session values and the CurveParams collection\n            resetError();\n            var params = Session.get('params');\n            var curveParams = matsCollections.CurveParams.find({}).fetch();\n            var paramNames = _.pluck(params,'name');\n            var curveParamNames =  _.pluck(curveParams,'name');\n\n            // find any superfluous params in CurveParams (this is a remove) and remove them from collection\n            var namesToRemoveFromCollection =  paramNames.filter( function( el ) {\n                return curveParamNames.indexOf( el ) < 0;\n            });\n            for (var i=0; i < namesToRemoveFromCollection.length; i++) {\n                var rName = namesToRemoveFromCollection[i];\n                var cParam = matsCollections.CurveParams.findOne({name:rName});\n                var cid = cParam._id;\n                matsCollections.CurveParams.remove({_id:cid});\n            }\n\n            // iterate all the params in the session and overwrite/insert them\n            for (var pi=0; pi < paramNames.length; pi++) {\n                var paramName = paramNames[pi];\n                var param = params.filter(function ( obj ) {\n                    return obj.name === paramName;\n                })[0];\n\n                var curveParam = matsCollections.CurveParams.findOne({name:paramName});\n                if (curveParam) {\n                    // update\n                    var cid = curveParam._id;\n                    delete param._id;\n                    matsCollections.CurveParams.update({_id:cid},{$set:param});\n                } else {\n                    //insert\n                    matsCollections.CurveParams.insert(param);\n                }\n            }\n\n            // now save the settings after modification\n            saveSecond = saveSecond + 1;\n            paramsCursor = matsCollections.CurveParams.find({});\n            cl = matsCollections.SavedCurveParams.findOne({'clName':'changeList'},{_id:1});\n            id = cl._id;\n            matsCollections.SavedCurveParams.update({_id:id},{$push:{changeList:{user: emailAddress, comment: \"post ...\" + comment, savedAt: saveSecond}} });\n            paramsCursor.forEach(function(doc) {\n                delete doc._id;\n                doc.savedSecond = saveSecond;\n                matsCollections.SavedCurveParams.insert(doc);\n            });\n\n            reset();\n            // read the params back out from the DB and set them into the Session (resets the form)\n            params = matsCollections.CurveParams.find({}, {sort: {displayOrder:1}}).fetch();\n            Session.set('params',params);\n            Session.set('lastUpdate', Date.now());// force re-render to get the optionMap\n            $(\"#applyCurveParamsModal\").modal('hide');\n        });\n        return false;\n    },\n    'click .cancel-curveParams': function() {\n        event.preventDefault();\n        reset();\n        var params = matsCollections.CurveParams.find({}, {sort: {displayOrder:1}}).fetch();\n        Session.set('params',params);\n        document.getElementById(\"curveParams-selection\").value = \"\";\n        Session.set('lastUpdate', Date.now());// force re-render to get the optionMap\n        return false;\n    },\n    'click .applyCurveParams': function() {\n        // show the apply modal dialogue\n        event.preventDefault();\n\n        $(\"#applyCurveParamsModal\").modal('show');\n        return false;\n    },\n    'click .restoreCurveParams': function() {\n        event.preventDefault();\n        $(\"#restoreCurveParamsModal\").modal('show');\n        return false;\n    },\n    'click .btnUser': function(event) {\n        event.preventDefault();\n        var targetId = event.target.id;\n        var taId = targetId.replace('btnUser-','ta-');\n        if (document.getElementById(taId).style.display=='block'){\n            document.getElementById(taId).style.display='none'\n        }else{\n            document.getElementById(taId).style.display='block'\n        }\n        return false;\n    },\n    'click .restoreCurveParamsDate': function(event) {\n        //populate input restoreFromSeconds input box with selected value and data attributes\n        event.preventDefault();\n        var targetId = event.target.id;\n        var elem = document.getElementById(targetId);\n        var second = elem.getAttribute('data-second');\n        var date = elem.getAttribute('data-date');\n        var user = elem.getAttribute('data-user');\n        var comment = elem.getAttribute('data-comment');\n\n        var rfd = document.getElementById('restoreFromSeconds');\n        rfd.setAttribute('data-second',second);\n        rfd.setAttribute('data-date',date);\n        rfd.setAttribute('data-user',user);\n        rfd.setAttribute('data-comment',comment);\n        rfd.value = date + \" \" + user + \" ... \" + comment;\n        document.getElementById(\"restore-choose-date-toggle\").click();\n        return false;\n    },\n    'click .restoreCurveParamsFromDate': function(event) {\n        // copy all dated elements with the selected savedSecond back to curveParams\n        event.preventDefault();\n        var restoreFromSeconds = document.getElementById(\"restoreFromSeconds\");\n        var savedSecond = restoreFromSeconds.getAttribute('data-second');\n        var savedParams = matsCollections.SavedCurveParams.find({'savedSecond':Number(savedSecond)});\n        savedParams.forEach(function(doc) {\n            delete doc._id;\n            delete doc.savedSecond;\n            var name = doc.name;\n            var curveParam = matsCollections.CurveParams.findOne({name:name});\n            var id = curveParam._id;\n            matsCollections.CurveParams.update({_id:id},{$set:doc});\n        });\n        Session.set('lastUpdate', Date.now());// force re-render\n        $(\"#restoreCurveParamsModal\").modal('hide');\n        return false;\n    },\n    'click .cancel-restoreCurveParamsFromDate': function(event) {\n        // copy all dated elements with the selected savedSecond back to curveParams\n        event.preventDefault();\n        $(\"#restoreCurveParamsModal\").modal('hide');\n        return false;\n    },\n    'change': function(event) {\n        // should catch all the widgets whenever a change happens.\n        // This is where we capture changes and move them to the session.\n        // When the apply is hit a different event listener will migrate the modified\n        // session settings to the collection.\n        event.preventDefault();\n        var params = Session.get('params');\n        var targetId = event.target.id;\n        if (targetId == \"curveParams-selection\") {\n            // ignore changes to the main selector\n            return false;\n        }\n\n        var elem = document.getElementById(targetId);\n        var value = elem.value;\n\n        // find the object in the session that is associated with the currently selected name\n        var paramSelectedName = document.getElementById('curveParams-selection').value;\n        var param = params.filter(function ( obj ) {\n            return obj.name === paramSelectedName;\n        })[0];\n\n        // each curveParameter is made up of several fields...\n        // the name, type, optionsMap, options (is derived from optionsMap), controlButtonCovered, unique, default, controlButtonVisibility, displayOrder, displayPriority, and displayGroup\n        // Which of these is captured by an element is set in the data-field attribute.\n        var dataField = elem.getAttribute('data-field');\n        if (!dataField) { return false;}\n        if (dataField.indexOf('optionsMap') == 0) {\n            // For an optionsMap the dataField is a cell in the optionsMap table.\n            // If it is the first column it is something like optionsMap.RH_n   i.e. RH is the value of the leftmost cell\n            // and RH is also a key of the params.optionsMap object. n is the row that the key is in.\n            // If it is the second column it is something like optionsMap.RH_n[0].\n            // That is because the in memory representation (params.optionsMap object) uses the value of the first column to\n            // denote a hashmap key, and the rest of the columns are contained in a list starting\n            // with index 0 at the left of the table.\n            // like .. key:[col2,col3,....coln], so it might be...\n            // optionsMap.RH:[0,1..n] to denote the rest of a row.\n            //NOTE: we trim the keys but not the other cell values - they might contain necessary white space.\n            var keyParts = dataField.replace('optionsMap.','').split('_');\n            var key = keyParts[0];\n\n            var optionsMap = param.optionsMap;\n            if (keyParts[1].indexOf('[') !== -1) {\n                // this is a key and list index\n                var index = keyParts[1].split('[')[1].replace(']','');\n                optionsMap[key][index] = value;\n            } else {\n                //  we are essentially renaming the key to new value and deleting the old key\n                value = value.trim();   // trim the whitespace from both ends\n                if (key != value) { // don't do it if it is somehow the same.\n                    Object.defineProperty(optionsMap, value, Object.getOwnPropertyDescriptor(optionsMap, key));\n                    delete optionsMap[key];\n                }\n            }\n            // optionsMap has been changed...\n            param.optionsMap = optionsMap;\n            param.options = Object.keys(optionsMap);\n        } else {\n            // regular field - just set the value\n            param.field = value;\n        }\n        //console.log (\"change:  value:\" + value + \"\\n  field: \" + dataField + \"\\n  paramSelectedName \" + paramSelectedName + \"  \\n param: \\n\" + JSON.stringify(param));\n        Session.set('params',params);\n        Session.set('lastUpdate', Date.now());// force re-render to get the optionMap\n        return false;\n    }\n});\n\n\n"]},"sourceType":"script","hash":"86deb4ec9757e827fe2a2c2736628451d70d260c"}
