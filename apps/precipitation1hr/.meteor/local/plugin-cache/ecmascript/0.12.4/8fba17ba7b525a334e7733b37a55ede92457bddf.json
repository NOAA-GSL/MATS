{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/imports/startup/server/plot_spec_util.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/randyp:mats-common/imports/startup/server/plot_spec_util.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/imports/startup/server/plot_spec_util.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/imports/startup/server/plot_spec_util.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/randyp:mats-common/imports/startup/server/plot_spec_util.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet matsCollections, matsDataCurveOpsUtils, matsDataDiffUtils, matsDataProcessUtils, matsDataQueryUtils, matsDataUtils, matsMethods, matsParamUtils, matsTypes;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsCollections(v) {\n    matsCollections = v;\n  },\n\n  matsDataCurveOpsUtils(v) {\n    matsDataCurveOpsUtils = v;\n  },\n\n  matsDataDiffUtils(v) {\n    matsDataDiffUtils = v;\n  },\n\n  matsDataProcessUtils(v) {\n    matsDataProcessUtils = v;\n  },\n\n  matsDataQueryUtils(v) {\n    matsDataQueryUtils = v;\n  },\n\n  matsDataUtils(v) {\n    matsDataUtils = v;\n  },\n\n  matsMethods(v) {\n    matsMethods = v;\n  },\n\n  matsParamUtils(v) {\n    matsParamUtils = v;\n  },\n\n  matsTypes(v) {\n    matsTypes = v;\n  }\n\n}, 1);\nlet mysql;\nmodule.link(\"meteor/pcel:mysql\", {\n  mysql(v) {\n    mysql = v;\n  }\n\n}, 2);\nlet moment;\nmodule.link(\"meteor/momentjs:moment\", {\n  moment(v) {\n    moment = v;\n  }\n\n}, 3);\nconst statMvTranslation = {\n  'ACC': \"ANOM_CORR\",\n  'RMS': 'RMSE',\n  'Bias (Model - Obs)': 'ME',\n  'Model average': \"FBAR\",\n  'Obs average': \"OBAR\"\n};\n\nconst xmlBuilder = require('xmlbuilder');\n\nconst _pad = function (num, size) {\n  var s = num + \"\";\n\n  while (s.length < size) s = \"0\" + s;\n\n  return s;\n};\n\nconst _title = function () {\n  try {\n    if (matsCollections.Settings === undefined || matsCollections.Settings.findOne({}, {\n      fields: {\n        Title: 1\n      }\n    }) === undefined) {\n      return \"\";\n    } else {\n      return matsCollections.Settings.findOne({}, {\n        fields: {\n          Title: 1\n        }\n      }).Title;\n    }\n  } catch (someError) {\n    return \"\";\n  }\n};\n\nconst _plotText = function (plotParams) {\n  var format = plotParams.plotFormat;\n\n  if (matsCollections.PlotParams.findOne({\n    name: 'plotFormat'\n  }) && matsCollections.PlotParams.findOne({\n    name: 'plotFormat'\n  }).optionsMap && matsCollections.PlotParams.findOne({\n    name: 'plotFormat'\n  }).optionsMap[plotParams.plotFormat] !== undefined) {\n    format = matsCollections.PlotParams.findOne({\n      name: 'plotFormat'\n    }).optionsMap[plotParams.plotFormat];\n  }\n\n  if (format === undefined) {\n    format = \"Unmatched\";\n  }\n\n  const plotType = _.invert(plotParams.plotTypes)[true];\n\n  switch (plotType) {\n    case matsTypes.PlotTypes.timeSeries:\n      return \"TimeSeries \" + plotParams.dates + \" : \" + format;\n      break;\n\n    case matsTypes.PlotTypes.profile:\n      return \"Profile: \" + format;\n      break;\n\n    case matsTypes.PlotTypes.dieoff:\n      return \"DieOff: \" + format;\n      break;\n\n    case matsTypes.PlotTypes.threshold:\n      return \"Threshold: \" + format;\n      break;\n\n    case matsTypes.PlotTypes.validtime:\n      return \"ValidTime: \" + format;\n      break;\n\n    case matsTypes.PlotTypes.dailyModelCycle:\n      return \"DailyModelCycle \" + plotParams.dates + \" : \" + format;\n      break;\n\n    case matsTypes.PlotTypes.reliability:\n      return \"Reliability: \" + format;\n      break;\n\n    case matsTypes.PlotTypes.map:\n      return \"Map \" + plotParams.dates + \" \";\n      break;\n\n    case matsTypes.PlotTypes.histogram:\n      return \"Histogram: \" + format;\n      break;\n\n    default:\n      return \"Scatter: \" + plotParams.dates + \" : \" + format;\n  }\n};\n\nconst _componentToHex = function (c) {\n  var hex = c.toString(16);\n  return hex.length == 1 ? \"0\" + hex : hex;\n};\n\nconst _rgbToHex = function (color) {\n  const cParts = color.replace('rgb(', '').replace(')', '').split(',');\n  const r = Number(cParts[0]);\n  const g = Number(cParts[1]);\n  const b = Number(cParts[2]);\n  return \"#\" + _componentToHex(r) + _componentToHex(g) + _componentToHex(b);\n};\n\nconst _getUniqDates = function (dates, database, model, dataSource, region, variable, forecastLength, fromSecs, toSecs, validTimes) {\n  var regionsClause = \"\";\n\n  if (region != null) {\n    region = Array.isArray(region) ? region : [region];\n\n    if (region.length > 0) {\n      const regions = region.map(function (r) {\n        return \"'\" + r + \"'\";\n      }).join(',');\n      regionsClause = \"and h.vx_mask IN(\" + regions + \")\";\n    }\n  } // the forecast lengths appear to have sometimes been inconsistent (by format) in the varias databases\n  // so they have been sanitized for display purposes in the forecastValueMap.\n  // now we have to go get the damn ole unsanitary ones for the database.\n\n\n  var forecastLengthsClause = \"\";\n\n  if (forecastLength != null) {\n    forecastLength = Array.isArray(forecastLength) ? forecastLength : [forecastLength];\n\n    if (forecastLength.length > 0) {\n      const forecastValueMap = matsCollections.CurveParams.findOne({\n        name: 'forecast-length'\n      }, {\n        valuesMap: 1\n      })['valuesMap'][database][dataSource];\n      const forecastLengths = forecastLength.map(function (fl) {\n        return forecastValueMap[fl];\n      }).join(',');\n      forecastLengthsClause = \"and ld.fcst_lead IN (\" + forecastLengths + \")\";\n    }\n  }\n\n  var statement = \"select ld.fcst_valid_beg as avtime \" + \"from \" + database + \".stat_header h, \" + database + \".line_data_sl1l2 ld \" + \"where 1=1 and h.model = '\" + model + \"' \" + regionsClause + \"and unix_timestamp(ld.fcst_valid_beg) >= '\" + fromSecs + \"' \" + \"and unix_timestamp(ld.fcst_valid_beg) <= '\" + toSecs + \"' \" + forecastLengthsClause + \"and h.fcst_var = '\" + variable + \"' \" + \"and ld.stat_header_id = h.stat_header_id \" + \"group by avtime order by avtime;\";\n  var rows = matsDataQueryUtils.simplePoolQueryWrapSynchronous(metadataPool, statement);\n\n  if (rows === undefined || rows === null || rows.length === 0) {\n    console.log(matsTypes.Messages.NO_DATA_FOUND);\n  } else {\n    for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n      const dstrMoment = moment(rows[rowIndex].avtime);\n      const dstr = dstrMoment.format('YYYY-MM-DD HH:mm:ss').trim(); // apply the valid-time filter here.....\n\n      var valid = true;\n\n      if (validTimes != null && validTimes.length > 0) {\n        valid = false;\n        const momentSdiHour = Number(dstrMoment.format(\"HH\"));\n\n        for (var vti = 0; vti < validTimes.length; vti++) {\n          const thisvt = Number(validTimes[vti]);\n\n          if (momentSdiHour === thisvt) {\n            // it is valid\n            valid = true;\n            break;\n          }\n        }\n      }\n\n      if (valid === true && dates.indexOf(dstr) === -1) {\n        dates.push(dstr);\n      }\n    }\n  }\n\n  return dates;\n}; // adds date elements to an element of the current xml between a start and an end date, incremented by specific seconds\n// series variables can be grouped or ungrouped.\n// e.g. grouped ...    <val>2018-11-01 00:00:00,2018-11-01 06:00:00,2018-11-01 12:00:00,2018-11-01</val>\n// e.g. ungrouped ...    <val>2018-11-01 00:00:00</val>\n//                       <val>2018-11-01 06:00:00</val>\n//                       <val>2018-11-01 12:00:00</val>\n//                       <val>2018-11-01</val>\n// for time series valid_beg is always ungrouped.\n\n\nconst _getSortedDatesForIndepRange = function (plotParams) {\n  const dateRange = matsDataUtils.getDateRange(plotParams.dates);\n  const fromSecs = dateRange.fromSeconds;\n  const toSecs = dateRange.toSeconds;\n  const curves = plotParams.curves; // have to get all the valid dates for each curve then union them\n  // to get a complete date list\n\n  var dates = [];\n\n  for (var ci = 0; ci < curves.length; ci++) {\n    if (curves[ci]['diffFrom']) {\n      // currrently we do not do mv differencing\n      continue;\n    }\n\n    var curve = curves[ci];\n    const validTimes = curve['valid-time'];\n    const region = curve['region'];\n    const forecastLength = curve['forecast-length'];\n    const variable = curve['variable']; //example 2018-11-06 00:00:00\n\n    const database = curve['database'];\n    const dataSource = curve['data-source'];\n    const model = matsCollections.CurveParams.findOne({\n      name: 'data-source'\n    }).optionsMap[database][dataSource][0];\n    dates = _getUniqDates(dates, database, model, dataSource, region, variable, forecastLength, fromSecs, toSecs, validTimes);\n  } // sort the dates\n\n\n  const sortedDates = dates.sort(function (a, b) {\n    return new moment(a) - new moment(b);\n  });\n  return sortedDates;\n};\n\nconst _getSortedHoursForIndepRange = function (plotParams) {\n  const sortedDates = _getSortedDatesForIndepRange(plotParams);\n\n  var hours = new Set();\n\n  for (var di = 0; di < sortedDates.length; di++) {\n    const hour = moment(sortedDates[di]).format(\"HH\");\n    hours.add(hour);\n  }\n\n  return Array.from(hours).sort();\n};\n\nconst _getSortedDatesForDepRange = function (curve) {\n  var dates = [];\n  const dateRange = matsDataUtils.getDateRange(curve['curve-dates']);\n  const fromSecs = dateRange.fromSeconds;\n  const toSecs = dateRange.toSeconds;\n  const validTimes = curve['valid-time'];\n  const region = curve['region'];\n  const forecastLength = curve['forecast-length'];\n  const variable = curve['variable']; //example 2018-11-06 00:00:00\n\n  const database = curve['database'];\n  const dataSource = curve['data-source'];\n  const model = matsCollections.CurveParams.findOne({\n    name: 'data-source'\n  }).optionsMap[database][dataSource][0];\n  dates = _getUniqDates(dates, database, model, dataSource, region, variable, forecastLength, fromSecs, toSecs, validTimes); // sort the dates\n\n  const sortedDates = dates.sort(function (a, b) {\n    return new moment(a) - new moment(b);\n  });\n  return sortedDates;\n}; // for profiles valid_beg is always grouped.\n\n\nconst addIndepUngroupedDateElementsBetween = function (element, plotParams) {\n  const sortedDates = _getSortedDatesForIndepRange(plotParams); //these must be ungrouped\n\n\n  for (var sdi = 0; sdi < sortedDates.length; sdi++) {\n    element.ele('val', {\n      'label': sortedDates[sdi],\n      'plot_val': \"\"\n    }, sortedDates[sdi]);\n  }\n}; // parse the databases from the curves and add a database string\n\n\nconst addDatabaseElement = function (element, curves) {\n  try {\n    databases = [];\n\n    for (var ci = 0; ci < curves.length; ci++) {\n      if (curves[ci]['diffFrom']) {\n        // currrently we do not do mv differencing\n        continue;\n      }\n\n      if (!databases.includes(curves[ci].database)) {\n        databases.push(curves[ci].database);\n      }\n    }\n\n    databasesStr = databases.join(\"'\");\n    element.ele('database', databasesStr);\n    return element;\n  } catch (someError) {\n    return \"\";\n  }\n}; // add the required metviewer folders\n\n\nconst addFolders = function (element) {\n  try {\n    element.ele('rscript', Meteor.settings.private.MV_RSCRIPT);\n    var folders = element.ele('folders');\n    folders.ele('r_tmpl', matsMethods.MV_DIRS.HOME + \"/R_tmpl\");\n    folders.ele('r_work', matsMethods.MV_DIRS.HOME + \"/R_work\");\n    folders.ele('plots', matsMethods.MV_DIRS.PLOTSDIR);\n    folders.ele('data', matsMethods.MV_DIRS.DATADIR);\n    folders.ele('scripts', matsMethods.MV_DIRS.SCRIPTSDIR);\n    return element;\n  } catch (e) {}\n}; // start the plotspec\n\n\nconst startPlotSpec = function (pool, plotParams) {\n  try {\n    var xml = xmlBuilder.create('plot_spec', {\n      version: \"1.0\",\n      encoding: \"UTF-8\",\n      standalone: false\n    });\n    var connection = xml.ele('connection');\n    connection.ele('host', sumPool.config.connectionConfig.host + \":\" + sumPool.config.connectionConfig.port);\n    addDatabaseElement(connection, plotParams.curves);\n    connection.ele('user', sumPool.config.connectionConfig.user);\n    connection.ele('password', sumPool.config.connectionConfig.password);\n    const management_system = Meteor.settings.private.MV_DB_MANAGEMENT_SYSTEM != null ? Meteor.settings.private.MV_DB_MANAGEMENT_SYSTEM : \"mysql\";\n    connection.ele('management_system', management_system);\n    addFolders(xml);\n    var plot = xml.ele('plot');\n    return {\n      xml: xml,\n      plot: plot\n    };\n  } catch (e) {}\n};\n\nconst addPlotCi = function (element, plotParams) {\n  try {\n    //example c(\"none\",\"none\")\n    var curves = plotParams.curves;\n    var cList = [];\n    var cListStr = 'c(';\n\n    for (var ci = 0; ci < curves.length; ci++) {\n      if (curves[ci]['diffFrom']) {\n        // currrently we do not do mv differencing\n        continue;\n      }\n\n      cList.push('\"none\"');\n    }\n\n    cListStr += cList.join(',') + ')';\n    element.ele('plot_ci', cListStr);\n  } catch (e) {}\n};\n\nconst addShowSignif = function (element, plotParams) {\n  try {\n    //example c(FALSE,FALSE)\n    var curves = plotParams.curves;\n    var cList = [];\n    var cListStr = 'c(';\n\n    for (var ci = 0; ci < curves.length; ci++) {\n      if (curves[ci]['diffFrom']) {\n        // currrently we do not do mv differencing\n        continue;\n      }\n\n      cList.push('FALSE');\n    }\n\n    cListStr += cList.join(',') + ')';\n    element.ele('show_signif', cListStr);\n  } catch (e) {}\n};\n\nconst addPlotDisp = function (element, plotParams) {\n  try {\n    //example c(TRUE,TRUE)\n    var curves = plotParams.curves;\n    var cList = [];\n    var cListStr = 'c(';\n\n    for (var ci = 0; ci < curves.length; ci++) {\n      cList.push('TRUE');\n    }\n\n    cListStr += cList.join(',') + ')';\n    element.ele('plot_disp', cListStr);\n  } catch (e) {}\n};\n\nconst addColors = function (element, plotParams) {\n  try {\n    //  example  'c(\"#ff0000FF\",\"#8000ffFF\")'\n    var curves = plotParams.curves;\n    var cList = [];\n    var cListStr = 'c(';\n\n    for (var ci = 0; ci < curves.length; ci++) {\n      if (curves[ci]['diffFrom']) {\n        // currrently we do not do mv differencing\n        continue;\n      }\n\n      var ch = _rgbToHex(curves[ci].color) + \"FF\";\n      cList.push('\"' + ch + '\"');\n    }\n\n    cListStr += cList.join(',') + ')';\n    element.ele('colors', cListStr);\n  } catch (e) {}\n};\n\nconst addPch = function (element, plotParams) {\n  try {\n    //example c(20,20)\n    var curves = plotParams.curves;\n    var cList = [];\n    var cListStr = 'c(';\n\n    for (var ci = 0; ci < curves.length; ci++) {\n      if (curves[ci]['diffFrom']) {\n        // currrently we do not do mv differencing\n        continue;\n      }\n\n      cList.push('20');\n    }\n\n    cListStr += cList.join(',') + ')';\n    element.ele('pch', cListStr);\n  } catch (e) {}\n};\n\nconst addType = function (element, plotParams) {\n  try {\n    //example c(\"b\",\"b\")\n    var curves = plotParams.curves;\n    var cList = [];\n    var cListStr = 'c(';\n\n    for (var ci = 0; ci < curves.length; ci++) {\n      if (curves[ci]['diffFrom']) {\n        // currrently we do not do mv differencing\n        continue;\n      }\n\n      cList.push('\"b\"');\n    }\n\n    cListStr += cList.join(',') + ')';\n    element.ele('type', cListStr);\n  } catch (e) {}\n};\n\nconst addLty = function (element, plotParams) {\n  try {\n    // example c(1,1)\n    var curves = plotParams.curves;\n    var cList = [];\n    var cListStr = 'c(';\n\n    for (var ci = 0; ci < curves.length; ci++) {\n      if (curves[ci]['diffFrom']) {\n        // currrently we do not do mv differencing\n        continue;\n      }\n\n      cList.push(1);\n    }\n\n    cListStr += cList.join(',') + ')';\n    element.ele('lty', cListStr);\n  } catch (e) {}\n};\n\nconst addLwd = function (element, plotParams) {\n  try {\n    // example c(1,1)\n    var curves = plotParams.curves;\n    var cList = [];\n    var cListStr = 'c(';\n\n    for (var ci = 0; ci < curves.length; ci++) {\n      if (curves[ci]['diffFrom']) {\n        // currrently we do not do mv differencing\n        continue;\n      }\n\n      cList.push(1);\n    }\n\n    cListStr += cList.join(',') + ')';\n    element.ele('lwd', cListStr);\n  } catch (e) {}\n};\n\nconst addConSeries = function (element, plotParams) {\n  try {\n    // example c(1,1)\n    var curves = plotParams.curves;\n    var cList = [];\n    var cListStr = 'c(';\n\n    for (var ci = 0; ci < curves.length; ci++) {\n      if (curves[ci]['diffFrom']) {\n        // currrently we do not do mv differencing\n        continue;\n      }\n\n      cList.push(1);\n    }\n\n    cListStr += cList.join(',') + ')';\n    element.ele('con_series', cListStr);\n  } catch (e) {}\n};\n\nconst addOrderSeries = function (element, plotParams) {\n  try {\n    // example c(1,2)\n    var curves = plotParams.curves;\n    var cList = [];\n    var cListStr = 'c(';\n\n    for (var ci = 0; ci < curves.length; ci++) {\n      if (curves[ci]['diffFrom']) {\n        // currrently we do not do mv differencing\n        continue;\n      }\n\n      cList.push(ci + 1);\n    }\n\n    cListStr += cList.join(',') + ')';\n    element.ele('order_series', cListStr);\n  } catch (e) {}\n};\n\nconst addLegend = function (element, plotParams) {\n  try {\n    // example c(\"\",\"\")\n    var curves = plotParams.curves;\n    var cList = [];\n    var cListStr = 'c(';\n\n    for (var ci = 0; ci < curves.length; ci++) {\n      if (curves[ci]['diffFrom']) {\n        // currrently we do not do mv differencing\n        continue;\n      }\n\n      cList.push('\"\"');\n    }\n\n    cListStr += cList.join(',') + ')';\n    element.ele('legend', cListStr);\n  } catch (e) {}\n};\n\nconst addSeries = function (plot, dependentAxes, plotParams) {\n  /***\n   data-source(models), region(vx_mask),forecast_length (fcst_lead), and pres-level(fcst_lev)\n   are series variables. Multiple selections for a given curve are MV grouped (join'd)\n   Multiple selections associated with different curves are seperate <val> tags.\n    All of the non grouped combinations are added which results in possibly too many curves. The redundant ones are later hidden.\n    They can also go on the axis that is associated with the curve that the region parameter is on.\n   In other words force a new series.\n   i.e. Y1 Series variables or Y2 Series variables\n    series variables can be grouped or ungrouped.\n   e.g. grouped ...    <val>2018-11-01 00:00:00,2018-11-01 06:00:00,2018-11-01 12:00:00,2018-11-01</val>\n   e.g. ungrouped ...    <val>2018-11-01 00:00:00</val>\n   <val>2018-11-01 06:00:00</val>\n   <val>2018-11-01 12:00:00</val>\n   <val>2018-11-01</val>\n   For MATS curves they are grouped for each curve and added ase series variables. This results in redundant curves in MV and so the\n   redundant curves will be hidden.\n   Curves that were assigned to different axis were figured out and assigned in getDependents and are assigned in the dependentAxes structure.\n   ***/\n  var hiddenCurves = [];\n  var sVars = {\n    'data-source': 'model',\n    'region': 'vx_mask',\n    'forecast-length': 'fcst_lead',\n    'pres-level': 'fcst_lev'\n  };\n\n  const type = _.invert(plotParams.plotTypes)[true];\n\n  const seriesAxisMap = {\n    'series1': 'y1',\n    'series2': 'y2'\n  };\n  Object.keys(seriesAxisMap).forEach(function (series) {\n    var models = [];\n    var vx_masks = [];\n    var fcst_leads = [];\n    var fcst_levls = [];\n    var seriesElem = plot.ele(series);\n    const axis = seriesAxisMap[series];\n    var initHours = new Set();\n\n    switch (type) {\n      case matsTypes.PlotTypes.timeSeries:\n        sVars = {\n          'data-source': 'model',\n          'region': 'vx_mask',\n          'forecast-length': 'fcst_lead',\n          'pres-level': 'fcst_lev'\n        };\n        break;\n\n      case matsTypes.PlotTypes.dailyModelCycle:\n        sVars = {\n          'data-source': 'model',\n          'region': 'vx_mask',\n          'forecast-length': 'fcst_lead',\n          'pres-level': 'fcst_lev'\n        };\n        break;\n\n      case matsTypes.PlotTypes.profile:\n        sVars = {\n          'data-source': 'model',\n          'region': 'vx_mask',\n          'forecast-length': 'fcst_lead',\n          'curve-dates': 'fcst_valid_beg'\n        };\n        break;\n\n      case matsTypes.PlotTypes.dieoff:\n        sVars = {\n          'data-source': 'model',\n          'region': 'vx_mask',\n          'pres-level': 'fcst_lev',\n          'curve-dates': 'fcst_valid_beg'\n        };\n\n        for (var ci = 0; ci < plotParams.curves.length; ci++) {\n          if (curves[ci]['diffFrom']) {\n            // currrently we do not do mv differencing\n            continue;\n          }\n\n          const c = plotParams.curves[ci];\n\n          if (c['dieoff-type'] === 'Dieoff for a specified UTC cycle init hour') {\n            initHours.add(c['utc-cycle-start']);\n          } else if (c.dieoff - type === matsTypes.ForecastTypes.singleCycle) {// placeholder for if issue 60313 gets resolved\n          }\n        }\n\n        if (initHours.size > 0) {\n          sVars['utc-cycle-start'] = 'init_hour';\n        }\n\n        break;\n\n      case matsTypes.PlotTypes.threshold:\n        sVars = {\n          'data-source': 'model',\n          'region': 'vx_mask',\n          'forecast-length': 'fcst_lead',\n          'pres-level': 'fcst_lev',\n          'curve-dates': 'fcst_valid_beg'\n        };\n        break;\n\n      case matsTypes.PlotTypes.validtime:\n        sVars = {\n          'data-source': 'model',\n          'region': 'vx_mask',\n          'forecast-length': 'fcst_lead',\n          'pres-level': 'fcst_lev',\n          'curve-dates': 'fcst_valid_beg'\n        };\n        break;\n\n      case matsTypes.PlotTypes.reliability:\n        sVars = {\n          'data-source': 'model',\n          'region': 'vx_mask',\n          'forecast-length': 'fcst_lead',\n          'pres-level': 'fcst_lev',\n          'curve-dates': 'fcst_valid_beg'\n        };\n        break;\n\n      case matsTypes.PlotTypes.histogram:\n        sVars = {\n          'data-source': 'model',\n          'region': 'vx_mask',\n          'forecast-length': 'fcst_lead',\n          'pres-level': 'fcst_lev',\n          'curve-dates': 'fcst_valid_beg'\n        };\n        break;\n\n      default:\n        sVars = {\n          'data-source': 'model',\n          'region': 'vx_mask',\n          'forecast-length': 'fcst_lead',\n          'pres-level': 'fcst_lev'\n        };\n    }\n\n    if (type === matsTypes.PlotTypes.profile) {\n      delete sVars['pres-level'];\n    } else {\n      // we only consider pressure levels when it isn't a profile\n      sVars['pres-level'] = 'fcst_lev';\n    }\n\n    var seriesElements = {};\n    var seriesElementValues = {};\n\n    for (var daci = 0; daci < dependentAxes[axis].length; daci++) {\n      const curve = dependentAxes[axis][daci];\n      const database = curve['database'];\n      const dataSource = curve['data-source'];\n      Object.keys(sVars).forEach(function (sVar) {\n        try {\n          // models - not multiple - ungrouped\n          var sValues = [];\n\n          switch (sVar) {\n            case 'data-source':\n              // convert data-source to single element array\n              sValues = [matsParamUtils.getParameterForName(sVar).optionsMap[database][dataSource][0]];\n              break;\n\n            case 'curve-dates':\n              sValues = _getSortedDatesForDepRange(curve);\n              break;\n\n            case 'utc-cycle-start':\n              const v = curve['utc-cycle-start'];\n\n              const paddedV = _pad(v, 2);\n\n              sValues = [paddedV]; // turn single selection padded value into array\n\n              break;\n\n            case 'forecast-length':\n              sValues = curve[sVar];\n\n              if (sValues == null || sValues.length === 0) {\n                sValues = matsParamUtils.getParameterForName(sVar).optionsMap[database][dataSource]; // have to assign all the fcst leads\n              }\n\n              const forecastValueMap = matsParamUtils.getParameterForName(sVar).valuesMap[database][dataSource];\n              sValues = sValues.map(function (fl) {\n                return forecastValueMap[fl];\n              }).join(',');\n              break;\n\n            default:\n              sValues = curve[sVar];\n\n              if (sValues == null || sValues.length === 0) {\n                sValues = matsParamUtils.getParameterForName(sVar).optionsMap[database][dataSource]; // have to assign all the regions\n              }\n\n          } // check to see if this element was already added.\n          // if not added then add the element.\n          // if element was already added see if we need to add this value.\n          // multiples are always grouped.\n\n\n          if (sValues !== undefined) {\n            sValues = Array.isArray(sValues) ? sValues : [sValues];\n\n            if (sValues.length > 0) {\n              const sValuesStr = sValues.join(',');\n\n              if (sValuesStr !== undefined) {\n                const thisVar = sVars[sVar];\n\n                if (seriesElements[thisVar] == null) {\n                  seriesElements[thisVar] = seriesElem.ele('field', {\n                    'name': sVars[sVar]\n                  });\n                  seriesElementValues[thisVar] = new Set();\n                  seriesElementValues[thisVar].add(sValuesStr);\n                } else {\n                  // already exists\n                  if (seriesElementValues[thisVar].has(sValuesStr) === false) {\n                    seriesElementValues[thisVar].add(sValuesStr);\n                  }\n                }\n              }\n            }\n          }\n        } catch (error) {\n          console.log(error);\n          throw new Meteor.Error(error);\n        }\n      });\n    }\n\n    const sElementKeys = Object.keys(seriesElements);\n\n    for (var sei = 0; sei < sElementKeys.length; sei++) {\n      const seVar = sElementKeys[sei];\n      const svars = Array.from(seriesElementValues[seVar]).sort();\n\n      for (var svi = 0; svi < svars.length; svi++) {\n        const v = svars[svi];\n\n        if (v !== \"undefined\") {\n          seriesElements[seVar].ele('val', v);\n        }\n      }\n\n      ;\n    }\n  });\n};\n\nconst getDependentAxis = function (plotParams) {\n  // there are two possible axis for metviewer. We want to collect all the variables\n  // into groups. We will take the two largest groups.\n  // variables and statistics go together. They are dependent variabales in MV.\n  // The variable/stat pairs always are associated with different curves, and will always be on different axis,\n  // if possible, but might be assigned an axis via an axes parameter.\n  const yaxesDefault = \"auto-by-variable\";\n  var curves = plotParams['curves'];\n  var dependentAxes = {\n    'y1': [],\n    'y2': []\n  };\n  dependentAxes['y1'].push(curves[0]);\n  var dependentAxesVariables = {\n    'y1': [curves[0]['variable']],\n    'y2': []\n  };\n\n  for (var ci = 1; ci < curves.length; ci++) {\n    if (curves[ci]['diffFrom']) {\n      // currrently we do not do mv differencing\n      continue;\n    }\n\n    if (curves[ci].yaxes != yaxesDefault) {\n      // it was assigned an axis by the axis param so sort it into its selectedYaxes\n      dependentAxes[curves[ci].yaxes].push(curves[ci]);\n    } else {\n      // sort it into an axis by its variable/stat combination\n      //     variables:\n      //     variables that share an axis are different dependent variables. Put them in dep1.\n      // unless it is a variable with multiple stats.\n      // different variable with different stats that have differing axis must go in different Y axis vars (and you can only have two of those)\n      const variable = curves[ci].variable;\n\n      if (dependentAxesVariables['y1'].includes(variable)) {\n        dependentAxes['y1'].push(curves[ci]);\n      } else {\n        dependentAxes['y2'].push(curves[ci]);\n      }\n    }\n  }\n\n  return dependentAxes;\n};\n\nfunction addDeps(plot, dependentAxes) {\n  var dep = plot.ele('dep');\n  const deps = {\n    \"dep1\": \"y1\",\n    \"dep2\": \"y2\"\n  };\n\n  for (var di = 0; di < Object.keys(deps).length; di++) {\n    // [dep1, dep2]\n    var depKey = Object.keys(deps)[di]; // dep1 or dep2\n\n    var depAxis = deps[depKey];\n    var subDep = dep.ele(depKey); //<dep><dep1/><dep2/>\n\n    var variableStatisticPairs = {};\n\n    for (var daci = 0; daci < dependentAxes[depAxis].length; daci++) {\n      //[y1,y2]\n      // record the variable-statistic pair\n      const variable = dependentAxes[depAxis][daci]['variable'];\n      const stat = statMvTranslation[dependentAxes[depAxis][daci]['statistic']];\n\n      if (variableStatisticPairs[variable] == null) {\n        variableStatisticPairs[variable] = [stat];\n      } else {\n        variableStatisticPairs[variable].push(stat);\n      }\n    }\n\n    var vars = Object.keys(variableStatisticPairs); //['T','HGT','WIND'...]\n\n    for (var v = 0; v < vars.length; v++) {\n      const stats = Array.from(new Set(variableStatisticPairs[vars[v]]));\n      var depElem = subDep.ele('fcst_var', {\n        'name': vars[v]\n      }); //<dep><dep1><fcst_var name='T'><stat>RMS</stat></fcst_var> </dep1><dep2/>\n\n      for (var si = 0; si < stats.length; si++) {\n        depElem.ele('stat', stats[si]);\n      }\n    }\n  }\n}\n\nfunction addAnomalycorrDeps(plot, dependentAxes) {\n  var dep = plot.ele('dep');\n  const deps = {\n    \"dep1\": \"y1\",\n    \"dep2\": \"y2\"\n  };\n\n  for (var di = 0; di < Object.keys(deps).length; di++) {\n    // [dep1, dep2]\n    var depKey = Object.keys(deps)[di]; // dep1 or dep2\n\n    var depAxis = deps[depKey];\n    var subDep = dep.ele(depKey); //<dep><dep1/><dep2/>\n\n    var variables = new Set();\n\n    for (var daci = 0; daci < dependentAxes[depAxis].length; daci++) {\n      //[y1,y2]\n      const variable = dependentAxes[depAxis][daci]['variable'];\n      variables.add(variable);\n    }\n\n    var vars = Array.from(variables);\n\n    for (var v = 0; v < vars.length; v++) {\n      subDep.ele('fcst_var', {\n        'name': vars[v]\n      }).ele('stat', 'ANOM_CORR');\n    }\n  }\n}\n\nconst _addSeriesLabels = function (element, dependentAxes, plotParams) {\n  const plotType = _.invert(plotParams.plotTypes)[true];\n\n  var label;\n\n  switch (plotType) {\n    case matsTypes.PlotTypes.timeSeries:\n      label = \"Time\";\n      break;\n\n    case matsTypes.PlotTypes.dieoff:\n      label = \"Forecast Hour\";\n      break;\n\n    case matsTypes.PlotTypes.dailyModelCycle:\n      label = \"Time\";\n      break;\n\n    case matsTypes.PlotTypes.histogram:\n      label = \"Bin\";\n      break;\n\n    case matsTypes.PlotTypes.validtime:\n      label = \"Hour of Day\";\n      break;\n\n    case matsTypes.PlotTypes.reliability:\n      label = \"Reliability\";\n      break;\n\n    case matsTypes.PlotTypes.threshold:\n      label = \"Threshold\";\n      break;\n\n    case matsTypes.PlotTypes.profile:\n      var vars = new Set();\n      plotParams.curves.forEach(function (c) {\n        vars.add(c.variable);\n      });\n      label = Array.from(vars).join(' - ');\n      break;\n\n    default:\n      label = \"Time\";\n  }\n\n  element.ele('x_label', label);\n  var y1vars = [];\n\n  for (var y1i = 0; y1i < dependentAxes['y1'].length; y1i++) {\n    if (!y1vars.includes(dependentAxes['y1'][y1i]['variable'])) {\n      y1vars.push(dependentAxes['y1'][y1i]['variable']);\n    }\n  }\n\n  element.ele('y1_label', y1vars.join(','));\n  var y2vars = [];\n\n  for (var y2i = 0; y2i < dependentAxes['y2'].length; y2i++) {\n    if (!y2vars.includes(dependentAxes['y2'][y2i]['variable'])) {\n      y2vars.push(dependentAxes['y2'][y2i]['variable']);\n    }\n  }\n\n  element.ele('y2_label', y2vars.join(','));\n};\n\nconst addTemplate = function (plot, templateStr) {\n  plot.ele('template', templateStr);\n};\n\nconst addIndepDates = function (plot, plotParams) {\n  var indep = plot.ele('indep', {\n    'equalize': 'false',\n    'name': 'fcst_valid_beg'\n  });\n  addIndepUngroupedDateElementsBetween(indep, plotParams);\n};\n\nconst addIndepLevels = function (plot, plotParams) {\n  // for profiles we use a union of all the levels available for all the data-sources\n  var indep = plot.ele('indep', {\n    'equalize': 'false',\n    'name': 'fcst_lev'\n  });\n  var curves = plotParams.curves;\n  var lvlSet = new Set(); // use a set to accumulate all the levels\n\n  for (var ci = 0; ci < curves.length; ci++) {\n    if (curves[ci]['diffFrom']) {\n      // currrently we do not do mv differencing\n      continue;\n    }\n\n    const curve = curves[ci];\n    const database = curve['database'];\n    const dataSource = curve['data-source'];\n    const levelVals = matsCollections.CurveParams.findOne({\n      name: 'data-source'\n    })['levelsMap'][database][dataSource];\n    lvlSet.add(levelVals);\n  } // only add the fcst_lev tag if there are pres-levels requested - leaving it out will get them all\n\n\n  const lvls = Array.from(lvlSet)[0];\n\n  for (var li = 0; li < lvls.length; li++) {\n    var val = indep.ele('val', lvls[li]);\n    val.att('label', lvls[li]);\n    val.att('plot_val', \"\");\n  }\n};\n\nconst addIndepValidHours = function (plot, plotParams) {\n  // for validTimes we use a union of all the vts available for all the data-sources\n  var indep = plot.ele('indep', {\n    'equalize': 'false',\n    'name': 'valid_hour'\n  });\n\n  const hours = _getSortedHoursForIndepRange(plotParams);\n\n  for (var hi = 0; hi < hours.length; hi++) {\n    var val = indep.ele('val', hours[hi]);\n    val.att('label', hours[hi]);\n    val.att('plot_val', \"\");\n  }\n};\n\nconst addIndepForecastHours = function (plot, plotParams) {\n  // for dieoffs we use a union of all the fhrs available for all the data-sources\n  var indep = plot.ele('indep', {\n    'equalize': 'false',\n    'name': 'fcst_lead'\n  });\n  var curves = plotParams.curves;\n  var leadSet = new Set(); // use a set to accumulate all the levels\n\n  for (var ci = 0; ci < curves.length; ci++) {\n    if (curves[ci]['diffFrom']) {\n      // currrently we do not do mv differencing\n      continue;\n    }\n\n    const curve = curves[ci];\n    const database = curve['database'];\n    const dataSource = curve['data-source'];\n    const forecastLengths = matsCollections.CurveParams.findOne({\n      name: 'forecast-length'\n    })['optionsMap'][database][dataSource];\n    leadSet.add(forecastLengths);\n  }\n\n  const leads = Array.from(leadSet)[0];\n\n  for (var li = 0; li < leads.length; li++) {\n    var val = indep.ele('val', leads[li]);\n    val.att('label', leads[li]);\n    val.att('plot_val', \"\");\n  }\n};\n\nconst addTmpl = function (plot, key, plotParams, dependentAxes) {\n  var tmpl = plot.ele('tmpl');\n  tmpl.ele('data_file', key + '.data');\n  tmpl.ele('plot_file', key + '.png');\n  tmpl.ele('r_file', key + '.R');\n  tmpl.ele('title', _title() + \" : \" + _plotText(plotParams) + \" \" + plotParams.plotAction);\n\n  _addSeriesLabels(tmpl, dependentAxes, plotParams);\n\n  tmpl.ele('caption');\n  tmpl.ele('job_title');\n  tmpl.ele('keep_revisions', 'false');\n  tmpl.ele('listdiffseries1', 'list()');\n  tmpl.ele('listdiffseries2', 'list()');\n};\n\nconst addPlotFix = function (plot) {\n  plot.ele('plot_fix');\n};\n\nconst addPlotCond = function (plot, plotParams) {\n  plot.ele('plot_cond');\n};\n\nconst addCalcStat = function (plot, statType) {\n  plot.ele('calc_stat').ele(statType, true);\n}; // unused for time series\n\n\nconst addPlotStat = function (plot, stat) {\n  //Statistics --- We always do Summary with Mean - so there\n  plot.ele('plot_stat', stat);\n};\n\nconst addPlotCmd = function (plot) {\n  plot.ele('plot_cmd');\n};\n\nconst addY1Lim = function (plot) {\n  plot.ele('y1_lim', 'c()');\n};\n\nconst addY1Bufr = function (plot) {\n  plot.ele('y1_bufr', '0.04');\n};\n\nconst addY2Lim = function (plot) {\n  plot.ele('y2_lim', 'c()');\n};\n\nconst addMiscellaneous = function (plot, plotParams) {\n  plot.ele('event_equal', 'false');\n\n  const plotType = _.invert(plotParams.plotTypes)[true];\n\n  switch (plotType) {\n    case matsTypes.PlotTypes.timeSeries:\n    case matsTypes.PlotTypes.dieoff:\n    case matsTypes.PlotTypes.dailyModelCycle:\n    case matsTypes.PlotTypes.histogram:\n    case matsTypes.PlotTypes.validtime:\n    case matsTypes.PlotTypes.reliability:\n    case matsTypes.PlotTypes.threshold:\n      plot.ele('vert_plot', 'false');\n      plot.ele('x_reverse', 'false');\n      break;\n\n    case matsTypes.PlotTypes.profile:\n      plot.ele('vert_plot', 'true');\n      plot.ele('x_reverse', 'true');\n      break;\n\n    default:\n      plot.ele('vert_plot', 'false');\n      plot.ele('x_reverse', 'false');\n  }\n\n  plot.ele('num_stats', 'false');\n  plot.ele('indy1_stag', 'false');\n  plot.ele('indy2_stag', 'false');\n  plot.ele('grid_on', 'true');\n  plot.ele('sync_axes', 'false');\n  plot.ele('dump_points1', 'true');\n  plot.ele('dump_points2', 'true');\n  plot.ele('log_y1', 'false');\n  plot.ele('log_y2', 'false');\n  plot.ele('varianceinflationfactor', 'false');\n  plot.ele('plot_type', 'png16m');\n  plot.ele('plot_height', '8.5');\n  plot.ele('plot_width', '11');\n  plot.ele('plot_res', '72');\n  plot.ele('plot_units', 'in');\n  plot.ele('mar', 'c(8,4,5,4)');\n  plot.ele('mgp', 'c(1,1,0)');\n  plot.ele('cex', '1');\n  plot.ele('title_weight', '2');\n  plot.ele('title_size', '1.4');\n  plot.ele('title_offset', '-2');\n  plot.ele('title_align', '0.5');\n  plot.ele('xtlab_orient', '1');\n  plot.ele('xtlab_perp', '-0.75');\n  plot.ele('xtlab_horiz', '0.5');\n  plot.ele('xtlab_freq', '0');\n  plot.ele('xtlab_size', '1');\n  plot.ele('xlab_weight', '1');\n  plot.ele('xlab_size', '1');\n  plot.ele('xlab_offset', '2');\n  plot.ele('xlab_align', '0.5');\n  plot.ele('ytlab_orient', '1');\n  plot.ele('ytlab_perp', '0.5');\n  plot.ele('ytlab_horiz', '0.5');\n  plot.ele('ytlab_size', '1');\n  plot.ele('ylab_weight', '1');\n  plot.ele('ylab_size', '1');\n  plot.ele('ylab_offset', '-2');\n  plot.ele('ylab_align', '0.5');\n  plot.ele('grid_lty', '3');\n  plot.ele('grid_col', '#cccccc');\n  plot.ele('grid_lwd', '1');\n  plot.ele('grid_x', 'listX');\n  plot.ele('x2tlab_orient', '1');\n  plot.ele('x2tlab_perp', '1');\n  plot.ele('x2tlab_horiz', '0.5');\n  plot.ele('x2tlab_size', '0.8');\n  plot.ele('x2lab_size', '0.8');\n  plot.ele('x2lab_offset', '-0.5');\n  plot.ele('x2lab_align', '0.5');\n  plot.ele('y2tlab_orient', '1');\n  plot.ele('y2tlab_perp', '0.5');\n  plot.ele('y2tlab_horiz', '0.5');\n  plot.ele('y2tlab_size', '1');\n  plot.ele('y2lab_size', '1');\n  plot.ele('y2lab_offset', '1');\n  plot.ele('y2lab_align', '0.5');\n  plot.ele('legend_box', 'o');\n  plot.ele('legend_inset', 'c(0, -.25)');\n  plot.ele('legend_ncol', '3');\n  plot.ele('legend_size', '0.8');\n  plot.ele('caption_weight', '1');\n  plot.ele('caption_col', '#333333');\n  plot.ele('caption_size', '0.8');\n  plot.ele('caption_offset', '3');\n  plot.ele('caption_align', '0');\n  plot.ele('ci_alpha', '0.05');\n};\n\nconst endPlotSpec = function (xml) {\n  xml.end({\n    pretty: true\n  });\n};\n\nmodule.exportDefault(matsPlotSpecUtils = {\n  startPlotSpec: startPlotSpec,\n  addDeps: addDeps,\n  addAnomalycorrDeps: addAnomalycorrDeps,\n  getDependentAxis: getDependentAxis,\n  addDatabaseElement: addDatabaseElement,\n  addFolders: addFolders,\n  addPlotCi: addPlotCi,\n  addShowSignif: addShowSignif,\n  addPlotDisp: addPlotDisp,\n  addColors: addColors,\n  addPch: addPch,\n  addType: addType,\n  addLty: addLty,\n  addLwd: addLwd,\n  addConSeries: addConSeries,\n  addOrderSeries: addOrderSeries,\n  addLegend: addLegend,\n  addSeries: addSeries,\n  addTemplate: addTemplate,\n  addIndepDates: addIndepDates,\n  addTmpl: addTmpl,\n  addPlotFix: addPlotFix,\n  addPlotCond: addPlotCond,\n  addCalcStat: addCalcStat,\n  addPlotStat: addPlotStat,\n  addPlotCmd: addPlotCmd,\n  addY1Lim: addY1Lim,\n  addY1Bufr: addY1Bufr,\n  addY2Lim: addY2Lim,\n  addMiscellaneous: addMiscellaneous,\n  endPlotSpec: endPlotSpec,\n  addIndepLevels: addIndepLevels,\n  addIndepForecastHours: addIndepForecastHours,\n  addIndepValidHours: addIndepValidHours\n});","map":{"version":3,"sources":["packages/randyp:mats-common/imports/startup/server/plot_spec_util.js"],"names":["Meteor","module","link","v","matsCollections","matsDataCurveOpsUtils","matsDataDiffUtils","matsDataProcessUtils","matsDataQueryUtils","matsDataUtils","matsMethods","matsParamUtils","matsTypes","mysql","moment","statMvTranslation","xmlBuilder","require","_pad","num","size","s","length","_title","Settings","undefined","findOne","fields","Title","someError","_plotText","plotParams","format","plotFormat","PlotParams","name","optionsMap","plotType","_","invert","plotTypes","PlotTypes","timeSeries","dates","profile","dieoff","threshold","validtime","dailyModelCycle","reliability","map","histogram","_componentToHex","c","hex","toString","_rgbToHex","color","cParts","replace","split","r","Number","g","b","_getUniqDates","database","model","dataSource","region","variable","forecastLength","fromSecs","toSecs","validTimes","regionsClause","Array","isArray","regions","join","forecastLengthsClause","forecastValueMap","CurveParams","valuesMap","forecastLengths","fl","statement","rows","simplePoolQueryWrapSynchronous","metadataPool","console","log","Messages","NO_DATA_FOUND","rowIndex","dstrMoment","avtime","dstr","trim","valid","momentSdiHour","vti","thisvt","indexOf","push","_getSortedDatesForIndepRange","dateRange","getDateRange","fromSeconds","toSeconds","curves","ci","curve","sortedDates","sort","a","_getSortedHoursForIndepRange","hours","Set","di","hour","add","from","_getSortedDatesForDepRange","addIndepUngroupedDateElementsBetween","element","sdi","ele","addDatabaseElement","databases","includes","databasesStr","addFolders","settings","private","MV_RSCRIPT","folders","MV_DIRS","HOME","PLOTSDIR","DATADIR","SCRIPTSDIR","e","startPlotSpec","pool","xml","create","version","encoding","standalone","connection","sumPool","config","connectionConfig","host","port","user","password","management_system","MV_DB_MANAGEMENT_SYSTEM","plot","addPlotCi","cList","cListStr","addShowSignif","addPlotDisp","addColors","ch","addPch","addType","addLty","addLwd","addConSeries","addOrderSeries","addLegend","addSeries","dependentAxes","hiddenCurves","sVars","type","seriesAxisMap","Object","keys","forEach","series","models","vx_masks","fcst_leads","fcst_levls","seriesElem","axis","initHours","ForecastTypes","singleCycle","seriesElements","seriesElementValues","daci","sVar","sValues","getParameterForName","paddedV","sValuesStr","thisVar","has","error","Error","sElementKeys","sei","seVar","svars","svi","getDependentAxis","yaxesDefault","dependentAxesVariables","yaxes","addDeps","dep","deps","depKey","depAxis","subDep","variableStatisticPairs","stat","vars","stats","depElem","si","addAnomalycorrDeps","variables","_addSeriesLabels","label","y1vars","y1i","y2vars","y2i","addTemplate","templateStr","addIndepDates","indep","addIndepLevels","lvlSet","levelVals","lvls","li","val","att","addIndepValidHours","hi","addIndepForecastHours","leadSet","leads","addTmpl","key","tmpl","plotAction","addPlotFix","addPlotCond","addCalcStat","statType","addPlotStat","addPlotCmd","addY1Lim","addY1Bufr","addY2Lim","addMiscellaneous","endPlotSpec","end","pretty","exportDefault","matsPlotSpecUtils"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2019 Colorado State University and Regents of the University of Colorado. All rights reserved.\n */\n\nimport {Meteor} from \"meteor/meteor\";\nimport {\n    matsCollections,\n    matsDataCurveOpsUtils,\n    matsDataDiffUtils,\n    matsDataProcessUtils,\n    matsDataQueryUtils,\n    matsDataUtils,\n    matsMethods,\n    matsParamUtils,\n    matsTypes\n} from 'meteor/randyp:mats-common';\nimport {mysql} from 'meteor/pcel:mysql';\nimport {moment} from 'meteor/momentjs:moment';\n\nconst statMvTranslation = {\n    'ACC': \"ANOM_CORR\",\n    'RMS': 'RMSE',\n    'Bias (Model - Obs)': 'ME',\n    'Model average': \"FBAR\",\n    'Obs average': \"OBAR\"\n};\n\nconst xmlBuilder = require('xmlbuilder');\n\nconst _pad = function(num, size){\n    var s = num+\"\";\n    while (s.length < size) s = \"0\" + s;\n    return s;\n}\n\nconst _title = function () {\n    try {\n        if (matsCollections.Settings === undefined || matsCollections.Settings.findOne({}, {fields: {Title: 1}}) === undefined) {\n            return \"\";\n        } else {\n            return matsCollections.Settings.findOne({}, {fields: {Title: 1}}).Title;\n        }\n    } catch (someError) {\n        return \"\";\n    }\n};\n\nconst _plotText = function (plotParams) {\n    var format = plotParams.plotFormat;\n\n    if (matsCollections.PlotParams.findOne({name: 'plotFormat'}) &&\n        matsCollections.PlotParams.findOne({name: 'plotFormat'}).optionsMap &&\n        matsCollections.PlotParams.findOne({name: 'plotFormat'}).optionsMap[plotParams.plotFormat] !== undefined) {\n        format = matsCollections.PlotParams.findOne({name: 'plotFormat'}).optionsMap[plotParams.plotFormat];\n    }\n    if (format === undefined) {\n        format = \"Unmatched\";\n    }\n    const plotType = (_.invert(plotParams.plotTypes))[true];\n    switch (plotType) {\n        case matsTypes.PlotTypes.timeSeries:\n            return \"TimeSeries \" + plotParams.dates + \" : \" + format;\n            break;\n        case matsTypes.PlotTypes.profile:\n            return \"Profile: \" + format;\n            break;\n        case matsTypes.PlotTypes.dieoff:\n            return \"DieOff: \" + format;\n            break;\n        case matsTypes.PlotTypes.threshold:\n            return \"Threshold: \" + format;\n            break;\n        case matsTypes.PlotTypes.validtime:\n            return \"ValidTime: \" + format;\n            break;\n        case matsTypes.PlotTypes.dailyModelCycle:\n            return \"DailyModelCycle \" + plotParams.dates + \" : \" + format;\n            break;\n        case matsTypes.PlotTypes.reliability:\n            return \"Reliability: \" + format;\n            break;\n        case matsTypes.PlotTypes.map:\n            return \"Map \" + plotParams.dates + \" \";\n            break;\n        case matsTypes.PlotTypes.histogram:\n            return \"Histogram: \" + format;\n            break;\n        default:\n            return \"Scatter: \" + plotParams.dates + \" : \" + format;\n    }\n}\n\nconst _componentToHex = function(c) {\n    var hex = c.toString(16);\n    return hex.length == 1 ? \"0\" + hex : hex;\n};\n\nconst _rgbToHex = function(color) {\n    const cParts = color.replace('rgb(','').replace(')','').split(',');\n    const r = Number(cParts[0]);\n    const g = Number(cParts[1]);\n    const b = Number(cParts[2]);\n    return \"#\" + _componentToHex(r) + _componentToHex(g) + _componentToHex(b);\n};\n\n\nconst _getUniqDates = function(dates, database, model, dataSource, region, variable, forecastLength, fromSecs, toSecs, validTimes ) {\n    var regionsClause = \"\";\n    if (region != null) {\n        region = Array.isArray(region) ? region : [region];\n        if (region.length > 0) {\n            const regions = region.map(function (r) {\n                return \"'\" + r + \"'\";\n            }).join(',');\n            regionsClause = \"and h.vx_mask IN(\" + regions + \")\";\n        }\n    }\n\n    // the forecast lengths appear to have sometimes been inconsistent (by format) in the varias databases\n    // so they have been sanitized for display purposes in the forecastValueMap.\n    // now we have to go get the damn ole unsanitary ones for the database.\n    var forecastLengthsClause = \"\";\n    if (forecastLength != null) {\n        forecastLength = Array.isArray(forecastLength) ? forecastLength : [forecastLength];\n        if (forecastLength.length > 0) {\n            const forecastValueMap = matsCollections.CurveParams.findOne({name: 'forecast-length'}, {valuesMap: 1})['valuesMap'][database][dataSource];\n            const forecastLengths = forecastLength.map(function (fl) {\n                return forecastValueMap[fl];\n            }).join(',');\n            forecastLengthsClause = \"and ld.fcst_lead IN (\" + forecastLengths + \")\";\n        }\n    }\n\n    var statement = \"select ld.fcst_valid_beg as avtime \" +\n        \"from \" + database + \".stat_header h, \" + database + \".line_data_sl1l2 ld \" +\n        \"where 1=1 and h.model = '\" + model + \"' \" +\n        regionsClause +\n        \"and unix_timestamp(ld.fcst_valid_beg) >= '\" + fromSecs + \"' \" +\n        \"and unix_timestamp(ld.fcst_valid_beg) <= '\" + toSecs + \"' \" +\n        forecastLengthsClause +\n        \"and h.fcst_var = '\" + variable + \"' \" +\n        \"and ld.stat_header_id = h.stat_header_id \" +\n        \"group by avtime order by avtime;\";\n\n    var rows = matsDataQueryUtils.simplePoolQueryWrapSynchronous(metadataPool, statement);\n    if (rows === undefined || rows === null || rows.length === 0) {\n        console.log(matsTypes.Messages.NO_DATA_FOUND);\n    } else {\n\n        for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n            const dstrMoment = moment(rows[rowIndex].avtime);\n            const dstr = dstrMoment.format('YYYY-MM-DD HH:mm:ss').trim();\n            // apply the valid-time filter here.....\n            var valid = true;\n            if (validTimes != null && validTimes.length > 0) {\n                valid = false;\n                const momentSdiHour = Number(dstrMoment.format(\"HH\"));\n                for (var vti = 0; vti < validTimes.length; vti++) {\n                    const thisvt = Number(validTimes[vti]);\n                    if (momentSdiHour === thisvt) {\n                        // it is valid\n                        valid = true;\n                        break;\n                    }\n                }\n            }\n            if (valid === true && dates.indexOf(dstr) === -1) {\n                dates.push(dstr);\n            }\n        }\n    }\n    return dates;\n}\n\n\n// adds date elements to an element of the current xml between a start and an end date, incremented by specific seconds\n// series variables can be grouped or ungrouped.\n// e.g. grouped ...    <val>2018-11-01 00:00:00,2018-11-01 06:00:00,2018-11-01 12:00:00,2018-11-01</val>\n// e.g. ungrouped ...    <val>2018-11-01 00:00:00</val>\n//                       <val>2018-11-01 06:00:00</val>\n//                       <val>2018-11-01 12:00:00</val>\n//                       <val>2018-11-01</val>\n\n// for time series valid_beg is always ungrouped.\nconst _getSortedDatesForIndepRange = function(plotParams) {\n    const dateRange = matsDataUtils.getDateRange(plotParams.dates);\n    const fromSecs = dateRange.fromSeconds;\n    const toSecs = dateRange.toSeconds;\n    const curves = plotParams.curves;\n    // have to get all the valid dates for each curve then union them\n    // to get a complete date list\n    var dates = [];\n    for (var ci = 0; ci < curves.length; ci++) {\n        if (curves[ci]['diffFrom']) {\n            // currrently we do not do mv differencing\n            continue;\n        }\n        var curve = curves[ci];\n        const validTimes = curve['valid-time'];\n        const region = curve['region'];\n        const forecastLength = curve['forecast-length'];\n        const variable = curve['variable'];\n        //example 2018-11-06 00:00:00\n        const database = curve['database'];\n        const dataSource = curve['data-source'];\n        const model = matsCollections.CurveParams.findOne({name: 'data-source'}).optionsMap[database][dataSource][0];\n        dates = _getUniqDates(dates, database, model, dataSource, region, variable, forecastLength, fromSecs, toSecs, validTimes);\n    }\n    // sort the dates\n    const sortedDates = dates.sort(\n        function (a, b) {\n            return new moment(a) - new moment(b);\n        }\n    );\n    return sortedDates;\n}\n\nconst _getSortedHoursForIndepRange = function(plotParams) {\n    const sortedDates = _getSortedDatesForIndepRange(plotParams);\n    var hours = new Set();\n    for (var di=0;di<sortedDates.length;di++) {\n        const hour = moment(sortedDates[di]).format(\"HH\");\n        hours.add(hour);\n    }\n    return Array.from(hours).sort();\n}\n\nconst _getSortedDatesForDepRange = function(curve) {\n    var dates = [];\n    const dateRange = matsDataUtils.getDateRange(curve['curve-dates']);\n    const fromSecs = dateRange.fromSeconds;\n    const toSecs = dateRange.toSeconds;\n    const validTimes = curve['valid-time'];\n    const region = curve['region'];\n    const forecastLength = curve['forecast-length'];\n    const variable = curve['variable'];\n    //example 2018-11-06 00:00:00\n    const database = curve['database'];\n    const dataSource = curve['data-source'];\n    const model = matsCollections.CurveParams.findOne({name: 'data-source'}).optionsMap[database][dataSource][0];\n    dates = _getUniqDates(dates, database, model, dataSource, region, variable, forecastLength, fromSecs, toSecs, validTimes);\n\n    // sort the dates\n    const sortedDates = dates.sort(\n        function (a, b) {\n            return new moment(a) - new moment(b);\n        }\n    );\n    return sortedDates;\n}\n\n\n// for profiles valid_beg is always grouped.\nconst addIndepUngroupedDateElementsBetween = function (element, plotParams) {\n    const sortedDates = _getSortedDatesForIndepRange(plotParams);\n    //these must be ungrouped\n    for (var sdi = 0; sdi < sortedDates.length; sdi++) {\n        element.ele('val', {\n            'label': sortedDates[sdi],\n            'plot_val': \"\"\n        }, sortedDates[sdi]);\n    }\n}\n\n// parse the databases from the curves and add a database string\nconst addDatabaseElement = function(element, curves){\n    try {\n        databases = [];\n\n        for (var ci=0; ci < curves.length; ci++) {\n            if (curves[ci]['diffFrom']) {\n                // currrently we do not do mv differencing\n                continue;\n            }\n            if (!databases.includes(curves[ci].database)) {\n                databases.push(curves[ci].database);\n            }\n        }\n        databasesStr = databases.join(\"'\");\n        element.ele('database',databasesStr);\n        return element;\n    } catch (someError) {\n        return \"\";\n    }\n};\n\n// add the required metviewer folders\nconst addFolders = function(element) {\n    try {\n        element.ele('rscript', Meteor.settings.private.MV_RSCRIPT);\n        var folders = element.ele('folders');\n        folders.ele('r_tmpl', matsMethods.MV_DIRS.HOME + \"/R_tmpl\");\n        folders.ele('r_work', matsMethods.MV_DIRS.HOME + \"/R_work\");\n        folders.ele('plots', matsMethods.MV_DIRS.PLOTSDIR);\n        folders.ele('data', matsMethods.MV_DIRS.DATADIR);\n        folders.ele('scripts', matsMethods.MV_DIRS.SCRIPTSDIR);\n        return element;\n    } catch (e) {\n    }\n};\n\n// start the plotspec\nconst startPlotSpec = function(pool, plotParams) {\n    try {\n        var xml = xmlBuilder.create('plot_spec', {version: \"1.0\", encoding: \"UTF-8\", standalone: false});\n        var connection = xml.ele('connection');\n        connection.ele('host', sumPool.config.connectionConfig.host + \":\" + sumPool.config.connectionConfig.port);\n        addDatabaseElement(connection, plotParams.curves);\n        connection.ele('user', sumPool.config.connectionConfig.user);\n        connection.ele('password', sumPool.config.connectionConfig.password);\n        const management_system = Meteor.settings.private.MV_DB_MANAGEMENT_SYSTEM != null ? Meteor.settings.private.MV_DB_MANAGEMENT_SYSTEM : \"mysql\";\n        connection.ele('management_system', management_system);\n        addFolders(xml);\n        var plot = xml.ele('plot');\n        return {xml:xml,plot:plot};\n    } catch (e) {\n    }\n};\n\nconst addPlotCi = function(element,plotParams){\n    try { //example c(\"none\",\"none\")\n        var curves = plotParams.curves;\n        var cList = [];\n        var cListStr = 'c(';\n        for (var ci = 0; ci < curves.length; ci++) {\n            if (curves[ci]['diffFrom']) {\n                // currrently we do not do mv differencing\n                continue;\n            }\n            cList.push('\"none\"');\n        }\n        cListStr += cList.join(',') + ')';\n        element.ele('plot_ci', cListStr);\n    } catch (e) {\n    }\n};\n\nconst addShowSignif = function(element,plotParams){\n    try { //example c(FALSE,FALSE)\n        var curves = plotParams.curves;\n        var cList = [];\n        var cListStr = 'c(';\n        for (var ci = 0; ci < curves.length; ci++) {\n            if (curves[ci]['diffFrom']) {\n                // currrently we do not do mv differencing\n                continue;\n            }\n            cList.push('FALSE');\n        }\n        cListStr += cList.join(',') + ')';\n        element.ele('show_signif', cListStr);\n    } catch (e) {\n    }\n};\n\nconst addPlotDisp = function(element,plotParams){\n    try { //example c(TRUE,TRUE)\n        var curves = plotParams.curves;\n        var cList = [];\n        var cListStr = 'c(';\n        for (var ci = 0; ci < curves.length; ci++) {\n            cList.push('TRUE');\n        }\n        cListStr += cList.join(',') + ')';\n        element.ele('plot_disp', cListStr);\n    } catch (e) {\n    }\n};\n\nconst addColors = function(element,plotParams){\n    try { //  example  'c(\"#ff0000FF\",\"#8000ffFF\")'\n        var curves = plotParams.curves;\n        var cList = [];\n        var cListStr = 'c(';\n        for (var ci = 0; ci < curves.length; ci++) {\n            if (curves[ci]['diffFrom']) {\n                // currrently we do not do mv differencing\n                continue;\n            }\n            var ch = _rgbToHex(curves[ci].color) + \"FF\";\n            cList.push('\"' + ch + '\"');\n        }\n        cListStr += cList.join(',') + ')';\n        element.ele('colors', cListStr);\n    } catch (e) {\n    }\n};\n\nconst addPch = function(element,plotParams){\n    try { //example c(20,20)\n        var curves = plotParams.curves;\n        var cList = [];\n        var cListStr = 'c(';\n        for (var ci = 0; ci < curves.length; ci++) {\n            if (curves[ci]['diffFrom']) {\n                // currrently we do not do mv differencing\n                continue;\n            }\n            cList.push('20');\n        }\n        cListStr += cList.join(',') + ')';\n        element.ele('pch', cListStr);\n    } catch (e) {\n    }\n};\n\nconst addType = function(element,plotParams){\n    try { //example c(\"b\",\"b\")\n        var curves = plotParams.curves;\n        var cList = [];\n        var cListStr = 'c(';\n        for (var ci = 0; ci < curves.length; ci++) {\n            if (curves[ci]['diffFrom']) {\n                // currrently we do not do mv differencing\n                continue;\n            }\n            cList.push('\"b\"');\n        }\n        cListStr += cList.join(',') + ')';\n        element.ele('type', cListStr);\n    } catch (e) {\n    }\n};\n\nconst addLty = function(element,plotParams){\n    try { // example c(1,1)\n        var curves = plotParams.curves;\n        var cList = [];\n        var cListStr = 'c(';\n        for (var ci = 0; ci < curves.length; ci++) {\n            if (curves[ci]['diffFrom']) {\n                // currrently we do not do mv differencing\n                continue;\n            }\n            cList.push(1);\n        }\n        cListStr += cList.join(',') + ')';\n        element.ele('lty', cListStr);\n    } catch (e) {\n    }\n};\n\nconst addLwd = function(element,plotParams){\n    try { // example c(1,1)\n        var curves = plotParams.curves;\n        var cList = [];\n        var cListStr = 'c(';\n        for (var ci = 0; ci < curves.length; ci++) {\n            if (curves[ci]['diffFrom']) {\n                // currrently we do not do mv differencing\n                continue;\n            }\n            cList.push(1);\n        }\n        cListStr += cList.join(',') + ')';\n        element.ele('lwd', cListStr);\n    } catch (e) {\n    }\n};\n\nconst addConSeries = function(element,plotParams){\n    try { // example c(1,1)\n        var curves = plotParams.curves;\n        var cList = [];\n        var cListStr = 'c(';\n        for (var ci = 0; ci < curves.length; ci++) {\n            if (curves[ci]['diffFrom']) {\n                // currrently we do not do mv differencing\n                continue;\n            }\n            cList.push(1);\n        }\n        cListStr += cList.join(',') + ')';\n        element.ele('con_series', cListStr);\n    } catch (e) {\n    }\n};\n\nconst addOrderSeries = function(element,plotParams){\n    try { // example c(1,2)\n        var curves = plotParams.curves;\n        var cList = [];\n        var cListStr = 'c(';\n        for (var ci = 0; ci < curves.length; ci++) {\n            if (curves[ci]['diffFrom']) {\n                // currrently we do not do mv differencing\n                continue;\n            }\n            cList.push(ci + 1);\n        }\n        cListStr += cList.join(',') + ')';\n        element.ele('order_series', cListStr);\n    } catch (e) {\n    }\n};\n\nconst addLegend = function(element,plotParams){\n    try { // example c(\"\",\"\")\n        var curves = plotParams.curves;\n        var cList = [];\n        var cListStr = 'c(';\n        for (var ci = 0; ci < curves.length; ci++) {\n            if (curves[ci]['diffFrom']) {\n                // currrently we do not do mv differencing\n                continue;\n            }\n            cList.push('\"\"');\n        }\n        cListStr += cList.join(',') + ')';\n        element.ele('legend', cListStr);\n    } catch (e) {\n    }\n};\n\nconst addSeries = function(plot, dependentAxes, plotParams) {\n    /***\n     data-source(models), region(vx_mask),forecast_length (fcst_lead), and pres-level(fcst_lev)\n     are series variables. Multiple selections for a given curve are MV grouped (join'd)\n     Multiple selections associated with different curves are seperate <val> tags.\n\n     All of the non grouped combinations are added which results in possibly too many curves. The redundant ones are later hidden.\n\n     They can also go on the axis that is associated with the curve that the region parameter is on.\n     In other words force a new series.\n     i.e. Y1 Series variables or Y2 Series variables\n\n     series variables can be grouped or ungrouped.\n     e.g. grouped ...    <val>2018-11-01 00:00:00,2018-11-01 06:00:00,2018-11-01 12:00:00,2018-11-01</val>\n     e.g. ungrouped ...    <val>2018-11-01 00:00:00</val>\n     <val>2018-11-01 06:00:00</val>\n     <val>2018-11-01 12:00:00</val>\n     <val>2018-11-01</val>\n     For MATS curves they are grouped for each curve and added ase series variables. This results in redundant curves in MV and so the\n     redundant curves will be hidden.\n     Curves that were assigned to different axis were figured out and assigned in getDependents and are assigned in the dependentAxes structure.\n     ***/\n    var hiddenCurves = [];\n    var sVars = {'data-source':'model','region':'vx_mask','forecast-length':'fcst_lead','pres-level':'fcst_lev'};\n    const type = (_.invert(plotParams.plotTypes))[true];\n    const seriesAxisMap = {'series1':'y1', 'series2':'y2'};\n    Object.keys(seriesAxisMap).forEach(function (series) {\n        var models = [];\n        var vx_masks = [];\n        var fcst_leads = [];\n        var fcst_levls = [];\n        var seriesElem = plot.ele(series);\n        const axis = seriesAxisMap[series];\n        var initHours = new Set();\n        switch (type) {\n            case matsTypes.PlotTypes.timeSeries:\n                sVars = {'data-source':'model','region':'vx_mask','forecast-length':'fcst_lead','pres-level':'fcst_lev'};\n                break;\n            case matsTypes.PlotTypes.dailyModelCycle:\n                sVars = {'data-source':'model','region':'vx_mask','forecast-length':'fcst_lead','pres-level':'fcst_lev'};\n                break;\n            case matsTypes.PlotTypes.profile:\n                sVars = {'data-source':'model','region':'vx_mask','forecast-length':'fcst_lead','curve-dates':'fcst_valid_beg'};\n                break;\n            case matsTypes.PlotTypes.dieoff:\n                sVars = {'data-source': 'model', 'region': 'vx_mask', 'pres-level': 'fcst_lev', 'curve-dates': 'fcst_valid_beg'};\n                for (var ci=0; ci < plotParams.curves.length;ci++) {\n                    if (curves[ci]['diffFrom']) {\n                        // currrently we do not do mv differencing\n                        continue;\n                    }\n                    const c = plotParams.curves[ci];\n                    if (c['dieoff-type'] === 'Dieoff for a specified UTC cycle init hour') {\n                        initHours.add(c['utc-cycle-start']);\n                    } else if (c.dieoff - type === matsTypes.ForecastTypes.singleCycle) {\n                        // placeholder for if issue 60313 gets resolved\n                    }\n                }\n               if (initHours.size > 0) {\n                   sVars['utc-cycle-start'] = 'init_hour';\n               }\n                break;\n            case matsTypes.PlotTypes.threshold:\n                sVars = {'data-source':'model','region':'vx_mask','forecast-length':'fcst_lead','pres-level':'fcst_lev','curve-dates':'fcst_valid_beg'};\n                break;\n            case matsTypes.PlotTypes.validtime:\n                sVars = {'data-source':'model','region':'vx_mask','forecast-length':'fcst_lead','pres-level':'fcst_lev','curve-dates':'fcst_valid_beg'};\n                break;\n            case matsTypes.PlotTypes.reliability:\n                sVars = {'data-source':'model','region':'vx_mask','forecast-length':'fcst_lead','pres-level':'fcst_lev','curve-dates':'fcst_valid_beg'};\n                break;\n            case matsTypes.PlotTypes.histogram:\n                sVars = {'data-source':'model','region':'vx_mask','forecast-length':'fcst_lead','pres-level':'fcst_lev','curve-dates':'fcst_valid_beg'};\n                break;\n            default:\n                sVars = {'data-source':'model','region':'vx_mask','forecast-length':'fcst_lead','pres-level':'fcst_lev'};\n        }\n\n        if (type === matsTypes.PlotTypes.profile) {\n            delete sVars['pres-level'];\n        } else {\n            // we only consider pressure levels when it isn't a profile\n            sVars['pres-level'] = 'fcst_lev';\n        }\n        var seriesElements = {};\n        var seriesElementValues = {};\n        for (var daci = 0; daci < dependentAxes[axis].length; daci++) {\n            const curve = dependentAxes[axis][daci];\n            const database = curve['database'];\n            const dataSource = curve['data-source'];\n                Object.keys(sVars).forEach(function(sVar) {\n                    try {\n                        // models - not multiple - ungrouped\n                        var sValues = [];\n                        switch(sVar) {\n                            case 'data-source':\n                                // convert data-source to single element array\n                                sValues = [matsParamUtils.getParameterForName(sVar).optionsMap[database][dataSource][0]];\n                                break;\n                            case 'curve-dates':\n                                sValues = _getSortedDatesForDepRange(curve);\n                                break;\n                            case 'utc-cycle-start':\n                                const v = curve['utc-cycle-start'];\n                                const paddedV = _pad(v,2);\n                                sValues = [paddedV]; // turn single selection padded value into array\n                                break;\n                            case 'forecast-length':\n                                sValues = curve[sVar];\n                                if (sValues == null || sValues.length === 0) {\n                                    sValues = matsParamUtils.getParameterForName(sVar).optionsMap[database][dataSource]; // have to assign all the fcst leads\n                                }\n                                const forecastValueMap = matsParamUtils.getParameterForName(sVar).valuesMap[database][dataSource];\n                                sValues = sValues.map(function (fl) {return forecastValueMap[fl]}).join(',');\n                                break;\n                            default:\n                                sValues = curve[sVar];\n                                if (sValues == null || sValues.length === 0) {\n                                    sValues = matsParamUtils.getParameterForName(sVar).optionsMap[database][dataSource]; // have to assign all the regions\n                                }\n                        }\n                        // check to see if this element was already added.\n                        // if not added then add the element.\n                        // if element was already added see if we need to add this value.\n                        // multiples are always grouped.\n                        if (sValues !== undefined) {\n                            sValues = Array.isArray(sValues) ? sValues : [sValues];\n                            if (sValues.length > 0) {\n                                const sValuesStr = sValues.join(',');\n                                if (sValuesStr !== undefined) {\n                                    const thisVar = sVars[sVar];\n                                    if (seriesElements[thisVar] == null) {\n                                        seriesElements[thisVar] = seriesElem.ele('field', {'name': sVars[sVar]});\n                                        seriesElementValues[thisVar] = new Set();\n                                        seriesElementValues[thisVar].add(sValuesStr);\n                                    } else {\n                                        // already exists\n                                        if (seriesElementValues[thisVar].has(sValuesStr) === false) {\n                                            seriesElementValues[thisVar].add(sValuesStr);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                } catch (error) {\n                    console.log(error)\n                    throw new Meteor.Error(error);\n                }\n            });\n        }\n        const sElementKeys = Object.keys(seriesElements);\n        for (var sei=0; sei < sElementKeys.length; sei++) {\n            const seVar = sElementKeys[sei];\n            const svars = Array.from(seriesElementValues[seVar]).sort();\n            for (var svi=0; svi < svars.length; svi++){\n                const v = svars[svi];\n                if (v !== \"undefined\") {\n                    seriesElements[seVar].ele('val', v);\n                }\n            };\n        }\n    });\n\n}\n\nconst getDependentAxis = function(plotParams) {\n    // there are two possible axis for metviewer. We want to collect all the variables\n    // into groups. We will take the two largest groups.\n    // variables and statistics go together. They are dependent variabales in MV.\n    // The variable/stat pairs always are associated with different curves, and will always be on different axis,\n    // if possible, but might be assigned an axis via an axes parameter.\n    const yaxesDefault = \"auto-by-variable\";\n    var curves = plotParams['curves'];\n    var dependentAxes = {'y1': [], 'y2': []};\n    dependentAxes['y1'].push(curves[0]);\n    var dependentAxesVariables = {'y1': [curves[0]['variable']], 'y2': []};\n    for (var ci = 1; ci < curves.length; ci++) {\n        if (curves[ci]['diffFrom']) {\n            // currrently we do not do mv differencing\n            continue;\n        }\n        if (curves[ci].yaxes != yaxesDefault) {\n            // it was assigned an axis by the axis param so sort it into its selectedYaxes\n            dependentAxes[curves[ci].yaxes].push(curves[ci]);\n        } else {\n            // sort it into an axis by its variable/stat combination\n            //     variables:\n            //     variables that share an axis are different dependent variables. Put them in dep1.\n            // unless it is a variable with multiple stats.\n            // different variable with different stats that have differing axis must go in different Y axis vars (and you can only have two of those)\n\n            const variable = curves[ci].variable;\n            if (dependentAxesVariables['y1'].includes(variable)) {\n                dependentAxes['y1'].push(curves[ci]);\n            } else {\n                dependentAxes['y2'].push(curves[ci]);\n            }\n        }\n    }\n    return dependentAxes;\n}\n\nfunction addDeps(plot, dependentAxes) {\n    var dep = plot.ele('dep');\n    const deps = {\"dep1\":\"y1\",\"dep2\":\"y2\"};\n    for (var di=0; di<Object.keys(deps).length;di++) {  // [dep1, dep2]\n        var depKey = Object.keys(deps)[di];  // dep1 or dep2\n        var depAxis = deps[depKey];\n        var subDep = dep.ele(depKey); //<dep><dep1/><dep2/>\n        var variableStatisticPairs = {};\n        for (var daci = 0; daci < dependentAxes[depAxis].length; daci++) {    //[y1,y2]\n            // record the variable-statistic pair\n            const variable = dependentAxes[depAxis][daci]['variable'];\n            const stat = statMvTranslation[dependentAxes[depAxis][daci]['statistic']];\n            if (variableStatisticPairs[variable] == null) {\n                variableStatisticPairs[variable] = [stat];\n            } else {\n                variableStatisticPairs[variable].push(stat);\n            }\n        }\n        var vars = Object.keys(variableStatisticPairs);  //['T','HGT','WIND'...]\n        for (var v = 0; v < vars.length; v++) {\n            const stats = Array.from(new Set(variableStatisticPairs[vars[v]]));\n            var depElem = subDep.ele('fcst_var', {'name': vars[v]}); //<dep><dep1><fcst_var name='T'><stat>RMS</stat></fcst_var> </dep1><dep2/>\n            for (var si=0;si<stats.length;si++) {\n                depElem.ele('stat',stats[si]);\n            }\n        }\n    }\n}\n\nfunction addAnomalycorrDeps(plot, dependentAxes) {\n    var dep = plot.ele('dep');\n    const deps = {\"dep1\":\"y1\",\"dep2\":\"y2\"};\n    for (var di=0; di<Object.keys(deps).length;di++) {  // [dep1, dep2]\n        var depKey = Object.keys(deps)[di];  // dep1 or dep2\n        var depAxis = deps[depKey];\n        var subDep = dep.ele(depKey); //<dep><dep1/><dep2/>\n        var variables = new Set();\n        for (var daci = 0; daci < dependentAxes[depAxis].length; daci++) {    //[y1,y2]\n            const variable = dependentAxes[depAxis][daci]['variable'];\n            variables.add(variable);\n        }\n        var vars = Array.from(variables);\n        for (var v = 0; v < vars.length; v++) {\n            subDep.ele('fcst_var', {'name': vars[v]}).ele('stat','ANOM_CORR');\n        }\n    }\n}\n\nconst _addSeriesLabels = function(element,dependentAxes, plotParams) {\n    const plotType = (_.invert(plotParams.plotTypes))[true];\n    var label;\n    switch (plotType) {\n        case matsTypes.PlotTypes.timeSeries:\n            label = \"Time\";\n            break;\n        case matsTypes.PlotTypes.dieoff:\n            label = \"Forecast Hour\";\n            break;\n        case matsTypes.PlotTypes.dailyModelCycle:\n            label = \"Time\";\n            break;\n        case matsTypes.PlotTypes.histogram:\n            label = \"Bin\";\n            break;\n        case matsTypes.PlotTypes.validtime:\n            label = \"Hour of Day\";\n            break;\n        case matsTypes.PlotTypes.reliability:\n            label = \"Reliability\";\n            break;\n        case matsTypes.PlotTypes.threshold:\n            label = \"Threshold\";\n            break;\n        case matsTypes.PlotTypes.profile:\n            var vars = new Set();\n            plotParams.curves.forEach(function(c){\n                vars.add(c.variable);\n            });\n            label = Array.from(vars).join(' - ');\n            break;\n        default:\n            label = \"Time\";\n    }\n    element.ele('x_label', label);\n\n    var y1vars = [];\n    for (var y1i=0; y1i < dependentAxes['y1'].length; y1i++) {\n        if (!y1vars.includes(dependentAxes['y1'][y1i]['variable'])) {\n            y1vars.push(dependentAxes['y1'][y1i]['variable']);\n        }\n    }\n    element.ele('y1_label', y1vars.join(','));\n    var y2vars = [];\n    for (var y2i=0; y2i < dependentAxes['y2'].length; y2i++) {\n        if (!y2vars.includes(dependentAxes['y2'][y2i]['variable'])) {\n            y2vars.push(dependentAxes['y2'][y2i]['variable']);\n        }\n    }\n    element.ele('y2_label', y2vars.join(','));\n}\n\nconst addTemplate = function(plot,templateStr)\n{\n    plot.ele('template', templateStr);\n}\n\nconst addIndepDates = function(plot, plotParams) {\n    var indep = plot.ele('indep', {'equalize': 'false', 'name': 'fcst_valid_beg'});\n    addIndepUngroupedDateElementsBetween(indep, plotParams);\n}\n\nconst addIndepLevels = function(plot, plotParams) {\n    // for profiles we use a union of all the levels available for all the data-sources\n    var indep = plot.ele('indep', {'equalize': 'false', 'name': 'fcst_lev'});\n    var curves = plotParams.curves;\n    var lvlSet = new Set(); // use a set to accumulate all the levels\n    for (var ci=0; ci<curves.length;ci++) {\n        if (curves[ci]['diffFrom']) {\n            // currrently we do not do mv differencing\n            continue;\n        }\n        const curve = curves[ci];\n        const database = curve['database'];\n        const dataSource = curve['data-source'];\n        const levelVals = matsCollections.CurveParams.findOne({name: 'data-source'})['levelsMap'][database][dataSource];\n        lvlSet.add(levelVals);\n    }\n    // only add the fcst_lev tag if there are pres-levels requested - leaving it out will get them all\n    const lvls = Array.from(lvlSet)[0];\n    for (var li=0; li<lvls.length;li++) {\n        var val = indep.ele('val',lvls[li]);\n        val.att('label',lvls[li]);\n        val.att('plot_val',\"\");\n    }\n}\n\nconst addIndepValidHours = function(plot, plotParams) {\n    // for validTimes we use a union of all the vts available for all the data-sources\n    var indep = plot.ele('indep', {'equalize': 'false', 'name': 'valid_hour'});\n    const hours = _getSortedHoursForIndepRange(plotParams);\n    for (var hi=0; hi<hours.length;hi++) {\n        var val = indep.ele('val',hours[hi]);\n        val.att('label',hours[hi]);\n        val.att('plot_val',\"\");\n    }\n}\n\nconst addIndepForecastHours = function(plot, plotParams) {\n    // for dieoffs we use a union of all the fhrs available for all the data-sources\n    var indep = plot.ele('indep', {'equalize': 'false', 'name': 'fcst_lead'});\n    var curves = plotParams.curves;\n    var leadSet = new Set(); // use a set to accumulate all the levels\n    for (var ci=0; ci<curves.length;ci++) {\n        if (curves[ci]['diffFrom']) {\n            // currrently we do not do mv differencing\n            continue;\n        }\n        const curve = curves[ci];\n        const database = curve['database'];\n        const dataSource = curve['data-source'];\n        const forecastLengths = matsCollections.CurveParams.findOne({name: 'forecast-length'})['optionsMap'][database][dataSource];\n        leadSet.add(forecastLengths);\n    }\n    const leads = Array.from(leadSet)[0];\n    for (var li=0; li<leads.length;li++) {\n        var val = indep.ele('val',leads[li]);\n        val.att('label',leads[li]);\n        val.att('plot_val',\"\");\n    }\n}\n\nconst addTmpl = function(plot, key, plotParams, dependentAxes) {\n    var tmpl = plot.ele('tmpl');\n    tmpl.ele('data_file', key + '.data');\n    tmpl.ele('plot_file', key + '.png');\n    tmpl.ele('r_file', key + '.R');\n    tmpl.ele('title', _title() + \" : \" + _plotText(plotParams) + \" \" + plotParams.plotAction);\n    _addSeriesLabels(tmpl, dependentAxes, plotParams);\n    tmpl.ele('caption');\n    tmpl.ele('job_title');\n    tmpl.ele('keep_revisions', 'false');\n    tmpl.ele('listdiffseries1', 'list()');\n    tmpl.ele('listdiffseries2', 'list()');\n}\n\nconst addPlotFix = function(plot) {\n    plot.ele('plot_fix');\n}\n\nconst addPlotCond = function(plot,plotParams)\n{\n    plot.ele('plot_cond');\n}\n\nconst addCalcStat = function(plot,statType){\n    plot.ele('calc_stat').ele(statType,true);\n} // unused for time series\n\nconst addPlotStat = function(plot,stat){\n    //Statistics --- We always do Summary with Mean - so there\n    plot.ele('plot_stat',stat);\n}\n\n\nconst addPlotCmd = function (plot){\n    plot.ele('plot_cmd');\n}\nconst addY1Lim = function(plot){\n    plot.ele('y1_lim','c()');\n}\nconst addY1Bufr = function(plot){\n    plot.ele('y1_bufr','0.04');\n}\nconst addY2Lim = function(plot) {\n    plot.ele('y2_lim','c()');\n}\n\nconst addMiscellaneous = function(plot,plotParams) {\n    plot.ele('event_equal', 'false');\n\n    const plotType = (_.invert(plotParams.plotTypes))[true];\n    switch (plotType) {\n        case matsTypes.PlotTypes.timeSeries:\n        case matsTypes.PlotTypes.dieoff:\n        case matsTypes.PlotTypes.dailyModelCycle:\n        case matsTypes.PlotTypes.histogram:\n        case matsTypes.PlotTypes.validtime:\n        case matsTypes.PlotTypes.reliability:\n        case matsTypes.PlotTypes.threshold:\n            plot.ele('vert_plot', 'false');\n            plot.ele('x_reverse', 'false');\n            break;\n        case matsTypes.PlotTypes.profile:\n            plot.ele('vert_plot', 'true');\n            plot.ele('x_reverse', 'true');\n            break;\n        default:\n            plot.ele('vert_plot', 'false');\n            plot.ele('x_reverse', 'false');\n    }\n\n    plot.ele('num_stats', 'false');\n    plot.ele('indy1_stag', 'false');\n    plot.ele('indy2_stag', 'false');\n    plot.ele('grid_on', 'true');\n    plot.ele('sync_axes', 'false');\n    plot.ele('dump_points1', 'true');\n    plot.ele('dump_points2', 'true');\n    plot.ele('log_y1', 'false');\n    plot.ele('log_y2', 'false');\n    plot.ele('varianceinflationfactor', 'false');\n    plot.ele('plot_type', 'png16m');\n    plot.ele('plot_height', '8.5');\n    plot.ele('plot_width', '11');\n    plot.ele('plot_res', '72');\n    plot.ele('plot_units', 'in');\n    plot.ele('mar', 'c(8,4,5,4)');\n    plot.ele('mgp', 'c(1,1,0)');\n    plot.ele('cex', '1');\n    plot.ele('title_weight', '2');\n    plot.ele('title_size', '1.4');\n    plot.ele('title_offset', '-2');\n    plot.ele('title_align', '0.5');\n    plot.ele('xtlab_orient', '1');\n    plot.ele('xtlab_perp', '-0.75');\n    plot.ele('xtlab_horiz', '0.5');\n    plot.ele('xtlab_freq', '0');\n    plot.ele('xtlab_size', '1');\n    plot.ele('xlab_weight', '1');\n    plot.ele('xlab_size', '1');\n    plot.ele('xlab_offset', '2');\n    plot.ele('xlab_align', '0.5');\n    plot.ele('ytlab_orient', '1');\n    plot.ele('ytlab_perp', '0.5');\n    plot.ele('ytlab_horiz', '0.5');\n    plot.ele('ytlab_size', '1');\n    plot.ele('ylab_weight', '1');\n    plot.ele('ylab_size', '1');\n    plot.ele('ylab_offset', '-2');\n    plot.ele('ylab_align', '0.5');\n    plot.ele('grid_lty', '3');\n    plot.ele('grid_col', '#cccccc');\n    plot.ele('grid_lwd', '1');\n    plot.ele('grid_x', 'listX');\n    plot.ele('x2tlab_orient', '1');\n    plot.ele('x2tlab_perp', '1');\n    plot.ele('x2tlab_horiz', '0.5');\n    plot.ele('x2tlab_size', '0.8');\n    plot.ele('x2lab_size', '0.8');\n    plot.ele('x2lab_offset', '-0.5');\n    plot.ele('x2lab_align', '0.5');\n    plot.ele('y2tlab_orient', '1');\n    plot.ele('y2tlab_perp', '0.5');\n    plot.ele('y2tlab_horiz', '0.5');\n    plot.ele('y2tlab_size', '1');\n    plot.ele('y2lab_size', '1');\n    plot.ele('y2lab_offset', '1');\n    plot.ele('y2lab_align', '0.5');\n    plot.ele('legend_box', 'o');\n    plot.ele('legend_inset', 'c(0, -.25)');\n    plot.ele('legend_ncol', '3');\n    plot.ele('legend_size', '0.8');\n    plot.ele('caption_weight', '1');\n    plot.ele('caption_col', '#333333');\n    plot.ele('caption_size', '0.8');\n    plot.ele('caption_offset', '3');\n    plot.ele('caption_align', '0');\n    plot.ele('ci_alpha', '0.05');\n}\n\nconst endPlotSpec = function(xml) {\n    xml.end({pretty: true});\n}\n\nexport default matsPlotSpecUtils = {\n    startPlotSpec:startPlotSpec,\n    addDeps:addDeps,\n    addAnomalycorrDeps:addAnomalycorrDeps,\n    getDependentAxis:getDependentAxis,\n    addDatabaseElement:addDatabaseElement,\n    addFolders:addFolders,\n    addPlotCi:addPlotCi,\n    addShowSignif:addShowSignif,\n    addPlotDisp:addPlotDisp,\n    addColors:addColors,\n    addPch:addPch,\n    addType:addType,\n    addLty:addLty,\n    addLwd:addLwd,\n    addConSeries:addConSeries,\n    addOrderSeries:addOrderSeries,\n    addLegend:addLegend,\n    addSeries:addSeries,\n    addTemplate:addTemplate,\n    addIndepDates:addIndepDates,\n    addTmpl:addTmpl,\n    addPlotFix:addPlotFix,\n    addPlotCond:addPlotCond,\n    addCalcStat:addCalcStat,\n    addPlotStat:addPlotStat,\n    addPlotCmd:addPlotCmd,\n    addY1Lim:addY1Lim,\n    addY1Bufr:addY1Bufr,\n    addY2Lim:addY2Lim,\n    addMiscellaneous:addMiscellaneous,\n    endPlotSpec:endPlotSpec,\n    addIndepLevels:addIndepLevels,\n    addIndepForecastHours:addIndepForecastHours,\n    addIndepValidHours:addIndepValidHours\n}"]},"sourceType":"script","hash":"8fba17ba7b525a334e7733b37a55ede92457bddf"}
