{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/autoupdate/autoupdate_client.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/autoupdate/autoupdate_client.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/autoupdate/autoupdate_client.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/autoupdate/autoupdate_client.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/autoupdate/autoupdate_client.js"}},"code":"module.export({\n  Autoupdate: () => Autoupdate\n});\n// Subscribe to the `meteor_autoupdate_clientVersions` collection,\n// which contains the set of acceptable client versions.\n//\n// A \"hard code push\" occurs when the running client version is not in\n// the set of acceptable client versions (or the server updates the\n// collection, there is a published client version marked `current` and\n// the running client version is no longer in the set).\n//\n// When the `reload` package is loaded, a hard code push causes\n// the browser to reload, so that it will load the latest client\n// version from the server.\n//\n// A \"soft code push\" represents the situation when the running client\n// version is in the set of acceptable versions, but there is a newer\n// version available on the server.\n//\n// `Autoupdate.newClientAvailable` is a reactive data source which\n// becomes `true` if there is a new version of the client is available on\n// the server.\n//\n// This package doesn't implement a soft code reload process itself,\n// but `newClientAvailable` could be used for example to display a\n// \"click to reload\" link to the user.\n// The client version of the client code currently running in the\n// browser.\nconst clientArch = Meteor.isCordova ? \"web.cordova\" : Meteor.isModern ? \"web.browser\" : \"web.browser.legacy\";\nconst autoupdateVersions = ((__meteor_runtime_config__.autoupdate || {}).versions || {})[clientArch] || {\n  version: \"unknown\",\n  versionRefreshable: \"unknown\",\n  versionNonRefreshable: \"unknown\",\n  assets: []\n};\nconst Autoupdate = {};\n// The collection of acceptable client versions.\nconst ClientVersions = Autoupdate._ClientVersions = // Used by a self-test.\nnew Mongo.Collection(\"meteor_autoupdate_clientVersions\");\n\nAutoupdate.newClientAvailable = function () {\n  return !!(ClientVersions.findOne({\n    _id: clientArch,\n    versionNonRefreshable: {\n      $ne: autoupdateVersions.versionNonRefreshable\n    }\n  }) || ClientVersions.findOne({\n    _id: clientArch,\n    versionRefreshable: {\n      $ne: autoupdateVersions.versionRefreshable\n    }\n  }));\n}; // Set to true if the link.onload callback ever fires for any <link> node.\n\n\nlet knownToSupportCssOnLoad = false;\nconst retry = new Retry({\n  // Unlike the stream reconnect use of Retry, which we want to be instant\n  // in normal operation, this is a wacky failure. We don't want to retry\n  // right away, we can start slowly.\n  //\n  // A better way than timeconstants here might be to use the knowledge\n  // of when we reconnect to help trigger these retries. Typically, the\n  // server fixing code will result in a restart and reconnect, but\n  // potentially the subscription could have a transient error.\n  minCount: 0,\n  // don't do any immediate retries\n  baseTimeout: 30 * 1000 // start with 30s\n\n});\nlet failures = 0;\n\nAutoupdate._retrySubscription = () => {\n  Meteor.subscribe(\"meteor_autoupdate_clientVersions\", {\n    onError(error) {\n      Meteor._debug(\"autoupdate subscription failed\", error);\n\n      failures++;\n      retry.retryLater(failures, function () {\n        // Just retry making the subscription, don't reload the whole\n        // page. While reloading would catch more cases (for example,\n        // the server went back a version and is now doing old-style hot\n        // code push), it would also be more prone to reload loops,\n        // which look really bad to the user. Just retrying the\n        // subscription over DDP means it is at least possible to fix by\n        // updating the server.\n        Autoupdate._retrySubscription();\n      });\n    },\n\n    onReady() {\n      // Call checkNewVersionDocument with a slight delay, so that the\n      // const handle declaration is guaranteed to be initialized, even if\n      // the added or changed callbacks are called synchronously.\n      const resolved = Promise.resolve();\n\n      function check(doc) {\n        resolved.then(() => checkNewVersionDocument(doc));\n      }\n\n      const handle = ClientVersions.find().observe({\n        added: check,\n        changed: check\n      });\n\n      function checkNewVersionDocument(doc) {\n        if (doc._id !== clientArch) {\n          return;\n        }\n\n        if (doc.versionNonRefreshable !== autoupdateVersions.versionNonRefreshable) {\n          // Non-refreshable assets have changed, so we have to reload the\n          // whole page rather than just replacing <link> tags.\n          if (handle) handle.stop();\n\n          if (Package.reload) {\n            // The reload package should be provided by ddp-client, which\n            // is provided by the ddp package that autoupdate depends on.\n            Package.reload.Reload._reload();\n          }\n\n          return;\n        }\n\n        if (doc.versionRefreshable !== autoupdateVersions.versionRefreshable) {\n          autoupdateVersions.versionRefreshable = doc.versionRefreshable; // Switch out old css links for the new css links. Inspired by:\n          // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710\n\n          var newCss = doc.assets || [];\n          var oldLinks = [];\n          Array.prototype.forEach.call(document.getElementsByTagName('link'), function (link) {\n            if (link.className === '__meteor-css__') {\n              oldLinks.push(link);\n            }\n          });\n\n          function waitUntilCssLoads(link, callback) {\n            var called;\n\n            link.onload = function () {\n              knownToSupportCssOnLoad = true;\n\n              if (!called) {\n                called = true;\n                callback();\n              }\n            };\n\n            if (!knownToSupportCssOnLoad) {\n              var id = Meteor.setInterval(function () {\n                if (link.sheet) {\n                  if (!called) {\n                    called = true;\n                    callback();\n                  }\n\n                  Meteor.clearInterval(id);\n                }\n              }, 50);\n            }\n          }\n\n          let newLinksLeftToLoad = newCss.length;\n\n          function removeOldLinks() {\n            if (oldLinks.length > 0 && --newLinksLeftToLoad < 1) {\n              oldLinks.splice(0).forEach(link => {\n                link.parentNode.removeChild(link);\n              });\n            }\n          }\n\n          if (newCss.length > 0) {\n            newCss.forEach(css => {\n              const newLink = document.createElement(\"link\");\n              newLink.setAttribute(\"rel\", \"stylesheet\");\n              newLink.setAttribute(\"type\", \"text/css\");\n              newLink.setAttribute(\"class\", \"__meteor-css__\");\n              newLink.setAttribute(\"href\", css.url);\n              waitUntilCssLoads(newLink, function () {\n                Meteor.setTimeout(removeOldLinks, 200);\n              });\n              const head = document.getElementsByTagName(\"head\").item(0);\n              head.appendChild(newLink);\n            });\n          } else {\n            removeOldLinks();\n          }\n        }\n      }\n    }\n\n  });\n};\n\nAutoupdate._retrySubscription();","map":{"version":3,"sources":["packages/autoupdate/autoupdate_client.js"],"names":["module","export","Autoupdate","clientArch","Meteor","isCordova","isModern","autoupdateVersions","__meteor_runtime_config__","autoupdate","versions","version","versionRefreshable","versionNonRefreshable","assets","ClientVersions","_ClientVersions","Mongo","Collection","newClientAvailable","findOne","_id","$ne","knownToSupportCssOnLoad","retry","Retry","minCount","baseTimeout","failures","_retrySubscription","subscribe","onError","error","_debug","retryLater","onReady","resolved","Promise","resolve","check","doc","then","checkNewVersionDocument","handle","find","observe","added","changed","stop","Package","reload","Reload","_reload","newCss","oldLinks","Array","prototype","forEach","call","document","getElementsByTagName","link","className","push","waitUntilCssLoads","callback","called","onload","id","setInterval","sheet","clearInterval","newLinksLeftToLoad","length","removeOldLinks","splice","parentNode","removeChild","css","newLink","createElement","setAttribute","url","setTimeout","head","item","appendChild"],"mappings":"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","sourcesContent":["// Subscribe to the `meteor_autoupdate_clientVersions` collection,\n// which contains the set of acceptable client versions.\n//\n// A \"hard code push\" occurs when the running client version is not in\n// the set of acceptable client versions (or the server updates the\n// collection, there is a published client version marked `current` and\n// the running client version is no longer in the set).\n//\n// When the `reload` package is loaded, a hard code push causes\n// the browser to reload, so that it will load the latest client\n// version from the server.\n//\n// A \"soft code push\" represents the situation when the running client\n// version is in the set of acceptable versions, but there is a newer\n// version available on the server.\n//\n// `Autoupdate.newClientAvailable` is a reactive data source which\n// becomes `true` if there is a new version of the client is available on\n// the server.\n//\n// This package doesn't implement a soft code reload process itself,\n// but `newClientAvailable` could be used for example to display a\n// \"click to reload\" link to the user.\n\n// The client version of the client code currently running in the\n// browser.\n\nconst clientArch = Meteor.isCordova ? \"web.cordova\" :\n  Meteor.isModern ? \"web.browser\" : \"web.browser.legacy\";\n\nconst autoupdateVersions =\n  ((__meteor_runtime_config__.autoupdate || {}).versions || {})[clientArch] || {\n    version: \"unknown\",\n    versionRefreshable: \"unknown\",\n    versionNonRefreshable: \"unknown\",\n    assets: [],\n  };\n\nexport const Autoupdate = {};\n\n// The collection of acceptable client versions.\nconst ClientVersions =\n  Autoupdate._ClientVersions = // Used by a self-test.\n  new Mongo.Collection(\"meteor_autoupdate_clientVersions\");\n\nAutoupdate.newClientAvailable = function () {\n  return !! (\n    ClientVersions.findOne({\n      _id: clientArch,\n      versionNonRefreshable: {\n        $ne: autoupdateVersions.versionNonRefreshable,\n      }\n    }) ||\n    ClientVersions.findOne({\n      _id: clientArch,\n      versionRefreshable: {\n        $ne: autoupdateVersions.versionRefreshable,\n      }\n    })\n  );\n};\n\n// Set to true if the link.onload callback ever fires for any <link> node.\nlet knownToSupportCssOnLoad = false;\n\nconst retry = new Retry({\n  // Unlike the stream reconnect use of Retry, which we want to be instant\n  // in normal operation, this is a wacky failure. We don't want to retry\n  // right away, we can start slowly.\n  //\n  // A better way than timeconstants here might be to use the knowledge\n  // of when we reconnect to help trigger these retries. Typically, the\n  // server fixing code will result in a restart and reconnect, but\n  // potentially the subscription could have a transient error.\n  minCount: 0, // don't do any immediate retries\n  baseTimeout: 30*1000 // start with 30s\n});\n\nlet failures = 0;\n\nAutoupdate._retrySubscription = () => {\n  Meteor.subscribe(\"meteor_autoupdate_clientVersions\", {\n    onError(error) {\n      Meteor._debug(\"autoupdate subscription failed\", error);\n      failures++;\n      retry.retryLater(failures, function () {\n        // Just retry making the subscription, don't reload the whole\n        // page. While reloading would catch more cases (for example,\n        // the server went back a version and is now doing old-style hot\n        // code push), it would also be more prone to reload loops,\n        // which look really bad to the user. Just retrying the\n        // subscription over DDP means it is at least possible to fix by\n        // updating the server.\n        Autoupdate._retrySubscription();\n      });\n    },\n\n    onReady() {\n      // Call checkNewVersionDocument with a slight delay, so that the\n      // const handle declaration is guaranteed to be initialized, even if\n      // the added or changed callbacks are called synchronously.\n      const resolved = Promise.resolve();\n      function check(doc) {\n        resolved.then(() => checkNewVersionDocument(doc));\n      }\n\n      const handle = ClientVersions.find().observe({\n        added: check,\n        changed: check\n      });\n\n      function checkNewVersionDocument(doc) {\n        if (doc._id !== clientArch) {\n          return;\n        }\n\n        if (doc.versionNonRefreshable !==\n            autoupdateVersions.versionNonRefreshable) {\n          // Non-refreshable assets have changed, so we have to reload the\n          // whole page rather than just replacing <link> tags.\n          if (handle) handle.stop();\n          if (Package.reload) {\n            // The reload package should be provided by ddp-client, which\n            // is provided by the ddp package that autoupdate depends on.\n            Package.reload.Reload._reload();\n          }\n          return;\n        }\n\n        if (doc.versionRefreshable !== autoupdateVersions.versionRefreshable) {\n          autoupdateVersions.versionRefreshable = doc.versionRefreshable;\n\n          // Switch out old css links for the new css links. Inspired by:\n          // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710\n          var newCss = doc.assets || [];\n          var oldLinks = [];\n\n          Array.prototype.forEach.call(\n            document.getElementsByTagName('link'),\n            function (link) {\n              if (link.className === '__meteor-css__') {\n                oldLinks.push(link);\n              }\n            }\n          );\n\n          function waitUntilCssLoads(link, callback) {\n            var called;\n\n            link.onload = function () {\n              knownToSupportCssOnLoad = true;\n              if (! called) {\n                called = true;\n                callback();\n              }\n            };\n\n            if (! knownToSupportCssOnLoad) {\n              var id = Meteor.setInterval(function () {\n                if (link.sheet) {\n                  if (! called) {\n                    called = true;\n                    callback();\n                  }\n                  Meteor.clearInterval(id);\n                }\n              }, 50);\n            }\n          }\n\n          let newLinksLeftToLoad = newCss.length;\n          function removeOldLinks() {\n            if (oldLinks.length > 0 &&\n                --newLinksLeftToLoad < 1) {\n              oldLinks.splice(0).forEach(link => {\n                link.parentNode.removeChild(link);\n              });\n            }\n          }\n\n          if (newCss.length > 0) {\n            newCss.forEach(css => {\n              const newLink = document.createElement(\"link\");\n              newLink.setAttribute(\"rel\", \"stylesheet\");\n              newLink.setAttribute(\"type\", \"text/css\");\n              newLink.setAttribute(\"class\", \"__meteor-css__\");\n              newLink.setAttribute(\"href\", css.url);\n\n              waitUntilCssLoads(newLink, function () {\n                Meteor.setTimeout(removeOldLinks, 200);\n              });\n\n              const head = document.getElementsByTagName(\"head\").item(0);\n              head.appendChild(newLink);\n            });\n          } else {\n            removeOldLinks();\n          }\n        }\n      }\n    }\n  });\n};\n\nAutoupdate._retrySubscription();\n"]},"sourceType":"script","hash":"9d899f44d9dc745586e60fe8594eb10943494dad"}
