{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/templates/params/param_list.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/randyp:mats-common/templates/params/param_list.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/templates/params/param_list.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/templates/params/param_list.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/randyp:mats-common/templates/params/param_list.js"}},"code":"var matsTypes;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsTypes: function (v) {\n    matsTypes = v;\n  }\n}, 0);\nvar matsCollections;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsCollections: function (v) {\n    matsCollections = v;\n  }\n}, 1);\nvar matsCurveUtils;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsCurveUtils: function (v) {\n    matsCurveUtils = v;\n  }\n}, 2);\nvar matsPlotUtils;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsPlotUtils: function (v) {\n    matsPlotUtils = v;\n  }\n}, 3);\nvar matsParamUtils;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsParamUtils: function (v) {\n    matsParamUtils = v;\n  }\n}, 4);\nvar matsMethods;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsMethods: function (v) {\n    matsMethods = v;\n  }\n}, 5);\n\nfunction shadeRGBColor(color, percent) {\n  var f = color.split(\",\"),\n      t = percent < 0 ? 0 : 255,\n      p = percent < 0 ? percent * -1 : percent,\n      R = parseInt(f[0].slice(4)),\n      G = parseInt(f[1]),\n      B = parseInt(f[2]);\n  return \"rgb(\" + (Math.round((t - R) * p) + R) + \",\" + (Math.round((t - G) * p) + G) + \",\" + (Math.round((t - B) * p) + B) + \")\";\n}\n\nTemplate.paramList.helpers({\n  CurveParamGroups: function () {\n    var lastUpdate = Session.get('lastUpdate');\n    var groupNums = [];\n    var params = matsCollections.CurveParams.find({}).fetch();\n\n    for (var i = 0; i < params.length; i++) {\n      groupNums.push(params[i].displayGroup);\n    }\n\n    var res = _.uniq(groupNums).sort();\n\n    return res;\n  },\n  isEdit: function () {\n    return Session.get('editMode') != '';\n  },\n  log: function () {\n    console.log(this);\n  },\n  paramWellColor: function () {\n    if (Session.get(\"paramWellColor\") === undefined) {\n      Session.set(\"paramWellColor\", \"rgb(245,245,245)\");\n    }\n\n    if (Session.get(\"editMode\") !== \"\") {\n      var curveBeingEdited = $.grep(Session.get(\"Curves\"), function (c) {\n        return c.label == Session.get(\"editMode\");\n      });\n\n      if (curveBeingEdited === undefined || curveBeingEdited[0] === undefined) {\n        Session.set(\"paramWellColor\", \"rgb(245,245,245)\");\n        return \"rgb(245,245,245)\";\n      }\n\n      var color = curveBeingEdited[0].color;\n      var lighterShadeOfColor = shadeRGBColor(color, 0.2);\n      Session.set(\"paramWellColor\", lighterShadeOfColor);\n    }\n\n    return Session.get(\"paramWellColor\");\n  }\n});\nTemplate.paramList.events({\n  'click .edit-cancel': function () {\n    Session.set('editMode', '');\n    Session.set(\"paramWellColor\", \"rgb(245,245,245)\");\n    var labelId = 'label-' + matsTypes.InputTypes.textInput;\n    var label = document.getElementById(labelId);\n    label.disabled = false; // reset parameters to match edited curve.....\n\n    matsParamUtils.setInputForParamName('label', matsCurveUtils.getNextCurveLabel());\n    matsParamUtils.collapseParams();\n  },\n  'click .reset': function (event, template) {\n    var plotType = $('input[name=plot-type]:checked').val();\n    event.preventDefault();\n    Session.set(\"paramWellColor\", \"rgb(245,245,245)\");\n    var paramView = document.getElementById('paramList');\n    var plotView = document.getElementById('plotList');\n    document.getElementById('plot-type-' + plotType).checked = true;\n    matsMethods.refreshMetaData.call({}, function (error, result) {\n      if (error !== undefined) {\n        setError(new Error(error.message));\n      }\n\n      matsParamUtils.setAllParamsToDefault();\n    });\n  },\n  'click .expand': function () {\n    matsParamUtils.expandParams();\n  },\n  'click .collapse': function () {\n    matsParamUtils.collapseParams();\n  },\n  // restore settings\n  'click .restore-settings': function (event) {\n    Session.set(\"paramWellColor\", \"rgb(245,245,245)\");\n    event.preventDefault();\n    document.getElementById(\"restore-settings\").click();\n    return false;\n  },\n  // add curve\n  // save changes\n\n  /*\n      Note: when adding a curve or saving changes after editing a curve there is a special\n      case for scatter plots. Each hidden axis parameter must get set with the value from the regular parameter.\n   */\n  'submit form': function (event, template) {\n    event.preventDefault();\n\n    if (!matsParamUtils.getValueForParamName('label')) {\n      setError('Label cannot be blank');\n      return;\n    }\n\n    var isScatter = matsPlotUtils.getPlotType() === matsTypes.PlotTypes.scatter2d;\n    var isMap = matsPlotUtils.getPlotType() === matsTypes.PlotTypes.map;\n    var isReliability = matsPlotUtils.getPlotType() === matsTypes.PlotTypes.reliability;\n    var isContour = matsPlotUtils.getPlotType() === matsTypes.PlotTypes.contour;\n    var isContourDiff = matsPlotUtils.getPlotType() === matsTypes.PlotTypes.contourDiff;\n    var curves = Session.get('Curves');\n    var p = {};\n    var elems = event.target.valueOf().elements;\n    var curveParams = matsCollections.CurveParams.find({}, {\n      fields: {\n        name: 1\n      }\n    }).fetch();\n\n    var curveNames = _.pluck(curveParams, \"name\"); // remove any hidden params or unused ones\n    // iterate backwards so that we can splice to remove\n\n\n    for (var cindex = curveNames.length - 1; cindex >= 0; cindex--) {\n      var cname = curveNames[cindex];\n      var ctlElem = document.getElementById(cname + \"-item\");\n      var isHidden = matsParamUtils.getInputElementForParamName(cname) && matsParamUtils.getInputElementForParamName(cname).style && matsParamUtils.getInputElementForParamName(cname).style.display === 'none' || ctlElem && ctlElem.style && ctlElem.style.display === 'none';\n      var isUnused = matsParamUtils.getInputElementForParamName(cname) !== undefined && matsParamUtils.getValueForParamName(cname) == matsTypes.InputTypes.unused;\n\n      if (isHidden || isUnused) {\n        //if (isHidden) {\n        curveNames.splice(cindex, 1);\n      }\n    }\n\n    var dateParams = matsCollections.CurveParams.find({\n      type: matsTypes.InputTypes.dateRange\n    }, {\n      fields: {\n        name: 1\n      }\n    }).fetch();\n\n    var dateParamNames = _.pluck(dateParams, \"name\"); // remove any hidden date params or unused ones\n    // iterate backwards so that we can splice to remove\n    // dates are a little different - there is no element named paramName-paramtype because of the way daterange widgets are attached\n    // Instead we have to look for a document element with an id element-paramName\n\n\n    for (var dindex = dateParamNames.length - 1; dindex >= 0; dindex--) {\n      var dElem = document.getElementById(dateParamNames[dindex] + \"-item\");\n\n      if (dElem && dElem.style && dElem.style.display === 'none') {\n        dateParamNames.splice(dindex, 1);\n      }\n    }\n\n    if (isScatter) {\n      var scatterCurveNames = [];\n\n      for (var i = 0; i < curveNames.length; i++) {\n        scatterCurveNames.push(curveNames[i]);\n        scatterCurveNames.push(\"xaxis-\" + curveNames[i]);\n        scatterCurveNames.push(\"yaxis-\" + curveNames[i]);\n      }\n\n      curveNames = scatterCurveNames;\n    }\n\n    var paramElems = _.filter(elems, function (elem) {\n      return _.contains(curveNames, elem.name);\n    }); // add in any date params (they aren't technically elements)\n\n\n    paramElems.push.apply(paramElems, dateParamNames); // add in the scatter2d parameters if it is a scatter plot.\n\n    if (isScatter) {\n      $(\":input[id^='Fit-Type']:input[name*='Fit-Type']\").each(function () {\n        paramElems.push(this);\n      });\n    }\n\n    var l = paramElems.length;\n\n    if (Session.get('editMode')) {\n      var changingCurveLabel = Session.get('editMode');\n      Session.set('editMode', '');\n      Session.set(\"paramWellColor\", \"rgb(245,245,245)\");\n      var labelId = 'label-' + matsTypes.InputTypes.textInput;\n      var label = document.getElementById(labelId);\n      label.disabled = false;\n\n      for (var i = 0; i < l; i++) {\n        if (paramElems[i].name == \"label\") {\n          p[paramElems[i].name] = changingCurveLabel; // don't change the label when editing a curve\n\n          continue;\n        }\n\n        if (paramElems[i] instanceof Element === false) {\n          // isn't really an element - must be a date field - these are only strings\n          p[paramElems[i]] = matsParamUtils.getValueForParamName(paramElems[i]);\n        } else if (paramElems[i].type === \"select-multiple\") {\n          // define a p value if it doesn't exist (necessary for adding truth values)\n          p[paramElems[i].name] = p[paramElems[i].name] === undefined ? \"\" : p[paramElems[i].name];\n          p[paramElems[i].name] = $(paramElems[i].selectedOptions).map(function () {\n            return this.value;\n          }).get();\n        } else {\n          if (paramElems[i].type === \"radio\") {\n            if (paramElems[i].checked) {\n              p[paramElems[i].name] = paramElems[i].value;\n            }\n          } else if (paramElems[i].type === \"checkbox\") {\n            if (paramElems[i].checked) {\n              p[paramElems[i].name].push(paramElems[i].value);\n            }\n          } else if (paramElems[i].type === \"button\") {\n            p[paramElems[i].id] = paramElems[i].value;\n          } else {\n            p[paramElems[i].name] = paramElems[i].value;\n          }\n        }\n      }\n\n      var index = -1;\n\n      for (var i = 0; i < curves.length; i++) {\n        if (curves[i].label === p.label) {\n          index = i;\n          p.color = curves[i].color;\n        }\n      }\n\n      if (index != -1) {\n        if (isScatter) {\n          // copy the params to the current axis paremeters\n          var axis = Session.get('axis');\n          var axisParams = Object.keys(p).filter(function (key) {\n            return key.startsWith(axis);\n          });\n\n          for (var api = 0; api < axisParams.length; api++) {\n            var ap = axisParams[api];\n            var pp = ap.replace(axis + '-', '');\n            p[ap] = p[pp];\n            curves[index][ap] = p[pp];\n          }\n\n          curves[index]['Fit-Type'] = p['Fit-Type'];\n        } else {\n          curves[index] = p;\n        }\n      }\n    } else {\n      if (isMap && curves.length >= 1) {\n        setError(new Error('ERROR: Map plot-type can only have one curve!'));\n        return false;\n      } else if (isContour && curves.length >= 1) {\n        setError(new Error('ERROR: Contour plot-type can only have one curve!'));\n        return false;\n      } else if (isContourDiff && curves.length >= 2) {\n        setError(new Error('ERROR: Contour Diff plot-type can only have two curves!'));\n        return false;\n      } else if (isReliability && curves.length >= 1) {\n        setError(new Error('ERROR: Reliability plot-type can only have one curve right now!'));\n        return false;\n      } else {\n        for (var i = 0; i < l; i++) {\n          if (paramElems[i] instanceof Element === false) {\n            // isn't really an element - must be a date field - these are only strings\n            p[paramElems[i]] = matsParamUtils.getValueForParamName(paramElems[i]);\n          } else if (paramElems[i].type === \"select-multiple\") {\n            p[paramElems[i].name] = $(paramElems[i].selectedOptions).map(function () {\n              return this.value;\n            }).get();\n          } else {\n            if (paramElems[i].type === \"radio\") {\n              if (paramElems[i].checked) {\n                p[paramElems[i].name] = paramElems[i].value;\n              }\n            } else if (paramElems[i].type === \"checkbox\") {\n              if (paramElems[i].checked) {\n                if (p[paramElems[i].name] === undefined) {\n                  p[paramElems[i].name] = [];\n                }\n\n                p[paramElems[i].name].push(paramElems[i].value);\n              }\n            } else if (paramElems[i].type === \"button\") {\n              p[paramElems[i].id] = paramElems[i].value;\n            } else {\n              if (isScatter) {\n                p[paramElems[i].name] = paramElems[i].value;\n              } else {\n                p[paramElems[i].name] = matsParamUtils.getValueForParamName(paramElems[i].name);\n              }\n            }\n          }\n\n          if (paramElems[i].name && paramElems[i].name === 'label') {\n            if (_.indexOf(matsCurveUtils.getUsedLabels(), paramElems[i].value) != -1) {\n              setError(new Error('labels need to be unique - change ' + paramElems[i].value + \" to something else\"));\n              return false;\n            }\n          }\n        }\n      }\n\n      p.color = matsCurveUtils.getNextCurveColor();\n      curves.push(p);\n      var elem = document.getElementById(\"curveList\");\n      elem.style.display = \"block\";\n    }\n\n    Session.set('Curves', curves);\n    matsCurveUtils.setUsedColorsAndLabels(); // we have used a color and label so we have to set the next one\n\n    matsCurveUtils.checkDiffs();\n    matsParamUtils.collapseParams();\n    matsParamUtils.setInputForParamName('label', matsCurveUtils.getNextCurveLabel());\n    return false;\n  }\n});\nTemplate.paramList.onRendered(function () {\n  Session.set('displayPriority', 1);\n  Session.set('editMode', ''); //hide sites and sitesMap selectors for anything that isn't a map plot or wfip2\n\n  var elem;\n  var ptype = matsPlotUtils.getPlotType();\n  elem = document.getElementById('sites-item');\n  var sitesParamHidden;\n\n  if (elem && elem.style) {\n    sitesParamHidden = matsCollections.CurveParams.findOne({\n      name: 'sites'\n    }).hiddenForPlotTypes;\n\n    if (sitesParamHidden) {\n      if (sitesParamHidden.indexOf(ptype) === -1) {\n        elem.style.display = \"block\";\n      } else {\n        elem.style.display = \"none\";\n      }\n    }\n  }\n\n  elem = document.getElementById('sitesMap-item');\n\n  if (elem && elem.style) {\n    sitesParamHidden = matsCollections.CurveParams.findOne({\n      name: 'sitesMap'\n    }).hiddenForPlotTypes;\n\n    if (sitesParamHidden) {\n      if (sitesParamHidden.indexOf(ptype) === -1) {\n        elem.style.display = \"block\";\n      } else {\n        elem.style.display = \"none\";\n      }\n    }\n  }\n});","map":{"version":3,"sources":["packages/randyp:mats-common/templates/params/param_list.js"],"names":["matsTypes","module","link","v","matsCollections","matsCurveUtils","matsPlotUtils","matsParamUtils","matsMethods","shadeRGBColor","color","percent","f","split","t","p","R","parseInt","slice","G","B","Math","round","Template","paramList","helpers","CurveParamGroups","lastUpdate","Session","get","groupNums","params","CurveParams","find","fetch","i","length","push","displayGroup","res","_","uniq","sort","isEdit","log","console","paramWellColor","undefined","set","curveBeingEdited","$","grep","c","label","lighterShadeOfColor","events","labelId","InputTypes","textInput","document","getElementById","disabled","setInputForParamName","getNextCurveLabel","collapseParams","event","template","plotType","val","preventDefault","paramView","plotView","checked","refreshMetaData","call","error","result","setError","Error","message","setAllParamsToDefault","expandParams","click","getValueForParamName","isScatter","getPlotType","PlotTypes","scatter2d","isMap","map","isReliability","reliability","isContour","contour","isContourDiff","contourDiff","curves","elems","target","valueOf","elements","curveParams","fields","name","curveNames","pluck","cindex","cname","ctlElem","isHidden","getInputElementForParamName","style","display","isUnused","unused","splice","dateParams","type","dateRange","dateParamNames","dindex","dElem","scatterCurveNames","paramElems","filter","elem","contains","apply","each","l","changingCurveLabel","Element","selectedOptions","value","id","index","axis","axisParams","Object","keys","key","startsWith","api","ap","pp","replace","indexOf","getUsedLabels","getNextCurveColor","setUsedColorsAndLabels","checkDiffs","onRendered","ptype","sitesParamHidden","findOne","hiddenForPlotTypes"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2019 Colorado State University and Regents of the University of Colorado. All rights reserved.\n */\n\nimport {matsTypes} from 'meteor/randyp:mats-common';\nimport {matsCollections} from 'meteor/randyp:mats-common';\nimport {matsCurveUtils} from 'meteor/randyp:mats-common';\nimport {matsPlotUtils} from 'meteor/randyp:mats-common';\nimport {matsParamUtils} from 'meteor/randyp:mats-common';\nimport {matsMethods} from 'meteor/randyp:mats-common';\n\nfunction shadeRGBColor(color, percent) {\n    var f = color.split(\",\"), t = percent < 0 ? 0 : 255, p = percent < 0 ? percent * -1 : percent,\n        R = parseInt(f[0].slice(4)), G = parseInt(f[1]), B = parseInt(f[2]);\n    return \"rgb(\" + (Math.round((t - R) * p) + R) + \",\" + (Math.round((t - G) * p) + G) + \",\" + (Math.round((t - B) * p) + B) + \")\";\n}\n\nTemplate.paramList.helpers({\n    CurveParamGroups: function () {\n        var lastUpdate = Session.get('lastUpdate');\n        var groupNums = [];\n        var params = matsCollections.CurveParams.find({}).fetch();\n        for (var i = 0; i < params.length; i++) {\n            groupNums.push(params[i].displayGroup);\n        }\n        var res = _.uniq(groupNums).sort();\n        return res;\n    },\n    isEdit: function () {\n        return Session.get('editMode') != '';\n    },\n    log: function () {\n        console.log(this);\n    },\n    paramWellColor: function () {\n        if (Session.get(\"paramWellColor\") === undefined) {\n            Session.set(\"paramWellColor\", \"rgb(245,245,245)\");\n        }\n        if (Session.get(\"editMode\") !== \"\") {\n            const curveBeingEdited = $.grep(Session.get(\"Curves\"), function (c) {\n                return c.label == Session.get(\"editMode\");\n            });\n            if (curveBeingEdited === undefined || curveBeingEdited[0] === undefined) {\n                Session.set(\"paramWellColor\", \"rgb(245,245,245)\");\n                return \"rgb(245,245,245)\";\n            }\n            const color = curveBeingEdited[0].color;\n            const lighterShadeOfColor = shadeRGBColor(color, 0.2);\n            Session.set(\"paramWellColor\", lighterShadeOfColor);\n        }\n\n        return Session.get(\"paramWellColor\");\n    }\n});\n\nTemplate.paramList.events({\n    'click .edit-cancel': function () {\n        Session.set('editMode', '');\n        Session.set(\"paramWellColor\", \"rgb(245,245,245)\");\n        var labelId = 'label-' + matsTypes.InputTypes.textInput;\n        var label = document.getElementById(labelId);\n        label.disabled = false;\n        // reset parameters to match edited curve.....\n        matsParamUtils.setInputForParamName('label', matsCurveUtils.getNextCurveLabel());\n        matsParamUtils.collapseParams();\n    },\n    'click .reset': function (event, template) {\n        const plotType = $('input[name=plot-type]:checked').val();\n        event.preventDefault();\n        Session.set(\"paramWellColor\", \"rgb(245,245,245)\");\n        var paramView = document.getElementById('paramList');\n        var plotView = document.getElementById('plotList');\n        document.getElementById('plot-type-' + plotType).checked = true;\n        matsMethods.refreshMetaData.call({}, function (error, result) {\n            if (error !== undefined) {\n                setError(new Error(error.message));\n            }\n            matsParamUtils.setAllParamsToDefault();\n        });\n    },\n    'click .expand': function () {\n        matsParamUtils.expandParams();\n    },\n    'click .collapse': function () {\n        matsParamUtils.collapseParams();\n    },\n    // restore settings\n    'click .restore-settings': function (event) {\n        Session.set(\"paramWellColor\", \"rgb(245,245,245)\");\n        event.preventDefault();\n        document.getElementById(\"restore-settings\").click();\n        return false;\n    },\n    // add curve\n    // save changes\n    /*\n        Note: when adding a curve or saving changes after editing a curve there is a special\n        case for scatter plots. Each hidden axis parameter must get set with the value from the regular parameter.\n     */\n    'submit form': function (event, template) {\n        event.preventDefault();\n        if (!matsParamUtils.getValueForParamName('label')) {\n            setError('Label cannot be blank');\n            return;\n        }\n        var isScatter = matsPlotUtils.getPlotType() === matsTypes.PlotTypes.scatter2d;\n        var isMap = matsPlotUtils.getPlotType() === matsTypes.PlotTypes.map;\n        var isReliability = matsPlotUtils.getPlotType() === matsTypes.PlotTypes.reliability;\n        var isContour = matsPlotUtils.getPlotType() === matsTypes.PlotTypes.contour;\n        var isContourDiff = matsPlotUtils.getPlotType() === matsTypes.PlotTypes.contourDiff;\n        var curves = Session.get('Curves');\n        var p = {};\n        var elems = event.target.valueOf().elements;\n        var curveParams = matsCollections.CurveParams.find({}, {fields: {name: 1}}).fetch();\n        var curveNames = _.pluck(curveParams, \"name\");\n        // remove any hidden params or unused ones\n        // iterate backwards so that we can splice to remove\n        for (var cindex = curveNames.length - 1; cindex >= 0; cindex--) {\n            var cname = curveNames[cindex];\n            var ctlElem = document.getElementById(cname + \"-item\");\n            var isHidden = (matsParamUtils.getInputElementForParamName(cname) &&\n                matsParamUtils.getInputElementForParamName(cname).style &&\n                matsParamUtils.getInputElementForParamName(cname).style.display === 'none') ||\n                (ctlElem && ctlElem.style && ctlElem.style.display === 'none');\n            var isUnused = matsParamUtils.getInputElementForParamName(cname) !== undefined &&\n                matsParamUtils.getValueForParamName(cname) == matsTypes.InputTypes.unused;\n            if (isHidden || isUnused) {\n                //if (isHidden) {\n                curveNames.splice(cindex, 1);\n            }\n        }\n\n        var dateParams = matsCollections.CurveParams.find({type: matsTypes.InputTypes.dateRange}, {fields: {name: 1}}).fetch();\n        var dateParamNames = _.pluck(dateParams, \"name\");\n        // remove any hidden date params or unused ones\n        // iterate backwards so that we can splice to remove\n        // dates are a little different - there is no element named paramName-paramtype because of the way daterange widgets are attached\n        // Instead we have to look for a document element with an id element-paramName\n        for (var dindex = dateParamNames.length - 1; dindex >= 0; dindex--) {\n            var dElem = document.getElementById(dateParamNames[dindex] + \"-item\");\n            if (dElem && dElem.style && dElem.style.display === 'none') {\n                dateParamNames.splice(dindex, 1);\n            }\n        }\n        if (isScatter) {\n            var scatterCurveNames = [];\n            for (var i = 0; i < curveNames.length; i++) {\n                scatterCurveNames.push(curveNames[i]);\n                scatterCurveNames.push(\"xaxis-\" + curveNames[i]);\n                scatterCurveNames.push(\"yaxis-\" + curveNames[i]);\n            }\n            curveNames = scatterCurveNames;\n        }\n        var paramElems = _.filter(elems, function (elem) {\n            return _.contains(curveNames, elem.name);\n        });\n        // add in any date params (they aren't technically elements)\n        paramElems.push.apply(paramElems, dateParamNames);\n        // add in the scatter2d parameters if it is a scatter plot.\n        if (isScatter) {\n            $(\":input[id^='Fit-Type']:input[name*='Fit-Type']\").each(function () {\n                paramElems.push(this);\n            });\n        }\n        var l = paramElems.length;\n        if (Session.get('editMode')) {\n            var changingCurveLabel = Session.get('editMode');\n            Session.set('editMode', '');\n            Session.set(\"paramWellColor\", \"rgb(245,245,245)\");\n            var labelId = 'label-' + matsTypes.InputTypes.textInput;\n            var label = document.getElementById(labelId);\n            label.disabled = false;\n\n            for (var i = 0; i < l; i++) {\n                if (paramElems[i].name == \"label\") {\n                    p[paramElems[i].name] = changingCurveLabel;  // don't change the label when editing a curve\n                    continue;\n                }\n                if ((paramElems[i] instanceof Element) === false) { // isn't really an element - must be a date field - these are only strings\n                    p[paramElems[i]] = matsParamUtils.getValueForParamName(paramElems[i]);\n                } else if (paramElems[i].type === \"select-multiple\") {\n                    // define a p value if it doesn't exist (necessary for adding truth values)\n                    p[paramElems[i].name] = (p[paramElems[i].name] === undefined) ? \"\" : p[paramElems[i].name];\n                    p[paramElems[i].name] = $(paramElems[i].selectedOptions).map(function () {\n                        return (this.value)\n                    }).get();\n                } else {\n                    if (paramElems[i].type === \"radio\") {\n                        if (paramElems[i].checked) {\n                            p[paramElems[i].name] = paramElems[i].value;\n                        }\n                    } else if (paramElems[i].type === \"checkbox\") {\n                        if (paramElems[i].checked) {\n                            p[paramElems[i].name].push(paramElems[i].value);\n                        }\n                    } else if (paramElems[i].type === \"button\") {\n                        p[paramElems[i].id] = paramElems[i].value;\n                    } else {\n                        p[paramElems[i].name] = (paramElems[i]).value;\n                    }\n                }\n            }\n            var index = -1;\n            for (var i = 0; i < curves.length; i++) {\n                if (curves[i].label === p.label) {\n                    index = i;\n                    p.color = curves[i].color;\n                }\n            }\n            if (index != -1) {\n                if (isScatter) {\n                    // copy the params to the current axis paremeters\n                    var axis = Session.get('axis');\n                    var axisParams = (Object.keys(p)).filter(function (key) {\n                        return key.startsWith(axis)\n                    });\n                    for (var api = 0; api < axisParams.length; api++) {\n                        var ap = axisParams[api];\n                        var pp = ap.replace(axis + '-', '');\n                        p[ap] = p[pp];\n                        curves[index][ap] = p[pp];\n                    }\n                    curves[index]['Fit-Type'] = p['Fit-Type'];\n                } else {\n                    curves[index] = p;\n                }\n            }\n        } else {\n            if (isMap && curves.length >= 1) {\n                setError(new Error('ERROR: Map plot-type can only have one curve!'));\n                return false;\n            } else if (isContour && curves.length >= 1) {\n                setError(new Error('ERROR: Contour plot-type can only have one curve!'));\n                return false;\n            } else if (isContourDiff && curves.length >= 2) {\n                setError(new Error('ERROR: Contour Diff plot-type can only have two curves!'));\n                return false;\n            } else if (isReliability && curves.length >= 1) {\n                setError(new Error('ERROR: Reliability plot-type can only have one curve right now!'));\n                return false;\n            } else {\n                for (var i = 0; i < l; i++) {\n                    if ((paramElems[i] instanceof Element) === false) { // isn't really an element - must be a date field - these are only strings\n                        p[paramElems[i]] = matsParamUtils.getValueForParamName(paramElems[i]);\n                    } else if (paramElems[i].type === \"select-multiple\") {\n                        p[paramElems[i].name] = $(paramElems[i].selectedOptions).map(function () {\n                            return (this.value)\n                        }).get();\n                    } else {\n                        if (paramElems[i].type === \"radio\") {\n                            if (paramElems[i].checked) {\n                                p[paramElems[i].name] = paramElems[i].value;\n                            }\n                        } else if (paramElems[i].type === \"checkbox\") {\n                            if (paramElems[i].checked) {\n                                if (p[paramElems[i].name] === undefined) {\n                                    p[paramElems[i].name] = [];\n                                }\n                                p[paramElems[i].name].push(paramElems[i].value);\n                            }\n                        } else if (paramElems[i].type === \"button\") {\n                            p[paramElems[i].id] = paramElems[i].value;\n                        } else {\n                            if (isScatter) {\n                                p[paramElems[i].name] = (paramElems[i]).value;\n                            } else {\n                                p[paramElems[i].name] = matsParamUtils.getValueForParamName(paramElems[i].name)\n                            }\n                        }\n                    }\n                    if (paramElems[i].name && paramElems[i].name === 'label') {\n                        if (_.indexOf(matsCurveUtils.getUsedLabels(), (paramElems[i]).value) != -1) {\n                            setError(new Error('labels need to be unique - change ' + (paramElems[i]).value + \" to something else\"));\n                            return false;\n                        }\n                    }\n                }\n            }\n            p.color = matsCurveUtils.getNextCurveColor();\n            curves.push(p);\n            var elem = document.getElementById(\"curveList\");\n            elem.style.display = \"block\";\n        }\n\n        Session.set('Curves', curves);\n        matsCurveUtils.setUsedColorsAndLabels(); // we have used a color and label so we have to set the next one\n        matsCurveUtils.checkDiffs();\n        matsParamUtils.collapseParams();\n        matsParamUtils.setInputForParamName('label', matsCurveUtils.getNextCurveLabel());\n        return false;\n    }\n});\n\nTemplate.paramList.onRendered(function () {\n    Session.set('displayPriority', 1);\n    Session.set('editMode', '');\n\n    //hide sites and sitesMap selectors for anything that isn't a map plot or wfip2\n    var elem;\n    var ptype = matsPlotUtils.getPlotType();\n    elem = document.getElementById('sites-item');\n    var sitesParamHidden;\n    if (elem && elem.style) {\n        sitesParamHidden = matsCollections.CurveParams.findOne({name: 'sites'}).hiddenForPlotTypes;\n        if (sitesParamHidden) {\n            if (sitesParamHidden.indexOf(ptype) === -1) {\n                elem.style.display = \"block\";\n            } else {\n                elem.style.display = \"none\";\n            }\n        }\n    }\n    elem = document.getElementById('sitesMap-item');\n    if (elem && elem.style) {\n        sitesParamHidden = matsCollections.CurveParams.findOne({name: 'sitesMap'}).hiddenForPlotTypes;\n        if (sitesParamHidden) {\n            if (sitesParamHidden.indexOf(ptype) === -1) {\n                elem.style.display = \"block\";\n            } else {\n                elem.style.display = \"none\";\n            }\n        }\n    }\n});"]},"sourceType":"script","hash":"dcc9f66f5269e643ea97e3cade9e0a5228242c85"}
