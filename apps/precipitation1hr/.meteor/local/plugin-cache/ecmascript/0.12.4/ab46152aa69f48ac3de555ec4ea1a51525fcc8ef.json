{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/templates/plotType/plot_type.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/randyp:mats-common/templates/plotType/plot_type.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/templates/plotType/plot_type.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/templates/plotType/plot_type.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/randyp:mats-common/templates/plotType/plot_type.js"}},"code":"var matsTypes;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsTypes: function (v) {\n    matsTypes = v;\n  }\n}, 0);\nvar matsCollections;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsCollections: function (v) {\n    matsCollections = v;\n  }\n}, 1);\nvar matsCurveUtils;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsCurveUtils: function (v) {\n    matsCurveUtils = v;\n  }\n}, 2);\nvar matsParamUtils;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsParamUtils: function (v) {\n    matsParamUtils = v;\n  }\n}, 3);\nTemplate.plotType.helpers({\n  plotTypes: function () {\n    return matsCollections.PlotGraphFunctions.find({}).fetch();\n  },\n  title: function () {\n    if (matsCollections.Settings === undefined || matsCollections.Settings.findOne({}, {\n      fields: {\n        Title: 1\n      }\n    }) === undefined) {\n      return \"\";\n    } else {\n      return matsCollections.Settings.findOne({}, {\n        fields: {\n          Title: 1\n        }\n      }).Title;\n    }\n  },\n  display: function () {\n    // don't display the choice if there is only one choice\n    if (matsCollections.PlotGraphFunctions.find({}).fetch().length === 1) {\n      return \"hidden\";\n    } else {\n      return \"\";\n    }\n  }\n});\nTemplate.plotType.events({\n  'click .plot-type-TimeSeries': function (event) {\n    if (Session.get(\"confirmPlotChange\")) {\n      // change has been confirmed\n      // see if the previous plot type also used the 'dates' parameter\n      var oldDatesExist = matsParamUtils.isParamVisible('dates');\n      matsCurveUtils.showTimeseriesFace();\n      var curves = Session.get('Curves'); // if a 'dates' parameter was already in use, we want to keep that value.\n      // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n\n      if (!oldDatesExist) {\n        var curveDate = $('#controlButton-curve-dates-value').text();\n        matsParamUtils.setValueTextForParamName('dates', curveDate);\n      }\n\n      if (curves.length > 0) {\n        // initialize parameters that may not have been used yet\n        for (var ci = 0; ci < curves.length; ci++) {\n          // the average may not have been carried over from other curve types so let it default\n          if (!curves[ci]['average'] && matsCollections.CurveParams.findOne({\n            name: 'average'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'average'\n          }).default) {\n            curves[ci]['average'] = matsCollections.CurveParams.findOne({\n              name: 'average'\n            }).default;\n          }\n\n          if (!curves[ci]['valid-time'] && matsCollections.CurveParams.findOne({\n            name: 'valid-time'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'valid-time'\n          }).default) {\n            curves[ci]['valid-time'] = matsCollections.CurveParams.findOne({\n              name: 'valid-time'\n            }).default;\n          }\n\n          if (!curves[ci]['threshold'] && matsCollections.CurveParams.findOne({\n            name: 'threshold'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'threshold'\n          }).default) {\n            curves[ci]['threshold'] = matsCollections.CurveParams.findOne({\n              name: 'threshold'\n            }).default;\n          }\n\n          if (!curves[ci]['forecast-length'] && matsCollections.CurveParams.findOne({\n            name: 'forecast-length'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'forecast-length'\n          }).default) {\n            curves[ci]['forecast-length'] = matsCollections.CurveParams.findOne({\n              name: 'forecast-length'\n            }).default;\n          }\n\n          if (!curves[ci]['region'] && matsCollections.CurveParams.findOne({\n            name: 'region'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'region'\n          }).default) {\n            curves[ci]['region'] = matsCollections.CurveParams.findOne({\n              name: 'region'\n            }).default;\n          }\n\n          if (!curves[ci]['statistic'] && matsCollections.CurveParams.findOne({\n            name: 'statistic'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'statistic'\n          }).default) {\n            curves[ci]['statistic'] = matsCollections.CurveParams.findOne({\n              name: 'statistic'\n            }).default;\n          }\n\n          if (!curves[ci]['truth'] && matsCollections.CurveParams.findOne({\n            name: 'truth'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'truth'\n          }).default) {\n            curves[ci]['truth'] = matsCollections.CurveParams.findOne({\n              name: 'truth'\n            }).default;\n          }\n        }\n\n        Session.set('Curves', curves);\n      }\n\n      Session.set(\"confirmPlotChange\", \"\");\n      Session.set('plotChangeType', \"\");\n    } else {\n      // no confirmation yet so check to see if we have any curves and if so then show the confirm dialog\n      if (Session.get(\"Curves\").length > 0) {\n        Session.set('plotChangeType', matsTypes.PlotTypes.timeSeries);\n        $(\"#modal-change-plot-type\").modal();\n      } else {\n        // no curves - just set the timeseries face\n        // see if the previous plot type also used the 'dates' parameter\n        var _oldDatesExist = matsParamUtils.isParamVisible('dates');\n\n        matsCurveUtils.showTimeseriesFace(); // if a 'dates' parameter was already in use, we want to keep that value.\n        // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n\n        if (!_oldDatesExist) {\n          var _curveDate = $('#controlButton-curve-dates-value').text();\n\n          matsParamUtils.setValueTextForParamName('dates', _curveDate);\n        }\n      }\n    }\n  },\n  'click .plot-type-Profile': function (event) {\n    if (Session.get(\"confirmPlotChange\")) {\n      // change has been confirmed\n      // see if the previous plot type also used the 'curve-dates' parameter\n      var oldCurveDatesExist = matsParamUtils.isParamVisible('curve-dates');\n      matsCurveUtils.showProfileFace();\n      var curves = Session.get('Curves'); // if a 'curve-dates' parameter was already in use, we want to keep that value.\n      // otherwise, set the 'curve-dates' parameter to whatever 'dates' was set to.\n\n      var tsDate = $('#controlButton-dates-value').text();\n\n      if (!oldCurveDatesExist) {\n        matsParamUtils.setValueTextForParamName('curve-dates', tsDate);\n      }\n\n      if (curves.length > 0) {\n        // initialize parameters that may not have been used yet\n        for (var ci = 0; ci < curves.length; ci++) {\n          if (tsDate !== undefined && tsDate !== \"\" && !oldCurveDatesExist) {\n            curves[ci]['curve-dates'] = tsDate;\n          }\n\n          if (!curves[ci]['valid-time'] && matsCollections.CurveParams.findOne({\n            name: 'valid-time'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'valid-time'\n          }).default) {\n            curves[ci]['valid-time'] = matsCollections.CurveParams.findOne({\n              name: 'valid-time'\n            }).default;\n          }\n\n          if (!curves[ci]['threshold'] && matsCollections.CurveParams.findOne({\n            name: 'threshold'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'threshold'\n          }).default) {\n            curves[ci]['threshold'] = matsCollections.CurveParams.findOne({\n              name: 'threshold'\n            }).default;\n          }\n\n          if (!curves[ci]['forecast-length'] && matsCollections.CurveParams.findOne({\n            name: 'forecast-length'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'forecast-length'\n          }).default) {\n            curves[ci]['forecast-length'] = matsCollections.CurveParams.findOne({\n              name: 'forecast-length'\n            }).default;\n          }\n\n          if (!curves[ci]['region'] && matsCollections.CurveParams.findOne({\n            name: 'region'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'region'\n          }).default) {\n            curves[ci]['region'] = matsCollections.CurveParams.findOne({\n              name: 'region'\n            }).default;\n          }\n\n          if (!curves[ci]['statistic'] && matsCollections.CurveParams.findOne({\n            name: 'statistic'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'statistic'\n          }).default) {\n            curves[ci]['statistic'] = matsCollections.CurveParams.findOne({\n              name: 'statistic'\n            }).default;\n          }\n\n          if (!curves[ci]['truth'] && matsCollections.CurveParams.findOne({\n            name: 'truth'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'truth'\n          }).default) {\n            curves[ci]['truth'] = matsCollections.CurveParams.findOne({\n              name: 'truth'\n            }).default;\n          }\n        }\n\n        Session.set('Curves', curves);\n      }\n\n      Session.set(\"confirmPlotChange\", \"\");\n      Session.set('plotChangeType', \"\");\n    } else {\n      // no confirmation yet so check to see if we have any curves and if so then show the confirm dialog\n      if (Session.get(\"Curves\").length > 0) {\n        Session.set('plotChangeType', matsTypes.PlotTypes.profile);\n        $(\"#modal-change-plot-type\").modal();\n      } else {\n        // no curves - just set the profile face\n        // see if the previous plot type also used the 'curve-dates' parameter\n        var _oldCurveDatesExist = matsParamUtils.isParamVisible('curve-dates');\n\n        matsCurveUtils.showProfileFace(); // if a 'curve-dates' parameter was already in use, we want to keep that value.\n        // otherwise, set the 'curve-dates' parameter to whatever 'dates' was set to.\n\n        if (!_oldCurveDatesExist) {\n          var _tsDate = $('#controlButton-dates-value').text();\n\n          matsParamUtils.setValueTextForParamName('curve-dates', _tsDate);\n        }\n      }\n    }\n  },\n  'click .plot-type-DieOff': function (event) {\n    if (Session.get(\"confirmPlotChange\")) {\n      // change has been confirmed\n      // see if the previous plot type also used the 'curve-dates' parameter\n      var oldCurveDatesExist = matsParamUtils.isParamVisible('curve-dates');\n      matsCurveUtils.showDieOffFace();\n      var curves = Session.get('Curves'); // if a 'curve-dates' parameter was already in use, we want to keep that value.\n      // otherwise, set the 'curve-dates' parameter to whatever 'dates' was set to.\n\n      var tsDate = $('#controlButton-dates-value').text();\n\n      if (!oldCurveDatesExist) {\n        matsParamUtils.setValueTextForParamName('curve-dates', tsDate);\n      }\n\n      if (curves.length > 0) {\n        // initialize parameters that may not have been used yet\n        for (var ci = 0; ci < curves.length; ci++) {\n          if (tsDate !== undefined && tsDate !== \"\" && !oldCurveDatesExist) {\n            curves[ci]['curve-dates'] = tsDate;\n          }\n\n          if (!curves[ci]['valid-time'] && matsCollections.CurveParams.findOne({\n            name: 'valid-time'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'valid-time'\n          }).default) {\n            curves[ci]['valid-time'] = matsCollections.CurveParams.findOne({\n              name: 'valid-time'\n            }).default;\n          }\n\n          if (!curves[ci]['threshold'] && matsCollections.CurveParams.findOne({\n            name: 'threshold'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'threshold'\n          }).default) {\n            curves[ci]['threshold'] = matsCollections.CurveParams.findOne({\n              name: 'threshold'\n            }).default;\n          }\n\n          if (!curves[ci]['dieoff-type'] && matsCollections.CurveParams.findOne({\n            name: 'dieoff-type'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'dieoff-type'\n          }).default) {\n            curves[ci]['dieoff-type'] = matsCollections.CurveParams.findOne({\n              name: 'dieoff-type'\n            }).default;\n          }\n\n          if (!curves[ci]['region'] && matsCollections.CurveParams.findOne({\n            name: 'region'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'region'\n          }).default) {\n            curves[ci]['region'] = matsCollections.CurveParams.findOne({\n              name: 'region'\n            }).default;\n          }\n\n          if (!curves[ci]['statistic'] && matsCollections.CurveParams.findOne({\n            name: 'statistic'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'statistic'\n          }).default) {\n            curves[ci]['statistic'] = matsCollections.CurveParams.findOne({\n              name: 'statistic'\n            }).default;\n          }\n\n          if (!curves[ci]['truth'] && matsCollections.CurveParams.findOne({\n            name: 'truth'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'truth'\n          }).default) {\n            curves[ci]['truth'] = matsCollections.CurveParams.findOne({\n              name: 'truth'\n            }).default;\n          }\n        }\n\n        Session.set('Curves', curves);\n      }\n\n      Session.set(\"confirmPlotChange\", \"\");\n      Session.set('plotChangeType', \"\");\n    } else {\n      // no confirmation yet so check to see if we have any curves and if so then show the confirm dialog\n      if (Session.get(\"Curves\").length > 0) {\n        Session.set('plotChangeType', matsTypes.PlotTypes.dieoff);\n        $(\"#modal-change-plot-type\").modal();\n      } else {\n        // no curves - just set the dieoff face\n        // see if the previous plot type also used the 'curve-dates' parameter\n        var _oldCurveDatesExist2 = matsParamUtils.isParamVisible('curve-dates');\n\n        matsCurveUtils.showDieOffFace(); // if a 'curve-dates' parameter was already in use, we want to keep that value.\n        // otherwise, set the 'curve-dates' parameter to whatever 'dates' was set to.\n\n        if (!_oldCurveDatesExist2) {\n          var _tsDate2 = $('#controlButton-dates-value').text();\n\n          matsParamUtils.setValueTextForParamName('curve-dates', _tsDate2);\n        }\n      }\n    }\n  },\n  'click .plot-type-Threshold': function (event) {\n    if (Session.get(\"confirmPlotChange\")) {\n      // change has been confirmed\n      // see if the previous plot type also used the 'curve-dates' parameter\n      var oldCurveDatesExist = matsParamUtils.isParamVisible('curve-dates');\n      matsCurveUtils.showThresholdFace();\n      var curves = Session.get('Curves'); // if a 'curve-dates' parameter was already in use, we want to keep that value.\n      // otherwise, set the 'curve-dates' parameter to whatever 'dates' was set to.\n\n      var tsDate = $('#controlButton-dates-value').text();\n\n      if (!oldCurveDatesExist) {\n        matsParamUtils.setValueTextForParamName('curve-dates', tsDate);\n      }\n\n      if (curves.length > 0) {\n        // initialize parameters that may not have been used yet\n        for (var ci = 0; ci < curves.length; ci++) {\n          if (tsDate !== undefined && tsDate !== \"\" && !oldCurveDatesExist) {\n            curves[ci]['curve-dates'] = tsDate;\n          }\n\n          if (!curves[ci]['valid-time'] && matsCollections.CurveParams.findOne({\n            name: 'valid-time'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'valid-time'\n          }).default) {\n            curves[ci]['valid-time'] = matsCollections.CurveParams.findOne({\n              name: 'valid-time'\n            }).default;\n          }\n\n          if (!curves[ci]['forecast-length'] && matsCollections.CurveParams.findOne({\n            name: 'forecast-length'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'forecast-length'\n          }).default) {\n            curves[ci]['forecast-length'] = matsCollections.CurveParams.findOne({\n              name: 'forecast-length'\n            }).default;\n          }\n\n          if (!curves[ci]['region'] && matsCollections.CurveParams.findOne({\n            name: 'region'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'region'\n          }).default) {\n            curves[ci]['region'] = matsCollections.CurveParams.findOne({\n              name: 'region'\n            }).default;\n          }\n\n          if (!curves[ci]['statistic'] && matsCollections.CurveParams.findOne({\n            name: 'statistic'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'statistic'\n          }).default) {\n            curves[ci]['statistic'] = matsCollections.CurveParams.findOne({\n              name: 'statistic'\n            }).default;\n          }\n\n          if (!curves[ci]['truth'] && matsCollections.CurveParams.findOne({\n            name: 'truth'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'truth'\n          }).default) {\n            curves[ci]['truth'] = matsCollections.CurveParams.findOne({\n              name: 'truth'\n            }).default;\n          }\n        }\n\n        Session.set('Curves', curves);\n      }\n\n      Session.set(\"confirmPlotChange\", \"\");\n      Session.set('plotChangeType', \"\");\n    } else {\n      // no confirmation yet so check to see if we have any curves and if so then show the confirm dialog\n      if (Session.get(\"Curves\").length > 0) {\n        Session.set('plotChangeType', matsTypes.PlotTypes.threshold);\n        $(\"#modal-change-plot-type\").modal();\n      } else {\n        // no curves - just set the threshold face\n        // see if the previous plot type also used the 'curve-dates' parameter\n        var _oldCurveDatesExist3 = matsParamUtils.isParamVisible('curve-dates');\n\n        matsCurveUtils.showThresholdFace(); // if a 'curve-dates' parameter was already in use, we want to keep that value.\n        // otherwise, set the 'curve-dates' parameter to whatever 'dates' was set to.\n\n        if (!_oldCurveDatesExist3) {\n          var _tsDate3 = $('#controlButton-dates-value').text();\n\n          matsParamUtils.setValueTextForParamName('curve-dates', _tsDate3);\n        }\n      }\n    }\n  },\n  'click .plot-type-ValidTime': function (event) {\n    if (Session.get(\"confirmPlotChange\")) {\n      // change has been confirmed\n      // see if the previous plot type also used the 'curve-dates' parameter\n      var oldCurveDatesExist = matsParamUtils.isParamVisible('curve-dates');\n      matsCurveUtils.showValidTimeFace();\n      var curves = Session.get('Curves'); // if a 'curve-dates' parameter was already in use, we want to keep that value.\n      // otherwise, set the 'curve-dates' parameter to whatever 'dates' was set to.\n\n      var tsDate = $('#controlButton-dates-value').text();\n\n      if (!oldCurveDatesExist) {\n        matsParamUtils.setValueTextForParamName('curve-dates', tsDate);\n      }\n\n      if (curves.length > 0) {\n        // initialize parameters that may not have been used yet\n        for (var ci = 0; ci < curves.length; ci++) {\n          if (tsDate !== undefined && tsDate !== \"\" && !oldCurveDatesExist) {\n            curves[ci]['curve-dates'] = tsDate;\n          }\n\n          if (!curves[ci]['threshold'] && matsCollections.CurveParams.findOne({\n            name: 'threshold'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'threshold'\n          }).default) {\n            curves[ci]['threshold'] = matsCollections.CurveParams.findOne({\n              name: 'threshold'\n            }).default;\n          }\n\n          if (!curves[ci]['forecast-length'] && matsCollections.CurveParams.findOne({\n            name: 'forecast-length'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'forecast-length'\n          }).default) {\n            curves[ci]['forecast-length'] = matsCollections.CurveParams.findOne({\n              name: 'forecast-length'\n            }).default;\n          }\n\n          if (!curves[ci]['region'] && matsCollections.CurveParams.findOne({\n            name: 'region'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'region'\n          }).default) {\n            curves[ci]['region'] = matsCollections.CurveParams.findOne({\n              name: 'region'\n            }).default;\n          }\n\n          if (!curves[ci]['statistic'] && matsCollections.CurveParams.findOne({\n            name: 'statistic'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'statistic'\n          }).default) {\n            curves[ci]['statistic'] = matsCollections.CurveParams.findOne({\n              name: 'statistic'\n            }).default;\n          }\n\n          if (!curves[ci]['truth'] && matsCollections.CurveParams.findOne({\n            name: 'truth'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'truth'\n          }).default) {\n            curves[ci]['truth'] = matsCollections.CurveParams.findOne({\n              name: 'truth'\n            }).default;\n          }\n        }\n\n        Session.set('Curves', curves);\n      }\n\n      Session.set(\"confirmPlotChange\", \"\");\n      Session.set('plotChangeType', \"\");\n    } else {\n      // no confirmation yet so check to see if we have any curves and if so then show the confirm dialog\n      if (Session.get(\"Curves\").length > 0) {\n        Session.set('plotChangeType', matsTypes.PlotTypes.validtime);\n        $(\"#modal-change-plot-type\").modal();\n      } else {\n        // no curves - just set the valid time face\n        // see if the previous plot type also used the 'curve-dates' parameter\n        var _oldCurveDatesExist4 = matsParamUtils.isParamVisible('curve-dates');\n\n        matsCurveUtils.showValidTimeFace(); // if a 'curve-dates' parameter was already in use, we want to keep that value.\n        // otherwise, set the 'curve-dates' parameter to whatever 'dates' was set to.\n\n        if (!_oldCurveDatesExist4) {\n          var _tsDate4 = $('#controlButton-dates-value').text();\n\n          matsParamUtils.setValueTextForParamName('curve-dates', _tsDate4);\n        }\n      }\n    }\n  },\n  'click .plot-type-DailyModelCycle': function (event) {\n    if (Session.get(\"confirmPlotChange\")) {\n      // change has been confirmed\n      // see if the previous plot type also used the 'dates' parameter\n      var oldDatesExist = matsParamUtils.isParamVisible('dates');\n      matsCurveUtils.showDailyModelCycleFace();\n      var curves = Session.get('Curves'); // if a 'dates' parameter was already in use, we want to keep that value.\n      // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n\n      if (!oldDatesExist) {\n        var curveDate = $('#controlButton-curve-dates-value').text();\n        matsParamUtils.setValueTextForParamName('dates', curveDate);\n      }\n\n      if (curves.length > 0) {\n        // initialize parameters that may not have been used yet\n        for (var ci = 0; ci < curves.length; ci++) {\n          if (!curves[ci]['threshold'] && matsCollections.CurveParams.findOne({\n            name: 'threshold'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'threshold'\n          }).default) {\n            curves[ci]['threshold'] = matsCollections.CurveParams.findOne({\n              name: 'threshold'\n            }).default;\n          }\n\n          if (!curves[ci]['utc-cycle-start'] && matsCollections.CurveParams.findOne({\n            name: 'utc-cycle-start'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'utc-cycle-start'\n          }).default) {\n            curves[ci]['utc-cycle-start'] = matsCollections.CurveParams.findOne({\n              name: 'utc-cycle-start'\n            }).default;\n          }\n\n          if (!curves[ci]['region'] && matsCollections.CurveParams.findOne({\n            name: 'region'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'region'\n          }).default) {\n            curves[ci]['region'] = matsCollections.CurveParams.findOne({\n              name: 'region'\n            }).default;\n          }\n\n          if (!curves[ci]['statistic'] && matsCollections.CurveParams.findOne({\n            name: 'statistic'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'statistic'\n          }).default) {\n            curves[ci]['statistic'] = matsCollections.CurveParams.findOne({\n              name: 'statistic'\n            }).default;\n          }\n\n          if (!curves[ci]['truth'] && matsCollections.CurveParams.findOne({\n            name: 'truth'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'truth'\n          }).default) {\n            curves[ci]['truth'] = matsCollections.CurveParams.findOne({\n              name: 'truth'\n            }).default;\n          }\n        }\n\n        Session.set('Curves', curves);\n      }\n\n      Session.set(\"confirmPlotChange\", \"\");\n      Session.set('plotChangeType', \"\");\n    } else {\n      // no confirmation yet so check to see if we have any curves and if so then show the confirm dialog\n      if (Session.get(\"Curves\").length > 0) {\n        Session.set('plotChangeType', matsTypes.PlotTypes.dailyModelCycle);\n        $(\"#modal-change-plot-type\").modal();\n      } else {\n        // no curves - just set the daily model cycle face\n        // see if the previous plot type also used the 'dates' parameter\n        var _oldDatesExist2 = matsParamUtils.isParamVisible('dates');\n\n        matsCurveUtils.showDailyModelCycleFace(); // if a 'dates' parameter was already in use, we want to keep that value.\n        // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n\n        if (!_oldDatesExist2) {\n          var _curveDate2 = $('#controlButton-curve-dates-value').text();\n\n          matsParamUtils.setValueTextForParamName('dates', _curveDate2);\n        }\n      }\n    }\n  },\n  'click .plot-type-Reliability': function (event) {\n    if (Session.get(\"confirmPlotChange\")) {\n      // change has been confirmed\n      // see if the previous plot type also used the 'dates' parameter\n      var oldDatesExist = matsParamUtils.isParamVisible('dates');\n      matsCurveUtils.showReliabilityFace();\n      var curves = Session.get('Curves'); // if a 'dates' parameter was already in use, we want to keep that value.\n      // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n\n      if (!oldDatesExist) {\n        var curveDate = $('#controlButton-curve-dates-value').text();\n        matsParamUtils.setValueTextForParamName('dates', curveDate);\n      }\n\n      if (curves.length > 0) {\n        // initialize parameters that may not have been used yet\n        for (var ci = 0; ci < curves.length; ci++) {\n          // the average may not have been carried over from other curve types so let it default\n          if (!curves[ci]['average'] && matsCollections.CurveParams.findOne({\n            name: 'average'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'average'\n          }).default) {\n            curves[ci]['average'] = matsCollections.CurveParams.findOne({\n              name: 'average'\n            }).default;\n          }\n\n          if (!curves[ci]['valid-time'] && matsCollections.CurveParams.findOne({\n            name: 'valid-time'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'valid-time'\n          }).default) {\n            curves[ci]['valid-time'] = matsCollections.CurveParams.findOne({\n              name: 'valid-time'\n            }).default;\n          }\n\n          if (!curves[ci]['threshold'] && matsCollections.CurveParams.findOne({\n            name: 'threshold'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'threshold'\n          }).default) {\n            curves[ci]['threshold'] = matsCollections.CurveParams.findOne({\n              name: 'threshold'\n            }).default;\n          }\n\n          if (!curves[ci]['forecast-length'] && matsCollections.CurveParams.findOne({\n            name: 'forecast-length'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'forecast-length'\n          }).default) {\n            curves[ci]['forecast-length'] = matsCollections.CurveParams.findOne({\n              name: 'forecast-length'\n            }).default;\n          }\n\n          if (!curves[ci]['region'] && matsCollections.CurveParams.findOne({\n            name: 'region'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'region'\n          }).default) {\n            curves[ci]['region'] = matsCollections.CurveParams.findOne({\n              name: 'region'\n            }).default;\n          }\n\n          if (!curves[ci]['statistic'] && matsCollections.CurveParams.findOne({\n            name: 'statistic'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'statistic'\n          }).default) {\n            curves[ci]['statistic'] = matsCollections.CurveParams.findOne({\n              name: 'statistic'\n            }).default;\n          }\n\n          if (!curves[ci]['truth'] && matsCollections.CurveParams.findOne({\n            name: 'truth'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'truth'\n          }).default) {\n            curves[ci]['truth'] = matsCollections.CurveParams.findOne({\n              name: 'truth'\n            }).default;\n          }\n        }\n\n        Session.set('Curves', curves);\n      }\n\n      Session.set(\"confirmPlotChange\", \"\");\n      Session.set('plotChangeType', \"\");\n    } else {\n      // no confirmation yet so check to see if we have any curves and if so then show the confirm dialog\n      if (Session.get(\"Curves\").length > 0) {\n        Session.set('plotChangeType', matsTypes.PlotTypes.reliability);\n        $(\"#modal-change-plot-type\").modal();\n      } else {\n        // no curves - just set the reliability face\n        // see if the previous plot type also used the 'dates' parameter\n        var _oldDatesExist3 = matsParamUtils.isParamVisible('dates');\n\n        matsCurveUtils.showReliabilityFace(); // if a 'dates' parameter was already in use, we want to keep that value.\n        // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n\n        if (!_oldDatesExist3) {\n          var _curveDate3 = $('#controlButton-curve-dates-value').text();\n\n          matsParamUtils.setValueTextForParamName('dates', _curveDate3);\n        }\n      }\n    }\n  },\n  'click .plot-type-Map': function (event) {\n    if (Session.get(\"confirmPlotChange\")) {\n      // change has been confirmed\n      // see if the previous plot type also used the 'dates' parameter\n      var oldDatesExist = matsParamUtils.isParamVisible('dates');\n      matsCurveUtils.showMapFace();\n      var curves = Session.get('Curves'); // if a 'dates' parameter was already in use, we want to keep that value.\n      // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n\n      if (!oldDatesExist) {\n        var curveDate = $('#controlButton-curve-dates-value').text();\n        matsParamUtils.setValueTextForParamName('dates', curveDate);\n      }\n\n      if (curves.length > 0) {\n        // initialize parameters that may not have been used yet\n        for (var ci = 0; ci < curves.length; ci++) {\n          if (!curves[ci]['valid-time'] && matsCollections.CurveParams.findOne({\n            name: 'valid-time'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'valid-time'\n          }).default) {\n            curves[ci]['valid-time'] = matsCollections.CurveParams.findOne({\n              name: 'valid-time'\n            }).default;\n          }\n\n          if (!curves[ci]['forecast-length'] && matsCollections.CurveParams.findOne({\n            name: 'forecast-length'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'forecast-length'\n          }).default) {\n            curves[ci]['forecast-length'] = matsCollections.CurveParams.findOne({\n              name: 'forecast-length'\n            }).default;\n          }\n        }\n\n        Session.set('Curves', curves);\n      }\n\n      Session.set(\"confirmPlotChange\", \"\");\n      Session.set('plotChangeType', \"\");\n    } else {\n      // no confirmation yet so check to see if we have any curves and if so then show the confirm dialog\n      if (Session.get(\"Curves\").length > 0) {\n        Session.set('plotChangeType', matsTypes.PlotTypes.map);\n        $(\"#modal-change-plot-type\").modal();\n      } else {\n        // no curves - just set the map face\n        // see if the previous plot type also used the 'dates' parameter\n        var _oldDatesExist4 = matsParamUtils.isParamVisible('dates');\n\n        matsCurveUtils.showMapFace(); // if a 'dates' parameter was already in use, we want to keep that value.\n        // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n\n        if (!_oldDatesExist4) {\n          var _curveDate4 = $('#controlButton-curve-dates-value').text();\n\n          matsParamUtils.setValueTextForParamName('dates', _curveDate4);\n        }\n      }\n    }\n  },\n  'click .plot-type-Histogram': function (event) {\n    if (Session.get(\"confirmPlotChange\")) {\n      // change has been confirmed\n      // see if the previous plot type also used the 'curve-dates' parameter\n      var oldCurveDatesExist = matsParamUtils.isParamVisible('curve-dates');\n      matsCurveUtils.showHistogramFace();\n      var curves = Session.get('Curves'); // if a 'curve-dates' parameter was already in use, we want to keep that value.\n      // otherwise, set the 'curve-dates' parameter to whatever 'dates' was set to.\n\n      var tsDate = $('#controlButton-dates-value').text();\n\n      if (!oldCurveDatesExist) {\n        matsParamUtils.setValueTextForParamName('curve-dates', tsDate);\n      }\n\n      if (curves.length > 0) {\n        // initialize parameters that may not have been used yet\n        for (var ci = 0; ci < curves.length; ci++) {\n          if (tsDate !== undefined && tsDate !== \"\" && !oldCurveDatesExist) {\n            curves[ci]['curve-dates'] = tsDate;\n          }\n\n          if (!curves[ci]['valid-time'] && matsCollections.CurveParams.findOne({\n            name: 'valid-time'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'valid-time'\n          }).default) {\n            curves[ci]['valid-time'] = matsCollections.CurveParams.findOne({\n              name: 'valid-time'\n            }).default;\n          }\n\n          if (!curves[ci]['threshold'] && matsCollections.CurveParams.findOne({\n            name: 'threshold'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'threshold'\n          }).default) {\n            curves[ci]['threshold'] = matsCollections.CurveParams.findOne({\n              name: 'threshold'\n            }).default;\n          }\n\n          if (!curves[ci]['forecast-length'] && matsCollections.CurveParams.findOne({\n            name: 'forecast-length'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'forecast-length'\n          }).default) {\n            curves[ci]['forecast-length'] = matsCollections.CurveParams.findOne({\n              name: 'forecast-length'\n            }).default;\n          }\n\n          if (!curves[ci]['region'] && matsCollections.CurveParams.findOne({\n            name: 'region'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'region'\n          }).default) {\n            curves[ci]['region'] = matsCollections.CurveParams.findOne({\n              name: 'region'\n            }).default;\n          }\n\n          if (!curves[ci]['statistic'] && matsCollections.CurveParams.findOne({\n            name: 'statistic'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'statistic'\n          }).default) {\n            curves[ci]['statistic'] = matsCollections.CurveParams.findOne({\n              name: 'statistic'\n            }).default;\n          }\n\n          if (!curves[ci]['truth'] && matsCollections.CurveParams.findOne({\n            name: 'truth'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'truth'\n          }).default) {\n            curves[ci]['truth'] = matsCollections.CurveParams.findOne({\n              name: 'truth'\n            }).default;\n          }\n\n          if (!curves[ci]['histogram-bin-controls'] && matsCollections.CurveParams.findOne({\n            name: 'histogram-bin-controls'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'histogram-bin-controls'\n          }).default) {\n            curves[ci]['histogram-bin-controls'] = matsCollections.CurveParams.findOne({\n              name: 'histogram-bin-controls'\n            }).default;\n          }\n\n          if (!curves[ci]['histogram-yaxis-controls'] && matsCollections.CurveParams.findOne({\n            name: 'histogram-yaxis-controls'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'histogram-yaxis-controls'\n          }).default) {\n            curves[ci]['histogram-yaxis-controls'] = matsCollections.CurveParams.findOne({\n              name: 'histogram-yaxis-controls'\n            }).default;\n          }\n        }\n\n        Session.set('Curves', curves);\n      }\n\n      Session.set(\"confirmPlotChange\", \"\");\n      Session.set('plotChangeType', \"\");\n    } else {\n      // no confirmation yet so check to see if we have any curves and if so then show the confirm dialog\n      if (Session.get(\"Curves\").length > 0) {\n        Session.set('plotChangeType', matsTypes.PlotTypes.histogram);\n        $(\"#modal-change-plot-type\").modal();\n      } else {\n        // no curves - just set the histogram face\n        // see if the previous plot type also used the 'curve-dates' parameter\n        var _oldCurveDatesExist5 = matsParamUtils.isParamVisible('curve-dates');\n\n        matsCurveUtils.showHistogramFace(); // if a 'curve-dates' parameter was already in use, we want to keep that value.\n        // otherwise, set the 'curve-dates' parameter to whatever 'dates' was set to.\n\n        if (!_oldCurveDatesExist5) {\n          var _tsDate5 = $('#controlButton-dates-value').text();\n\n          matsParamUtils.setValueTextForParamName('curve-dates', _tsDate5);\n        }\n      }\n    }\n  },\n  'click .plot-type-Contour': function (event) {\n    if (Session.get(\"confirmPlotChange\")) {\n      // change has been confirmed\n      // see if the previous plot type also used the 'dates' parameter\n      var oldDatesExist = matsParamUtils.isParamVisible('dates');\n      matsCurveUtils.showContourFace();\n      var curves = Session.get('Curves'); // if a 'dates' parameter was already in use, we want to keep that value.\n      // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n\n      if (!oldDatesExist) {\n        var curveDate = $('#controlButton-curve-dates-value').text();\n        matsParamUtils.setValueTextForParamName('dates', curveDate);\n      }\n\n      if (curves.length > 0) {\n        // initialize parameters that may not have been used yet\n        for (var ci = 0; ci < curves.length; ci++) {\n          // the average may not have been carried over from other curve types so let it default\n          if (!curves[ci]['valid-time'] && matsCollections.CurveParams.findOne({\n            name: 'valid-time'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'valid-time'\n          }).default) {\n            curves[ci]['valid-time'] = matsCollections.CurveParams.findOne({\n              name: 'valid-time'\n            }).default;\n          }\n\n          if (!curves[ci]['utc-cycle-start'] && matsCollections.CurveParams.findOne({\n            name: 'utc-cycle-start'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'utc-cycle-start'\n          }).default) {\n            curves[ci]['utc-cycle-start'] = matsCollections.CurveParams.findOne({\n              name: 'utc-cycle-start'\n            }).default;\n          }\n\n          if (!curves[ci]['threshold'] && matsCollections.CurveParams.findOne({\n            name: 'threshold'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'threshold'\n          }).default) {\n            curves[ci]['threshold'] = matsCollections.CurveParams.findOne({\n              name: 'threshold'\n            }).default;\n          }\n\n          if (!curves[ci]['forecast-length'] && matsCollections.CurveParams.findOne({\n            name: 'forecast-length'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'forecast-length'\n          }).default) {\n            curves[ci]['forecast-length'] = matsCollections.CurveParams.findOne({\n              name: 'forecast-length'\n            }).default;\n          }\n\n          if (!curves[ci]['region'] && matsCollections.CurveParams.findOne({\n            name: 'region'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'region'\n          }).default) {\n            curves[ci]['region'] = matsCollections.CurveParams.findOne({\n              name: 'region'\n            }).default;\n          }\n\n          if (!curves[ci]['statistic'] && matsCollections.CurveParams.findOne({\n            name: 'statistic'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'statistic'\n          }).default) {\n            curves[ci]['statistic'] = matsCollections.CurveParams.findOne({\n              name: 'statistic'\n            }).default;\n          }\n\n          if (!curves[ci]['truth'] && matsCollections.CurveParams.findOne({\n            name: 'truth'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'truth'\n          }).default) {\n            curves[ci]['truth'] = matsCollections.CurveParams.findOne({\n              name: 'truth'\n            }).default;\n          }\n\n          if (!curves[ci]['x-axis-parameter'] && matsCollections.CurveParams.findOne({\n            name: 'x-axis-parameter'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'x-axis-parameter'\n          }).default) {\n            curves[ci]['x-axis-parameter'] = matsCollections.CurveParams.findOne({\n              name: 'x-axis-parameter'\n            }).default;\n          }\n\n          if (!curves[ci]['y-axis-parameter'] && matsCollections.CurveParams.findOne({\n            name: 'y-axis-parameter'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'y-axis-parameter'\n          }).default) {\n            curves[ci]['y-axis-parameter'] = matsCollections.CurveParams.findOne({\n              name: 'y-axis-parameter'\n            }).default;\n          }\n        }\n\n        Session.set('Curves', curves);\n      }\n\n      Session.set(\"confirmPlotChange\", \"\");\n      Session.set('plotChangeType', \"\");\n    } else {\n      // no confirmation yet so check to see if we have any curves and if so then show the confirm dialog\n      if (Session.get(\"Curves\").length > 0) {\n        Session.set('plotChangeType', matsTypes.PlotTypes.contour);\n        $(\"#modal-change-plot-type\").modal();\n      } else {\n        // no curves - just set the contour face\n        // see if the previous plot type also used the 'dates' parameter\n        var _oldDatesExist5 = matsParamUtils.isParamVisible('dates');\n\n        matsCurveUtils.showContourFace(); // if a 'dates' parameter was already in use, we want to keep that value.\n        // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n\n        if (!_oldDatesExist5) {\n          var _curveDate5 = $('#controlButton-curve-dates-value').text();\n\n          matsParamUtils.setValueTextForParamName('dates', _curveDate5);\n        }\n      }\n    }\n  },\n  'click .plot-type-ContourDiff': function (event) {\n    if (Session.get(\"confirmPlotChange\")) {\n      // change has been confirmed\n      // see if the previous plot type also used the 'dates' parameter\n      var oldDatesExist = matsParamUtils.isParamVisible('dates');\n      matsCurveUtils.showContourFace();\n      var curves = Session.get('Curves'); // if a 'dates' parameter was already in use, we want to keep that value.\n      // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n\n      if (!oldDatesExist) {\n        var curveDate = $('#controlButton-curve-dates-value').text();\n        matsParamUtils.setValueTextForParamName('dates', curveDate);\n      }\n\n      if (curves.length > 0) {\n        // initialize parameters that may not have been used yet\n        for (var ci = 0; ci < curves.length; ci++) {\n          // the average may not have been carried over from other curve types so let it default\n          if (!curves[ci]['valid-time'] && matsCollections.CurveParams.findOne({\n            name: 'valid-time'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'valid-time'\n          }).default) {\n            curves[ci]['valid-time'] = matsCollections.CurveParams.findOne({\n              name: 'valid-time'\n            }).default;\n          }\n\n          if (!curves[ci]['utc-cycle-start'] && matsCollections.CurveParams.findOne({\n            name: 'utc-cycle-start'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'utc-cycle-start'\n          }).default) {\n            curves[ci]['utc-cycle-start'] = matsCollections.CurveParams.findOne({\n              name: 'utc-cycle-start'\n            }).default;\n          }\n\n          if (!curves[ci]['threshold'] && matsCollections.CurveParams.findOne({\n            name: 'threshold'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'threshold'\n          }).default) {\n            curves[ci]['threshold'] = matsCollections.CurveParams.findOne({\n              name: 'threshold'\n            }).default;\n          }\n\n          if (!curves[ci]['forecast-length'] && matsCollections.CurveParams.findOne({\n            name: 'forecast-length'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'forecast-length'\n          }).default) {\n            curves[ci]['forecast-length'] = matsCollections.CurveParams.findOne({\n              name: 'forecast-length'\n            }).default;\n          }\n\n          if (!curves[ci]['region'] && matsCollections.CurveParams.findOne({\n            name: 'region'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'region'\n          }).default) {\n            curves[ci]['region'] = matsCollections.CurveParams.findOne({\n              name: 'region'\n            }).default;\n          }\n\n          if (!curves[ci]['statistic'] && matsCollections.CurveParams.findOne({\n            name: 'statistic'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'statistic'\n          }).default) {\n            curves[ci]['statistic'] = matsCollections.CurveParams.findOne({\n              name: 'statistic'\n            }).default;\n          }\n\n          if (!curves[ci]['truth'] && matsCollections.CurveParams.findOne({\n            name: 'truth'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'truth'\n          }).default) {\n            curves[ci]['truth'] = matsCollections.CurveParams.findOne({\n              name: 'truth'\n            }).default;\n          }\n\n          if (!curves[ci]['x-axis-parameter'] && matsCollections.CurveParams.findOne({\n            name: 'x-axis-parameter'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'x-axis-parameter'\n          }).default) {\n            curves[ci]['x-axis-parameter'] = matsCollections.CurveParams.findOne({\n              name: 'x-axis-parameter'\n            }).default;\n          }\n\n          if (!curves[ci]['y-axis-parameter'] && matsCollections.CurveParams.findOne({\n            name: 'y-axis-parameter'\n          }) && matsCollections.CurveParams.findOne({\n            name: 'y-axis-parameter'\n          }).default) {\n            curves[ci]['y-axis-parameter'] = matsCollections.CurveParams.findOne({\n              name: 'y-axis-parameter'\n            }).default;\n          }\n        }\n\n        Session.set('Curves', curves);\n      }\n\n      Session.set(\"confirmPlotChange\", \"\");\n      Session.set('plotChangeType', \"\");\n    } else {\n      // no confirmation yet so check to see if we have any curves and if so then show the confirm dialog\n      if (Session.get(\"Curves\").length > 0) {\n        Session.set('plotChangeType', matsTypes.PlotTypes.contourDiff);\n        $(\"#modal-change-plot-type\").modal();\n      } else {\n        // no curves - just set the contour face\n        // see if the previous plot type also used the 'dates' parameter\n        var _oldDatesExist6 = matsParamUtils.isParamVisible('dates');\n\n        matsCurveUtils.showContourFace(); // if a 'dates' parameter was already in use, we want to keep that value.\n        // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n\n        if (!_oldDatesExist6) {\n          var _curveDate6 = $('#controlButton-curve-dates-value').text();\n\n          matsParamUtils.setValueTextForParamName('dates', _curveDate6);\n        }\n      }\n    }\n  },\n  'click .plot-type-Scatter2d': function (event) {\n    if (Session.get(\"confirmPlotChange\")) {\n      // change has been confirmed\n      // see if the previous plot type also used the 'dates' parameter\n      var oldDatesExist = matsParamUtils.isParamVisible('dates');\n      matsCurveUtils.showScatterFace(); // if a 'dates' parameter was already in use, we want to keep that value.\n      // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n\n      if (!oldDatesExist) {\n        var curveDate = $('#controlButton-curve-dates-value').text();\n        matsParamUtils.setValueTextForParamName('dates', curveDate);\n      }\n\n      Session.set(\"confirmPlotChange\", \"\");\n      Session.set('plotChangeType', \"\");\n    } else {\n      // no confirmation yet so check to see if we have any curves and if so then show the confirm dialog\n      if (Session.get(\"Curves\").length > 0) {\n        Session.set('plotChangeType', matsTypes.PlotTypes.scatter2d);\n        $(\"#modal-change-plot-type\").modal();\n      } else {\n        // no curves - just set the scatter face\n        // see if the previous plot type also used the 'dates' parameter\n        var _oldDatesExist7 = matsParamUtils.isParamVisible('dates');\n\n        matsCurveUtils.showScatterFace(); // if a 'dates' parameter was already in use, we want to keep that value.\n        // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n\n        if (!_oldDatesExist7) {\n          var _curveDate7 = $('#controlButton-curve-dates-value').text();\n\n          matsParamUtils.setValueTextForParamName('dates', _curveDate7);\n        }\n      }\n    }\n  }\n});","map":{"version":3,"sources":["packages/randyp:mats-common/templates/plotType/plot_type.js"],"names":["matsTypes","module","link","v","matsCollections","matsCurveUtils","matsParamUtils","Template","plotType","helpers","plotTypes","PlotGraphFunctions","find","fetch","title","Settings","undefined","findOne","fields","Title","display","length","events","event","Session","get","oldDatesExist","isParamVisible","showTimeseriesFace","curves","curveDate","$","text","setValueTextForParamName","ci","CurveParams","name","default","set","PlotTypes","timeSeries","modal","oldCurveDatesExist","showProfileFace","tsDate","profile","showDieOffFace","dieoff","showThresholdFace","threshold","showValidTimeFace","validtime","showDailyModelCycleFace","dailyModelCycle","showReliabilityFace","reliability","showMapFace","map","showHistogramFace","histogram","showContourFace","contour","contourDiff","showScatterFace","scatter2d"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2019 Colorado State University and Regents of the University of Colorado. All rights reserved.\n */\n\nimport {matsTypes} from 'meteor/randyp:mats-common';\nimport {matsCollections} from 'meteor/randyp:mats-common';\nimport {matsCurveUtils} from 'meteor/randyp:mats-common';\nimport {matsParamUtils} from 'meteor/randyp:mats-common';\n\n\nTemplate.plotType.helpers({\n    plotTypes: function () {\n        return matsCollections.PlotGraphFunctions.find({}).fetch();\n    },\n    title: function () {\n        if (matsCollections.Settings === undefined || matsCollections.Settings.findOne({}, {fields: {Title: 1}}) === undefined) {\n            return \"\";\n        } else {\n            return matsCollections.Settings.findOne({}, {fields: {Title: 1}}).Title;\n        }\n    },\n    display: function () {    // don't display the choice if there is only one choice\n        if (matsCollections.PlotGraphFunctions.find({}).fetch().length === 1) {\n            return \"hidden\";\n        } else {\n            return \"\";\n        }\n    }\n});\n\n\nTemplate.plotType.events({\n    'click .plot-type-TimeSeries': function (event) {\n        if (Session.get(\"confirmPlotChange\")) {\n            // change has been confirmed\n            // see if the previous plot type also used the 'dates' parameter\n            const oldDatesExist = matsParamUtils.isParamVisible('dates');\n            matsCurveUtils.showTimeseriesFace();\n            var curves = Session.get('Curves');\n            // if a 'dates' parameter was already in use, we want to keep that value.\n            // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n            if (!oldDatesExist) {\n                const curveDate = $('#controlButton-curve-dates-value').text();\n                matsParamUtils.setValueTextForParamName('dates', curveDate)\n            }\n            if (curves.length > 0) {\n                // initialize parameters that may not have been used yet\n                for (var ci = 0; ci < curves.length; ci++) {\n                    // the average may not have been carried over from other curve types so let it default\n                    if (!curves[ci]['average'] && matsCollections.CurveParams.findOne({name: 'average'}) && matsCollections.CurveParams.findOne({name: 'average'}).default) {\n                        curves[ci]['average'] = matsCollections.CurveParams.findOne({name: 'average'}).default;\n                    }\n                    if (!curves[ci]['valid-time'] && matsCollections.CurveParams.findOne({name: 'valid-time'}) && matsCollections.CurveParams.findOne({name: 'valid-time'}).default) {\n                        curves[ci]['valid-time'] = matsCollections.CurveParams.findOne({name: 'valid-time'}).default;\n                    }\n                    if (!curves[ci]['threshold'] && matsCollections.CurveParams.findOne({name: 'threshold'}) && matsCollections.CurveParams.findOne({name: 'threshold'}).default) {\n                        curves[ci]['threshold'] = matsCollections.CurveParams.findOne({name: 'threshold'}).default;\n                    }\n                    if (!curves[ci]['forecast-length'] && matsCollections.CurveParams.findOne({name: 'forecast-length'}) && matsCollections.CurveParams.findOne({name: 'forecast-length'}).default) {\n                        curves[ci]['forecast-length'] = matsCollections.CurveParams.findOne({name: 'forecast-length'}).default;\n                    }\n                    if (!curves[ci]['region'] && matsCollections.CurveParams.findOne({name: 'region'}) && matsCollections.CurveParams.findOne({name: 'region'}).default) {\n                        curves[ci]['region'] = matsCollections.CurveParams.findOne({name: 'region'}).default;\n                    }\n                    if (!curves[ci]['statistic'] && matsCollections.CurveParams.findOne({name: 'statistic'}) && matsCollections.CurveParams.findOne({name: 'statistic'}).default) {\n                        curves[ci]['statistic'] = matsCollections.CurveParams.findOne({name: 'statistic'}).default;\n                    }\n                    if (!curves[ci]['truth'] && matsCollections.CurveParams.findOne({name: 'truth'}) && matsCollections.CurveParams.findOne({name: 'truth'}).default) {\n                        curves[ci]['truth'] = matsCollections.CurveParams.findOne({name: 'truth'}).default;\n                    }\n                }\n                Session.set('Curves', curves);\n            }\n            Session.set(\"confirmPlotChange\", \"\");\n            Session.set('plotChangeType', \"\");\n        } else {\n            // no confirmation yet so check to see if we have any curves and if so then show the confirm dialog\n            if (Session.get(\"Curves\").length > 0) {\n                Session.set('plotChangeType', matsTypes.PlotTypes.timeSeries);\n                $(\"#modal-change-plot-type\").modal();\n            } else {\n                // no curves - just set the timeseries face\n                // see if the previous plot type also used the 'dates' parameter\n                const oldDatesExist = matsParamUtils.isParamVisible('dates');\n                matsCurveUtils.showTimeseriesFace();\n                // if a 'dates' parameter was already in use, we want to keep that value.\n                // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n                if (!oldDatesExist) {\n                    const curveDate = $('#controlButton-curve-dates-value').text();\n                    matsParamUtils.setValueTextForParamName('dates', curveDate)\n                }\n            }\n        }\n    },\n    'click .plot-type-Profile': function (event) {\n        if (Session.get(\"confirmPlotChange\")) {\n            // change has been confirmed\n            // see if the previous plot type also used the 'curve-dates' parameter\n            const oldCurveDatesExist = matsParamUtils.isParamVisible('curve-dates');\n            matsCurveUtils.showProfileFace();\n            var curves = Session.get('Curves');\n            // if a 'curve-dates' parameter was already in use, we want to keep that value.\n            // otherwise, set the 'curve-dates' parameter to whatever 'dates' was set to.\n            const tsDate = $('#controlButton-dates-value').text();\n            if (!oldCurveDatesExist) {\n                matsParamUtils.setValueTextForParamName('curve-dates', tsDate)\n            }\n            if (curves.length > 0) {\n                // initialize parameters that may not have been used yet\n                for (var ci = 0; ci < curves.length; ci++) {\n                    if (tsDate !== undefined && tsDate !== \"\" && !oldCurveDatesExist) {\n                        curves[ci]['curve-dates'] = tsDate;\n                    }\n                    if (!curves[ci]['valid-time'] && matsCollections.CurveParams.findOne({name: 'valid-time'}) && matsCollections.CurveParams.findOne({name: 'valid-time'}).default) {\n                        curves[ci]['valid-time'] = matsCollections.CurveParams.findOne({name: 'valid-time'}).default;\n                    }\n                    if (!curves[ci]['threshold'] && matsCollections.CurveParams.findOne({name: 'threshold'}) && matsCollections.CurveParams.findOne({name: 'threshold'}).default) {\n                        curves[ci]['threshold'] = matsCollections.CurveParams.findOne({name: 'threshold'}).default;\n                    }\n                    if (!curves[ci]['forecast-length'] && matsCollections.CurveParams.findOne({name: 'forecast-length'}) && matsCollections.CurveParams.findOne({name: 'forecast-length'}).default) {\n                        curves[ci]['forecast-length'] = matsCollections.CurveParams.findOne({name: 'forecast-length'}).default;\n                    }\n                    if (!curves[ci]['region'] && matsCollections.CurveParams.findOne({name: 'region'}) && matsCollections.CurveParams.findOne({name: 'region'}).default) {\n                        curves[ci]['region'] = matsCollections.CurveParams.findOne({name: 'region'}).default;\n                    }\n                    if (!curves[ci]['statistic'] && matsCollections.CurveParams.findOne({name: 'statistic'}) && matsCollections.CurveParams.findOne({name: 'statistic'}).default) {\n                        curves[ci]['statistic'] = matsCollections.CurveParams.findOne({name: 'statistic'}).default;\n                    }\n                    if (!curves[ci]['truth'] && matsCollections.CurveParams.findOne({name: 'truth'}) && matsCollections.CurveParams.findOne({name: 'truth'}).default) {\n                        curves[ci]['truth'] = matsCollections.CurveParams.findOne({name: 'truth'}).default;\n                    }\n                }\n                Session.set('Curves', curves);\n            }\n            Session.set(\"confirmPlotChange\", \"\");\n            Session.set('plotChangeType', \"\");\n        } else {\n            // no confirmation yet so check to see if we have any curves and if so then show the confirm dialog\n            if (Session.get(\"Curves\").length > 0) {\n                Session.set('plotChangeType', matsTypes.PlotTypes.profile);\n                $(\"#modal-change-plot-type\").modal();\n            } else {\n                // no curves - just set the profile face\n                // see if the previous plot type also used the 'curve-dates' parameter\n                const oldCurveDatesExist = matsParamUtils.isParamVisible('curve-dates');\n                matsCurveUtils.showProfileFace();\n                // if a 'curve-dates' parameter was already in use, we want to keep that value.\n                // otherwise, set the 'curve-dates' parameter to whatever 'dates' was set to.\n                if (!oldCurveDatesExist) {\n                    const tsDate = $('#controlButton-dates-value').text();\n                    matsParamUtils.setValueTextForParamName('curve-dates', tsDate)\n                }\n            }\n        }\n    },\n    'click .plot-type-DieOff': function (event) {\n        if (Session.get(\"confirmPlotChange\")) {\n            // change has been confirmed\n            // see if the previous plot type also used the 'curve-dates' parameter\n            const oldCurveDatesExist = matsParamUtils.isParamVisible('curve-dates');\n            matsCurveUtils.showDieOffFace();\n            var curves = Session.get('Curves');\n            // if a 'curve-dates' parameter was already in use, we want to keep that value.\n            // otherwise, set the 'curve-dates' parameter to whatever 'dates' was set to.\n            const tsDate = $('#controlButton-dates-value').text();\n            if (!oldCurveDatesExist) {\n                matsParamUtils.setValueTextForParamName('curve-dates', tsDate)\n            }\n            if (curves.length > 0) {\n                // initialize parameters that may not have been used yet\n                for (var ci = 0; ci < curves.length; ci++) {\n                    if (tsDate !== undefined && tsDate !== \"\" && !oldCurveDatesExist) {\n                        curves[ci]['curve-dates'] = tsDate;\n                    }\n                    if (!curves[ci]['valid-time'] && matsCollections.CurveParams.findOne({name: 'valid-time'}) && matsCollections.CurveParams.findOne({name: 'valid-time'}).default) {\n                        curves[ci]['valid-time'] = matsCollections.CurveParams.findOne({name: 'valid-time'}).default;\n                    }\n                    if (!curves[ci]['threshold'] && matsCollections.CurveParams.findOne({name: 'threshold'}) && matsCollections.CurveParams.findOne({name: 'threshold'}).default) {\n                        curves[ci]['threshold'] = matsCollections.CurveParams.findOne({name: 'threshold'}).default;\n                    }\n                    if (!curves[ci]['dieoff-type'] && matsCollections.CurveParams.findOne({name: 'dieoff-type'}) && matsCollections.CurveParams.findOne({name: 'dieoff-type'}).default) {\n                        curves[ci]['dieoff-type'] = matsCollections.CurveParams.findOne({name: 'dieoff-type'}).default;\n                    }\n                    if (!curves[ci]['region'] && matsCollections.CurveParams.findOne({name: 'region'}) && matsCollections.CurveParams.findOne({name: 'region'}).default) {\n                        curves[ci]['region'] = matsCollections.CurveParams.findOne({name: 'region'}).default;\n                    }\n                    if (!curves[ci]['statistic'] && matsCollections.CurveParams.findOne({name: 'statistic'}) && matsCollections.CurveParams.findOne({name: 'statistic'}).default) {\n                        curves[ci]['statistic'] = matsCollections.CurveParams.findOne({name: 'statistic'}).default;\n                    }\n                    if (!curves[ci]['truth'] && matsCollections.CurveParams.findOne({name: 'truth'}) && matsCollections.CurveParams.findOne({name: 'truth'}).default) {\n                        curves[ci]['truth'] = matsCollections.CurveParams.findOne({name: 'truth'}).default;\n                    }\n                }\n                Session.set('Curves', curves);\n            }\n            Session.set(\"confirmPlotChange\", \"\");\n            Session.set('plotChangeType', \"\");\n        } else {\n            // no confirmation yet so check to see if we have any curves and if so then show the confirm dialog\n            if (Session.get(\"Curves\").length > 0) {\n                Session.set('plotChangeType', matsTypes.PlotTypes.dieoff);\n                $(\"#modal-change-plot-type\").modal();\n            } else {\n                // no curves - just set the dieoff face\n                // see if the previous plot type also used the 'curve-dates' parameter\n                const oldCurveDatesExist = matsParamUtils.isParamVisible('curve-dates');\n                matsCurveUtils.showDieOffFace();\n                // if a 'curve-dates' parameter was already in use, we want to keep that value.\n                // otherwise, set the 'curve-dates' parameter to whatever 'dates' was set to.\n                if (!oldCurveDatesExist) {\n                    const tsDate = $('#controlButton-dates-value').text();\n                    matsParamUtils.setValueTextForParamName('curve-dates', tsDate)\n                }\n            }\n        }\n    },\n    'click .plot-type-Threshold': function (event) {\n        if (Session.get(\"confirmPlotChange\")) {\n            // change has been confirmed\n            // see if the previous plot type also used the 'curve-dates' parameter\n            const oldCurveDatesExist = matsParamUtils.isParamVisible('curve-dates');\n            matsCurveUtils.showThresholdFace();\n            var curves = Session.get('Curves');\n            // if a 'curve-dates' parameter was already in use, we want to keep that value.\n            // otherwise, set the 'curve-dates' parameter to whatever 'dates' was set to.\n            const tsDate = $('#controlButton-dates-value').text();\n            if (!oldCurveDatesExist) {\n                matsParamUtils.setValueTextForParamName('curve-dates', tsDate)\n            }\n            if (curves.length > 0) {\n                // initialize parameters that may not have been used yet\n                for (var ci = 0; ci < curves.length; ci++) {\n                    if (tsDate !== undefined && tsDate !== \"\" && !oldCurveDatesExist) {\n                        curves[ci]['curve-dates'] = tsDate;\n                    }\n                    if (!curves[ci]['valid-time'] && matsCollections.CurveParams.findOne({name: 'valid-time'}) && matsCollections.CurveParams.findOne({name: 'valid-time'}).default) {\n                        curves[ci]['valid-time'] = matsCollections.CurveParams.findOne({name: 'valid-time'}).default;\n                    }\n                    if (!curves[ci]['forecast-length'] && matsCollections.CurveParams.findOne({name: 'forecast-length'}) && matsCollections.CurveParams.findOne({name: 'forecast-length'}).default) {\n                        curves[ci]['forecast-length'] = matsCollections.CurveParams.findOne({name: 'forecast-length'}).default;\n                    }\n                    if (!curves[ci]['region'] && matsCollections.CurveParams.findOne({name: 'region'}) && matsCollections.CurveParams.findOne({name: 'region'}).default) {\n                        curves[ci]['region'] = matsCollections.CurveParams.findOne({name: 'region'}).default;\n                    }\n                    if (!curves[ci]['statistic'] && matsCollections.CurveParams.findOne({name: 'statistic'}) && matsCollections.CurveParams.findOne({name: 'statistic'}).default) {\n                        curves[ci]['statistic'] = matsCollections.CurveParams.findOne({name: 'statistic'}).default;\n                    }\n                    if (!curves[ci]['truth'] && matsCollections.CurveParams.findOne({name: 'truth'}) && matsCollections.CurveParams.findOne({name: 'truth'}).default) {\n                        curves[ci]['truth'] = matsCollections.CurveParams.findOne({name: 'truth'}).default;\n                    }\n                }\n                Session.set('Curves', curves);\n            }\n            Session.set(\"confirmPlotChange\", \"\");\n            Session.set('plotChangeType', \"\");\n        } else {\n            // no confirmation yet so check to see if we have any curves and if so then show the confirm dialog\n            if (Session.get(\"Curves\").length > 0) {\n                Session.set('plotChangeType', matsTypes.PlotTypes.threshold);\n                $(\"#modal-change-plot-type\").modal();\n            } else {\n                // no curves - just set the threshold face\n                // see if the previous plot type also used the 'curve-dates' parameter\n                const oldCurveDatesExist = matsParamUtils.isParamVisible('curve-dates');\n                matsCurveUtils.showThresholdFace();\n                // if a 'curve-dates' parameter was already in use, we want to keep that value.\n                // otherwise, set the 'curve-dates' parameter to whatever 'dates' was set to.\n                if (!oldCurveDatesExist) {\n                    const tsDate = $('#controlButton-dates-value').text();\n                    matsParamUtils.setValueTextForParamName('curve-dates', tsDate)\n                }\n            }\n        }\n    },\n    'click .plot-type-ValidTime': function (event) {\n        if (Session.get(\"confirmPlotChange\")) {\n            // change has been confirmed\n            // see if the previous plot type also used the 'curve-dates' parameter\n            const oldCurveDatesExist = matsParamUtils.isParamVisible('curve-dates');\n            matsCurveUtils.showValidTimeFace();\n            var curves = Session.get('Curves');\n            // if a 'curve-dates' parameter was already in use, we want to keep that value.\n            // otherwise, set the 'curve-dates' parameter to whatever 'dates' was set to.\n            const tsDate = $('#controlButton-dates-value').text();\n            if (!oldCurveDatesExist) {\n                matsParamUtils.setValueTextForParamName('curve-dates', tsDate)\n            }\n            if (curves.length > 0) {\n                // initialize parameters that may not have been used yet\n                for (var ci = 0; ci < curves.length; ci++) {\n                    if (tsDate !== undefined && tsDate !== \"\" && !oldCurveDatesExist) {\n                        curves[ci]['curve-dates'] = tsDate;\n                    }\n                    if (!curves[ci]['threshold'] && matsCollections.CurveParams.findOne({name: 'threshold'}) && matsCollections.CurveParams.findOne({name: 'threshold'}).default) {\n                        curves[ci]['threshold'] = matsCollections.CurveParams.findOne({name: 'threshold'}).default;\n                    }\n                    if (!curves[ci]['forecast-length'] && matsCollections.CurveParams.findOne({name: 'forecast-length'}) && matsCollections.CurveParams.findOne({name: 'forecast-length'}).default) {\n                        curves[ci]['forecast-length'] = matsCollections.CurveParams.findOne({name: 'forecast-length'}).default;\n                    }\n                    if (!curves[ci]['region'] && matsCollections.CurveParams.findOne({name: 'region'}) && matsCollections.CurveParams.findOne({name: 'region'}).default) {\n                        curves[ci]['region'] = matsCollections.CurveParams.findOne({name: 'region'}).default;\n                    }\n                    if (!curves[ci]['statistic'] && matsCollections.CurveParams.findOne({name: 'statistic'}) && matsCollections.CurveParams.findOne({name: 'statistic'}).default) {\n                        curves[ci]['statistic'] = matsCollections.CurveParams.findOne({name: 'statistic'}).default;\n                    }\n                    if (!curves[ci]['truth'] && matsCollections.CurveParams.findOne({name: 'truth'}) && matsCollections.CurveParams.findOne({name: 'truth'}).default) {\n                        curves[ci]['truth'] = matsCollections.CurveParams.findOne({name: 'truth'}).default;\n                    }\n                }\n                Session.set('Curves', curves);\n            }\n            Session.set(\"confirmPlotChange\", \"\");\n            Session.set('plotChangeType', \"\");\n        } else {\n            // no confirmation yet so check to see if we have any curves and if so then show the confirm dialog\n            if (Session.get(\"Curves\").length > 0) {\n                Session.set('plotChangeType', matsTypes.PlotTypes.validtime);\n                $(\"#modal-change-plot-type\").modal();\n            } else {\n                // no curves - just set the valid time face\n                // see if the previous plot type also used the 'curve-dates' parameter\n                const oldCurveDatesExist = matsParamUtils.isParamVisible('curve-dates');\n                matsCurveUtils.showValidTimeFace();\n                // if a 'curve-dates' parameter was already in use, we want to keep that value.\n                // otherwise, set the 'curve-dates' parameter to whatever 'dates' was set to.\n                if (!oldCurveDatesExist) {\n                    const tsDate = $('#controlButton-dates-value').text();\n                    matsParamUtils.setValueTextForParamName('curve-dates', tsDate)\n                }\n            }\n        }\n    },\n    'click .plot-type-DailyModelCycle': function (event) {\n        if (Session.get(\"confirmPlotChange\")) {\n            // change has been confirmed\n            // see if the previous plot type also used the 'dates' parameter\n            const oldDatesExist = matsParamUtils.isParamVisible('dates');\n            matsCurveUtils.showDailyModelCycleFace();\n            var curves = Session.get('Curves');\n            // if a 'dates' parameter was already in use, we want to keep that value.\n            // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n            if (!oldDatesExist) {\n                const curveDate = $('#controlButton-curve-dates-value').text();\n                matsParamUtils.setValueTextForParamName('dates', curveDate)\n            }\n            if (curves.length > 0) {\n                // initialize parameters that may not have been used yet\n                for (var ci = 0; ci < curves.length; ci++) {\n                    if (!curves[ci]['threshold'] && matsCollections.CurveParams.findOne({name: 'threshold'}) && matsCollections.CurveParams.findOne({name: 'threshold'}).default) {\n                        curves[ci]['threshold'] = matsCollections.CurveParams.findOne({name: 'threshold'}).default;\n                    }\n                    if (!curves[ci]['utc-cycle-start'] && matsCollections.CurveParams.findOne({name: 'utc-cycle-start'}) && matsCollections.CurveParams.findOne({name: 'utc-cycle-start'}).default) {\n                        curves[ci]['utc-cycle-start'] = matsCollections.CurveParams.findOne({name: 'utc-cycle-start'}).default;\n                    }\n                    if (!curves[ci]['region'] && matsCollections.CurveParams.findOne({name: 'region'}) && matsCollections.CurveParams.findOne({name: 'region'}).default) {\n                        curves[ci]['region'] = matsCollections.CurveParams.findOne({name: 'region'}).default;\n                    }\n                    if (!curves[ci]['statistic'] && matsCollections.CurveParams.findOne({name: 'statistic'}) && matsCollections.CurveParams.findOne({name: 'statistic'}).default) {\n                        curves[ci]['statistic'] = matsCollections.CurveParams.findOne({name: 'statistic'}).default;\n                    }\n                    if (!curves[ci]['truth'] && matsCollections.CurveParams.findOne({name: 'truth'}) && matsCollections.CurveParams.findOne({name: 'truth'}).default) {\n                        curves[ci]['truth'] = matsCollections.CurveParams.findOne({name: 'truth'}).default;\n                    }\n                }\n                Session.set('Curves', curves);\n            }\n            Session.set(\"confirmPlotChange\", \"\");\n            Session.set('plotChangeType', \"\");\n        } else {\n            // no confirmation yet so check to see if we have any curves and if so then show the confirm dialog\n            if (Session.get(\"Curves\").length > 0) {\n                Session.set('plotChangeType', matsTypes.PlotTypes.dailyModelCycle);\n                $(\"#modal-change-plot-type\").modal();\n            } else {\n                // no curves - just set the daily model cycle face\n                // see if the previous plot type also used the 'dates' parameter\n                const oldDatesExist = matsParamUtils.isParamVisible('dates');\n                matsCurveUtils.showDailyModelCycleFace();\n                // if a 'dates' parameter was already in use, we want to keep that value.\n                // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n                if (!oldDatesExist) {\n                    const curveDate = $('#controlButton-curve-dates-value').text();\n                    matsParamUtils.setValueTextForParamName('dates', curveDate)\n                }\n            }\n        }\n    },\n    'click .plot-type-Reliability': function (event) {\n        if (Session.get(\"confirmPlotChange\")) {\n            // change has been confirmed\n            // see if the previous plot type also used the 'dates' parameter\n            const oldDatesExist = matsParamUtils.isParamVisible('dates');\n            matsCurveUtils.showReliabilityFace();\n            var curves = Session.get('Curves');\n            // if a 'dates' parameter was already in use, we want to keep that value.\n            // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n            if (!oldDatesExist) {\n                const curveDate = $('#controlButton-curve-dates-value').text();\n                matsParamUtils.setValueTextForParamName('dates', curveDate)\n            }\n            if (curves.length > 0) {\n                // initialize parameters that may not have been used yet\n                for (var ci = 0; ci < curves.length; ci++) {\n                    // the average may not have been carried over from other curve types so let it default\n                    if (!curves[ci]['average'] && matsCollections.CurveParams.findOne({name: 'average'}) && matsCollections.CurveParams.findOne({name: 'average'}).default) {\n                        curves[ci]['average'] = matsCollections.CurveParams.findOne({name: 'average'}).default;\n                    }\n                    if (!curves[ci]['valid-time'] && matsCollections.CurveParams.findOne({name: 'valid-time'}) && matsCollections.CurveParams.findOne({name: 'valid-time'}).default) {\n                        curves[ci]['valid-time'] = matsCollections.CurveParams.findOne({name: 'valid-time'}).default;\n                    }\n                    if (!curves[ci]['threshold'] && matsCollections.CurveParams.findOne({name: 'threshold'}) && matsCollections.CurveParams.findOne({name: 'threshold'}).default) {\n                        curves[ci]['threshold'] = matsCollections.CurveParams.findOne({name: 'threshold'}).default;\n                    }\n                    if (!curves[ci]['forecast-length'] && matsCollections.CurveParams.findOne({name: 'forecast-length'}) && matsCollections.CurveParams.findOne({name: 'forecast-length'}).default) {\n                        curves[ci]['forecast-length'] = matsCollections.CurveParams.findOne({name: 'forecast-length'}).default;\n                    }\n                    if (!curves[ci]['region'] && matsCollections.CurveParams.findOne({name: 'region'}) && matsCollections.CurveParams.findOne({name: 'region'}).default) {\n                        curves[ci]['region'] = matsCollections.CurveParams.findOne({name: 'region'}).default;\n                    }\n                    if (!curves[ci]['statistic'] && matsCollections.CurveParams.findOne({name: 'statistic'}) && matsCollections.CurveParams.findOne({name: 'statistic'}).default) {\n                        curves[ci]['statistic'] = matsCollections.CurveParams.findOne({name: 'statistic'}).default;\n                    }\n                    if (!curves[ci]['truth'] && matsCollections.CurveParams.findOne({name: 'truth'}) && matsCollections.CurveParams.findOne({name: 'truth'}).default) {\n                        curves[ci]['truth'] = matsCollections.CurveParams.findOne({name: 'truth'}).default;\n                    }\n                }\n                Session.set('Curves', curves);\n            }\n            Session.set(\"confirmPlotChange\", \"\");\n            Session.set('plotChangeType', \"\");\n        } else {\n            // no confirmation yet so check to see if we have any curves and if so then show the confirm dialog\n            if (Session.get(\"Curves\").length > 0) {\n                Session.set('plotChangeType', matsTypes.PlotTypes.reliability);\n                $(\"#modal-change-plot-type\").modal();\n            } else {\n                // no curves - just set the reliability face\n                // see if the previous plot type also used the 'dates' parameter\n                const oldDatesExist = matsParamUtils.isParamVisible('dates');\n                matsCurveUtils.showReliabilityFace();\n                // if a 'dates' parameter was already in use, we want to keep that value.\n                // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n                if (!oldDatesExist) {\n                    const curveDate = $('#controlButton-curve-dates-value').text();\n                    matsParamUtils.setValueTextForParamName('dates', curveDate)\n                }\n            }\n        }\n    },\n    'click .plot-type-Map': function (event) {\n        if (Session.get(\"confirmPlotChange\")) {\n            // change has been confirmed\n            // see if the previous plot type also used the 'dates' parameter\n            const oldDatesExist = matsParamUtils.isParamVisible('dates');\n            matsCurveUtils.showMapFace();\n            var curves = Session.get('Curves');\n            // if a 'dates' parameter was already in use, we want to keep that value.\n            // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n            if (!oldDatesExist) {\n                const curveDate = $('#controlButton-curve-dates-value').text();\n                matsParamUtils.setValueTextForParamName('dates', curveDate)\n            }\n            if (curves.length > 0) {\n                // initialize parameters that may not have been used yet\n                for (var ci = 0; ci < curves.length; ci++) {\n                    if (!curves[ci]['valid-time'] && matsCollections.CurveParams.findOne({name: 'valid-time'}) && matsCollections.CurveParams.findOne({name: 'valid-time'}).default) {\n                        curves[ci]['valid-time'] = matsCollections.CurveParams.findOne({name: 'valid-time'}).default;\n                    }\n                    if (!curves[ci]['forecast-length'] && matsCollections.CurveParams.findOne({name: 'forecast-length'}) && matsCollections.CurveParams.findOne({name: 'forecast-length'}).default) {\n                        curves[ci]['forecast-length'] = matsCollections.CurveParams.findOne({name: 'forecast-length'}).default;\n                    }\n                }\n                Session.set('Curves', curves);\n            }\n            Session.set(\"confirmPlotChange\", \"\");\n            Session.set('plotChangeType', \"\");\n        } else {\n            // no confirmation yet so check to see if we have any curves and if so then show the confirm dialog\n            if (Session.get(\"Curves\").length > 0) {\n                Session.set('plotChangeType', matsTypes.PlotTypes.map);\n                $(\"#modal-change-plot-type\").modal();\n            } else {\n                // no curves - just set the map face\n                // see if the previous plot type also used the 'dates' parameter\n                const oldDatesExist = matsParamUtils.isParamVisible('dates');\n                matsCurveUtils.showMapFace();\n                // if a 'dates' parameter was already in use, we want to keep that value.\n                // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n                if (!oldDatesExist) {\n                    const curveDate = $('#controlButton-curve-dates-value').text();\n                    matsParamUtils.setValueTextForParamName('dates', curveDate)\n                }\n            }\n        }\n    },\n    'click .plot-type-Histogram': function (event) {\n        if (Session.get(\"confirmPlotChange\")) {\n            // change has been confirmed\n            // see if the previous plot type also used the 'curve-dates' parameter\n            const oldCurveDatesExist = matsParamUtils.isParamVisible('curve-dates');\n            matsCurveUtils.showHistogramFace();\n            var curves = Session.get('Curves');\n            // if a 'curve-dates' parameter was already in use, we want to keep that value.\n            // otherwise, set the 'curve-dates' parameter to whatever 'dates' was set to.\n            const tsDate = $('#controlButton-dates-value').text();\n            if (!oldCurveDatesExist) {\n                matsParamUtils.setValueTextForParamName('curve-dates', tsDate)\n            }\n            if (curves.length > 0) {\n                // initialize parameters that may not have been used yet\n                for (var ci = 0; ci < curves.length; ci++) {\n                    if (tsDate !== undefined && tsDate !== \"\" && !oldCurveDatesExist) {\n                        curves[ci]['curve-dates'] = tsDate;\n                    }\n                    if (!curves[ci]['valid-time'] && matsCollections.CurveParams.findOne({name: 'valid-time'}) && matsCollections.CurveParams.findOne({name: 'valid-time'}).default) {\n                        curves[ci]['valid-time'] = matsCollections.CurveParams.findOne({name: 'valid-time'}).default;\n                    }\n                    if (!curves[ci]['threshold'] && matsCollections.CurveParams.findOne({name: 'threshold'}) && matsCollections.CurveParams.findOne({name: 'threshold'}).default) {\n                        curves[ci]['threshold'] = matsCollections.CurveParams.findOne({name: 'threshold'}).default;\n                    }\n                    if (!curves[ci]['forecast-length'] && matsCollections.CurveParams.findOne({name: 'forecast-length'}) && matsCollections.CurveParams.findOne({name: 'forecast-length'}).default) {\n                        curves[ci]['forecast-length'] = matsCollections.CurveParams.findOne({name: 'forecast-length'}).default;\n                    }\n                    if (!curves[ci]['region'] && matsCollections.CurveParams.findOne({name: 'region'}) && matsCollections.CurveParams.findOne({name: 'region'}).default) {\n                        curves[ci]['region'] = matsCollections.CurveParams.findOne({name: 'region'}).default;\n                    }\n                    if (!curves[ci]['statistic'] && matsCollections.CurveParams.findOne({name: 'statistic'}) && matsCollections.CurveParams.findOne({name: 'statistic'}).default) {\n                        curves[ci]['statistic'] = matsCollections.CurveParams.findOne({name: 'statistic'}).default;\n                    }\n                    if (!curves[ci]['truth'] && matsCollections.CurveParams.findOne({name: 'truth'}) && matsCollections.CurveParams.findOne({name: 'truth'}).default) {\n                        curves[ci]['truth'] = matsCollections.CurveParams.findOne({name: 'truth'}).default;\n                    }\n                    if (!curves[ci]['histogram-bin-controls'] && matsCollections.CurveParams.findOne({name: 'histogram-bin-controls'}) && matsCollections.CurveParams.findOne({name: 'histogram-bin-controls'}).default) {\n                        curves[ci]['histogram-bin-controls'] = matsCollections.CurveParams.findOne({name: 'histogram-bin-controls'}).default;\n                    }\n                    if (!curves[ci]['histogram-yaxis-controls'] && matsCollections.CurveParams.findOne({name: 'histogram-yaxis-controls'}) && matsCollections.CurveParams.findOne({name: 'histogram-yaxis-controls'}).default) {\n                        curves[ci]['histogram-yaxis-controls'] = matsCollections.CurveParams.findOne({name: 'histogram-yaxis-controls'}).default;\n                    }\n                }\n                Session.set('Curves', curves);\n            }\n            Session.set(\"confirmPlotChange\", \"\");\n            Session.set('plotChangeType', \"\");\n        } else {\n            // no confirmation yet so check to see if we have any curves and if so then show the confirm dialog\n            if (Session.get(\"Curves\").length > 0) {\n                Session.set('plotChangeType', matsTypes.PlotTypes.histogram);\n                $(\"#modal-change-plot-type\").modal();\n            } else {\n                // no curves - just set the histogram face\n                // see if the previous plot type also used the 'curve-dates' parameter\n                const oldCurveDatesExist = matsParamUtils.isParamVisible('curve-dates');\n                matsCurveUtils.showHistogramFace();\n                // if a 'curve-dates' parameter was already in use, we want to keep that value.\n                // otherwise, set the 'curve-dates' parameter to whatever 'dates' was set to.\n                if (!oldCurveDatesExist) {\n                    const tsDate = $('#controlButton-dates-value').text();\n                    matsParamUtils.setValueTextForParamName('curve-dates', tsDate)\n                }\n            }\n        }\n    },\n    'click .plot-type-Contour': function (event) {\n        if (Session.get(\"confirmPlotChange\")) {\n            // change has been confirmed\n            // see if the previous plot type also used the 'dates' parameter\n            const oldDatesExist = matsParamUtils.isParamVisible('dates');\n            matsCurveUtils.showContourFace();\n            var curves = Session.get('Curves');\n            // if a 'dates' parameter was already in use, we want to keep that value.\n            // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n            if (!oldDatesExist) {\n                const curveDate = $('#controlButton-curve-dates-value').text();\n                matsParamUtils.setValueTextForParamName('dates', curveDate)\n            }\n            if (curves.length > 0) {\n                // initialize parameters that may not have been used yet\n                for (var ci = 0; ci < curves.length; ci++) {\n                    // the average may not have been carried over from other curve types so let it default\n                    if (!curves[ci]['valid-time'] && matsCollections.CurveParams.findOne({name: 'valid-time'}) && matsCollections.CurveParams.findOne({name: 'valid-time'}).default) {\n                        curves[ci]['valid-time'] = matsCollections.CurveParams.findOne({name: 'valid-time'}).default;\n                    }\n                    if (!curves[ci]['utc-cycle-start'] && matsCollections.CurveParams.findOne({name: 'utc-cycle-start'}) && matsCollections.CurveParams.findOne({name: 'utc-cycle-start'}).default) {\n                        curves[ci]['utc-cycle-start'] = matsCollections.CurveParams.findOne({name: 'utc-cycle-start'}).default;\n                    }\n                    if (!curves[ci]['threshold'] && matsCollections.CurveParams.findOne({name: 'threshold'}) && matsCollections.CurveParams.findOne({name: 'threshold'}).default) {\n                        curves[ci]['threshold'] = matsCollections.CurveParams.findOne({name: 'threshold'}).default;\n                    }\n                    if (!curves[ci]['forecast-length'] && matsCollections.CurveParams.findOne({name: 'forecast-length'}) && matsCollections.CurveParams.findOne({name: 'forecast-length'}).default) {\n                        curves[ci]['forecast-length'] = matsCollections.CurveParams.findOne({name: 'forecast-length'}).default;\n                    }\n                    if (!curves[ci]['region'] && matsCollections.CurveParams.findOne({name: 'region'}) && matsCollections.CurveParams.findOne({name: 'region'}).default) {\n                        curves[ci]['region'] = matsCollections.CurveParams.findOne({name: 'region'}).default;\n                    }\n                    if (!curves[ci]['statistic'] && matsCollections.CurveParams.findOne({name: 'statistic'}) && matsCollections.CurveParams.findOne({name: 'statistic'}).default) {\n                        curves[ci]['statistic'] = matsCollections.CurveParams.findOne({name: 'statistic'}).default;\n                    }\n                    if (!curves[ci]['truth'] && matsCollections.CurveParams.findOne({name: 'truth'}) && matsCollections.CurveParams.findOne({name: 'truth'}).default) {\n                        curves[ci]['truth'] = matsCollections.CurveParams.findOne({name: 'truth'}).default;\n                    }\n                    if (!curves[ci]['x-axis-parameter'] && matsCollections.CurveParams.findOne({name: 'x-axis-parameter'}) && matsCollections.CurveParams.findOne({name: 'x-axis-parameter'}).default) {\n                        curves[ci]['x-axis-parameter'] = matsCollections.CurveParams.findOne({name: 'x-axis-parameter'}).default;\n                    }\n                    if (!curves[ci]['y-axis-parameter'] && matsCollections.CurveParams.findOne({name: 'y-axis-parameter'}) && matsCollections.CurveParams.findOne({name: 'y-axis-parameter'}).default) {\n                        curves[ci]['y-axis-parameter'] = matsCollections.CurveParams.findOne({name: 'y-axis-parameter'}).default;\n                    }\n                }\n                Session.set('Curves', curves);\n            }\n            Session.set(\"confirmPlotChange\", \"\");\n            Session.set('plotChangeType', \"\");\n        } else {\n            // no confirmation yet so check to see if we have any curves and if so then show the confirm dialog\n            if (Session.get(\"Curves\").length > 0) {\n                Session.set('plotChangeType', matsTypes.PlotTypes.contour);\n                $(\"#modal-change-plot-type\").modal();\n            } else {\n                // no curves - just set the contour face\n                // see if the previous plot type also used the 'dates' parameter\n                const oldDatesExist = matsParamUtils.isParamVisible('dates');\n                matsCurveUtils.showContourFace();\n                // if a 'dates' parameter was already in use, we want to keep that value.\n                // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n                if (!oldDatesExist) {\n                    const curveDate = $('#controlButton-curve-dates-value').text();\n                    matsParamUtils.setValueTextForParamName('dates', curveDate)\n                }\n            }\n        }\n    },\n    'click .plot-type-ContourDiff': function (event) {\n        if (Session.get(\"confirmPlotChange\")) {\n            // change has been confirmed\n            // see if the previous plot type also used the 'dates' parameter\n            const oldDatesExist = matsParamUtils.isParamVisible('dates');\n            matsCurveUtils.showContourFace();\n            var curves = Session.get('Curves');\n            // if a 'dates' parameter was already in use, we want to keep that value.\n            // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n            if (!oldDatesExist) {\n                const curveDate = $('#controlButton-curve-dates-value').text();\n                matsParamUtils.setValueTextForParamName('dates', curveDate)\n            }\n            if (curves.length > 0) {\n                // initialize parameters that may not have been used yet\n                for (var ci = 0; ci < curves.length; ci++) {\n                    // the average may not have been carried over from other curve types so let it default\n                    if (!curves[ci]['valid-time'] && matsCollections.CurveParams.findOne({name: 'valid-time'}) && matsCollections.CurveParams.findOne({name: 'valid-time'}).default) {\n                        curves[ci]['valid-time'] = matsCollections.CurveParams.findOne({name: 'valid-time'}).default;\n                    }\n                    if (!curves[ci]['utc-cycle-start'] && matsCollections.CurveParams.findOne({name: 'utc-cycle-start'}) && matsCollections.CurveParams.findOne({name: 'utc-cycle-start'}).default) {\n                        curves[ci]['utc-cycle-start'] = matsCollections.CurveParams.findOne({name: 'utc-cycle-start'}).default;\n                    }\n                    if (!curves[ci]['threshold'] && matsCollections.CurveParams.findOne({name: 'threshold'}) && matsCollections.CurveParams.findOne({name: 'threshold'}).default) {\n                        curves[ci]['threshold'] = matsCollections.CurveParams.findOne({name: 'threshold'}).default;\n                    }\n                    if (!curves[ci]['forecast-length'] && matsCollections.CurveParams.findOne({name: 'forecast-length'}) && matsCollections.CurveParams.findOne({name: 'forecast-length'}).default) {\n                        curves[ci]['forecast-length'] = matsCollections.CurveParams.findOne({name: 'forecast-length'}).default;\n                    }\n                    if (!curves[ci]['region'] && matsCollections.CurveParams.findOne({name: 'region'}) && matsCollections.CurveParams.findOne({name: 'region'}).default) {\n                        curves[ci]['region'] = matsCollections.CurveParams.findOne({name: 'region'}).default;\n                    }\n                    if (!curves[ci]['statistic'] && matsCollections.CurveParams.findOne({name: 'statistic'}) && matsCollections.CurveParams.findOne({name: 'statistic'}).default) {\n                        curves[ci]['statistic'] = matsCollections.CurveParams.findOne({name: 'statistic'}).default;\n                    }\n                    if (!curves[ci]['truth'] && matsCollections.CurveParams.findOne({name: 'truth'}) && matsCollections.CurveParams.findOne({name: 'truth'}).default) {\n                        curves[ci]['truth'] = matsCollections.CurveParams.findOne({name: 'truth'}).default;\n                    }\n                    if (!curves[ci]['x-axis-parameter'] && matsCollections.CurveParams.findOne({name: 'x-axis-parameter'}) && matsCollections.CurveParams.findOne({name: 'x-axis-parameter'}).default) {\n                        curves[ci]['x-axis-parameter'] = matsCollections.CurveParams.findOne({name: 'x-axis-parameter'}).default;\n                    }\n                    if (!curves[ci]['y-axis-parameter'] && matsCollections.CurveParams.findOne({name: 'y-axis-parameter'}) && matsCollections.CurveParams.findOne({name: 'y-axis-parameter'}).default) {\n                        curves[ci]['y-axis-parameter'] = matsCollections.CurveParams.findOne({name: 'y-axis-parameter'}).default;\n                    }\n                }\n                Session.set('Curves', curves);\n            }\n            Session.set(\"confirmPlotChange\", \"\");\n            Session.set('plotChangeType', \"\");\n        } else {\n            // no confirmation yet so check to see if we have any curves and if so then show the confirm dialog\n            if (Session.get(\"Curves\").length > 0) {\n                Session.set('plotChangeType', matsTypes.PlotTypes.contourDiff);\n                $(\"#modal-change-plot-type\").modal();\n            } else {\n                // no curves - just set the contour face\n                // see if the previous plot type also used the 'dates' parameter\n                const oldDatesExist = matsParamUtils.isParamVisible('dates');\n                matsCurveUtils.showContourFace();\n                // if a 'dates' parameter was already in use, we want to keep that value.\n                // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n                if (!oldDatesExist) {\n                    const curveDate = $('#controlButton-curve-dates-value').text();\n                    matsParamUtils.setValueTextForParamName('dates', curveDate)\n                }\n            }\n        }\n    },\n    'click .plot-type-Scatter2d': function (event) {\n        if (Session.get(\"confirmPlotChange\")) {\n            // change has been confirmed\n            // see if the previous plot type also used the 'dates' parameter\n            const oldDatesExist = matsParamUtils.isParamVisible('dates');\n            matsCurveUtils.showScatterFace();\n            // if a 'dates' parameter was already in use, we want to keep that value.\n            // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n            if (!oldDatesExist) {\n                const curveDate = $('#controlButton-curve-dates-value').text();\n                matsParamUtils.setValueTextForParamName('dates', curveDate)\n            }\n            Session.set(\"confirmPlotChange\", \"\");\n            Session.set('plotChangeType', \"\");\n        } else {\n            // no confirmation yet so check to see if we have any curves and if so then show the confirm dialog\n            if (Session.get(\"Curves\").length > 0) {\n                Session.set('plotChangeType', matsTypes.PlotTypes.scatter2d);\n                $(\"#modal-change-plot-type\").modal();\n            } else {\n                // no curves - just set the scatter face\n                // see if the previous plot type also used the 'dates' parameter\n                const oldDatesExist = matsParamUtils.isParamVisible('dates');\n                matsCurveUtils.showScatterFace();\n                // if a 'dates' parameter was already in use, we want to keep that value.\n                // otherwise, set the 'dates' parameter to whatever 'curve-dates' was set to.\n                if (!oldDatesExist) {\n                    const curveDate = $('#controlButton-curve-dates-value').text();\n                    matsParamUtils.setValueTextForParamName('dates', curveDate)\n                }\n            }\n        }\n    }\n});\n"]},"sourceType":"script","hash":"ab46152aa69f48ac3de555ec4ea1a51525fcc8ef"}
