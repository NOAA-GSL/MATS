{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/ostrio:flow-router-extra/client/triggers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/ostrio:flow-router-extra/client/triggers.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/ostrio:flow-router-extra/client/triggers.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/ostrio:flow-router-extra/client/triggers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/ostrio:flow-router-extra/client/triggers.js"}},"code":"// a set of utility functions for triggers\nvar Triggers = {}; // Apply filters for a set of triggers\n// @triggers - a set of triggers\n// @filter - filter with array fields with `only` and `except`\n//           support only either `only` or `except`, but not both\n\nTriggers.applyFilters = function (_triggers, filter) {\n  var triggers = _triggers;\n\n  if (!(triggers instanceof Array)) {\n    triggers = [triggers];\n  }\n\n  if (!filter) {\n    return triggers;\n  }\n\n  if (filter.only && filter.except) {\n    throw new Error('Triggers don\\'t support only and except filters at once');\n  }\n\n  if (filter.only && !(filter.only instanceof Array)) {\n    throw new Error('only filters needs to be an array');\n  }\n\n  if (filter.except && !(filter.except instanceof Array)) {\n    throw new Error('except filters needs to be an array');\n  }\n\n  if (filter.only) {\n    return Triggers.createRouteBoundTriggers(triggers, filter.only);\n  }\n\n  if (filter.except) {\n    return Triggers.createRouteBoundTriggers(triggers, filter.except, true);\n  }\n\n  throw new Error('Provided a filter but not supported');\n}; //  create triggers by bounding them to a set of route names\n//  @triggers - a set of triggers\n//  @names - list of route names to be bound (trigger runs only for these names)\n//  @negate - negate the result (triggers won't run for above names)\n\n\nTriggers.createRouteBoundTriggers = function (triggers, names, negate) {\n  var namesMap = {};\n  names.forEach(function (name) {\n    namesMap[name] = true;\n  });\n  var filteredTriggers = triggers.map(function (originalTrigger) {\n    var modifiedTrigger = function (context, next) {\n      var matched = namesMap[context.route.name] ? 1 : -1;\n      matched = negate ? matched * -1 : matched;\n\n      if (matched === 1) {\n        originalTrigger(context, next);\n      }\n    };\n\n    return modifiedTrigger;\n  });\n  return filteredTriggers;\n}; //  run triggers and abort if redirected or callback stopped\n//  @triggers - a set of triggers\n//  @context - context we need to pass (it must have the route)\n//  @redirectFn - function which used to redirect\n//  @after - called after if only all the triggers runs\n\n\nTriggers.runTriggers = function (triggers, context, redirectFn, after, data) {\n  var abort = false;\n  var inCurrentLoop = true;\n  var alreadyRedirected = false;\n\n  var doRedirect = function (url, params, queryParams) {\n    if (alreadyRedirected) {\n      throw new Error('already redirected');\n    }\n\n    if (!inCurrentLoop) {\n      throw new Error('redirect needs to be done in sync');\n    }\n\n    if (!url) {\n      throw new Error('trigger redirect requires an URL');\n    }\n\n    abort = true;\n    alreadyRedirected = true;\n    redirectFn(url, params, queryParams);\n  };\n\n  var doStop = function () {\n    abort = true;\n  };\n\n  for (var lc = 0; lc < triggers.length; lc++) {\n    triggers[lc](context, doRedirect, doStop, data);\n\n    if (abort) {\n      return;\n    }\n  } // mark that, we've exceeds the currentEventloop for\n  // this set of triggers.\n\n\n  inCurrentLoop = false;\n  after();\n};\n\nmodule.exportDefault(Triggers);","map":{"version":3,"sources":["packages/ostrio:flow-router-extra/client/triggers.js"],"names":["Triggers","applyFilters","_triggers","filter","triggers","Array","only","except","Error","createRouteBoundTriggers","names","negate","namesMap","forEach","name","filteredTriggers","map","originalTrigger","modifiedTrigger","context","next","matched","route","runTriggers","redirectFn","after","data","abort","inCurrentLoop","alreadyRedirected","doRedirect","url","params","queryParams","doStop","lc","length","module","exportDefault"],"mappings":"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","sourcesContent":["// a set of utility functions for triggers\n\nconst Triggers = {};\n\n// Apply filters for a set of triggers\n// @triggers - a set of triggers\n// @filter - filter with array fields with `only` and `except`\n//           support only either `only` or `except`, but not both\nTriggers.applyFilters = (_triggers, filter) => {\n  let triggers = _triggers;\n  if(!(triggers instanceof Array)) {\n    triggers = [triggers];\n  }\n\n  if(!filter) {\n    return triggers;\n  }\n\n  if(filter.only && filter.except) {\n    throw new Error('Triggers don\\'t support only and except filters at once');\n  }\n\n  if(filter.only && !(filter.only instanceof Array)) {\n    throw new Error('only filters needs to be an array');\n  }\n\n  if(filter.except && !(filter.except instanceof Array)) {\n    throw new Error('except filters needs to be an array');\n  }\n\n  if(filter.only) {\n    return Triggers.createRouteBoundTriggers(triggers, filter.only);\n  }\n\n  if(filter.except) {\n    return Triggers.createRouteBoundTriggers(triggers, filter.except, true);\n  }\n\n  throw new Error('Provided a filter but not supported');\n};\n\n//  create triggers by bounding them to a set of route names\n//  @triggers - a set of triggers\n//  @names - list of route names to be bound (trigger runs only for these names)\n//  @negate - negate the result (triggers won't run for above names)\nTriggers.createRouteBoundTriggers = (triggers, names, negate) => {\n  const namesMap = {};\n  names.forEach((name) => {\n    namesMap[name] = true;\n  });\n\n  const filteredTriggers = triggers.map((originalTrigger) => {\n    const modifiedTrigger = (context, next) => {\n      let matched = (namesMap[context.route.name]) ? 1 : -1;\n      matched = (negate) ? matched * -1 : matched;\n\n      if(matched === 1) {\n        originalTrigger(context, next);\n      }\n    };\n    return modifiedTrigger;\n  });\n\n  return filteredTriggers;\n};\n\n//  run triggers and abort if redirected or callback stopped\n//  @triggers - a set of triggers\n//  @context - context we need to pass (it must have the route)\n//  @redirectFn - function which used to redirect\n//  @after - called after if only all the triggers runs\nTriggers.runTriggers = (triggers, context, redirectFn, after, data) => {\n  let abort = false;\n  let inCurrentLoop = true;\n  let alreadyRedirected = false;\n\n  const doRedirect = (url, params, queryParams) => {\n    if(alreadyRedirected) {\n      throw new Error('already redirected');\n    }\n\n    if(!inCurrentLoop) {\n      throw new Error('redirect needs to be done in sync');\n    }\n\n    if(!url) {\n      throw new Error('trigger redirect requires an URL');\n    }\n\n    abort = true;\n    alreadyRedirected = true;\n    redirectFn(url, params, queryParams);\n  };\n\n  const doStop = () => {\n    abort = true;\n  };\n\n  for (let lc = 0; lc < triggers.length; lc++) {\n    triggers[lc](context, doRedirect, doStop, data);\n\n    if (abort) {\n      return;\n    }\n  }\n\n  // mark that, we've exceeds the currentEventloop for\n  // this set of triggers.\n  inCurrentLoop = false;\n  after();\n};\n\nexport default Triggers;\n"]},"sourceType":"script","hash":"3c7490ad5ec34b3f91510e24d59d1dd4c0cc2f4e"}
