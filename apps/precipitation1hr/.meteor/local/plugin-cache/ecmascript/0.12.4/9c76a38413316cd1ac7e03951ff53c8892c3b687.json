{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/base64/base64.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/base64/base64.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/base64/base64.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/base64/base64.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/base64/base64.js"}},"code":"module.export({\n  Base64: function () {\n    return Base64;\n  }\n});\n// Base 64 encoding\nvar BASE_64_CHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nvar BASE_64_VALS = Object.create(null);\n\nvar getChar = function (val) {\n  return BASE_64_CHARS.charAt(val);\n};\n\nvar getVal = function (ch) {\n  return ch === '=' ? -1 : BASE_64_VALS[ch];\n};\n\nfor (var i = 0; i < BASE_64_CHARS.length; i++) {\n  BASE_64_VALS[getChar(i)] = i;\n}\n\n;\n\nvar encode = function (array) {\n  if (typeof array === \"string\") {\n    var str = array;\n    array = newBinary(str.length);\n\n    for (var _i = 0; _i < str.length; _i++) {\n      var ch = str.charCodeAt(_i);\n\n      if (ch > 0xFF) {\n        throw new Error(\"Not ascii. Base64.encode can only take ascii strings.\");\n      }\n\n      array[_i] = ch;\n    }\n  }\n\n  var answer = [];\n  var a = null;\n  var b = null;\n  var c = null;\n  var d = null;\n  array.forEach(function (elm, i) {\n    switch (i % 3) {\n      case 0:\n        a = elm >> 2 & 0x3F;\n        b = (elm & 0x03) << 4;\n        break;\n\n      case 1:\n        b = b | elm >> 4 & 0xF;\n        c = (elm & 0xF) << 2;\n        break;\n\n      case 2:\n        c = c | elm >> 6 & 0x03;\n        d = elm & 0x3F;\n        answer.push(getChar(a));\n        answer.push(getChar(b));\n        answer.push(getChar(c));\n        answer.push(getChar(d));\n        a = null;\n        b = null;\n        c = null;\n        d = null;\n        break;\n    }\n  });\n\n  if (a != null) {\n    answer.push(getChar(a));\n    answer.push(getChar(b));\n\n    if (c == null) {\n      answer.push('=');\n    } else {\n      answer.push(getChar(c));\n    }\n\n    if (d == null) {\n      answer.push('=');\n    }\n  }\n\n  return answer.join(\"\");\n}; // XXX This is a weird place for this to live, but it's used both by\n// this package and 'ejson', and we can't put it in 'ejson' without\n// introducing a circular dependency. It should probably be in its own\n// package or as a helper in a package that both 'base64' and 'ejson'\n// use.\n\n\nvar newBinary = function (len) {\n  if (typeof Uint8Array === 'undefined' || typeof ArrayBuffer === 'undefined') {\n    var ret = [];\n\n    for (var _i2 = 0; _i2 < len; _i2++) {\n      ret.push(0);\n    }\n\n    ret.$Uint8ArrayPolyfill = true;\n    return ret;\n  }\n\n  return new Uint8Array(new ArrayBuffer(len));\n};\n\nvar decode = function (str) {\n  var len = Math.floor(str.length * 3 / 4);\n\n  if (str.charAt(str.length - 1) == '=') {\n    len--;\n\n    if (str.charAt(str.length - 2) == '=') {\n      len--;\n    }\n  }\n\n  var arr = newBinary(len);\n  var one = null;\n  var two = null;\n  var three = null;\n  var j = 0;\n\n  for (var _i3 = 0; _i3 < str.length; _i3++) {\n    var c = str.charAt(_i3);\n    var v = getVal(c);\n\n    switch (_i3 % 4) {\n      case 0:\n        if (v < 0) {\n          throw new Error('invalid base64 string');\n        }\n\n        one = v << 2;\n        break;\n\n      case 1:\n        if (v < 0) {\n          throw new Error('invalid base64 string');\n        }\n\n        one = one | v >> 4;\n        arr[j++] = one;\n        two = (v & 0x0F) << 4;\n        break;\n\n      case 2:\n        if (v >= 0) {\n          two = two | v >> 2;\n          arr[j++] = two;\n          three = (v & 0x03) << 6;\n        }\n\n        break;\n\n      case 3:\n        if (v >= 0) {\n          arr[j++] = three | v;\n        }\n\n        break;\n    }\n  }\n\n  return arr;\n};\n\nvar Base64 = {\n  encode: encode,\n  decode: decode,\n  newBinary: newBinary\n};","map":{"version":3,"sources":["packages/base64/base64.js"],"names":["module","export","Base64","BASE_64_CHARS","BASE_64_VALS","Object","create","getChar","val","charAt","getVal","ch","i","length","encode","array","str","newBinary","charCodeAt","Error","answer","a","b","c","d","forEach","elm","push","join","len","Uint8Array","ArrayBuffer","ret","$Uint8ArrayPolyfill","decode","Math","floor","arr","one","two","three","j","v"],"mappings":"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","sourcesContent":["// Base 64 encoding\n\nconst BASE_64_CHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\nconst BASE_64_VALS = Object.create(null);\n\nconst getChar = val => BASE_64_CHARS.charAt(val);\nconst getVal = ch => ch === '=' ? -1 : BASE_64_VALS[ch];\n\nfor (let i = 0; i < BASE_64_CHARS.length; i++) {\n  BASE_64_VALS[getChar(i)] = i;\n};\n\nconst encode = array => {\n  if (typeof array === \"string\") {\n    const str = array;\n    array = newBinary(str.length);\n    for (let i = 0; i < str.length; i++) {\n      const ch = str.charCodeAt(i);\n      if (ch > 0xFF) {\n        throw new Error(\n          \"Not ascii. Base64.encode can only take ascii strings.\");\n      }\n\n      array[i] = ch;\n    }\n  }\n\n  const answer = [];\n  let a = null;\n  let b = null;\n  let c = null;\n  let d = null;\n\n  array.forEach((elm, i) => {\n    switch (i % 3) {\n      case 0:\n        a = (elm >> 2) & 0x3F;\n        b = (elm & 0x03) << 4;\n        break;\n      case 1:\n        b = b | (elm >> 4) & 0xF;\n        c = (elm & 0xF) << 2;\n        break;\n      case 2:\n        c = c | (elm >> 6) & 0x03;\n        d = elm & 0x3F;\n        answer.push(getChar(a));\n        answer.push(getChar(b));\n        answer.push(getChar(c));\n        answer.push(getChar(d));\n        a = null;\n        b = null;\n        c = null;\n        d = null;\n        break;\n    }\n  });\n\n  if (a != null) {\n    answer.push(getChar(a));\n    answer.push(getChar(b));\n    if (c == null) {\n      answer.push('=');\n    } else {\n      answer.push(getChar(c));\n    }\n    \n    if (d == null) {\n      answer.push('=');\n    }\n  }\n\n  return answer.join(\"\");\n};\n\n\n\n// XXX This is a weird place for this to live, but it's used both by\n// this package and 'ejson', and we can't put it in 'ejson' without\n// introducing a circular dependency. It should probably be in its own\n// package or as a helper in a package that both 'base64' and 'ejson'\n// use.\nconst newBinary = len => {\n  if (typeof Uint8Array === 'undefined' || typeof ArrayBuffer === 'undefined') {\n    const ret = [];\n    for (let i = 0; i < len; i++) {\n      ret.push(0);\n    }\n\n    ret.$Uint8ArrayPolyfill = true;\n    return ret;\n  }\n  return new Uint8Array(new ArrayBuffer(len));\n};\n\nconst decode = str => {\n  let len = Math.floor((str.length * 3) / 4);\n  if (str.charAt(str.length - 1) == '=') {\n    len--;\n    if (str.charAt(str.length - 2) == '=') {\n      len--;\n    }\n  }\n  \n  const arr = newBinary(len);\n\n  let one = null;\n  let two = null;\n  let three = null;\n\n  let j = 0;\n\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charAt(i);\n    const v = getVal(c);\n    switch (i % 4) {\n      case 0:\n        if (v < 0) {\n          throw new Error('invalid base64 string');\n        }\n\n        one = v << 2;\n        break;\n      case 1:\n        if (v < 0) {\n          throw new Error('invalid base64 string');\n        }\n\n        one = one | (v >> 4);\n        arr[j++] = one;\n        two = (v & 0x0F) << 4;\n        break;\n      case 2:\n        if (v >= 0) {\n          two = two | (v >> 2);\n          arr[j++] = two;\n          three = (v & 0x03) << 6;\n        }\n\n        break;\n      case 3:\n        if (v >= 0) {\n          arr[j++] = three | v;\n        }\n\n        break;\n    }\n  }\n  \n  return arr;\n};\n\nexport const Base64 = { encode, decode, newBinary };\n"]},"sourceType":"script","hash":"9c76a38413316cd1ac7e03951ff53c8892c3b687"}
