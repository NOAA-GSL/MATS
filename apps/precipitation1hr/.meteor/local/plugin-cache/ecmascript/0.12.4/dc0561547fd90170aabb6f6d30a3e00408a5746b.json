{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/templates/plot/plot_list.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/randyp:mats-common/templates/plot/plot_list.js","filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/templates/plot/plot_list.js","passPerPreset":false,"envName":"development","cwd":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","root":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/jeffrey.a.hamilton/WebstormProjects/MATS_for_EMB/apps/precipitation1hr/packages/randyp:mats-common/templates/plot/plot_list.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/randyp:mats-common/templates/plot/plot_list.js"}},"code":"let matsTypes;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsTypes(v) {\n    matsTypes = v;\n  }\n\n}, 0);\nlet matsCollections;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsCollections(v) {\n    matsCollections = v;\n  }\n\n}, 1);\nlet matsCurveUtils;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsCurveUtils(v) {\n    matsCurveUtils = v;\n  }\n\n}, 2);\nlet matsMethods;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsMethods(v) {\n    matsMethods = v;\n  }\n\n}, 3);\nlet matsGraphUtils;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsGraphUtils(v) {\n    matsGraphUtils = v;\n  }\n\n}, 4);\nlet matsPlotUtils;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsPlotUtils(v) {\n    matsPlotUtils = v;\n  }\n\n}, 5);\nlet matsParamUtils;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsParamUtils(v) {\n    matsParamUtils = v;\n  }\n\n}, 6);\nlet matsSelectUtils;\nmodule.link(\"meteor/randyp:mats-common\", {\n  matsSelectUtils(v) {\n    matsSelectUtils = v;\n  }\n\n}, 7);\nTemplate.plotList.helpers({\n  Title: function () {\n    return matsCollections.Settings.findOne({}, {\n      fields: {\n        Title: 1\n      }\n    }).Title;\n  },\n  PlotParamGroups: function () {\n    var groupNums = [];\n    var params = matsCollections.PlotParams.find({}, {\n      fields: {\n        displayGroup: 1\n      }\n    }).fetch();\n\n    for (var i = 0; i < params.length; i++) {\n      groupNums.push(params[i].displayGroup);\n    }\n\n    var res = _.uniq(groupNums).sort();\n\n    return res;\n  },\n  curves: function () {\n    return Session.get('Curves');\n  },\n  privateDisabled: function () {\n    if (!Meteor.user()) {\n      return \"disabled\";\n    } else {\n      return \"\";\n    }\n  },\n  privateRestoreNames: function () {\n    var names = [];\n    var l = matsCollections.CurveSettings.find({}, {\n      fields: {\n        name: 1,\n        owner: 1,\n        permission: 1\n      }\n    }).fetch();\n\n    for (var i = 0; i < l.length; i++) {\n      if (l[i].owner === Meteor.userId() && l[i].permission === \"private\") {\n        names.push(l[i].name);\n      }\n    }\n\n    return names;\n  },\n  publicRestoreNames: function () {\n    var names = [];\n    var savedSettings = matsCollections.CurveSettings.find({}, {\n      fields: {\n        name: 1,\n        owner: 1,\n        permission: 1\n      }\n    }).fetch();\n\n    for (var i = 0; i < savedSettings.length; i++) {\n      if (savedSettings[i].permission === \"public\") {\n        names.push(savedSettings[i].name);\n      }\n    }\n\n    return names;\n  },\n  isOwner: function () {\n    return this.owner === Meteor.userId();\n  }\n});\nTemplate.plotList.events({\n  'click .cancel-restore': function () {\n    document.getElementById('restore_from_public').value = \"\";\n    document.getElementById('restore_from_private').value = \"\";\n  },\n  'click .cancel-save': function () {\n    document.getElementById('save_as').value = \"\";\n    document.getElementById('save_to').value = \"\";\n  },\n  'click .delete-selected': function () {\n    var deleteThis = document.getElementById('save_to').value;\n\n    if (deleteThis !== undefined && deleteThis !== \"\") {\n      matsMethods.deleteSettings.call({\n        name: deleteThis\n      }, function (error) {\n        if (error) {\n          setError(new Error(error.message));\n        }\n      });\n    }\n  },\n  // catch a click on a diff plotFormat radio button.\n  'click .data-input': function () {\n    var formats = Object.keys(matsTypes.PlotFormats);\n\n    if ($.inArray(this.toString(), formats) !== -1) {\n      matsCurveUtils.checkDiffs();\n    }\n  },\n  'click .restore-from-private': function () {\n    document.getElementById('restore_from_public').value = \"\";\n  },\n  'click .restore-from-public': function () {\n    document.getElementById('restore_from_private').value = \"\";\n  },\n  'click .submit-params': function (event, template) {\n    var plotAction = Session.get('plotParameter');\n    Session.set(\"spinner_img\", \"spinner.gif\");\n    document.getElementById(\"spinner\").style.display = \"block\";\n    event.preventDefault();\n    var action = event.currentTarget.name;\n    var p = {}; // get the plot-type elements checked state\n\n    const plotTypeElems = $('input[name=plot-type]');\n    p.plotTypes = {};\n\n    for (ptei = 0; ptei < plotTypeElems.length; ptei++) {\n      const ptElem = plotTypeElems[ptei];\n      p.plotTypes[ptElem.value] = ptElem.checked;\n    }\n\n    var curves = Session.get('Curves');\n\n    if (curves == 0 && action !== \"restore\") {\n      //alert (\"No Curves To plot\");\n      setError(new Error(\"There are no curves to plot!\"));\n      Session.set(\"spinner_img\", \"spinner.gif\");\n      document.getElementById(\"spinner\").style.display = \"none\";\n      return false;\n    }\n\n    p.curves = [];\n    p.plotAction = plotAction;\n    curves.forEach(function (curve) {\n      p.curves.push(curve);\n    });\n    matsCollections.PlotParams.find({}).fetch().forEach(function (plotParam) {\n      var name = plotParam.name;\n      var type = plotParam.type;\n      var options = plotParam.options;\n\n      if (type == matsTypes.InputTypes.radioGroup) {\n        for (var i = 0; i < options.length; i++) {\n          if (document.getElementById(name + \"-\" + type + \"-\" + options[i]).checked == true) {\n            p[name] = options[i];\n            break;\n          }\n        }\n      } else if (type == matsTypes.InputTypes.checkBoxGroup) {\n        p[name] = [];\n\n        for (var i = 0; i < options.length; i++) {\n          if (document.getElementById(name + \"-\" + type + \"-\" + options[i]).checked) {\n            p[name].push(options[i]);\n          }\n        }\n      } else if (type == matsTypes.InputTypes.dateRange) {\n        p[name] = matsParamUtils.getValueForParamName(name);\n      } else if (type == matsTypes.InputTypes.numberSpinner) {\n        p[name] = document.getElementById(name + '-' + type).value;\n      } else if (type == matsTypes.InputTypes.select) {\n        p[name] = document.getElementById(name + '-' + type).value;\n      } else if (type == matsTypes.InputTypes.textInput) {\n        p[name] = document.getElementById(name + '-' + type).value;\n      }\n    });\n    p['completeness'] = document.getElementById(\"completeness\").value;\n    p['outliers'] = document.getElementById(\"outliers\").value;\n    Session.set(\"PlotParams\", p);\n\n    switch (action) {\n      case \"save\":\n        if ((document.getElementById('save_as').value === \"\" || document.getElementById('save_as').value === undefined) && (document.getElementById('save_to').value === \"\" || document.getElementById('save_to').value === undefined)) {\n          $(\"#saveModal\").modal('show');\n          Session.set(\"spinner_img\", \"spinner.gif\");\n          document.getElementById(\"spinner\").style.display = \"none\";\n          return false;\n        }\n\n        var saveAs = \"\";\n\n        if (document.getElementById('save_as').value !== \"\" && document.getElementById('save_as').value !== undefined) {\n          saveAs = document.getElementById('save_as').value;\n        } else {\n          saveAs = document.getElementById('save_to').value;\n        }\n\n        var permission = document.getElementById(\"save-public\").checked == true ? \"public\" : \"private\"; //console.log(\"saving settings to \" + saveAs);\n\n        Session.set('plotName', saveAs); // get the settings to save out of the session\n\n        p = Session.get(\"PlotParams\");\n        var paramData = matsParamUtils.getElementValues();\n        p['paramData'] = paramData;\n        matsMethods.saveSettings.call({\n          saveAs: saveAs,\n          p: p,\n          permission: permission\n        }, function (error) {\n          if (error) {\n            setError(new Error(\"matsMethods.saveSettings from plot_list.js \" + error.message));\n          }\n        });\n        document.getElementById('save_as').value = \"\";\n        document.getElementById('save_to').value = \"\";\n        $(\"#saveModal\").modal('hide');\n        Session.set(\"spinner_img\", \"spinner.gif\");\n        document.getElementById(\"spinner\").style.display = \"none\";\n        return false;\n        break;\n\n      case \"restore\":\n        matsCurveUtils.clearAllUsed();\n\n        if ((document.getElementById('restore_from_private').value === \"\" || document.getElementById('restore_from_private').value === undefined) && (document.getElementById('restore_from_public').value === \"\" || document.getElementById('restore_from_public').value === undefined)) {\n          $(\"#restoreModal\").modal('show');\n          Session.set(\"spinner_img\", \"spinner.gif\");\n          document.getElementById(\"spinner\").style.display = \"none\";\n          return false;\n        }\n\n        var restoreFrom = document.getElementById('restore_from_private').value;\n\n        if (restoreFrom === \"\" || restoreFrom === undefined) {\n          restoreFrom = document.getElementById('restore_from_public').value;\n        } //console.log(\"restore settings from \" + restoreFrom);\n\n\n        Session.set('plotName', restoreFrom);\n        p = matsCollections.CurveSettings.findOne({\n          name: restoreFrom\n        }); // now set all the curves.... This will refresh the curves list\n\n        Session.set('Curves', p.data.curves); // reset the plotType - have to do this first because the event will remove all the possibly existing curves\n        // get the plot-type elements checked state\n\n        var plotTypeSaved = false;\n        const plotTypeElems = $('input[name=plot-type]');\n\n        for (var ptei = 0; ptei < plotTypeElems.length; ptei++) {\n          var ptElem = plotTypeElems[ptei];\n\n          if (p.data.plotTypes && p.data.plotTypes[ptElem.value] === true) {\n            plotTypeSaved = true;\n            ptElem.checked = true; // We have to set up the display without using click events because that would cause\n            // the restored curves to be removed\n\n            switch (ptElem.value) {\n              case matsTypes.PlotTypes.timeSeries:\n                matsCurveUtils.showTimeseriesFace();\n                break;\n\n              case matsTypes.PlotTypes.profile:\n                matsCurveUtils.showProfileFace();\n                break;\n\n              case matsTypes.PlotTypes.dieoff:\n                matsCurveUtils.showDieOffFace();\n                break;\n\n              case matsTypes.PlotTypes.threshold:\n                matsCurveUtils.showThresholdFace();\n                break;\n\n              case matsTypes.PlotTypes.validtime:\n                matsCurveUtils.showValidTimeFace();\n                break;\n\n              case matsTypes.PlotTypes.dailyModelCycle:\n                matsCurveUtils.showDailyModelCycleFace();\n                break;\n\n              case matsTypes.PlotTypes.reliability:\n                matsCurveUtils.showReliabilityFace();\n                break;\n\n              case matsTypes.PlotTypes.map:\n                matsCurveUtils.showMapFace();\n                break;\n\n              case matsTypes.PlotTypes.histogram:\n                matsCurveUtils.showHistogramFace();\n                break;\n\n              case matsTypes.PlotTypes.contour:\n              case matsTypes.PlotTypes.contourDiff:\n                matsCurveUtils.showContourFace();\n                break;\n\n              case matsTypes.PlotTypes.scatter2d:\n                matsCurveUtils.showScatterFace();\n                break;\n            }\n          } else {\n            ptElem.checked = false;\n          }\n        }\n\n        if (plotTypeSaved !== true) {\n          // set the default - in the case none was set in an old saved settings\n          document.getElementById(\"plot-type-\" + matsCollections.PlotGraphFunctions.findOne({\n            checked: true\n          }).plotType).checked = true;\n        } // now set the PlotParams\n\n\n        var params = matsCollections.PlotParams.find({}).fetch();\n        params.forEach(function (plotParam) {\n          const val = p.data.paramData.plotParams[plotParam.name] === null || p.data.paramData.plotParams[plotParam.name] === undefined ? matsTypes.InputTypes.unused : p.data.paramData.plotParams[plotParam.name];\n          matsParamUtils.setInputForParamName(plotParam.name, val);\n        }); // reset the form parameters for the superiors first\n\n        params = matsCollections.CurveParams.find({\n          \"dependentNames\": {\n            \"$exists\": true\n          }\n        }).fetch();\n        params.forEach(function (plotParam) {\n          if (plotParam.type === matsTypes.InputTypes.dateRange) {\n            if (p.data.paramData.curveParams[plotParam.name] === undefined) {\n              return; // just like continue\n            }\n\n            const dateArr = p.data.paramData.curveParams[plotParam.name].split(' - ');\n            const from = dateArr[0];\n            const to = dateArr[1];\n            const idref = \"#\" + plotParam.name + \"-item\";\n            $(idref).data('daterangepicker').setStartDate(moment.utc(from, 'MM-DD-YYYY HH:mm'));\n            $(idref).data('daterangepicker').setEndDate(moment.utc(to, 'MM-DD-YYYY HH:mm'));\n            matsParamUtils.setValueTextForParamName(plotParam.name, p.data.paramData.curveParams[plotParam.name]);\n          } else {\n            const val = p.data.paramData.curveParams[plotParam.name] === null || p.data.paramData.curveParams[plotParam.name] === undefined ? matsTypes.InputTypes.unused : p.data.paramData.curveParams[plotParam.name];\n            matsParamUtils.setInputForParamName(plotParam.name, val);\n          }\n        }); // now reset the form parameters for the dependents\n\n        params = matsCollections.CurveParams.find({\n          \"dependentNames\": {\n            \"$exists\": false\n          }\n        }).fetch();\n        params.forEach(function (plotParam) {\n          if (plotParam.type === matsTypes.InputTypes.dateRange) {\n            if (p.data.paramData.curveParams[plotParam.name] === undefined) {\n              return; // just like continue\n            }\n\n            const dateArr = p.data.paramData.curveParams[plotParam.name].split(' - ');\n            const from = dateArr[0];\n            const to = dateArr[1];\n            const idref = \"#\" + plotParam.name + \"-item\";\n            $(idref).data('daterangepicker').setStartDate(moment.utc(from, 'MM-DD-YYYY HH:mm'));\n            $(idref).data('daterangepicker').setEndDate(moment.utc(to, 'MM-DD-YYYY HH:mm'));\n            matsParamUtils.setValueTextForParamName(plotParam.name, p.data.paramData.curveParams[plotParam.name]);\n          } else {\n            const val = p.data.paramData.curveParams[plotParam.name] === null || p.data.paramData.curveParams[plotParam.name] === undefined ? matsTypes.InputTypes.unused : p.data.paramData.curveParams[plotParam.name];\n            matsParamUtils.setInputForParamName(plotParam.name, val);\n          }\n        }); // reset the scatter parameters\n\n        params = matsCollections.Scatter2dParams.find({}).fetch();\n        params.forEach(function (plotParam) {\n          const val = p.data.paramData.scatterParams[plotParam.name] === null || p.data.paramData.scatterParams[plotParam.name] === undefined ? matsTypes.InputTypes.unused : p.data.paramData.scatterParams[plotParam.name];\n          matsParamUtils.setInputForParamName(plotParam.name, val);\n        }); // reset the dates\n\n        if (p.data.dates !== undefined) {\n          const dateArr = p.data.dates.split(' - ');\n          const from = dateArr[0];\n          const to = dateArr[1];\n          $('#dates-item').data('daterangepicker').setStartDate(moment.utc(from, 'MM-DD-YYYY HH:mm'));\n          $('#dates-item').data('daterangepicker').setEndDate(moment.utc(to, 'MM-DD-YYYY HH:mm'));\n          matsParamUtils.setValueTextForParamName('dates', p.data.dates);\n        } // reset the plotFormat\n        // reset the plotParams\n\n\n        Session.set(\"PlotParams\", p); //set the used defaults so that subsequent adds get a core default\n\n        matsCurveUtils.setUsedColorsAndLabels();\n        document.getElementById('restore_from_public').value = \"\";\n        document.getElementById('restore_from_private').value = \"\";\n        $(\"#restoreModal\").modal('hide');\n        Session.set(\"spinner_img\", \"spinner.gif\");\n        document.getElementById(\"spinner\").style.display = \"none\";\n        matsParamUtils.collapseParams();\n        return false;\n        break;\n\n      case \"plot\":\n        var pt = matsPlotUtils.getPlotType();\n        console.log(\"resizing graph type is \", pt);\n        matsGraphUtils.resizeGraph(pt);\n        var pgf = matsCollections.PlotGraphFunctions.findOne({\n          plotType: pt\n        });\n\n        if (pgf === undefined) {\n          setError(new Error(\"plot_list.js - plot -do not have a plotGraphFunction for this plotType: \" + pt));\n          Session.set(\"spinner_img\", \"spinner.gif\");\n          document.getElementById(\"spinner\").style.display = \"none\";\n          return false;\n        }\n\n        Session.set('graphViewMode', matsTypes.PlotView.graph);\n        Session.set('mvResultKey', null); // disable the mv links on the graph page\n\n        var graphFunction = pgf.graphFunction;\n        console.log(\"prior to getGraphData call time:\", new Date()); // the following line converts a null expireKey to false.\n\n        var expireKey = Session.get('expireKey') === true ? true : false;\n        matsMethods.getGraphData.call({\n          plotParams: p,\n          plotType: pt,\n          expireKey: expireKey\n        }, function (error, ret) {\n          if (error !== undefined) {\n            //setError(new Error(\"matsMethods.getGraphData from plot_list.js : error: \" + error ));\n            setError(error);\n            matsCurveUtils.resetGraphResult(); //Session.set ('PlotResultsUpDated', new Date());\n\n            Session.set(\"spinner_img\", \"spinner.gif\");\n            matsCurveUtils.hideSpinner();\n            Session.set('expireKey', false);\n            return false;\n          }\n\n          Session.set('expireKey', false);\n          matsCurveUtils.setGraphResult(ret.result);\n          const plotType = Session.get('plotType');\n\n          if (plotType === matsTypes.PlotTypes.contourDiff) {\n            const oldCurves = Session.get('Curves');\n            Session.set('oldCurves', oldCurves);\n            Session.set('Curves', ret.result.basis.plotParams.curves);\n          }\n\n          Session.set(\"plotResultKey\", ret.key);\n          delete ret;\n          Session.set('graphFunction', graphFunction);\n          Session.set('PlotResultsUpDated', new Date());\n          console.log(\"after successful getGraphData call time:\", new Date(), \":Session key: \", ret.key, \" graphFunction:\", graphFunction);\n          matsGraphUtils.setGraphView(pt);\n        });\n\n        if (matsCollections.Settings.findOne({}).appType === matsTypes.AppTypes.metexpress && p['metexpress-mode'] === \"matsmv\") {\n          p['mvPlot'] = true; // mark this as a metviewer plot so that the key is uniq wrt the mats plot\n\n          Session.set('mvs', null);\n          Session.set(\"mvResultKey\", null);\n          matsMethods.mvBatch.call({\n            plotParams: p,\n            plotType: pt\n          }, function (error, ret) {\n            if (error !== undefined) {\n              setError(\"matsMethods.mvBatch from plot_list.js : error: \" + error);\n              return false;\n            }\n\n            var mvs = [];\n            var key = ret.key;\n            var artifacts = ret.artifacts;\n\n            for (var i = 0; i < Object.keys(artifacts).length; i++) {\n              const name = Object.keys(artifacts)[i];\n              const url = location.href + artifacts[name];\n              mvs.push({\n                name: name,\n                url: url\n              });\n            }\n\n            Session.set('mvs', mvs);\n            Session.set(\"mvResultKey\", key);\n            Session.set('MvResultsUpDated', new Date());\n          });\n        }\n\n        break;\n\n      default:\n        break;\n    }\n\n    return false;\n  }\n});\nTemplate.plotList.onRendered(function () {\n  // last bit of stuff that needs to be done when the page finally renders\n  // hide selectors that don't belong to timeseries\n  var elem;\n\n  for (var sidx = 0; sidx < matsTypes.selectorsToHide.length; sidx++) {\n    elem = document.getElementById(matsTypes.selectorsToHide[sidx] + '-item');\n\n    if (elem && elem.style) {\n      elem.style.display = 'none';\n    }\n  } // need to display correct selectors on page load if default plot type is not timeseries\n\n\n  const plotType = matsPlotUtils.getPlotType();\n\n  switch (plotType) {\n    case matsTypes.PlotTypes.profile:\n      matsCurveUtils.showProfileFace();\n      break;\n\n    case matsTypes.PlotTypes.dieoff:\n      matsCurveUtils.showDieOffFace();\n      break;\n\n    case matsTypes.PlotTypes.threshold:\n      matsCurveUtils.showThresholdFace();\n      break;\n\n    case matsTypes.PlotTypes.validtime:\n      matsCurveUtils.showValidTimeFace();\n      break;\n\n    case matsTypes.PlotTypes.dailyModelCycle:\n      matsCurveUtils.showDailyModelCycleFace();\n      break;\n\n    case matsTypes.PlotTypes.reliability:\n      matsCurveUtils.showReliabilityFace();\n      break;\n\n    case matsTypes.PlotTypes.map:\n      matsCurveUtils.showMapFace();\n      break;\n\n    case matsTypes.PlotTypes.histogram:\n      matsCurveUtils.showHistogramFace();\n      break;\n\n    case matsTypes.PlotTypes.contour:\n    case matsTypes.PlotTypes.contourDiff:\n      matsCurveUtils.showContourFace();\n      break;\n\n    case matsTypes.PlotTypes.scatter2d:\n      matsCurveUtils.showScatterFace();\n      break;\n\n    case matsTypes.PlotTypes.timeSeries:\n    default:\n      break;\n  } // make sure everything is at default\n\n\n  matsParamUtils.setAllParamsToDefault();\n});","map":{"version":3,"sources":["packages/randyp:mats-common/templates/plot/plot_list.js"],"names":["matsTypes","module","link","v","matsCollections","matsCurveUtils","matsMethods","matsGraphUtils","matsPlotUtils","matsParamUtils","matsSelectUtils","Template","plotList","helpers","Title","Settings","findOne","fields","PlotParamGroups","groupNums","params","PlotParams","find","displayGroup","fetch","i","length","push","res","_","uniq","sort","curves","Session","get","privateDisabled","Meteor","user","privateRestoreNames","names","l","CurveSettings","name","owner","permission","userId","publicRestoreNames","savedSettings","isOwner","events","document","getElementById","value","deleteThis","undefined","deleteSettings","call","error","setError","Error","message","formats","Object","keys","PlotFormats","$","inArray","toString","checkDiffs","event","template","plotAction","set","style","display","preventDefault","action","currentTarget","p","plotTypeElems","plotTypes","ptei","ptElem","checked","forEach","curve","plotParam","type","options","InputTypes","radioGroup","checkBoxGroup","dateRange","getValueForParamName","numberSpinner","select","textInput","modal","saveAs","paramData","getElementValues","saveSettings","clearAllUsed","restoreFrom","data","plotTypeSaved","PlotTypes","timeSeries","showTimeseriesFace","profile","showProfileFace","dieoff","showDieOffFace","threshold","showThresholdFace","validtime","showValidTimeFace","dailyModelCycle","showDailyModelCycleFace","reliability","showReliabilityFace","map","showMapFace","histogram","showHistogramFace","contour","contourDiff","showContourFace","scatter2d","showScatterFace","PlotGraphFunctions","plotType","val","plotParams","unused","setInputForParamName","CurveParams","curveParams","dateArr","split","from","to","idref","setStartDate","moment","utc","setEndDate","setValueTextForParamName","Scatter2dParams","scatterParams","dates","setUsedColorsAndLabels","collapseParams","pt","getPlotType","console","log","resizeGraph","pgf","PlotView","graph","graphFunction","Date","expireKey","getGraphData","ret","resetGraphResult","hideSpinner","setGraphResult","result","oldCurves","basis","key","setGraphView","appType","AppTypes","metexpress","mvBatch","mvs","artifacts","url","location","href","onRendered","elem","sidx","selectorsToHide","setAllParamsToDefault"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2019 Colorado State University and Regents of the University of Colorado. All rights reserved.\n */\n\nimport { matsTypes } from 'meteor/randyp:mats-common'; \nimport { matsCollections } from 'meteor/randyp:mats-common';\nimport { matsCurveUtils } from 'meteor/randyp:mats-common';\nimport { matsMethods } from 'meteor/randyp:mats-common';\nimport { matsGraphUtils } from 'meteor/randyp:mats-common';\nimport { matsPlotUtils } from 'meteor/randyp:mats-common';\nimport { matsParamUtils } from 'meteor/randyp:mats-common';\nimport { matsSelectUtils } from 'meteor/randyp:mats-common';\n\nTemplate.plotList.helpers({\n    Title: function() {\n       return matsCollections.Settings.findOne({},{fields:{Title:1}}).Title;\n    } ,\n    PlotParamGroups: function () {\n        var groupNums = [];\n        var params = matsCollections.PlotParams.find({},{fields:{displayGroup:1}}).fetch();\n        for (var i = 0; i < params.length; i++) {\n            groupNums.push(params[i].displayGroup);\n        }\n        var res = _.uniq(groupNums).sort();\n        return res;\n    },\n    curves: function () {\n        return Session.get('Curves');\n    },\n    privateDisabled: function() {\n        if (!Meteor.user()) {\n            return \"disabled\";\n        } else {\n            return \"\";\n        }\n    },\n    privateRestoreNames: function() {\n        var names = [];\n        var l = matsCollections.CurveSettings.find({},{fields:{name:1,owner:1,permission:1}}).fetch();\n        for (var i = 0; i < l.length; i++) {\n            if (l[i].owner === Meteor.userId() && l[i].permission === \"private\") {\n                names.push(l[i].name);\n            }\n        }\n        return names;\n    },\n    publicRestoreNames: function() {\n        var names = [];\n        var savedSettings = matsCollections.CurveSettings.find({},{fields:{name:1,owner:1,permission:1}}).fetch();\n        for (var i = 0; i < savedSettings.length; i++) {\n            if (savedSettings[i].permission === \"public\") {\n                names.push(savedSettings[i].name);\n            }\n        }\n        return names;\n    },\n    isOwner: function() {\n        return  this.owner === Meteor.userId();\n    }\n});\n\nTemplate.plotList.events({\n    'click .cancel-restore' : function() {\n        document.getElementById('restore_from_public').value = \"\";\n        document.getElementById('restore_from_private').value = \"\";\n    },\n    'click .cancel-save' : function() {\n        document.getElementById('save_as').value = \"\";\n        document.getElementById('save_to').value = \"\";\n    },\n    'click .delete-selected' : function() {\n        var deleteThis = document.getElementById('save_to').value;\n        if (deleteThis !== undefined && deleteThis !== \"\") {\n            matsMethods.deleteSettings.call({name:deleteThis}, function(error){\n                if (error) {\n                    setError(new Error(error.message));\n                }\n            });\n        }\n    },\n\n    // catch a click on a diff plotFormat radio button.\n    'click .data-input' : function() {\n        var formats = Object.keys(matsTypes.PlotFormats);\n        if ($.inArray(this.toString(),formats) !== -1) {\n                matsCurveUtils.checkDiffs();\n        }\n    },\n    'click .restore-from-private' : function() {\n        document.getElementById('restore_from_public').value = \"\";\n    },\n    'click .restore-from-public' : function() {\n        document.getElementById('restore_from_private').value = \"\";\n    },\n    'click .submit-params': function (event, template) {\n        var plotAction = Session.get('plotParameter');\n        Session.set(\"spinner_img\", \"spinner.gif\");\n        document.getElementById(\"spinner\").style.display=\"block\";\n        event.preventDefault();\n        var action = event.currentTarget.name;\n        var p = {};\n        // get the plot-type elements checked state\n        const plotTypeElems = $('input[name=plot-type]');\n        p.plotTypes = {};\n        for (ptei = 0; ptei < plotTypeElems.length; ptei++){\n            const ptElem = plotTypeElems[ptei];\n            p.plotTypes[ptElem.value] = ptElem.checked;\n        }\n        var curves = Session.get('Curves');\n        if (curves == 0 && action !== \"restore\") {\n            //alert (\"No Curves To plot\");\n            setError(new Error(\"There are no curves to plot!\"));\n            Session.set(\"spinner_img\", \"spinner.gif\");\n            document.getElementById(\"spinner\").style.display=\"none\";\n            return false;\n        }\n        p.curves = [];\n        p.plotAction = plotAction;\n        curves.forEach(function(curve){p.curves.push(curve)});\n        matsCollections.PlotParams.find({}).fetch().forEach(function(plotParam){\n            var name = plotParam.name;\n            var type = plotParam.type;\n            var options = plotParam.options;\n\n            if (type == matsTypes.InputTypes.radioGroup) {\n                for (var i=0; i<options.length; i++) {\n                    if (document.getElementById(name+\"-\" + type + \"-\" + options[i]).checked == true) {\n                        p[name] = options[i];\n                        break;\n                    }\n                }\n            } else if (type == matsTypes.InputTypes.checkBoxGroup) {\n                p[name] = [];\n                for (var i = 0; i < options.length; i++) {\n                    if (document.getElementById(name + \"-\" + type + \"-\" + options[i]).checked) {\n                        p[name].push(options[i]);\n                    }\n                }\n            } else if (type == matsTypes.InputTypes.dateRange) {\n                p[name] = matsParamUtils.getValueForParamName(name);\n            } else if (type == matsTypes.InputTypes.numberSpinner) {\n                p[name] = document.getElementById(name + '-' + type).value;\n            } else if (type == matsTypes.InputTypes.select) {\n                p[name] = document.getElementById(name + '-' + type).value;\n            } else if (type == matsTypes.InputTypes.textInput) {\n                p[name] = document.getElementById(name + '-' + type).value;\n            }\n        });\n        p['completeness'] = document.getElementById(\"completeness\").value;\n        p['outliers'] = document.getElementById(\"outliers\").value;\n        Session.set(\"PlotParams\", p);\n\n        switch (action) {\n            case \"save\":\n                if ((document.getElementById('save_as').value === \"\" ||\n                    document.getElementById('save_as').value === undefined) &&\n                    (document.getElementById('save_to').value === \"\" ||\n                    document.getElementById('save_to').value === undefined)) {\n                    $(\"#saveModal\").modal('show');\n                    Session.set(\"spinner_img\", \"spinner.gif\");\n                    document.getElementById(\"spinner\").style.display=\"none\";\n                    return false;\n                }\n                var saveAs = \"\";\n                if (document.getElementById('save_as').value !== \"\" &&\n                    document.getElementById('save_as').value !== undefined) {\n                    saveAs = document.getElementById('save_as').value;\n                } else {\n                    saveAs = document.getElementById('save_to').value;\n                }\n                var permission = document.getElementById(\"save-public\").checked == true?\"public\":\"private\";\n                //console.log(\"saving settings to \" + saveAs);\n                Session.set('plotName', saveAs);\n                // get the settings to save out of the session\n                p = Session.get(\"PlotParams\");\n                var paramData = matsParamUtils.getElementValues();\n                p['paramData'] = paramData;\n                matsMethods.saveSettings.call( {saveAs:saveAs, p:p, permission:permission}, function(error){\n                    if (error) {\n                        setError(new Error(\"matsMethods.saveSettings from plot_list.js \" +error.message));\n                    }\n                });\n\n                document.getElementById('save_as').value = \"\";\n                document.getElementById('save_to').value = \"\";\n                $(\"#saveModal\").modal('hide');\n                Session.set(\"spinner_img\", \"spinner.gif\");\n                document.getElementById(\"spinner\").style.display=\"none\";\n                return false;\n                break;\n            case \"restore\":\n                matsCurveUtils.clearAllUsed();\n                if (((document.getElementById('restore_from_private').value === \"\" ||\n                      document.getElementById('restore_from_private').value === undefined)) &&\n                    ((document.getElementById('restore_from_public').value === \"\" ||\n                      document.getElementById('restore_from_public').value === undefined))){\n                    $(\"#restoreModal\").modal('show');\n                    Session.set(\"spinner_img\", \"spinner.gif\");\n                    document.getElementById(\"spinner\").style.display=\"none\";\n                    return false;\n                }\n                var restoreFrom = document.getElementById('restore_from_private').value;\n                if (restoreFrom === \"\" || restoreFrom === undefined) {\n                    restoreFrom = document.getElementById('restore_from_public').value;\n                }\n                //console.log(\"restore settings from \" + restoreFrom);\n                Session.set('plotName', restoreFrom);\n\n                p = matsCollections.CurveSettings.findOne({name:restoreFrom});\n                // now set all the curves.... This will refresh the curves list\n                Session.set('Curves',p.data.curves);\n                // reset the plotType - have to do this first because the event will remove all the possibly existing curves\n                // get the plot-type elements checked state\n                var plotTypeSaved = false;\n                const plotTypeElems = $('input[name=plot-type]');\n                for (var ptei = 0; ptei < plotTypeElems.length; ptei++){\n                    var ptElem = plotTypeElems[ptei];\n                    if (p.data.plotTypes && p.data.plotTypes[ptElem.value] === true) {\n                        plotTypeSaved = true;\n                        ptElem.checked = true;\n                        // We have to set up the display without using click events because that would cause\n                        // the restored curves to be removed\n                        switch (ptElem.value) {\n                            case matsTypes.PlotTypes.timeSeries:\n                                matsCurveUtils.showTimeseriesFace();\n                                break;\n                            case matsTypes.PlotTypes.profile:\n                                matsCurveUtils.showProfileFace();\n                                break;\n                            case matsTypes.PlotTypes.dieoff:\n                                matsCurveUtils.showDieOffFace();\n                                break;\n                            case matsTypes.PlotTypes.threshold:\n                                matsCurveUtils.showThresholdFace();\n                                break;\n                            case matsTypes.PlotTypes.validtime:\n                                matsCurveUtils.showValidTimeFace();\n                                break;\n                            case matsTypes.PlotTypes.dailyModelCycle:\n                                matsCurveUtils.showDailyModelCycleFace();\n                                break;\n                            case matsTypes.PlotTypes.reliability:\n                                matsCurveUtils.showReliabilityFace();\n                                break;\n                            case matsTypes.PlotTypes.map:\n                                matsCurveUtils.showMapFace();\n                                break;\n                            case matsTypes.PlotTypes.histogram:\n                                matsCurveUtils.showHistogramFace();\n                                break;\n                            case matsTypes.PlotTypes.contour:\n                            case matsTypes.PlotTypes.contourDiff:\n                                matsCurveUtils.showContourFace();\n                                break;\n                            case matsTypes.PlotTypes.scatter2d:\n                                matsCurveUtils.showScatterFace();\n                                break;\n                        }\n                    } else {\n                        ptElem.checked = false;\n                    }\n                }\n                if (plotTypeSaved !== true) {\n                    // set the default - in the case none was set in an old saved settings\n                    document.getElementById(\"plot-type-\" + matsCollections.PlotGraphFunctions.findOne({checked:true}).plotType).checked = true;\n                }\n\n                // now set the PlotParams\n                var params = matsCollections.PlotParams.find({}).fetch();\n                params.forEach(function(plotParam){\n                    const val =  p.data.paramData.plotParams[plotParam.name] === null ||\n                        p.data.paramData.plotParams[plotParam.name] === undefined ? matsTypes.InputTypes.unused : p.data.paramData.plotParams[plotParam.name];\n                    matsParamUtils.setInputForParamName(plotParam.name,val);\n                });\n                \n                // reset the form parameters for the superiors first\n                params = matsCollections.CurveParams.find({\"dependentNames\" : { \"$exists\" : true }}).fetch();\n                params.forEach(function(plotParam) {\n                    if (plotParam.type === matsTypes.InputTypes.dateRange) {\n                        if (p.data.paramData.curveParams[plotParam.name] === undefined) {\n                            return;   // just like continue\n                        }\n                        const dateArr = p.data.paramData.curveParams[plotParam.name].split(' - ');\n                        const from = dateArr[0];\n                        const to = dateArr[1];\n                        const idref = \"#\" + plotParam.name + \"-item\";\n                        $(idref).data('daterangepicker').setStartDate(moment.utc (from, 'MM-DD-YYYY HH:mm'));\n                        $(idref).data('daterangepicker').setEndDate(moment.utc (to, 'MM-DD-YYYY HH:mm'));\n                        matsParamUtils.setValueTextForParamName(plotParam.name,p.data.paramData.curveParams[plotParam.name]);\n                    } else {\n                        const val =  p.data.paramData.curveParams[plotParam.name] === null ||\n                            p.data.paramData.curveParams[plotParam.name] === undefined ? matsTypes.InputTypes.unused : p.data.paramData.curveParams[plotParam.name];\n                        matsParamUtils.setInputForParamName(plotParam.name, val);\n                    }\n                });\n\n                // now reset the form parameters for the dependents\n                params = matsCollections.CurveParams.find({\"dependentNames\" : { \"$exists\" : false }}).fetch();\n                params.forEach(function(plotParam) {\n                    if (plotParam.type === matsTypes.InputTypes.dateRange) {\n                        if (p.data.paramData.curveParams[plotParam.name] === undefined) {\n                            return;   // just like continue\n                        }\n                        const dateArr = p.data.paramData.curveParams[plotParam.name].split(' - ');\n                        const from = dateArr[0];\n                        const to = dateArr[1];\n                        const idref = \"#\" + plotParam.name + \"-item\";\n                        $(idref).data('daterangepicker').setStartDate(moment.utc (from, 'MM-DD-YYYY HH:mm'));\n                        $(idref).data('daterangepicker').setEndDate(moment.utc (to, 'MM-DD-YYYY HH:mm'));\n                        matsParamUtils.setValueTextForParamName(plotParam.name,p.data.paramData.curveParams[plotParam.name]);\n                    } else {\n                        const val =  p.data.paramData.curveParams[plotParam.name] === null ||\n                            p.data.paramData.curveParams[plotParam.name] === undefined ? matsTypes.InputTypes.unused : p.data.paramData.curveParams[plotParam.name];\n                        matsParamUtils.setInputForParamName(plotParam.name, val);\n                    }\n                });\n\n                // reset the scatter parameters\n                params = matsCollections.Scatter2dParams.find({}).fetch();\n                params.forEach(function(plotParam) {\n                    const val =  p.data.paramData.scatterParams[plotParam.name] === null ||\n                    p.data.paramData.scatterParams[plotParam.name] === undefined ? matsTypes.InputTypes.unused : p.data.paramData.scatterParams[plotParam.name];\n                    matsParamUtils.setInputForParamName(plotParam.name, val);\n                });\n\n                // reset the dates\n                if (p.data.dates !== undefined) {\n                    const dateArr = p.data.dates.split(' - ');\n                    const from = dateArr[0];\n                    const to = dateArr[1];\n                    $('#dates-item').data('daterangepicker').setStartDate(moment.utc (from, 'MM-DD-YYYY HH:mm'));\n                    $('#dates-item').data('daterangepicker').setEndDate(moment.utc (to, 'MM-DD-YYYY HH:mm'));\n                    matsParamUtils.setValueTextForParamName('dates',p.data.dates);\n                }\n\n                // reset the plotFormat\n\n                // reset the plotParams\n                Session.set(\"PlotParams\", p);\n                //set the used defaults so that subsequent adds get a core default\n                matsCurveUtils.setUsedColorsAndLabels();\n                document.getElementById('restore_from_public').value = \"\";\n                document.getElementById('restore_from_private').value = \"\";\n                $(\"#restoreModal\").modal('hide');\n                Session.set(\"spinner_img\", \"spinner.gif\");\n                document.getElementById(\"spinner\").style.display=\"none\";\n                matsParamUtils.collapseParams();\n                return false;\n                break;\n            case \"plot\":\n                var pt = matsPlotUtils.getPlotType();\n                console.log(\"resizing graph type is \", pt);\n                matsGraphUtils.resizeGraph(pt);\n                var pgf = matsCollections.PlotGraphFunctions.findOne({plotType: pt});\n                if (pgf === undefined) {\n                    setError(new Error(\"plot_list.js - plot -do not have a plotGraphFunction for this plotType: \" + pt));\n                    Session.set(\"spinner_img\", \"spinner.gif\");\n                    document.getElementById(\"spinner\").style.display=\"none\";\n                    return false;\n                }\n                Session.set('graphViewMode',matsTypes.PlotView.graph);\n                Session.set('mvResultKey',null); // disable the mv links on the graph page\n\n                var graphFunction = pgf.graphFunction;\n                console.log(\"prior to getGraphData call time:\", new Date() );\n                // the following line converts a null expireKey to false.\n                var expireKey = Session.get('expireKey') === true ? true : false;\n                matsMethods.getGraphData.call({plotParams: p, plotType: pt, expireKey: expireKey}, function (error, ret) {\n                    if (error !== undefined) {\n                        //setError(new Error(\"matsMethods.getGraphData from plot_list.js : error: \" + error ));\n                        setError(error);\n                        matsCurveUtils.resetGraphResult();\n                        //Session.set ('PlotResultsUpDated', new Date());\n                        Session.set(\"spinner_img\", \"spinner.gif\");\n                        matsCurveUtils.hideSpinner();\n                        Session.set('expireKey', false);\n                        return false;\n                    }\n                    Session.set('expireKey', false);\n                    matsCurveUtils.setGraphResult(ret.result);\n                    const plotType = Session.get('plotType');\n                    if (plotType === matsTypes.PlotTypes.contourDiff) {\n                        const oldCurves = Session.get('Curves');\n                        Session.set('oldCurves', oldCurves);\n                        Session.set('Curves', ret.result.basis.plotParams.curves);\n                    }\n                    Session.set(\"plotResultKey\", ret.key);\n                    delete ret;\n                    Session.set('graphFunction', graphFunction);\n                    Session.set ('PlotResultsUpDated', new Date());\n                    console.log(\"after successful getGraphData call time:\", new Date(), \":Session key: \",  ret.key, \" graphFunction:\", graphFunction);\n                    matsGraphUtils.setGraphView(pt);\n                });\n                if (matsCollections.Settings.findOne({}).appType === matsTypes.AppTypes.metexpress && p['metexpress-mode'] === \"matsmv\") {\n                    p['mvPlot'] = true;   // mark this as a metviewer plot so that the key is uniq wrt the mats plot\n                    Session.set('mvs', null);\n                    Session.set(\"mvResultKey\", null);\n                    matsMethods.mvBatch.call({plotParams: p, plotType: pt}, function (error, ret) {\n                        if (error !== undefined) {\n                            setError(\"matsMethods.mvBatch from plot_list.js : error: \" + error);\n                            return false;\n                        }\n                        var mvs = [];\n                            var key = ret.key;\n                            var artifacts = ret.artifacts;\n                            for (var i =0; i < Object.keys(artifacts).length; i++){\n                                const name = Object.keys(artifacts)[i];\n                                const url = location.href + artifacts[name];\n                                mvs.push({name:name,url:url});\n                            }\n                            Session.set('mvs', mvs);\n                            Session.set(\"mvResultKey\", key);\n                            Session.set('MvResultsUpDated', new Date());\n                        });\n                }\n                break;\n            default:\n                break;\n        }\n        return false;\n    }\n});\nTemplate.plotList.onRendered( function() {\n    // last bit of stuff that needs to be done when the page finally renders\n\n    // hide selectors that don't belong to timeseries\n    var elem;\n    for (var sidx = 0; sidx < matsTypes.selectorsToHide.length; sidx++) {\n        elem = document.getElementById(matsTypes.selectorsToHide[sidx] + '-item');\n        if (elem && elem.style) {\n            elem.style.display = 'none';\n        }\n    }\n\n    // need to display correct selectors on page load if default plot type is not timeseries\n    const plotType = matsPlotUtils.getPlotType();\n    switch (plotType) {\n        case matsTypes.PlotTypes.profile:\n            matsCurveUtils.showProfileFace();\n            break;\n        case matsTypes.PlotTypes.dieoff:\n            matsCurveUtils.showDieOffFace();\n            break;\n        case matsTypes.PlotTypes.threshold:\n            matsCurveUtils.showThresholdFace();\n            break;\n        case matsTypes.PlotTypes.validtime:\n            matsCurveUtils.showValidTimeFace();\n            break;\n        case matsTypes.PlotTypes.dailyModelCycle:\n            matsCurveUtils.showDailyModelCycleFace();\n            break;\n        case matsTypes.PlotTypes.reliability:\n            matsCurveUtils.showReliabilityFace();\n            break;\n        case matsTypes.PlotTypes.map:\n            matsCurveUtils.showMapFace();\n            break;\n        case matsTypes.PlotTypes.histogram:\n            matsCurveUtils.showHistogramFace();\n            break;\n        case matsTypes.PlotTypes.contour:\n        case matsTypes.PlotTypes.contourDiff:\n            matsCurveUtils.showContourFace();\n            break;\n        case matsTypes.PlotTypes.scatter2d:\n            matsCurveUtils.showScatterFace();\n            break;\n        case matsTypes.PlotTypes.timeSeries:\n        default:\n            break;\n    }\n\n    // make sure everything is at default\n    matsParamUtils.setAllParamsToDefault();\n});"]},"sourceType":"script","hash":"dc0561547fd90170aabb6f6d30a3e00408a5746b"}
