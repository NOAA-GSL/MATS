setwd("#<r_work>#");

source("include/util_plot.R");

strDataFile = "#<data_file>#";
strPlotFile = "#<plot_file>#";

#
#  Plot Control Variables
#

boolGridOn			= #<grid_on>#;
boolDumpPoints1		= #<dump_points1>#;
boolDumpPoints2		= #<dump_points2>#;
boolEnsSsPtsDisp	= #<ensss_pts_disp>#;

intEnsSsPts		= #<ensss_pts>#;

listY1limUsr	= #<y1_lim>#;
listY2limUsr	= #<y2_lim>#;

listPlotDisp	= #<plot_disp>#;

listSeries1Val = #<series1_list>#;

listLegendUsr = #<legend>#
		

dfData = read.delim(strDataFile);

#
#  Build the series data for the plot 
#
		
listSeriesVar = names(listSeries1Val);
matPermVal = permute(listSeries1Val);

# storage for series information
dblXMin = Inf;      dblXMax = -Inf;
dblY1Min = Inf;     dblY1Max = -Inf;
dblY2Min = Inf;     dblY2Max = -Inf;
listLegendY1 = c(); listLegendY2 = c();

# build the skill curve for each series
listSeries = list();
for(intPermVal in 1:nrow(matPermVal)){
	listPermVal = matPermVal[intPermVal,];

	# build a data frame containing the permutation data
	dfPerm = dfData;
	for(intVar in 1:length(listSeriesVar)){
		valPerm = listPermVal[intVar];
		if( grepl("^[0-9]+$", valPerm) ){ valPerm = as.numeric(valPerm); }
		dfPerm = dfPerm[dfPerm[[ listSeriesVar[intVar] ]] == valPerm,];
	}
	
	# if there is no data for this case, skip to the next permutation
	if( 1 > nrow(dfPerm) ){
		rm(dfPerm);
	#	intSeriesIndex = intSeriesIndex + 1;
		next;
	}
	
	# aggregate the bins with matching variance limits
	listAggBinN = aggregate(dfPerm$bin_n, by=list(dfPerm$var_min), sum)[,2];
	dfPermAgg = data.frame(
		bin_n    = listAggBinN,
		var_mean = aggregate(dfPerm$bin_n*dfPerm$var_mean, by=list(dfPerm$var_min), sum)[,2] / listAggBinN,
		fbar     = aggregate(dfPerm$bin_n*dfPerm$fbar,     by=list(dfPerm$var_min), sum)[,2] / listAggBinN,
		obar     = aggregate(dfPerm$bin_n*dfPerm$obar,     by=list(dfPerm$var_min), sum)[,2] / listAggBinN,
		fobar    = aggregate(dfPerm$bin_n*dfPerm$fobar,    by=list(dfPerm$var_min), sum)[,2] / listAggBinN,
		ffbar    = aggregate(dfPerm$bin_n*dfPerm$ffbar,    by=list(dfPerm$var_min), sum)[,2] / listAggBinN,
		oobar    = aggregate(dfPerm$bin_n*dfPerm$oobar,    by=list(dfPerm$var_min), sum)[,2] / listAggBinN
	);

	# if the number of binned points is not specified, use a default
	if( intEnsSsPts < 1 ){
		intNumPts = sum(dfPermAgg$bin_n);
		if( intNumPts > 10 ){ intEnsSsPts = intNumPts / 10; }
		else                { intEnsSsPts = 1;              }
	}
	
	# initialize storage
	listVar = c();
	listMse = c();
	listPts = c();
	if( TRUE == exists("dfBin") ) rm("dfBin");
	
	# build bins with roughly equals amounts of points
	for(i in 1:nrow(dfPermAgg)){
		
		# if the bin is large enough, calculate a spread/skill point
		if( (TRUE == exists("dfBin")) && 
			( intEnsSsPts < sum(dfBin$bin_n) | i == nrow(dfPermAgg) ) ){
		
			scale = (1 / sum(dfBin$bin_n));
			var = scale * sum( dfBin$bin_n * dfBin$var_mean );
			mse = scale *
				  (       sum( dfBin$bin_n * dfBin$ffbar ) 
  				    - 2 * sum( dfBin$bin_n * dfBin$fobar )
				    +     sum( dfBin$bin_n * dfBin$oobar )
				  );
	  
	  		listVar = append(listVar, var);
			listMse = append(listMse, mse);
			listPts = append(listPts, sum(dfBin$bin_n));
			rm(dfBin);
			
		}

		# add a new row to the current bin
		if( FALSE == exists("dfBin") ){
			dfBin = dfPermAgg[i,];
		} else {
			dfBin = rbind(dfBin, dfPermAgg[i,]);
		}
		
	}
	
	
	listSeries[[paste(listPermVal,"_var",sep="")]] = listVar;
	listSeries[[paste(listPermVal,"_mse",sep="")]] = listMse;
	listSeries[[paste(listPermVal,"_pts",sep="")]] = listPts;
	
	# store series information
	dblMin = min(listVar); if( dblMin < dblXMin  ){ dblXMin  = dblMin; }
	dblMax = max(listVar); if( dblMax > dblXMax  ){ dblXMax  = dblMax; }
	dblMin = min(listMse); if( dblMin < dblY1Min ){ dblY1Min = dblMin; }
	dblMax = max(listMse); if( dblMax > dblY1Max ){ dblY1Max = dblMax; }
	dblMin = min(listPts); if( dblMin < dblY2Min ){ dblY2Min = dblMin; }
	dblMax = max(listPts); if( dblMax > dblY2Max ){ dblY2Max = dblMax; }
	if( FALSE == exists("listXSeries")  ){ listXSeries =  listVar; }
	if( FALSE == exists("listY1Series") ){ listY1Series = listMse; }
	if( FALSE == exists("listY2Series") ){ listY2Series = listPts; }
	listLegendY1 = append(listLegendY1, paste( paste(listPermVal,sep="_"), "MSE",  sep=" "));
	if(TRUE == boolEnsSsPtsDisp){
	  listLegendY2 = append(listLegendY2, paste( paste(listPermVal,sep="_"), "#PTS", sep=" "));
	}
	
}

listLegend = append(listLegendY1, listLegendY2); 

# adjust the y1 bounds, if requested
if( 0 < length(listY1limUsr) ){
	dblY1Min = listY1limUsr[1];
	dblY1Max = listY1limUsr[2];
}
listY1axp = c(dblY1Min, dblY1Max, 5);

# adjust the y2 bounds, if requested
if( 0 < length(listY2limUsr) ){
	dblY2Min = listY2limUsr[1];
	dblY2Max = listY2limUsr[2];
}
listY2axp = c(dblY2Min, dblY2Max, 5);

# specify the output file
strPlotType = "#<plot_type>#";
if( "jpeg" == strPlotType ){
	jpeg(
		strPlotFile,			# output file name, with appropriate extension
		width=#<plot_width>#,	# width of the display region, in specified units
		height=#<plot_height>#,	# height of the display region, in specified units
		res=#<plot_res>#,		# resolution, in dots per inch
		units="#<plot_units>#",	# units for height and width
		pointsize = 12,
		quality = 100,
		#bg = "white",
		#type = c("cairo", "Xlib", "quartz"),
		#antialias
	);
} else {
	bitmap(
		strPlotFile,			# output file name, with appropriate extension
		type="#<plot_type>#",	# type of bitmap
		width=#<plot_width>#,	# width of the display region, in specified units
		height=#<plot_height>#,	# height of the display region, in specified units
		res=#<plot_res>#,		# resolution, in dots per inch
		units="#<plot_units>#",	# units for height and width
		taa=4,					# bits of anti-aliasing for graphics
		gaa=4					# bits of anti-aliasing for text
	);
}

# specify plot window formatting
par( 
	mar=#<mar>#,			# lines of margin in form c(bottom, left, top, right)
	mgp=#<mgp>#,			# margin line for axis title, axis labels and axis line in form c(title, labels, line)
	cex=#<cex>#,			# magnification for plot text
	las=2 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
);

# specify the plot formatting
plot(
	listXSeries,			# series x data
	listY1Series,			# series y1 data
	type="n",				# series line type - p: points, l: lines, o: overplotted points and lines,  
							#   b or c: points joined by lines, s or S: stair steps, h: histogram, n: nothing 
	xaxt="n",				# x-axis type - n: no axis, s: compatibility with l and t
	xaxs="r",				# x-axis style - r: regular, i: internal
	yaxt="n",				# y1-axis type - n: no axis, s: compatibility with l and t
	yaxs="r",				# x-axis style - r: regular, i: internal
	xlim=c(dblXMin,dblXMax),# x-axis limits in form c(x1,x2); x1 > x2 reverses axis
	ylim=c(dblY1Min,dblY1Max),# y1-axis limits
	xlab="",				# x-axis label
	ylab="",				# y1-axis label
	lwd=1,					# line width
	cex.lab=1,				# relative axis label magnification
	cex.main=1,				# relative title magnification
	cex.sub=1,				# relative subtitle magnification
	fg="gray"
);

# set the plot window limits
dblY1BufrPct = #<y1_bufr>#;
dblY1Bufr = (dblY1Max - dblY1Min) * dblY1BufrPct;	
par(usr=c(par()$usr[1:2], dblY1Min - dblY1Bufr, dblY1Max + dblY1Bufr));

# plot title
mtext(
	"#<plot_title>#",		# label
	font=#<title_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
	las=0, 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
	side=3,					# axis of interest, 1: below, 2: left, 3: above and 4: right
	cex=#<title_size>#,		# relative magnification
	padj=#<title_offset>#,	# axis label perpendicular location adjustment
	adj=#<title_align>#,	# axis label parallel location adjustment
	line=1					# margin line, starting at 0 counting outwards
);

# specify the x-axis
axis(
	1,						# axis of interest, 1: below, 2: left, 3: above and 4: right 
	#at=listX,				# locations of tick marks
	#labels=#<indy_label>#,	# axis labels
	tick=TRUE,				# tick marks on/off
	tck=.01, 				# length of tick marks as a fraction of plot window
	las=#<xtlab_orient>#,	# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
	padj=#<xtlab_perp>#,	# axis label perpendicular location adjustment 
	hadj=#<xtlab_horiz>#,	# axis label parallel location adjustment 
	cex.axis=#<xtlab_size>#,# relative axis label magnification 
	col="gray"				# axis color
);

# x-axis label
mtext(
	"#<x_label>#",			# label
	font=#<xlab_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
	las=0, 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
	side=1,					# axis of interest, 1: below, 2: left, 3: above and 4: right
	cex=#<xlab_size>#,		# relative axis label magnification
	padj=#<xlab_offset>#,	# axis label perpendicular location adjustment
	adj=#<xlab_align>#,		# axis label parallel location adjustment
	line=1					# margin line, starting at 0 counting outwards
);

# specify the y-axis
axis(
	2,						# axis of interest, 1: below, 2: left, 3: above and 4: right
	#at=NA,					# locations of tick marks
	labels=TRUE,			# tick labels on/off
	tick=TRUE,				# tick marks on/off
	tck=.01, 				# length of tick marks as a fraction of plot window
	las=#<ytlab_orient>#,	# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
	padj=#<ytlab_perp>#,	# axis label perpendicular location adjustment
	hadj=#<ytlab_horiz>#,	# axis label parallel location adjustment
	cex.axis=#<ytlab_size>#,# relative axis label magnification 
	col="gray"				# axis color
);

# y-axis label
mtext(
	"#<y1_label>#",			# label
	font=#<ylab_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
	las=0, 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
	side=2,					# axis of interest, 1: below, 2: left, 3: above and 4: right
	cex=#<ylab_size>#,		# relative axis label magnification
	padj=#<ylab_offset>#,	# axis label perpendicular location adjustment
	adj=#<ylab_align>#,		# axis label parallel location adjustment
	line=1					# margin line, starting at 0 counting outwards
);

# add grid lines to the plot, if requested
#if( TRUE == boolGridOn ){
#	
#	grid(
#		lty=#<grid_lty>#,		# line type - 0: blank, 1: solid, 2: dashed, 3: dotted, 4: dotdash, 5: longdash, 6: twodash
#		col="#<grid_col>#",		# line color
#		lwd=#<grid_lwd>#,		# line width
#		nx=0,					# number of cells in x direction, NULL for default
#		ny=0					# number of cells in y direction, NULL for default
#	);
#	
#	abline( 
#		v=#<grid_x>#,			# list of positions for the gridlines
#		lty=#<grid_lty>#,		# line type - 0: blank, 1: solid, 2: dashed, 3: dotted, 4: dotdash, 5: longdash, 6: twodash
#		col="#<grid_col>#",		# line color
#		lwd=#<grid_lwd>#,		# line width
#		cex=1					# line magnification
#	);
#	
#}


# specify the series formatting
listColors	= #<colors>#;
listPch		= #<pch>#;
listType	= #<type>#;
listLty		= #<lty>#;
listLwd		= #<lwd>#;
		
# plot the y2-axis series first, so that they lie underneath the y1-axis series
listY1Usr = par()$usr;
intFormatIndex = nrow(matPermVal) + 1;
if( TRUE == boolEnsSsPtsDisp ){
	
	# set the plot window limits
	dblY2BufrPct = #<y2_bufr>#;
	dblY2Bufr = (dblY2Max - dblY2Min) * dblY2BufrPct;
	listY2Usr = c(par()$usr[1:2], dblY2Min - dblY2Bufr, dblY2Max + dblY2Bufr);
	par(new=TRUE, usr=listY2Usr, xaxs="r");
	
	# add the y2 axis
	axis(
		4,						# axis of interest, 1: below, 2: left, 3: above and 4: right
		#at=NA,					# locations of tick marks
		labels=TRUE,			# tick labels on/off
		tick=TRUE,				# tick marks on/off
		tck=.01, 				# length of tick marks as a fraction of plot window
		las=#<y2tlab_orient>#,	# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
		padj=#<y2tlab_perp>#,	# axis label perpendicular location adjustment
		hadj=#<y2tlab_horiz>#,	# axis label parallel location adjustment
		cex.axis=#<y2tlab_size>#,# relative axis label magnification 
		col="gray"				# axis color
	);
	
	# plot each series on the second dependent axis with the specified formatting	
	for(intPermVal in 1:nrow(matPermVal)){
		
		listPermVal = matPermVal[intPermVal,];
		
		# if the current series is not displayed, continue to the next
		if( !listPlotDisp[intFormatIndex] ){
			intFormatIndex = intFormatIndex + 1;
			next;
		}
		
		# get the formatting information for this series
		strCol		= listColors[intFormatIndex];
		intPch		= listPch[intFormatIndex];
		strType		= listType[intFormatIndex];
		intLty		= listLty[intFormatIndex];
		intLwd		= listLwd[intFormatIndex];
		
		# get the lists of y2-series points
		listX    = listSeries[[paste(listPermVal,"_var",sep="")]];
		listData = listSeries[[paste(listPermVal,"_pts",sep="")]];
		
		# plot the series line
		lines(
			listX,				# x coordinates
			listData,			# y coordinates
			type=strType,		# series line type - p: points, l: lines, o: overplotted points and lines,  
								#   b or c: points joined by lines, s or S: stair steps, h: histogram, n: nothing 		
			pch=intPch,			# point symbol - see example(points)
			font=5,				# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
			lty=intLty,			# line type - 0: blank, 1: solid, 2: dashed, 3: dotted, 4: dotdash, 5: longdash, 6: twodash
			col=strCol,			# line color
			lend=1,
			cex=1,				# line magnification
			lwd=intLwd			# line width
		);
		
		intFormatIndex = intFormatIndex + 1;

	} # end: for(i in 1:intNumSeries2)
	
	# y2 axis label
	mtext(
		"#<y2_label>#",			# label
		font=#<y2lab_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
		las=0, 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
		side=4,					# axis of interest, 1: below, 2: left, 3: above and 4: right
		cex=#<y2lab_size>#,		# relative axis label magnification
		padj=#<y2lab_offset>#,	# axis label perpendicular location adjustment
		adj=#<y2lab_align>#,	# axis label parallel location adjustment
		line=1					# margin line, starting at 0 counting outwards
	);
	
} # end: if( 0 < length(listDep2Plot) )

# restore the plot window limits for y1
par(new=TRUE, ylog=FALSE, usr=listY1Usr, xaxs="r");

# plot the y1-axis series
intFormatIndex = 1;
for(intPermVal in 1:nrow(matPermVal)){
	
	listPermVal = matPermVal[intPermVal,];
	
	# if the current series is not displayed, continue to the next
	if( !listPlotDisp[intFormatIndex] ){
		intFormatIndex = intFormatIndex + 1;
		next;
	}
	
	# get the formatting information for this series
	strCol		= listColors[intFormatIndex];
	intPch		= listPch[intFormatIndex];
	strType		= listType[intFormatIndex];
	intLty		= listLty[intFormatIndex];
	intLwd		= listLwd[intFormatIndex];
	
	# get the lists of y2-series points
	listX    = listSeries[[paste(listPermVal,"_var",sep="")]];
	listData = listSeries[[paste(listPermVal,"_mse",sep="")]];
	
	# plot the series line
	lines(
		listX,				# x coordinates
		listData,			# y coordinates
		type=strType,		# series line type - p: points, l: lines, o: overplotted points and lines,  
							#   b or c: points joined by lines, s or S: stair steps, h: histogram, n: nothing 		
		pch=intPch,			# point symbol - see example(points)
		font=5,				# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
		lty=intLty,			# line type - 0: blank, 1: solid, 2: dashed, 3: dotted, 4: dotdash, 5: longdash, 6: twodash
		col=strCol,			# line color
		cex=1,				# line magnification
		lwd=intLwd			# line width
	);

	intFormatIndex = intFormatIndex + 1;
} # end: for(i in 1:intNumSeries1)

# widen the line widths in the legend, if necessary
listLwdLeg = listLwd;
listLwdLeg[listLwdLeg > 3] = 3;

# mask the hidden elements from the legend and color list
listLegendDisp = listLegend[listPlotDisp];
listColorsDisp = listColors[listPlotDisp];
listLtyDisp    = listLty[listPlotDisp];
listPchDisp    = listPch[listPlotDisp];

# add the legend
legend(
	x="bottom",						# x coordinate of legend
	listLegendDisp,					# vector of legend labels
	col=listColorsDisp,				# vector of point and line colors 
	lty=listLtyDisp,				# vector of line types
	lwd=listLwdLeg,					# vector of line widths
	pch=listPchDisp,				# vector of point symbols
	merge=FALSE,					# merge points and lines
	cex=#<legend_size>#,			# relative magnification
	bty="#<legend_box>#",			# legend box type - o: box, n: none
	#bg="#EEEEEEFF",				# background color
	#box.lty=,						# legend box line type
	#box.lwd=,						# legend box line width	
	#horiz=FALSE,					# horizontal configuration
	adj=0,							# string adjustment for text
	xpd=TRUE,						# clipping - FALSE: plot region, TRUE: figure region, NA: device region 
	ncol=#<legend_ncol>#,			# number of columns in legend
	#agginset=c(0, -.25),			# inset distance from margin
	inset=#<legend_inset>#,			# inset distance from margin
	x.intersp=1,					# horizontal character spacing factor
	y.intersp=.8					# vertical character spacing factor
);

# plot caption
mtext(
	"#<plot_caption>#",				# caption
	font=#<caption_weight>#,		# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
	col="#<caption_col>#",			# font color
	las=0, 							# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
	side=1,							# axis of interest, 1: below, 2: left, 3: above and 4: right
	cex=#<caption_size>#,			# relative magnification
	padj=#<caption_offset>#,		# axis perpendicular location adjustment
	adj=#<caption_align>#,			# axis parallel location adjustment
	line=1							# margin line, starting at 0 counting outwards
);

#<plot_cmd>#

dev.off();
