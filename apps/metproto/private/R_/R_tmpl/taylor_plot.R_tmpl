setwd("#<r_work>#");

source("include/util_plot.R");
source("include/taylor.diagram.custom.R");

strDataFile = "#<data_file>#";
strPlotFile = "#<plot_file>#";

boolNormalized = TRUE;

listColors = #<colors>#;

listPch = #<pch>#;

pos = #<pos>#;

show_gamma = #<show_gamma>#;

listSeries1Val = #<series1_list>#;

listLegendUsr = #<legend>#;

listPlotDisp = #<plot_disp>#;

listPlotOrderSeries = #<order_series>#;

listFixedValEx = #<fix_val_list_eq>#;


# read the plot data
dfPlot = read.delim(strDataFile,header=TRUE);
listLegendNotOrdered=c();
listLegend = c();


if(length(listSeries1Val) > 0){
  listSeriesVar = names(listSeries1Val);
  matPermVal = permute(listSeries1Val);
  taylorData = data.frame(OSTDEV=numeric(nrow(matPermVal)), FSTDEV=numeric(nrow(matPermVal)), PR_CORR =numeric(nrow(matPermVal)), RMSE=numeric(nrow(matPermVal)), BIAS=numeric(nrow(matPermVal)) );
  intSeriesIndex=0;


  listSeries = list();
  suffixesInd=1;
  for(intPermVal in 1:nrow(matPermVal)){
    seriesLegend="";
    listPermVal = matPermVal[intPermVal,];
    # build a data frame containing the permutation data
    dfPerm = dfPlot;
    for(intVar in 1:length(listSeriesVar)){
      valPerm = listPermVal[intVar];
      if( grepl("^[0-9]+$", valPerm) ){ valPerm = as.numeric(valPerm); }
      dfPerm = dfPerm[dfPerm[[ listSeriesVar[intVar] ]] == valPerm,];
      seriesLegend = paste(seriesLegend,valPerm);
    }

  listLegendNotOrdered=append(listLegendNotOrdered, seriesLegend);


    # if there is no data for this case, skip to the next permutation
    if( 1 > nrow(dfPerm) ){
      taylorData$RMSE[intPermVal]=NA;
      taylorData$PR_CORR[intPermVal]=NA;
      taylorData$BIAS[intPermVal]=NA;
      taylorData$FSTDEV[intPermVal]=NA;
      if(boolNormalized){
        taylorData$OSTDEV[intPermVal]=1;
      }else{
        taylorData$OSTDEV[intPermVal]=NA;
      }
    }else{
      taylorData$PR_CORR[intPermVal]=dfPerm[dfPerm$stat_name == 'PR_CORR',]$stat_value;
      taylorData$RMSE[intPermVal]=dfPerm[dfPerm$stat_name == 'RMSE',]$stat_value;
      taylorData$BIAS[intPermVal]=( dfPerm[dfPerm$stat_name == 'FBAR',]$stat_value - dfPerm[dfPerm$stat_name == 'OBAR',]$stat_value ) / dfPerm[dfPerm$stat_name == 'OSTDEV',]$stat_value;
      if(boolNormalized){
        taylorData$OSTDEV[intPermVal]=1;
        taylorData$FSTDEV[intPermVal] = dfPerm[dfPerm$stat_name == 'FSTDEV',]$stat_value / dfPerm[dfPerm$stat_name == 'OSTDEV',]$stat_value
      }else{
        taylorData$OSTDEV[intPermVal]=dfPerm[dfPerm$stat_name == 'OSTDEV',]$stat_value;
        taylorData$FSTDEV[intPermVal]=dfPerm[dfPerm$stat_name == 'FSTDEV',]$stat_value;
      }
    }


  }
}else{
  taylorData = data.frame(OSTDEV=numeric(0), FSTDEV=numeric(0), PR_CORR =numeric(0), RMSE=numeric(0), BIAS=numeric(0) );
}

#replace with user's legends
if( 0 < length(listLegendUsr) ){
  for(index in 1:length(listLegendUsr)){
    if(nchar(listLegendUsr[index]) > 0){
      listLegendNotOrdered[index]=listLegendUsr[index];
    }
  }
}

# order the series formatting

listColorsOrdered=c();
listPchOrdered=c();
listPlotDispOrdered=c();
for(index in 1:length(listPlotOrderSeries)){
  listColorsOrdered[ listPlotOrderSeries[index] ]=listColors[index];
  listPchOrdered[ listPlotOrderSeries[index] ]=listPch[index];
  listPlotDispOrdered[ listPlotOrderSeries[index] ]=listPlotDisp[index];
}




#order legends
for(index in 1:length(listPlotOrderSeries)){
  listLegend[ listPlotOrderSeries[index] ]=listLegendNotOrdered[index];
}

# specify the output file
strPlotType = "#<plot_type>#";
if( "jpeg" == strPlotType ){
  jpeg(
    strPlotFile, # output file name, with appropriate extension
    width=#<plot_width>#, # width of the display region, in specified units
    height=#<plot_height>#, # height of the display region, in specified units
    res=#<plot_res>#, # resolution, in dots per inch
    units="#<plot_units>#", # units for height and width
    pointsize = 12,
    quality = 100
  );
} else {
  bitmap(
      strPlotFile,			      # output file name, with appropriate extension
  		type="#<plot_type>#",	  # type of bitmap
  		width=#<plot_width>#,	  # width of the display region, in specified units
  		height=#<plot_height>#,	# height of the display region, in specified units
  		res=#<plot_res>#,		    # resolution, in dots per inch
  		units="#<plot_units>#",	# units for height and width
  		taa=4,					        # bits of anti-aliasing for graphics
  		gaa=4					          # bits of anti-aliasing for text
  );
}

# specify plot window formatting
par(
	mar=#<mar>#,			# lines of margin in form c(bottom, left, top, right)
	mgp=#<mgp>#,			# margin line for axis title, axis labels and axis line in form c(title, labels, line)
	cex=#<cex>#,			# magnification for plot text
  las=2 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
);

# build the  plot
taylor.diagram.custom(data=taylorData,pos.cor=pos, show.gamma=show_gamma, col=listColors, pch=listPch)

# plot title
mtext(
	"#<plot_title>#",		    # label
	font=#<title_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
  las=0, 					        # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
  side=3,					        # axis of interest, 1: below, 2: left, 3: above and 4: right
	cex=#<title_size>#,		  # relative magnification
	padj=#<title_offset>#,	# axis label perpendicular location adjustment
	adj=#<title_align>#,	  # axis label parallel location adjustment
  line=1					        # margin line, starting at 0 counting outwards
);

# x-axis label
mtext(
	"#<x_label>#",			  # label
	font=#<xlab_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
  las=0, 					      # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
  side=1,			  # axis of interest, 1: below, 2: left, 3: above and 4: right
	cex=#<xlab_size>#,		# relative axis label magnification
	padj=#<xlab_offset>#,	# axis label perpendicular location adjustment
	adj=#<xlab_align>#,		# axis label parallel location adjustment
  line=1					      # margin line, starting at 0 counting outwards
);

# y-axis label
mtext(
	"#<y1_label>#",			  # label
	font=#<ylab_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
  las=0, 					      # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
  side=2,			  # axis of interest, 1: below, 2: left, 3: above and 4: right
	cex=#<ylab_size>#,		# relative axis label magnification
	padj=#<ylab_offset>#,	# axis label perpendicular location adjustment
	adj=#<ylab_align>#,		# axis label parallel location adjustment
  line=1					      # margin line, starting at 0 counting outwards
);

# mask the hidden elements from the legend and color list
listLegendDisp = listLegend[listPlotDispOrdered];
listColorsDisp = listColorsOrdered[listPlotDispOrdered];
listPchDisp    = listPchOrdered[listPlotDispOrdered];

# add the legend
legend(
  x="bottom",						      # x coordinate of legend
  listLegendDisp,					    # vector of legend labels
  col=listColorsDisp,				  # vector of point and line colors
  pch=listPchDisp,				    # vector of point symbols
	cex=#<legend_size>#,			  # relative magnification
	bty="#<legend_box>#",			  # legend box type - o: box, n: none
  adj=0,							        # string adjustment for text
  xpd=TRUE,						        # clipping - FALSE: plot region, TRUE: figure region, NA: device region
	ncol=#<legend_ncol>#,			  # number of columns in legend
	inset=#<legend_inset>#,			# inset distance from margin
  x.intersp=1,					      # horizontal character spacing factor
  y.intersp=.8					      # vertical character spacing factor
);


# plot caption
mtext(
	"#<plot_caption>#",				  # caption
	font=#<caption_weight>#,		# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
	col="#<caption_col>#",			# font color
  las=0, 							        # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
  side=1,							        # axis of interest, 1: below, 2: left, 3: above and 4: right
	cex=#<caption_size>#,			  # relative magnification
	padj=#<caption_offset>#,		# axis perpendicular location adjustment
	adj=#<caption_align>#,			# axis parallel location adjustment
  line=1							        # margin line, starting at 0 counting outwards
);


#<plot_cmd>#

dev.off();

