setwd("#<r_work>#");
.libPaths("/common/data/web/metviewer/dev/r-lib");
source("include/util_plot.R");
suppressMessages( library(verification) )


strDataFile = "#<data_file>#";
strPlotFile = "#<plot_file>#";


boolEventEqual	= #<event_equal>#;
boolEventEqualM	= #<event_equal_m>#;
boolDumpPoints1	= #<dump_points1>#;


listPlotCI		= #<plot_ci>#;

listPlotDisp	= #<plot_disp>#;

listShowSignif  = #<show_signif>#;

listPlotOrderSeries	= #<order_series>#;

dblAlpha		= #<ci_alpha>#;

strIndyVar		= "#<indy_var>#";

listIndy = #<indy_list>#;

listIndyPlotVal = #<indy_plot_val>#;

listDep1Plot = #<dep1_plot>#;

listAggVal = #<agg_list>#;

listSeries1Val = #<series1_list>#;

listDep1Scale = #<dep1_scale>#;

listLegendUsr = #<legend>#;

strPlotStat = "#<plot_stat>#";



listColors = #<colors>#;
listPch = #<pch>#;
listType = #<type>#;
listLty = #<lty>#;
listLwd = #<lwd>#;
listConSeries = #<con_series>#;

legend=c();

# order the series formatting
listColorsOrdered=c();
listLtyOrdered=c();
listLwdOrdered=c();
listPchOrdered=c();
listPlotDispOrdered=c();
listShowSignifOrdered=c();
for(index in 1:length(listPlotOrderSeries)){
  listLwdOrdered[listPlotOrderSeries[index]]=listLwd[index];
  listColorsOrdered[listPlotOrderSeries[index]]=listColors[index];
  listLtyOrdered[listPlotOrderSeries[index]]=listLty[index];
  listPchOrdered[listPlotOrderSeries[index]]=listPch[index];
  listPlotDispOrdered[listPlotOrderSeries[index]]=listPlotDisp[index];
  listShowSignifOrdered[listPlotOrderSeries[index]]=listShowSignif[index];
}


if(length(listSeries1Val) > 0){
  listSeriesVar = names(listSeries1Val);
  matPermVal = permute(listSeries1Val);
  intSeriesIndex=0;
  listSeries = list();
}

# specify the output file
strPlotType = "#<plot_type>#";
if( "jpeg" == strPlotType ){
  jpeg(
    strPlotFile,			      # output file name, with appropriate extension
  		width=#<plot_width>#,	  # width of the display region, in specified units
  		height=#<plot_height>#,	# height of the display region, in specified units
  		res=#<plot_res>#,		    # resolution, in dots per inch
  		units="#<plot_units>#",	# units for height and width
  		pointsize = 12,
  		quality = 100
  );
}else{
  bitmap(
    strPlotFile,			# output file name, with appropriate extension
    type="#<plot_type>#",	# type of bitmap
    width=#<plot_width>#,	# width of the display region, in specified units
    height=#<plot_height>#,	# height of the display region, in specified units
    res=#<plot_res>#,		# resolution, in dots per inch
    units="#<plot_units>#",	# units for height and width
    taa=4,					# bits of anti-aliasing for graphics
    gaa=4
  );
}

# specify plot window formatting
par(
  mar=#<mar>#,			# lines of margin in form c(bottom, left, top, right)
	mgp=#<mgp>#,			# margin line for axis title, axis labels and axis line in form c(title, labels, line)
	cex=#<cex>#,			# magnification for plot text
	las=2 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
);



#
#  Build the series data for the plot
#

#if fcst_var is a special char - read it as-is and do not convert
sampleData = read.delim(strDataFile,nrows=5);
classes <- sapply(sampleData, class);
numeric_columns <- c('far',  'far_ncu', 'far_ncl','pody',  'pody_ncu', 'pody_ncl', 'stat_value');
integer_columns <- c('fcst_lead','nstats');
character_columns <- c('fcst_var', 'model', 'stat_name')
for(col in 1:ncol(sampleData)){
  if ( is.element( names(classes)[col] , numeric_columns) ){
    classes[col]='numeric';
  } else if ( is.element( names(classes)[col] , integer_columns) ){
    classes[col]='integer';
  } else if ( is.element( names(classes)[col] , character_columns) ){
    classes[col]='character';
  }
}

  performance.diagram(main = "");

dfPlot = read.delim(strDataFile,colClasses = classes);



if(length(listSeries1Val) > 0){
  for(intPermVal in 1:nrow(matPermVal)){

  # check if this series needs to be displayed , if not - dismiss
  if(listPlotDisp[[intPermVal]]){
     listSeries1 = array(list(), length(listIndy));

     seriesLegend="";
     listPermVal = matPermVal[intPermVal,];
     dfPerm = dfPlot;
     for(intVar in 1:length(listSeriesVar)){
       valPerm = listPermVal[intVar];
       if( grepl("^[0-9]+$", valPerm) ){ valPerm = as.numeric(valPerm); }
       dfPerm = dfPerm[dfPerm[[ listSeriesVar[intVar] ]] == valPerm,];
       seriesLegend = paste(seriesLegend,valPerm);
     }

     seriesLegend = paste(seriesLegend,'Performance');
     legend=append(legend, seriesLegend);

     for(indyValInd in 1:length(listIndy)){
       indyVal = listIndy[indyValInd];
       far = dfPerm[dfPerm[["stat_name"]] == 'FAR' & dfPerm[[strIndyVar]] == indyVal,];
       pody = dfPerm[dfPerm[["stat_name"]] == 'PODY' & dfPerm[[strIndyVar]] == indyVal,];

       #if aggregation statistics were calculated use bsu and bcl
           if('stat_ncl' %in% names(far) == TRUE){
             clVarName = 'stat_ncl';
             cuVarName = 'stat_ncu';
           }else{
             clVarName = 'stat_bcl';
             cuVarName = 'stat_bcu';
           }
           if("mean" == strPlotStat){
             listSeries1[[indyValInd]][["far"]] = mean(far$stat_value);
             listSeries1[[indyValInd]][["far_ncl"]] = mean(far[[clVarName]]);
             listSeries1[[indyValInd]][["far_ncu"]] = mean(far[[cuVarName]]);
             listSeries1[[indyValInd]][["pody"]] = mean(pody$stat_value);
             listSeries1[[indyValInd]][["pody_ncl"]] = mean(pody[[clVarName]]);
             listSeries1[[indyValInd]][["pody_ncu"]] = mean(pody[[cuVarName]]);
           }else if("sum" == strPlotStat){
             listSeries1[[indyValInd]][["far"]] = sum(far$stat_value);
             listSeries1[[indyValInd]][["far_ncl"]] = sum(far[[clVarName]]);
             listSeries1[[indyValInd]][["far_ncu"]] = sum(far[[cuVarName]]);
             listSeries1[[indyValInd]][["pody"]] = sum(pody$stat_value);
             listSeries1[[indyValInd]][["pody_ncl"]] = sum(pody[[clVarName]]);
             listSeries1[[indyValInd]][["pody_ncu"]] = sum(pody[[cuVarName]]);
           } else {
             # use median if strPlotStat = 'median' or anything else since 'median' is the default
             listSeries1[[indyValInd]][["far"]] = median(far$stat_value);
             listSeries1[[indyValInd]][["far_ncl"]] = median(far[[clVarName]]);
             listSeries1[[indyValInd]][["far_ncu"]] = median(far[[cuVarName]]);
             listSeries1[[indyValInd]][["pody"]] = median(pody$stat_value);
             listSeries1[[indyValInd]][["pody_ncl"]] = median(pody[[clVarName]]);
             listSeries1[[indyValInd]][["pody_ncu"]] = median(pody[[cuVarName]]);
           }

     }
     for(indyValInd in 1:length(listSeries1)){
      points(1 - listSeries1[[indyValInd]][['far']], listSeries1[[indyValInd]][['pody']], col = listColors[intPermVal], cex = 2,pch=listPch[intPermVal],lwd=listLwd[intPermVal]);

      if(indyValInd > 1){
        segments(x0=(1 - listSeries1[[indyValInd-1]][['far']]), y0=listSeries1[[indyValInd-1]][['pody']],
                  x1=(1 - listSeries1[[indyValInd]][['far']]), y1=listSeries1[[indyValInd]][['pody']], col=listColors[intPermVal], lwd=listLwd[intPermVal]);
      }
      if(listPlotCI[intPermVal] != 'none'){
        segments(x0=1-listSeries1[[indyValInd]][['far']], y0=listSeries1[[indyValInd]][['pody_ncu']],
                  x1=1-listSeries1[[indyValInd]][['far']], y1= listSeries1[[indyValInd]][['pody_ncl']], col=listColors[intPermVal], lwd=listLwd[intPermVal]);

        segments(x0=1-listSeries1[[indyValInd]][['far_ncu']], y0=listSeries1[[indyValInd]][['pody']],
                  x1=1-listSeries1[[indyValInd]][['far_ncl']], y1=listSeries1[[indyValInd]][['pody']], col=listColors[intPermVal], lwd=listLwd[intPermVal]);
      }
     }
    }
  }
}

#replace with user's legends
if( 0 < length(listLegendUsr) ){
  for(index in 1:length(listLegendUsr)){
    if(nchar(listLegendUsr[index]) > 0){
      legend[index]=listLegendUsr[index];
    }
  }
}

# order legends
listLegendOrdered=c();
for(index in 1:length(listPlotOrderSeries)){
  listLegendOrdered[listPlotOrderSeries[index]]=legend[index];
}

# mask the hidden elements from the legend and color list
listLegendDisp = listLegendOrdered[listPlotDispOrdered];
listColorsDisp = listColorsOrdered[listPlotDispOrdered];
listLtyDisp    = listLtyOrdered[listPlotDispOrdered];
listPchDisp    = listPchOrdered[listPlotDispOrdered];
listLwdDisp    = listLwdOrdered[listPlotDispOrdered];

# plot title
mtext(
	"#<plot_title>#",		    # label
	font=#<title_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
  las=0, 					        # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
  side=3,					        # axis of interest, 1: below, 2: left, 3: above and 4: right
	cex=#<title_size>#,		  # relative magnification
	padj=#<title_offset>#,	# axis label perpendicular location adjustment
	adj=#<title_align>#,	  # axis label parallel location adjustment
  line=1					        # margin line, starting at 0 counting outwards
);

# add the legend
legend(
  x="bottom",						      # x coordinate of legend
  listLegendDisp,					    # vector of legend labels
  col=listColorsDisp,				  # vector of point and line colors
  lty=listLtyDisp,				    # vector of line types
  lwd=listLwdDisp,					  # vector of line widths
  pch=listPchDisp,				    # vector of point symbols
  merge=FALSE,					      # merge points and lines
	cex=#<legend_size>#,			  # relative magnification
	bty="#<legend_box>#",			  # legend box type - o: box, n: none
  #bg="#EEEEEEFF",				    # background color
  #box.lty=,						      # legend box line type
  #box.lwd=,						      # legend box line width
  #horiz=FALSE,					      # horizontal configuration
  adj=0,							        # string adjustment for text
  xpd=TRUE,						        # clipping - FALSE: plot region, TRUE: figure region, NA: device region
	ncol=#<legend_ncol>#,			  # number of columns in legend
  #agginset=c(0, -.25),			  # inset distance from margin
	inset=#<legend_inset>#,			# inset distance from margin
  x.intersp=1,					      # horizontal character spacing factor
  y.intersp=.8					      # vertical character spacing factor
);

# plot caption
mtext(
	"#<plot_caption>#",				  # caption
	font=#<caption_weight>#,		# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
	col="#<caption_col>#",			# font color
  las=0, 							        # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
  side=1,							        # axis of interest, 1: below, 2: left, 3: above and 4: right
	cex=#<caption_size>#,			  # relative magnification
	padj=#<caption_offset>#,		# axis perpendicular location adjustment
	adj=#<caption_align>#,			# axis parallel location adjustment
  line=1							        # margin line, starting at 0 counting outwards
);

#<plot_cmd>#
dev.off();
