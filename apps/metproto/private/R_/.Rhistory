source('~/WebstormProjects/MATS_for_EMB/apps/metproto/private/R_/R_work/tmp_rsme-debug.R')
rpath = c("/Users/pierce/WebstormProjects/MATS_DEV/apps/metproto/private/R_");
source('~/WebstormProjects/MATS_for_EMB/apps/metproto/private/R_/R_work/tmp_rsme-debug.R')
source('~/WebstormProjects/MATS_for_EMB/apps/metproto/private/R_/R_work/tmp_rsme-debug.R')
source('~/WebstormProjects/MATS_for_EMB/apps/metproto/private/R_/R_work/tmp_rsme-debug.R')
listIndy = c(
"2017-03-05 00:00:00",
"2017-03-05 03:00:00",
"2017-03-05 06:00:00",
"2017-03-05 09:00:00",
"2017-03-05 12:00:00",
"2017-03-05 15:00:00",
"2017-03-05 18:00:00",
"2017-03-05 21:00:00",
"2017-03-06 00:00:00",
"2017-03-06 03:00:00",
"2017-03-06 06:00:00",
"2017-03-06 09:00:00",
"2017-03-06 12:00:00",
"2017-03-06 15:00:00",
"2017-03-06 18:00:00",
"2017-03-06 21:00:00",
"2017-03-07 00:00:00",
"2017-03-07 03:00:00",
"2017-03-07 06:00:00",
"2017-03-07 09:00:00",
"2017-03-07 12:00:00",
"2017-03-07 15:00:00",
"2017-03-07 18:00:00",
"2017-03-07 21:00:00",
"2017-03-08 00:00:00",
"2017-03-08 03:00:00",
"2017-03-08 06:00:00",
"2017-03-08 09:00:00",
"2017-03-08 12:00:00",
"2017-03-08 15:00:00",
"2017-03-08 18:00:00",
"2017-03-08 21:00:00",
"2017-03-09 00:00:00",
"2017-03-09 03:00:00",
"2017-03-09 06:00:00",
"2017-03-09 09:00:00",
"2017-03-09 12:00:00",
"2017-03-09 15:00:00",
"2017-03-09 18:00:00",
"2017-03-09 21:00:00");
source('~/WebstormProjects/MATS_for_EMB/apps/metproto/private/R_/R_work/tmp_rsme-debug.R')
source('~/WebstormProjects/MATS_for_EMB/apps/metproto/private/R_/R_work/tmp_rsme-debug.R')
labels=c(
"2017-03-05 00:00:00",
"2017-03-05 03:00:00",
"2017-03-05 06:00:00",
"2017-03-05 09:00:00",
"2017-03-05 12:00:00",
"2017-03-05 15:00:00",
"2017-03-05 18:00:00",
"2017-03-05 21:00:00",
"2017-03-06 00:00:00",
"2017-03-06 03:00:00",
"2017-03-06 06:00:00",
"2017-03-06 09:00:00",
"2017-03-06 12:00:00",
"2017-03-06 15:00:00",
"2017-03-06 18:00:00",
"2017-03-06 21:00:00",
"2017-03-07 00:00:00",
"2017-03-07 03:00:00",
"2017-03-07 06:00:00",
"2017-03-07 09:00:00",
"2017-03-07 12:00:00",
"2017-03-07 15:00:00",
"2017-03-07 18:00:00",
"2017-03-07 21:00:00",
"2017-03-08 00:00:00",
"2017-03-08 03:00:00",
"2017-03-08 06:00:00",
"2017-03-08 09:00:00",
"2017-03-08 12:00:00",
"2017-03-08 15:00:00",
"2017-03-08 18:00:00",
"2017-03-08 21:00:00",
"2017-03-09 00:00:00",
"2017-03-09 03:00:00",
"2017-03-09 06:00:00",
"2017-03-09 09:00:00",
"2017-03-09 12:00:00",
"2017-03-09 15:00:00",
"2017-03-09 18:00:00",
"2017-03-09 21:00:00");
statisticList = c("RMSE");
title=c("test plot");
forecastLeads = c(
"0",
"30000",
"60000",
"90000",
"120000",
"150000",
"180000",
"210000",
"240000"
);
dataSource = c("rapstoch0_7_spptens");
xAxisLabel=c("Curve0");
yAxisLabel=c("APCP_03");
setwd(rpath);
compFileSource = rpath;
compFileSource = paste  (compFileSource,"/R_work/include/Compute_STDerr.R", sep="", collapse="");
source(compFileSource);
plotSource = rpath;
plotSource = paste  (plotSource,"/R_work/include/util_plot.R", sep="", collapse="");
source(plotSource);
strDataFile = rpath;
strDataFile = paste  (strDataFile,"/metviewer_output/data/tmp_rmse.txt", sep="", collapse="");
strPlotFile = rpath;
strPlotFile = paste (strPlotFile,"/metviewer_output/plots/new_plot_20170331_120406.png", sep="", collapse="");
boolEqualizeByIndep = TRUE;
boolEventEqual	= FALSE;
boolVertPlot	= FALSE;
boolXReverse	= FALSE;
boolShowNStats	= FALSE;
boolIndy1Stagger= FALSE;
boolIndy2Stagger= FALSE;
boolGridOn	    = TRUE;
boolSyncAxes	= FALSE;
boolDumpPoints1	= TRUE;
boolDumpPoints2	= FALSE;
boolLogY1	= FALSE;
boolLogY2	= FALSE;
boolVarianceInflationFactor = TRUE;
listY1limUsr	= c();
listY2limUsr	= c(0,1);
listPlotCI	= c("none");
listPlotDisp	= c(TRUE);
listShowSignif = c(FALSE);
listPlotOrderSeries	= c(1);
dblAlpha	= 0.05;
strIndyVar	= "fcst_valid_beg";
listIndyPlotVal = c();
listDep1Plot = list(
LISTDEP1PLOT = statisticList
);
listDep2Plot = list(
);
listAggVal = list(
);
listSeries1Val = list(
model = dataSource
);
listSeries2Val = list(
);
listFixedValEx = list(
fcst_lead = list(
fcst_lead_0 = forecastLeads
)
);
listDep1Scale = list(
);
listDep2Scale = list(
);
listLegendUsr = c("");
strPlotStat = "median";
listDiffSeries1=list();
listDiffSeries2=list();
listColors = c("#ff0000FF");
listPch = c(20);
listType = c("b");
listLty = c(1);
listLwd = c(1);
listConSeries = c(1);
sampleData = read.delim(strDataFile,nrows=5);
classes <- sapply(sampleData, class);
numeric_columns <- c('stat_value', 'stat_bcl', 'stat_bcu', 'stat_ncu', 'stat_ncl');
integer_columns <- c('fcst_lead','nstats');
character_columns <- c('fcst_var', 'model', 'stat_name')
for(col in 1:ncol(sampleData)){
if ( is.element( names(classes)[col] , numeric_columns) ){
classes[col]='numeric';
} else if ( is.element( names(classes)[col] , integer_columns) ){
classes[col]='integer';
} else if ( is.element( names(classes)[col] , character_columns) ){
classes[col]='character';
}
}
dfPlot = read.delim(strDataFile,colClasses = classes);
listX = 1:length(listIndy);
if( length(listIndyPlotVal) == length(listIndy) ){ listX = listIndyPlotVal; }
if( FALSE == boolXReverse ){
listXlim = c(min(listX), max(listX));
} else {
listXlim = c(max(listX), min(listX));
}
if( FALSE != boolEventEqual ){
#run event equalizer on Y1
dfPlot1 = data.frame();
#list all fixed variables
listFixVars=c();
listFixVarVals = c();
if(length(listFixedValEx) > 0){
for(index in 1:length(listFixedValEx)){
if(is.null(listFixVars)){
listFixVars = names(listFixedValEx[index]);
listFixVarVals = permute(listFixedValEx[index]);
}else{
listFixVars = append(listFixVars, names(listFixedValEx[index]));
listFixVarVals = append(listFixVarVals, permute(listFixedValEx[index]));
}
}
}
for( strDep1Name in names(listDep1Plot) ){
for( strDep1Stat in listDep1Plot[[strDep1Name]] ){
fPlot = dfPlot;
for(strSeriesVal in names(listSeries1Val)){
vectValPerms = c();
for(index in 1:length(listSeries1Val[[strSeriesVal]])){
vectValPerms= append(vectValPerms, strsplit(listSeries1Val[[strSeriesVal]][index], ",")[[1]]);
}
fPlot = fPlot[fPlot$fcst_var == strDep1Name & fPlot[[strSeriesVal]] %in% vectValPerms & fPlot$stat_name %in% strDep1Stat, ];
}
fPlot = eventEqualize(fPlot, strIndyVar, listIndy, listSeries1Val, listFixVars,listFixVarVals, boolEqualizeByIndep, FALSE);
dfPlot1 = rbind(dfPlot1, fPlot);
}
}
#if the second Y axis is present - run event equalizer on Y1
# and then run event equalizer on Y1 and Y2 equalized data
if(length(listSeries2Val) > 0){
dfPlot2 = data.frame();
for( strDep2Name in names(listDep2Plot) ){
for( strDep2Stat in listDep2Plot[[strDep2Name]] ){
fPlot = dfPlot;
for(strSeriesVal in names(listSeries2Val)){
vectValPerms = c();
for(index in 1:length(listSeries2Val[[strSeriesVal]])){
vectValPerms= append(vectValPerms, strsplit(listSeries2Val[[strSeriesVal]][index], ",")[[1]]);
}
fPlot = fPlot[fPlot$fcst_var == strDep1Name & fPlot[[strSeriesVal]] %in% vectValPerms & fPlot$stat_name %in% strDep2Stat, ];
}
fPlot = eventEqualize(fPlot, strIndyVar, listIndy, listSeries2Val, listFixVars,listFixVarVals, boolEqualizeByIndep, FALSE);
dfPlot2 = rbind(dfPlot2, fPlot);
}
}
dfPlot = rbind(dfPlot1, dfPlot2);
listSeriesVal=list();
for( seriesVal in names(listSeries1Val) ){
listSeriesVal[[seriesVal]] = append(listSeries1Val[[seriesVal]], listSeries2Val[[seriesVal]]);
}
listSeriesVal$model = append(listSeries1Val$model,listSeries2Val$model)
dfPlot = eventEqualize(dfPlot, strIndyVar, listIndy, listSeriesVal, listFixVars,listFixVarVals,boolEqualizeByIndep, TRUE);
}else{
dfPlot = dfPlot1;
}
strAfrerEqualizeFile = sub("\\.data$", ".dataAfterEq", strDataFile, perl=TRUE);
write.table(dfPlot, file=strAfrerEqualizeFile, quote=FALSE, row.names=FALSE, col.names=TRUE, sep = "\t");
}
listColorsOrdered=c();
listLtyOrdered=c();
listLwdOrdered=c();
listPchOrdered=c();
listPlotDispOrdered=c();
listShowSignifOrdered=c();
listTypeOrdered=c();
for(index in 1:length(listPlotOrderSeries)){
listLwdOrdered[ listPlotOrderSeries[index] ] = listLwd[index];
listColorsOrdered[ listPlotOrderSeries[index] ]=listColors[index];
listLtyOrdered[ listPlotOrderSeries[index] ]=listLty[index];
listPchOrdered[ listPlotOrderSeries[index] ]=listPch[index];
listPlotDispOrdered[ listPlotOrderSeries[index] ]=listPlotDisp[index];
listShowSignifOrdered[ listPlotOrderSeries[index] ]=listShowSignif[index];
listTypeOrdered[ listPlotOrderSeries[index] ]=listType[index];
}
intNumSeries1 = numSeries(listSeries1Val, listDep1Plot);
intNumSeries1Diff = length(listDiffSeries1);
intNumSeries1Dep = nrow( permute(listSeries1Val) );
intNumSeries2=0;
intNumSeries2Dep=0;
intNumSeries2Diff=0;
if( 0 < length(listDep2Plot) ){
intNumSeries2 = numSeries(listSeries2Val, listDep2Plot);
intNumSeries2Diff = length(listDiffSeries2);
intNumSeries2Dep = nrow( permute(listSeries2Val) );
}
indexesNumSeries1 = 1:intNumSeries1;
listPlotDispSeries1 = listPlotDisp[indexesNumSeries1];
listShowSignifSeries1 = listShowSignif[indexesNumSeries1];
listPchSeries1 = listPch[indexesNumSeries1];
listTypeSeries1 = listType[indexesNumSeries1];
listLtySeries1 = listLty[indexesNumSeries1];
listLwdSeries1 = listLwd[indexesNumSeries1];
listPlotCISeries1 = listPlotCI[indexesNumSeries1];
listColorsSeries1 = listColors[indexesNumSeries1];
listConSeries1 = listConSeries[indexesNumSeries1];
listPlotOrderSeries1Orig = listPlotOrderSeries[indexesNumSeries1];
if(intNumSeries1Diff > 0){
indexesNumSeries1Diff = (intNumSeries1+intNumSeries2 +1):(intNumSeries1+intNumSeries2 + intNumSeries1Diff);
listPlotOrderSeries1Orig = append(listPlotOrderSeries1Orig,listPlotOrderSeries[indexesNumSeries1Diff]);
listPlotDispSeries1 = append(listPlotDispSeries1,listPlotDisp[indexesNumSeries1Diff]);
listShowSignifSeries1 = append(listShowSignifSeries1,listShowSignif[indexesNumSeries1Diff]);
listColorsSeries1 = append (listColorsSeries1, listColors[indexesNumSeries1Diff]);
listPchSeries1 = append (listPchSeries1, listPch[indexesNumSeries1Diff]);
listTypeSeries1 = append (listTypeSeries1, listType[indexesNumSeries1Diff]);
listLtySeries1 = append (listLtySeries1, listLty[indexesNumSeries1Diff]);
listLwdSeries1 = append (listLwdSeries1, listLwd[indexesNumSeries1Diff]);
listPlotCISeries1 = append (listPlotCISeries1, listPlotCI[indexesNumSeries1Diff]);
listConSeries1 = append (listConSeries1, listConSeries[indexesNumSeries1Diff]);
}
listPlotOrderSeries1Part=c();
maxx = max(listPlotOrderSeries1Orig)+1;
for(index in 1:length(listPlotOrderSeries1Orig)){
indOfMin=which.min(listPlotOrderSeries1Orig);
listPlotOrderSeries1Part[[indOfMin]] = index;
listPlotOrderSeries1Orig[[indOfMin]] = maxx;
}
if(intNumSeries2 > 0){
indexesNumSeries2 = (intNumSeries1+1):(intNumSeries1+intNumSeries2);
listPlotDispSeries2 = listPlotDisp[indexesNumSeries2];
listShowSignifSeries2 = listShowSignif[indexesNumSeries2];
listPlotOrderSeries2Orig = listPlotOrderSeries[indexesNumSeries2];
listColorsSeries2 = listColors[indexesNumSeries2];
listPchSeries2 = listPch[indexesNumSeries2];
listTypeSeries2 = listType[indexesNumSeries2];
listLtySeries2 = listLty[indexesNumSeries2];
listLwdSeries2 = listLwd[indexesNumSeries2];
listPlotCISeries2 = listPlotCI[indexesNumSeries2];
listConSeries2 = listConSeries[indexesNumSeries2];
# add formatting for DIFF Y2 if exists
if(intNumSeries2Diff > 0 ){
indexesNumSeries2Diff = (intNumSeries1+intNumSeries2 + intNumSeries1Diff +1):length(listPlotDisp);
listPlotOrderSeries2Orig = append(listPlotOrderSeries2Orig,listPlotOrderSeries[indexesNumSeries2Diff]);
listPlotDispSeries2 = append(listPlotDispSeries2,listPlotDisp[indexesNumSeries2Diff]);
listShowSignifSeries2 = append(listShowSignifSeries2,listShowSignif[indexesNumSeries2Diff]);
listColorsSeries2 = append (listColorsSeries2, listColors[indexesNumSeries2Diff]);
listPchSeries2 = append (listPchSeries2, listPch[indexesNumSeries2Diff]);
listTypeSeries2 = append (listTypeSeries2, listType[indexesNumSeries2Diff]);
listLtySeries2 = append (listLtySeries2, listLty[indexesNumSeries2Diff]);
listLwdSeries2 = append (listLwdSeries2, listLwd[indexesNumSeries2Diff]);
listPlotCISeries2 = append (listPlotCISeries2, listPlotCI[indexesNumSeries2Diff]);
listConSeries2 = append (listConSeries2, listConSeries[indexesNumSeries2Diff]);
}
listPlotOrderSeries2Part=c();
maxx = max(listPlotOrderSeries2Orig)+1;
for(index in 1:length(listPlotOrderSeries2Orig)){
indOfMin=which.min(listPlotOrderSeries2Orig);
listPlotOrderSeries2Part[[indOfMin]] = index;
listPlotOrderSeries2Orig[[indOfMin]] = maxx;
}
}
listSeries1 = list();
listLegend = c();
listLegendNotOrdered = c();
listAllStats=list();
intLegendIndex=1;
for( strDep1Name in names(listDep1Plot) ){
for( strDep1Stat in listDep1Plot[[strDep1Name]] ){
# gather the stats that pertain to the current fcst_var and stat
dfPlotStat = dfPlot[dfPlot$fcst_var == strDep1Name & dfPlot$stat_name == strDep1Stat,];
dfPlotStat = scaleStats(dfPlotStat, listDep1Scale, paste(strDep1Name, "_", strDep1Stat, sep=""));
# determine the visibility of the series for the current stat
# build the y1 plot series using information in the plot dataframe
listAllStats1 = buildAllStats(dfPlotStat, listSeries1Val,strDep1Stat,strDep1Name);
listAllStats = append(listAllStats, listAllStats1);
}
}
if( is.element(valPerm, unique(dfStatsVal[[ listSeriesVar[intVar] ]]))  ){
View(sampleData)
View(sampleData)
View(sampleData)
listSeriesVar
source('~/WebstormProjects/MATS_for_EMB/apps/metproto/private/R_/R_work/include/util_plot.R')
source('~/WebstormProjects/MATS_for_EMB/apps/metproto/private/R_/R_work/include/util_plot.R')
listSeriesVar
listSeriesVar
listSeriesVar
listSeriesVar
listSeriesVar
source('~/WebstormProjects/MATS_for_EMB/apps/metproto/private/R_/R_work/include/util_plot.R')
source('~/WebstormProjects/MATS_for_EMB/apps/metproto/private/R_/R_work/tmp_rsme-debug.R')
rpath = c("/Users/holub/WebstormProjects/MATS_for_EMB/apps/metproto/private/R_");
listIndy = c(
"2017-03-05 00:00:00",
"2017-03-05 03:00:00",
"2017-03-05 06:00:00",
"2017-03-05 09:00:00",
"2017-03-05 12:00:00",
"2017-03-05 15:00:00",
"2017-03-05 18:00:00",
"2017-03-05 21:00:00",
"2017-03-06 00:00:00",
"2017-03-06 03:00:00",
"2017-03-06 06:00:00",
"2017-03-06 09:00:00",
"2017-03-06 12:00:00",
"2017-03-06 15:00:00",
"2017-03-06 18:00:00",
"2017-03-06 21:00:00",
"2017-03-07 00:00:00",
"2017-03-07 03:00:00",
"2017-03-07 06:00:00",
"2017-03-07 09:00:00",
"2017-03-07 12:00:00",
"2017-03-07 15:00:00",
"2017-03-07 18:00:00",
"2017-03-07 21:00:00",
"2017-03-08 00:00:00",
"2017-03-08 03:00:00",
"2017-03-08 06:00:00",
"2017-03-08 09:00:00",
"2017-03-08 12:00:00",
"2017-03-08 15:00:00",
"2017-03-08 18:00:00",
"2017-03-08 21:00:00",
"2017-03-09 00:00:00",
"2017-03-09 03:00:00",
"2017-03-09 06:00:00",
"2017-03-09 09:00:00",
"2017-03-09 12:00:00",
"2017-03-09 15:00:00",
"2017-03-09 18:00:00",
"2017-03-09 21:00:00");
labels=c(
"2017-03-05 00:00:00",
"2017-03-05 03:00:00",
"2017-03-05 06:00:00",
"2017-03-05 09:00:00",
"2017-03-05 12:00:00",
"2017-03-05 15:00:00",
"2017-03-05 18:00:00",
"2017-03-05 21:00:00",
"2017-03-06 00:00:00",
"2017-03-06 03:00:00",
"2017-03-06 06:00:00",
"2017-03-06 09:00:00",
"2017-03-06 12:00:00",
"2017-03-06 15:00:00",
"2017-03-06 18:00:00",
"2017-03-06 21:00:00",
"2017-03-07 00:00:00",
"2017-03-07 03:00:00",
"2017-03-07 06:00:00",
"2017-03-07 09:00:00",
"2017-03-07 12:00:00",
"2017-03-07 15:00:00",
"2017-03-07 18:00:00",
"2017-03-07 21:00:00",
"2017-03-08 00:00:00",
"2017-03-08 03:00:00",
"2017-03-08 06:00:00",
"2017-03-08 09:00:00",
"2017-03-08 12:00:00",
"2017-03-08 15:00:00",
"2017-03-08 18:00:00",
"2017-03-08 21:00:00",
"2017-03-09 00:00:00",
"2017-03-09 03:00:00",
"2017-03-09 06:00:00",
"2017-03-09 09:00:00",
"2017-03-09 12:00:00",
"2017-03-09 15:00:00",
"2017-03-09 18:00:00",
"2017-03-09 21:00:00");
statisticList = c("RMSE");
title=c("test plot");
forecastLeads = c(
"0",
"30000",
"60000",
"90000",
"120000",
"150000",
"180000",
"210000",
"240000"
);
dataSource = c("rapstoch0_7_spptens");
xAxisLabel=c("Curve0");
yAxisLabel=c("APCP_03");
setwd(rpath);
compFileSource = rpath;
compFileSource = paste  (compFileSource,"/R_work/include/Compute_STDerr.R", sep="", collapse="");
source(compFileSource);
plotSource = rpath;
plotSource = paste  (plotSource,"/R_work/include/util_plot.R", sep="", collapse="");
source(plotSource);
strDataFile = rpath;
strDataFile = paste  (strDataFile,"/metviewer_output/data/tmp_rmse.txt", sep="", collapse="");
strPlotFile = rpath;
strPlotFile = paste (strPlotFile,"/metviewer_output/plots/new_plot_20170331_120406.png", sep="", collapse="");
boolEqualizeByIndep = TRUE;
boolEventEqual	= FALSE;
boolVertPlot	= FALSE;
boolXReverse	= FALSE;
boolShowNStats	= FALSE;
boolIndy1Stagger= FALSE;
boolIndy2Stagger= FALSE;
boolGridOn	    = TRUE;
boolGridOn	    = TRUE;
boolSyncAxes	= FALSE;
boolDumpPoints1	= TRUE;
source('~/WebstormProjects/MATS_for_EMB/apps/metproto/private/R_/R_work/tmp_rsme-debug.R')
boolDumpPoints1	= TRUE;
boolDumpPoints2	= FALSE;
boolLogY1	= FALSE;
boolLogY2	= FALSE;
