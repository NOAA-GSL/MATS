METexpress operations.
METexpress is a tool suite of applications that run under Docker.
For questions or bugs you can use the "contact" link in the header at the top of the landing page or
if you have NOAA credentials you can use the "bugs/issues" link at the top of each application.
Failing that contact Randy Pierce at randy.pierce@noaa.gov 

The setup program will help you configure your tool suite environment based on one of the standard environments.
To do this you must have access to the internet.

This program will ask the GSD server (https://www.esrl.noaa.gov/gsd/mats/appProductionStatus) which deployment environments are currently
supported for automatic deployment. It will ask you to choose which environment you wish to deploy. The setup will ask the GSD appProductionStatus
server what apps and versions of the apps for your selected deployment are currently up to date and then prompt you for database credentials for each
database role required by each app.

Database roles are usually some combination of meta_data - the database that contains app metadata,
sums_data - the database that contains an apps statistical partial sum data, model_data - a database that
contains metadata about data sources, and possibly sites_data - which contains non standard domain data.

The credentials that you provide are stored in a ./settings directory with the structure ./settings/appreference/settings.json.
If you are familiar with this directory and the settings.json files you can make changes with an editor and the setup program
will use the existing values as defaults, which you can override while running the setup program, if necessary. Alternatively
you can answrer the setup questions and the program will create these files for you.
This is an example of a settings directory for metexpress..

./settings/met-upperair/settings.json
./settings/met-anomalycor/settings.json
./settings/met-surface/settings.json

This is an example of a settings.json file with dummy credentials.
{
  "private": {
    "databases": [
      {
        "role": "sum_data",
        "status": "active",
        "host": "some_host",
        "port": "3306",
        "user": "some_user",
        "password": "some_password",
        "database": "some_database",
        "connectionLimit": 10
      },
      {
        "role": "metadata",
        "status": "active",
        "host": "some_host",
        "port": "3306",
        "user": "some_user",
        "password": "some_password",
        "database": "some_database",
        "connectionLimit": 10
      }
    ],
    "PYTHON_PATH": "/usr/bin/python3"
  },
  "public": {}
}

To run the program cd into this directory (the top of the directory where you untarred this bundle) and run
> bash setup

The program will download the latest setup program from the GSD server and run it from a temporary location. The installer is not persisted, it must
be retrieved new each time.

The setup program also configures this deployment directory, creating a ./docker-compose.yml configuration file,
and a ./traefik.toml file, a suitable ./web/index.html as a homepage,  and suitable up and down scripts in the
./bin directory.

You must have docker, docker-compose and jq installed, and you must be running this script from the top of your deployment directory (where you
untarred the bundle).

You should be running this program as a user that can run docker - do not run this script as root, in fact do not run this as any authorized user.
Create an unauthorized user and add that user to the docker group and run the apps as that user.

After once configuring an app you will have to confirm overwriting the old configuration if you run setup again.

The reverse proxy has a user/password pre-set to user "admin" and password "adminipassword", you should change this by following the instructions in the traefik.toml file.
This program will create a settings directory here in this directory and a mongodata directory in the $HOME of the deployment user, if they do not already exist.

You need to acquire an SSL cert for your domain and put the certificate in /etc/ssl/certs directory of this host. That docker-compose.yml file
will map the cert directory to the proxy app.

If you have authority over the DNS entry for
your server you can use LetsEncrypt for no cost certs. The instructions for doing this are at https://docs.traefik.io/configuration/acme/.

The toolsuite entrypoints are
https://yourfullyqualifieddomaini/proxy for the reverse proxy dashboard (look at comments in traefik.toml and docker-compose.yml to enable)
https://yourfullyqualifieddomain  for the top level landing page
https://yourfullyqualifieddomain/appref   for an individual app (replace appref with the actual app reference.)

After configuration you can start your toolsuite with....
./bin/up
and you can stop your toolsuite with..
./bin/down

you can rerun this setup with...
cd your deploymentdirectory
bash bin/setup

You may want to occasionally rerun the setup to pick up bug fixes and newly released apps for your deployment. This URL
https://www.esrl.noaa.gov/gsd/mats/appProductionStatus/versions shows the latest versions of the apps available for all the deployments.
By comparing those versions to the versions in your running apps you can determine if an update is necessary. You
can tell the version of a running app by looking at the comments in the docker-compose.yml file. This file is recreated when
you run the setup, with the current version for each app.

Debugging startup problems:
You can list services with "docker service ls" and you can view a services logs with
"docker service logs NAME" where NAME is from the "docker service ls" output.
You can inspect a service with "docker service inspect NAME".


